{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/yilia/source/favicon.jpeg","path":"favicon.jpeg","modified":0,"renderable":1},{"_id":"themes/yilia/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/main.0cf68a.css","path":"main.0cf68a.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/main.0cf68a.js","path":"main.0cf68a.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/main.266c1c.css","path":"main.266c1c.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/main.266c1c.js","path":"main.266c1c.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/mobile.906508.js","path":"mobile.906508.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/mobile.992cbe.js","path":"mobile.992cbe.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/slider.e37972.js","path":"slider.e37972.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/wechat.jpg","path":"wechat.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/slider.096dc6.js","path":"slider.096dc6.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/wen.png","path":"wen.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/zhifubao.jpg","path":"zhifubao.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/blog-img/2018021001.png","path":"blog-img/2018021001.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/blog-img/2018042201.png","path":"blog-img/2018042201.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","path":"fonts/iconfont.16acc2.ttf","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","path":"fonts/iconfont.45d7ee.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","path":"fonts/iconfont.8c627f.woff","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","path":"fonts/iconfont.b322fa.eot","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/wen.png","path":"img/wen.png","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/(一)初识NodeJs.md","hash":"89ccd8fd04d8613d97e5d75edc5dec8f2f4a04bc","modified":1711097811234},{"_id":"source/_posts/(二)NodeJs模块机制和异步IO.md","hash":"19ff63630b08be87f53fdebbb22e6df980388944","modified":1624184720122},{"_id":"source/about/index.md","hash":"c2118955e854f34fbf393b9143e6a0059d0aa0dd","modified":1630509922992},{"_id":"source/_posts/(三)NodeJs快速入门.md","hash":"32624a1e32a40e97a9731fa652ad5a94e4ed7e3c","modified":1624184720122},{"_id":"source/.DS_Store","hash":"759fbb5557f3f43695ecf307b8cbaf700ee072f7","modified":1704173670610},{"_id":"source/_posts/(五)NodeJs构建web应用.md","hash":"1c97ba70dc09911a4e3e9a0e4a27801dae6d782a","modified":1624184720122},{"_id":"source/_posts/Celery启动Worker方式.md","hash":"48e6760623afebf8f1eedea52f7dd7872626c5cb","modified":1697505101259},{"_id":"source/_posts/(四)NodeJs核心模块.md","hash":"77f0ceec16c4c115535259d0afde78b2eb6ecc11","modified":1624184720122},{"_id":"source/_posts/Docker容器内访问宿主机IP.md","hash":"54fb6ee7c5b0862d650b59f3d4a36836dce7c9ac","modified":1692099533337},{"_id":"source/_posts/Devpi私有服务器的搭建和使用.md","hash":"fc5f5f390c803c0abf6063cbe3b5f140c8f3fb3b","modified":1624184720122},{"_id":"source/_posts/Confluence安装在Linux上.md","hash":"267f97b8f105affe9e120d57dc65e95caee02bab","modified":1624184720122},{"_id":"source/_posts/.DS_Store","hash":"85b7f9ceedab712921b80e708b782d731ad676ac","modified":1697505130622},{"_id":"source/_posts/Linux踢出其他正在SSH登陆用户.md","hash":"d31dd5394a6fbb4b9c05eb1beb638552a15fd550","modified":1624184720123},{"_id":"source/_posts/JetBrains全系列激活指南以及相关问题处理.md","hash":"4e56859e91f139117ff0d0570dec78ac2255d100","modified":1667297913265},{"_id":"source/_posts/JavaScript DOM阅读笔记.md","hash":"de23fee1dd23e7f57a76671ce68d138bf0dc2584","modified":1624184720123},{"_id":"source/_posts/FFmpeg的使用.md","hash":"f31c3eb6c1078000a29404263548be17ad415000","modified":1624184720122},{"_id":"source/_posts/Macos使用CapLock切换搜狗输入法.md","hash":"dee47f67f746533c9b5a1fc165ca9fc84050cbef","modified":1657608099085},{"_id":"source/_posts/Mysql主从复制搭建.md","hash":"cdc7aa028671cbea8e69b76d6caf4a12c92b3a4d","modified":1712476537612},{"_id":"source/_posts/MySQL服务器配置远程数据库访问.md","hash":"086fc45552668cde78e9fc79c67f06d950548bf4","modified":1624184720123},{"_id":"source/_posts/MongoDB使用时的一些笔记.md","hash":"a318365b325ba70a7f1b7c4dbb396c017e5587ae","modified":1624184720123},{"_id":"source/_posts/Nginx配置https.md","hash":"b163e7c8a3b4bb0d6d99eb585bcad48fd642a9ae","modified":1699003854186},{"_id":"source/_posts/Mysql数据库搭建.md","hash":"51d6b8360f2ab295d005389e236f9dbcc8dddf94","modified":1712476705469},{"_id":"source/_posts/PG异步流复制搭建步骤.md","hash":"21056e7733da54c3ee8bfdae57ca75d8a51c23a2","modified":1670465300527},{"_id":"source/_posts/Pycharm在使用ideavim时，进入normal模式时，输入法自动切换到英文状态.md","hash":"cf35430bb728ab413f9b18f28179868a223f4e98","modified":1667320898096},{"_id":"source/_posts/Python双向队列collections.deque.md","hash":"6e8fdfa3c02a3357beb9022c29f9e48a73a3a946","modified":1624184720123},{"_id":"source/_posts/Python实现给excel表格设置密码.md","hash":"241c396e614eebe8024eee4228422f4d241cde1e","modified":1624184720123},{"_id":"source/_posts/Python有用的数据结构.md","hash":"0a87694de0dad12222d05a10c5d7f66e5286573c","modified":1624184720124},{"_id":"source/_posts/Python开发人员犯下的10个最常见的错误.md","hash":"3bc367b26e75ca2c4225fb5addd4011f00b89cfa","modified":1624184720124},{"_id":"source/_posts/Python踩坑：List的‘+’和‘append’.md","hash":"3525b17b8270d0c5baef27f64d6837255168e2c9","modified":1624184720124},{"_id":"source/_posts/Python调试器pdb.md","hash":"1a73e30bce93c60ca2bc20a08d0a715d82b72c1e","modified":1624184720124},{"_id":"source/_posts/Python缓存函数执行结果lru_cache的使用.md","hash":"b0f34e08e30530fa4abb6903b9c2f7fa90ceaaca","modified":1702981150599},{"_id":"source/_posts/Python踩坑：列表中使用乘号复制多个空列表的问题.md","hash":"efd8ab1aa8d6978c02383d0f10d430fafe6ca309","modified":1624184720124},{"_id":"source/_posts/Python：使用setuptools进行包管理.md","hash":"5c07172f65e03d94aa3708cf1a5ab1f4dab57a74","modified":1624184720125},{"_id":"source/_posts/RabbitMQ的发布和订阅模式.md","hash":"0535146e718907721ec3aa99fea97e75ea19f312","modified":1624184720125},{"_id":"source/_posts/UDP广播.md","hash":"ee70664e04ea259de209a050865cd475d7ca6128","modified":1712029563591},{"_id":"source/_posts/Tmux使用.md","hash":"043909a4a7438317b68f84fcc8c2b29a9da9b2ca","modified":1692099983500},{"_id":"source/_posts/Ubuntu18 给自定义应用程序快捷方式.md","hash":"cc23dd2ab1cbbf6a63124e59c43fb34e068cf048","modified":1624184720125},{"_id":"source/_posts/Ubuntu下matplotlib图例中文显示方块的解决.md","hash":"1625fe411065cf0ec6ce2b100eda3345012f715d","modified":1624184720125},{"_id":"source/_posts/Ubuntu编译安装Aria2 – 突破百度网盘下载限速.md","hash":"d4994abaf091a38a3ac4517dec5656749604bfda","modified":1624184720125},{"_id":"source/_posts/Windows PowerShell常用命令整理.md","hash":"4fc05aa89b3b4df5c284617bcc1fa5343a69fc4d","modified":1697449349337},{"_id":"source/_posts/Ubuntu装机后个人必装软件及配置.md","hash":"fce4a2a313a5d754b19c0853d16efac4092968c2","modified":1624184720126},{"_id":"source/_posts/WinRM连接报错SSL_UNSUPPORTED_PROTOCOL.md","hash":"20c8cd239d39e877ea2e38a0ccb1330328160344","modified":1712476680104},{"_id":"source/_posts/Windows开启WinRM服务.md","hash":"e0f35f7943e911fecc46ac6f4c7589532170dd70","modified":1712476571844},{"_id":"source/_posts/django定时任务.md","hash":"d5a6167adbdda48bbac4ae64221174d8080b8a80","modified":1624184720126},{"_id":"source/_posts/django拾遗.md","hash":"e6e05944cc4ab494880e3843b72d582fad835fbf","modified":1624184720126},{"_id":"source/_posts/ZMQ的学习和使用.md","hash":"11a896c8a28c65f496ff43ac778ef6f11acb8a31","modified":1624184720126},{"_id":"source/_posts/git tag管理.md","hash":"3e8911341b5a7a9063a4fdb574454615ea447fba","modified":1624184720126},{"_id":"source/_posts/mongodb的windows服务安装.md","hash":"e74eb2ad93d0149b2cf0a3194a917051234beb7c","modified":1624184720126},{"_id":"source/_posts/hexo+travis自动构建github page.md","hash":"d06b5992004977374cafed86f450a52c48464a6a","modified":1624184720126},{"_id":"source/_posts/nginx+uwsgi实现负载均衡.md","hash":"80440b2366cebf3ddb3fc2ff8946756e5ed2e3d3","modified":1624184720127},{"_id":"source/_posts/nginx+uwsgi部署django服务.md","hash":"93f519b6704464ce0bc32f6a4b1b947297553efc","modified":1624184720127},{"_id":"source/_posts/pyenv的使用和问题解决.md","hash":"71d5ac5821278b6c89455b3bccf872dadf7c8e58","modified":1624184720127},{"_id":"source/_posts/nginx+uwsgi部署odoo服务.md","hash":"39dd08c65a8589fca69f172615d1c112b18f8e09","modified":1624184720127},{"_id":"source/_posts/python-elasticsearch库的基本使用.ipynb","hash":"42e275602a58d3095cc414c95cf703f231d36fb6","modified":1624184720128},{"_id":"source/_posts/python使用的一些小技巧.md","hash":"0daa0c927571a43c7d730547276ab1f376975cda","modified":1624184720128},{"_id":"source/_posts/pymongo的基本使用.md","hash":"152eeef4cd824673461200fcd3cf2a0de924ae3a","modified":1624184720128},{"_id":"source/_posts/python持续集成之尝鲜.md","hash":"e47c176ed58d8042e2405d1d94f61af294c1b3cb","modified":1624184720128},{"_id":"source/_posts/python数据结构及常用排序算法.md","hash":"6f904d526e7af015a9c46760c9ff31e55b0044fa","modified":1624184720128},{"_id":"source/_posts/python网络爬虫和信息提取(1).md","hash":"6fa1249bdfbbbc7d1d66923ee8efbcdfe00039af","modified":1624184720128},{"_id":"source/_posts/python核心编程阅读笔记.md","hash":"909258e7198838cfddd0aa662a4de0cf5684c747","modified":1624184720128},{"_id":"source/_posts/python网络爬虫和信息提取(2).md","hash":"19a8706afcedb9f82288680005f5366ff671d9bf","modified":1624184720129},{"_id":"source/_posts/python网络爬虫和信息提取(3).md","hash":"e7c6d0e282b53464f230dd7d97d5c17a7a131866","modified":1624184720129},{"_id":"source/_posts/python网络爬虫和信息提取(4).md","hash":"ee82f9893d3262b98d5f7cb34a868836417e3056","modified":1624184720129},{"_id":"source/_posts/requests库的使用注意地方.md","hash":"88b1867ee97875e2e5deb08e0632aee05a496d9d","modified":1624184720129},{"_id":"source/_posts/sublime text 3在ubunt下设置输入中文方法.md","hash":"beae41e444df3adb2d0eee94664f929134dbc8fe","modified":1624184720129},{"_id":"source/_posts/《极客时间--MySQL45讲》学习笔记.md","hash":"639966915c9d30d4a31ee22e02bc8cd5a0605dfd","modified":1624184720129},{"_id":"source/_posts/你不知道的javascript中卷阅读笔记.md","hash":"a8ca9fa072debc80dec2ad599a2b7c7351f1f619","modified":1624184720130},{"_id":"source/_posts/从电梯式到扶梯式的分页模式对比.md","hash":"72d1ce7d3501de91238e9234af96e96da4da47dc","modified":1624184720130},{"_id":"source/_posts/喜欢的歌静静听.md","hash":"0d13588f6502ebe9f69a4b39b95d6c2247881642","modified":1624184720130},{"_id":"source/_posts/修改软件的艺术阅读笔记及思考.md","hash":"d8201dfd9bdaa2e15942b64d1f6bc74d57911bc9","modified":1624184720130},{"_id":"source/_posts/sudo免密码.md","hash":"ce7f09aacc7e04a9fccacd834f42e51dc6d2fc23","modified":1657596678660},{"_id":"source/_posts/使用Github的Actions自动构建个人博客.md","hash":"10f8c0a83d8254c72680638d53b8042dcd4d1f48","modified":1667320864786},{"_id":"source/_posts/在路上（写给2017年的自己）.md","hash":"f589ca7cee295867d04ce17ec5fc065d40c59465","modified":1624184720131},{"_id":"source/_posts/大话设计模式阅读笔记.md","hash":"ffabf7ffaf210fa3152cdf352afe3cc576820b9b","modified":1624184720131},{"_id":"source/_posts/使用git在服务器上部署git仓库并实现提交代码时同步代码到生产环境.md","hash":"2c047c32e2815667c9781042349072d7315188e3","modified":1624184720130},{"_id":"source/_posts/实战MySQL双热机备份--主从备份.md","hash":"81d32cafe45ad8dec4e3c7bdaa439b26b685bbbf","modified":1624184720131},{"_id":"source/_posts/实现python tornado框架下的大文件秒传等技术（1）.md","hash":"6641ad6f279d1d81436b1d771f26ce0d1db0fcd1","modified":1624184720131},{"_id":"source/_posts/实现python tornado框架下的大文件秒传等技术（2）.md","hash":"ba64fe8c3cd91f2089f5a36b161c9776c79dbc5e","modified":1624184720131},{"_id":"source/_posts/小余教育面经及整理.md","hash":"72a0d3596cd9bfbc5c72a1970d8a79485ca3047d","modified":1624184720132},{"_id":"source/_posts/小论python的迭代器和生成器.md","hash":"1585408297cbc29fc99c3fc95c8b34296cb91531","modified":1624184720132},{"_id":"source/_posts/妙计旅行面试经历和总结.md","hash":"149eb4e207f6e0ed7a9e8e76f78b2083d42b2b13","modified":1624184720131},{"_id":"source/_posts/实现python tornado框架下的大文件秒传等技术（3）.md","hash":"88d0bee612d0a17af75a3c6f7e6856a1c8ddba83","modified":1624184720132},{"_id":"source/_posts/敏捷开发之Jenkins的部署和基本使用.md","hash":"ca625bae195d07fdffb840fcad7ade37a7256d08","modified":1624184720132},{"_id":"source/_posts/批量删除git远程已经不存在的本地分支.md","hash":"93e5500ec50ecf265d62aa17e596a3608c74e91f","modified":1711097034440},{"_id":"source/_posts/热门列表的实现思路整理.md","hash":"367f7d59cc0bcd79e991e94d99497f52da66a3d9","modified":1624184720132},{"_id":"source/_posts/源码安装Postgresql14.4.md","hash":"324a164cb88fe70ef1947b2cca70b87f5801a932","modified":1670463119348},{"_id":"source/_posts/用tornado实现API的初次尝试.md","hash":"a23421dd873238b3f3e2bf0849a32d5987fd6d17","modified":1624184720132},{"_id":"source/_posts/用户故事地图阅读笔记.md","hash":"fc02710c91b8ca97e6be2aa5f5e8f72f73e1a635","modified":1624184720132},{"_id":"source/_posts/社区列表根据关注人数排序（排行榜）的实现思路整理.md","hash":"734c60a5ca0a952db15a70be78eff88338bafae8","modified":1624184720133},{"_id":"source/_posts/设计模式——单例模式.md","hash":"1b469cebeacf3d067660677e1b04dd58b762431a","modified":1624184720133},{"_id":"source/_posts/读书计划.md","hash":"fd98510900f663187d847c2ede53354a3d92886a","modified":1624184720133},{"_id":"source/_posts/让终端走代理的几种方法.md","hash":"70e42533e4028ab2fbef8a20254d789f449bfe3d","modified":1624184720133},{"_id":"source/_posts/自建V2Ray和加速.md","hash":"37dbc7485f688b848d306563810abfaa23ece4d0","modified":1624184720133},{"_id":"source/_posts/迈迪和数为两家公司面经及感想.md","hash":"56f2383a72fe0a5ed06b42c1777f76d625f2d3da","modified":1624184720134},{"_id":"themes/yilia/layout/_partial/toc.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1712538832000},{"_id":"themes/yilia/.babelrc","hash":"b1b76475ac17dc9e2fa50af96c9e31eea2d0f2b4","modified":1712538832000},{"_id":"themes/yilia/.eslintignore","hash":"df0a50b13cc00acb749226fee3cee6e0351fb1d9","modified":1712538832000},{"_id":"themes/yilia/.eslintrc.js","hash":"5696ae049de010ed3786768b0c359f14c05b5ec6","modified":1712538832000},{"_id":"themes/yilia/.editorconfig","hash":"da6d022b8f4d9c961e2f8f80677e92af8de0db4d","modified":1712538832000},{"_id":"themes/yilia/.gitattributes","hash":"e0f24dceeb1e6878a1dd9b01a2b9df1bc037a867","modified":1712538832000},{"_id":"themes/yilia/.gitignore","hash":"9c4b7d27a1e3e5efa0c8ed143a032a85d586b03b","modified":1712538832000},{"_id":"themes/yilia/package.json","hash":"367cb9579d35968a942c243ab248a5f5ebfaf462","modified":1712538832000},{"_id":"themes/yilia/_config.yml","hash":"9f5e1042a02dfb4028717736fb2df67770eecf62","modified":1712539165447},{"_id":"themes/yilia/webpack.config.js","hash":"05ba46a4ae744272f5312e684928910dccad3755","modified":1712538832000},{"_id":"themes/yilia/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1712538832000},{"_id":"themes/yilia/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1712538832000},{"_id":"themes/yilia/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1712538832000},{"_id":"themes/yilia/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1712538832000},{"_id":"themes/yilia/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1712538832000},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1712538832000},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1712538832000},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1712538832000},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1712538832000},{"_id":"themes/yilia/layout/layout.ejs","hash":"0a332bdbd3b86c231d690614687f5b97186b85d5","modified":1712538832000},{"_id":"themes/yilia/layout/index.ejs","hash":"a35dc900203f9d8dd863ea4c1722198d6d457ec8","modified":1712538832000},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1712538832000},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1712538832000},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1712538832000},{"_id":"themes/yilia/source-src/script.ejs","hash":"c21381e1317db7bb157f1d182b8c088cb7cba411","modified":1712538832000},{"_id":"themes/yilia/source-src/css.ejs","hash":"94dbdb02ca11849e415d54fb28546a598f2cffb1","modified":1712538832000},{"_id":"themes/yilia/README.md","hash":"1bf755806af9d8874bd22e1abbdaaa24328ef4dc","modified":1712538832000},{"_id":"themes/yilia/source/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1712538832000},{"_id":"themes/yilia/source/favicon.png","hash":"519c97e91764aa424a5bca255f410ce154d3eba8","modified":1624184720149},{"_id":"themes/yilia/source/main.266c1c.css","hash":"6b9cfabb81f021081a93da5a069674e9be910194","modified":1624184720152},{"_id":"themes/yilia/source/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1712538832000},{"_id":"themes/yilia/source/wechat.jpg","hash":"a9b00e0ccc14d17d58f8a6bf12f8a5347921d7ec","modified":1624184720154},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"1f7d4819b7f67602c4a1b99871808d2160b60978","modified":1712538832000},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"b86b248720ad415ec1b5fee53fb583776c776f83","modified":1712538832000},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"f0e6e88f9f7eb08b8fe51449a8a3016273507924","modified":1712538832000},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"630c6ec866d056657d3d91e34b4c64eb993c0654","modified":1712538832000},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"236f8a377b2e4e35754319c3029bcd4a4115431d","modified":1712538832000},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"aa2aeb49d46e7ad11887890e91bb7376ec0c742a","modified":1712540764873},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"f2994e0acd1d606ebf4680afc4fa652e148ccf4e","modified":1712538832000},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1712538832000},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1712538832000},{"_id":"themes/yilia/layout/_partial/aside.ejs","hash":"8edbd7993b9b061611a193533a664e2e85eae748","modified":1712538832000},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"64f092186b5a744aa1603ce22bb1d44a34446add","modified":1712538832000},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"183d7ca4ba8e7c80694ffdc8cf39957092238346","modified":1712538832000},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"151a1ef2173ba7b6789d349f0f8da89616cc1394","modified":1712538832000},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"7fbbfabf5e29525b24ada14613c21a26789132b4","modified":1712538832000},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"c41341b9618e591538e1136a2d1637587c1bbd90","modified":1712538832000},{"_id":"themes/yilia/source/slider.096dc6.js","hash":"a8b66ef85d96616086ea6256e7288d0b5a2df56d","modified":1624184720154},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"e495790b2abe2290875817e42bd505bc611d3e26","modified":1712538832000},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"24f347a2412abbf58318369152504da9538f8d3b","modified":1712538832000},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"93a50dd19a93485712da1f8d0a1672482dd1eabc","modified":1712538832000},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"7d27e22ac898e8fafec14549e940c73cbea1fba8","modified":1712538832000},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"d79f2d35a06de83a2a226ca790b7a0a34789c115","modified":1712538832000},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"43e507f2a48504079afd9471353337e23ca47470","modified":1712538832000},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"3fad68bd74260326f83090b0974dd80707e7bac7","modified":1712538832000},{"_id":"themes/yilia/source-src/css/article.scss","hash":"0f6d61af99ed4db87f8589db1feaea7747b55963","modified":1712538832000},{"_id":"themes/yilia/source/zhifubao.jpg","hash":"b80ebd076b5ff625baf542b5e7cc36957de5596e","modified":1624184720155},{"_id":"themes/yilia/source-src/css/aside.scss","hash":"578a67464dd0f542197f7fcee158c991db058563","modified":1712538832000},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"97b8fba41c914145710b90091f400b845879577f","modified":1712538832000},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7c995410b25baaf61dfc5e148e22ca60330abcd3","modified":1712538832000},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1712538832000},{"_id":"themes/yilia/source-src/css/comment.scss","hash":"cafe3834017a3bf47420f37543725025225a2c89","modified":1712538832000},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"849a29fcd7150214fcf7b9715fa5dc71d1f9b896","modified":1712538832000},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"3719994c2c9393813cc1d42b657205c368a329cb","modified":1712538832000},{"_id":"themes/yilia/source-src/css/main.scss","hash":"2f86a014af93583caba78a563d9549826bf28294","modified":1712538832000},{"_id":"themes/yilia/source-src/css/left.scss","hash":"0d30c0e7cdb831c3881a017006c782f2214ac195","modified":1712538832000},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"f053c609d84df0dd9eee1d11ddf0c19163a456be","modified":1712538832000},{"_id":"themes/yilia/source-src/css/page.scss","hash":"bf206bb7f7d0967bc8b7fdf01b7ffc99aff9ba88","modified":1712538832000},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"ace041d72f95b419f6a5e443191703c2b62007f4","modified":1712538832000},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"80a4fcf9171d4a33235da96ac8a2b7dcabc45dfb","modified":1712538832000},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"9c8dfd1c76854ef063494ca76fac6360b391ed6d","modified":1712538832000},{"_id":"themes/yilia/source-src/css/social.scss","hash":"724162ccf3977e70a45d189abfaa20b6e2fba87b","modified":1712538832000},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"c8aa84fca93862d3caae77c552873b8610f33327","modified":1712538832000},{"_id":"themes/yilia/source-src/css/share.scss","hash":"150c6425f6582e7ec78a873256ce49c9930e8805","modified":1712538832000},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"ac67a3c7097849206244db9b0ba91daaba017ef5","modified":1712538832000},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"53d5a554bc2f38e9bb3d26400a47767013c05216","modified":1712538832000},{"_id":"themes/yilia/source-src/js/anm.js","hash":"4a4c5d82b09a3063f91a434388e6aa064fd7fd98","modified":1712538832000},{"_id":"themes/yilia/source-src/js/Q.js","hash":"d011af172064b6c6e0c7051d8f9879373ddac113","modified":1712538832000},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"1b1aa0908e58cf942b28e3881d07c5573c4129e1","modified":1712538832000},{"_id":"themes/yilia/source-src/js/aside.js","hash":"754f771264548a6c5a8ad842908e59ae4e7ed099","modified":1712538832000},{"_id":"themes/yilia/source-src/js/browser.js","hash":"04095b38cfd4316a23f8eb14b1ffaf95f78a4260","modified":1712538832000},{"_id":"themes/yilia/source-src/js/main.js","hash":"3894e60827c817319e43c9ff3ed045fc3d7336ce","modified":1712538832000},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"4d823b039fd296d24a454eae5a798b93c44560cb","modified":1712538832000},{"_id":"themes/yilia/source-src/js/fix.js","hash":"c9151cd64c3ed7b92973b05d1c7077b39f68fe64","modified":1712539844769},{"_id":"themes/yilia/source-src/js/report.js","hash":"4f1d9a18a936ce40b037f636a39127dd19175b6e","modified":1712538832000},{"_id":"themes/yilia/source-src/js/share.js","hash":"b090f82cf80cba7da764753906d9e2cc2acdf30d","modified":1712538832000},{"_id":"themes/yilia/source-src/js/util.js","hash":"8456e9d6b19532742582c99b2fb9d09e146e1c58","modified":1712538832000},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"2577deb6a9fe4f5436360b2ce9afcc7f9a7f0116","modified":1712538832000},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1712538832000},{"_id":"themes/yilia/source-src/js/slider.js","hash":"e846bcc5aac9c68b93f7b8de353df54d8d29f666","modified":1712538832000},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1712538832000},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1712538832000},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1712538832000},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1712538832000},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1712538832000},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1712538832000},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1712538832000},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1712538832000},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"0809a4829aabeb4e911a3ed04ec28db4df7dfe3f","modified":1712538832000},{"_id":"themes/yilia/layout/_partial/post/changyan.ejs","hash":"5f99b55980da64a723a8e14d5a7daba0d6504647","modified":1712538832000},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"ef71c4081e866a494367575c59610e7e6339ece0","modified":1712538832000},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1712538832000},{"_id":"themes/yilia/layout/_partial/post/gitment.ejs","hash":"e68bbac9ffb1ad27b56837c9abad6ed6bb7daa0c","modified":1712538832000},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"5dccfbe165b23a101f1333cc65ed8efbd197453c","modified":1712538832000},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2e783e68755abb852760eb0e627a3fbb50a05a55","modified":1712538832000},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1712538832000},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"1036c8e4e1a7bc935ba173744da735a0d6ed09cd","modified":1712538832000},{"_id":"themes/yilia/layout/_partial/post/wangyiyun.ejs","hash":"ea41c462168d9697caef9485862e9cac718a12c1","modified":1712538832000},{"_id":"themes/yilia/source/img/favicon.png","hash":"519c97e91764aa424a5bca255f410ce154d3eba8","modified":1624184720151},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"63a37f26276f9207405afe0f2d65339ce295bbaf","modified":1712538832000},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"491ab3378d5c11005ba65c607608bb36b368a9d5","modified":1712538832000},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"fb511c505d1309249f21dc577d4ad2bad99a764f","modified":1712538832000},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"fab871fa93bd542e76a71a56428f2994a4aaf443","modified":1712538832000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1712538832000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1712538832000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1712538832000},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"3bba5c77bad5981eac859fe05c9561d580ba7fa9","modified":1712538832000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1712538832000},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1712538832000},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1712538832000},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1712538832000},{"_id":"themes/yilia/source/favicon.jpeg","hash":"a5c42909641db320cd892ea7cdc8bc8e0f5d42aa","modified":1670375768154},{"_id":"themes/yilia/source/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1712538832000},{"_id":"themes/yilia/source/main.266c1c.js","hash":"59ccafbd45d28c397a8a901152ef5e196077e4f4","modified":1624184720152},{"_id":"themes/yilia/source/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1712538832000},{"_id":"themes/yilia/source/mobile.906508.js","hash":"86e50eecba93644d6cf4f78fd4f9ff54a0ea82d5","modified":1624184720153},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"160a28e4e6df40e1f4034fa3c4a44ecf9c811ca8","modified":1712540813446},{"_id":"themes/yilia/source/blog-img/2018021001.png","hash":"9ea54328443447a6a2ef5183de30d83a1e4f9f7b","modified":1624184720148},{"_id":"themes/yilia/source/blog-img/2018042201.png","hash":"bfc5da9a36ed4c7ed9354bdf1e5f5391260dee42","modified":1624184720149},{"_id":"themes/yilia/source/wen.png","hash":"097f9d0b6baea19e2aed2a9fb0edf1782ab6eed9","modified":1624184720155},{"_id":"themes/yilia/source/img/wen.png","hash":"097f9d0b6baea19e2aed2a9fb0edf1782ab6eed9","modified":1624184720151},{"_id":"public/content.json","hash":"4940bfe94f0490ad9976ca97927514d105832fa5","modified":1712539901946},{"_id":"public/about/index.html","hash":"694e4c9fd787be06639a48b81e9e104a985f1717","modified":1712539901946},{"_id":"public/2024/04/07/Mysql主从复制搭建/index.html","hash":"149ccb22eadbf4997ebefea025034f6c68ac3101","modified":1712539901946},{"_id":"public/2024/04/07/Mysql数据库搭建/index.html","hash":"6c1faf027143496b40632a60e2f9eb76ead40ce2","modified":1712539901946},{"_id":"public/2024/04/02/WinRM连接报错SSL_UNSUPPORTED_PROTOCOL/index.html","hash":"a057c4daa36223d533207df09de3f585f0d021c1","modified":1712539901946},{"_id":"public/2024/04/02/Windows开启WinRM服务/index.html","hash":"587e3d3080fdd41d32fd7142f1946202b8798bdd","modified":1712539901946},{"_id":"public/2024/03/22/批量删除git远程已经不存在的本地分支/index.html","hash":"a462ef3d19c3fa84f23fe0c14758a3a1e5700b13","modified":1712539901946},{"_id":"public/2024/03/22/UDP广播/index.html","hash":"edbb888233f7c6421279637b334d30ce3fdc28a7","modified":1712539901946},{"_id":"public/2023/12/19/Python缓存函数执行结果lru_cache的使用/index.html","hash":"1e6fc289e0de8f3f52d43cf7d5d5344d9bc26c2e","modified":1712539901946},{"_id":"public/2023/10/16/Windows PowerShell常用命令整理/index.html","hash":"775dea4c3f7be469378d3f1c30b6cb0eb80e4a12","modified":1712539901946},{"_id":"public/2023/11/03/Nginx配置https/index.html","hash":"c52638a9722961fbcee7a1acc3f6a37e42ad93f0","modified":1712539901946},{"_id":"public/2023/10/15/Celery启动Worker方式/index.html","hash":"0efe4428aff6f20b2d583a01133d4b0f667bdb2f","modified":1712539901946},{"_id":"public/2023/08/15/Docker容器内访问宿主机IP/index.html","hash":"6b4ec408ee6cb2a42d9b9a929e5cfeca9aa20ace","modified":1712539901946},{"_id":"public/2023/07/20/Tmux使用/index.html","hash":"073cf4f86caa174ef4e2bc17c63266e90a39240d","modified":1712539901946},{"_id":"public/2022/12/07/源码安装Postgresql14.4/index.html","hash":"4fad3f69558358262d238182bffd8b9c54531e5c","modified":1712539901946},{"_id":"public/2022/12/05/PG异步流复制搭建步骤/index.html","hash":"3a37d28befdc54bfc23044a52a1cb60ee752145c","modified":1712539901946},{"_id":"public/2022/11/02/使用Github的Actions自动构建个人博客/index.html","hash":"6de1fea3b75d8f90918809397a715255eb22050e","modified":1712539901946},{"_id":"public/2022/11/01/JetBrains全系列激活指南以及相关问题处理/index.html","hash":"caf2a8f92a7ee39f1a79fec096633e7a69daafd2","modified":1712539901946},{"_id":"public/2022/10/11/Pycharm在使用ideavim时，进入normal模式时，输入法自动切换到英文状态/index.html","hash":"5d3d6e0962bf5cc132f2f77ced8f78ecb1e76677","modified":1712539901946},{"_id":"public/2022/07/11/Macos使用CapLock切换搜狗输入法/index.html","hash":"f6014c649cf15bb649f633df3703f5684a539e48","modified":1712539901946},{"_id":"public/2021/03/31/Python调试器pdb/index.html","hash":"db6df4bea3430183e8c6012869d6b1945c4c58c5","modified":1712539901946},{"_id":"public/2021/03/26/FFmpeg的使用/index.html","hash":"3a06bb5921569f9ad1fef4c934e1cb2d00da1dfd","modified":1712539901946},{"_id":"public/2021/03/02/RabbitMQ的发布和订阅模式/index.html","hash":"7fb3d7b2bf4ac3016927233926a0712a1b131003","modified":1712539901946},{"_id":"public/2020/02/24/Devpi私有服务器的搭建和使用/index.html","hash":"3957383153ab0dd207f8697f03262ad3da4b1b13","modified":1712539901946},{"_id":"public/2020/01/05/Python双向队列collections.deque/index.html","hash":"9f293ea089dd010c1fdb63dca9b5855a9fad8845","modified":1712539901946},{"_id":"public/2019/12/13/Python：使用setuptools进行包管理/index.html","hash":"692bd89fba8f8f9107071301dda5b8e57474c9e3","modified":1712539901946},{"_id":"public/2019/12/10/git tag管理/index.html","hash":"9da5a3e3f9093e5f77beb14572d0156aaf53a953","modified":1712539901946},{"_id":"public/2019/10/13/自建V2Ray和加速/index.html","hash":"2751712269c11b826bcc6f1962cf71f701b3615e","modified":1712539901946},{"_id":"public/2019/10/06/requests库的使用注意地方/index.html","hash":"f515c9c6e13b6262211027821af500ae91bffbdc","modified":1712539901946},{"_id":"public/2019/08/27/Python踩坑：列表中使用乘号复制多个空列表的问题/index.html","hash":"4ce7c2945d49f44e49a987ddc0d5f7363fdfb5e1","modified":1712539901946},{"_id":"public/2019/08/25/Ubuntu下matplotlib图例中文显示方块的解决/index.html","hash":"7f0e78f9d0121096e4bca762f37fecd87b4e607f","modified":1712539901946},{"_id":"public/2019/08/24/pyenv的使用和问题解决/index.html","hash":"850ec44a1ee6d8c4acf3f7689b32bffa0bf418d5","modified":1712539901946},{"_id":"public/2019/09/05/Python踩坑：List的‘+’和‘append’/index.html","hash":"b7181ecf3ba7d6be1a9e2fddcb0759600cda70f1","modified":1712539901946},{"_id":"public/2019/04/26/Python实现给excel表格设置密码/index.html","hash":"e2177b0bdddbe4652b4d80323c3e9b1470087bc1","modified":1712539901946},{"_id":"public/2019/08/11/ZMQ的学习和使用/index.html","hash":"3837e09b1821295608b29402fbcf94c0eed04395","modified":1712539901946},{"_id":"public/2019/04/24/Confluence安装在Linux上/index.html","hash":"1d7f954e88e7cfac3f3e1a7132b2d1bfe5e8941e","modified":1712539901946},{"_id":"public/2019/04/24/敏捷开发之Jenkins的部署和基本使用/index.html","hash":"54311fd970fd354a9308ae2999d70f293fb6541e","modified":1712539901946},{"_id":"public/2019/04/09/实战MySQL双热机备份--主从备份/index.html","hash":"f38101872c2b3df7edaf05c24ec2150f6f60d21d","modified":1712539901946},{"_id":"public/2019/04/01/《极客时间--MySQL45讲》学习笔记/index.html","hash":"8d2314026b956eb926594e7f65d17aaee9e3c641","modified":1712539901946},{"_id":"public/2019/03/06/Python有用的数据结构/index.html","hash":"023456b104352169220f12484800215d738f6fec","modified":1712539901946},{"_id":"public/2019/01/31/大话设计模式阅读笔记/index.html","hash":"c110cf4e6d19f1902ac9b7c3b4dbe68c1ab3b0a5","modified":1712539901946},{"_id":"public/2019/01/23/读书计划/index.html","hash":"a3805cd9c82e66d16506e28abf744e826c4849af","modified":1712539901946},{"_id":"public/2018/12/21/Python开发人员犯下的10个最常见的错误/index.html","hash":"c3a04f815396f426a02dc9d24ed61b2ccaad3996","modified":1712539901946},{"_id":"public/2018/11/13/sudo免密码/index.html","hash":"093993b0cc0948593fe8ae39a62953c5ad78bffc","modified":1712539901946},{"_id":"public/2018/11/30/Ubuntu编译安装Aria2 – 突破百度网盘下载限速/index.html","hash":"2b0d5cf275c698d6440a0735dd94cf2cb5c5ec49","modified":1712539901946},{"_id":"public/2018/11/12/Ubuntu18 给自定义应用程序快捷方式/index.html","hash":"f7d4df4de61a56b9ec93064a00e6280d9fce42ec","modified":1712539901946},{"_id":"public/2018/09/09/热门列表的实现思路整理/index.html","hash":"60d0c2bc10fb551248dcc5c5ca8e0a660644794b","modified":1712539901946},{"_id":"public/2018/09/08/社区列表根据关注人数排序（排行榜）的实现思路整理/index.html","hash":"b73f82a06576ed2a078c34e082cf2a11f9ecb82e","modified":1712539901946},{"_id":"public/2018/08/20/从电梯式到扶梯式的分页模式对比/index.html","hash":"105b43df9e8f8bc84d191fa7e7117c4e7f2d4199","modified":1712539901946},{"_id":"public/2018/06/19/Ubuntu装机后个人必装软件及配置/index.html","hash":"3c7ddda19c0baca0f430bc9228594c9bd5fbfb66","modified":1712539901946},{"_id":"public/2018/04/22/hexo+travis自动构建github page/index.html","hash":"706feb586bd51468b8921ac59b7d10656a82a077","modified":1712539901946},{"_id":"public/2018/04/11/设计模式——单例模式/index.html","hash":"c030555e426043bedb21c3c754abecd1005b11ba","modified":1712539901946},{"_id":"public/2018/03/17/用tornado实现API的初次尝试/index.html","hash":"366f44b68f74f9aded3930080a071a5d9edba8c7","modified":1712539901946},{"_id":"public/2018/03/13/MongoDB使用时的一些笔记/index.html","hash":"399f364939877cbcd766e4f74ce59bf9e94817d3","modified":1712539901946},{"_id":"public/2018/03/13/pymongo的基本使用/index.html","hash":"e0d219a715ea8bd78ed8217d1bf028e5b6f9b121","modified":1712539901946},{"_id":"public/2018/03/12/python使用的一些小技巧/index.html","hash":"9c8c0cfecc9b68b676c77c79500292c3126d1d4a","modified":1712539901946},{"_id":"public/2018/02/26/小余教育面经及整理/index.html","hash":"8773528a5c3e8a6f42a2ac45f39a5542d7f3f67e","modified":1712539901946},{"_id":"public/2018/03/01/迈迪和数为两家公司面经及感想/index.html","hash":"a21240a7c28af4a9e6e2048c1b98fff3742d4624","modified":1712539901946},{"_id":"public/2018/02/10/python持续集成之尝鲜/index.html","hash":"ff1889866bdab108f8b39efcba71d5a10335f291","modified":1712539901946},{"_id":"public/2018/02/10/用户故事地图阅读笔记/index.html","hash":"31d534fa64c05b5de18dac476453e72a72722422","modified":1712539901946},{"_id":"public/2018/01/25/mongodb的windows服务安装/index.html","hash":"18ccbef8c0be469d037c766e973bf0a0d7c4376f","modified":1712539901946},{"_id":"public/2017/12/19/python网络爬虫和信息提取(4)/index.html","hash":"91cb1a3088aa027e4973f4eff1a8a46262867aa0","modified":1712539901946},{"_id":"public/2017/12/17/python网络爬虫和信息提取(3)/index.html","hash":"84ad926f83eea86a87dc1eb64b4c5876021ed776","modified":1712539901946},{"_id":"public/2017/12/16/python网络爬虫和信息提取(2)/index.html","hash":"97c1946bb8797d201f1d29e32e12e3f26b6a4ac5","modified":1712539901946},{"_id":"public/2017/12/15/python网络爬虫和信息提取(1)/index.html","hash":"021021bda4eea01b5b9cf0c349406142b3faaee4","modified":1712539901946},{"_id":"public/2017/12/03/python数据结构及常用排序算法/index.html","hash":"cf0ad4e1a5714a1ccd288f25cf9f89fb580d706e","modified":1712539901946},{"_id":"public/2017/12/01/django拾遗/index.html","hash":"677f6e20e087b5ed00e1152478e44ff7787a5ae7","modified":1712539901946},{"_id":"public/2017/11/24/修改软件的艺术阅读笔记及思考/index.html","hash":"571ecdf9253937b574b3730fd7f125b73089997a","modified":1712539901946},{"_id":"public/2017/10/27/(五)NodeJs构建web应用/index.html","hash":"10c85df85dcd25914df968825f48ea190027a111","modified":1712539901946},{"_id":"public/2017/10/27/使用git在服务器上部署git仓库并实现提交代码时同步代码到生产环境/index.html","hash":"9d22f22171ddfec662575c4508bc9a10787ce487","modified":1712539901946},{"_id":"public/2017/10/26/(四)NodeJs核心模块/index.html","hash":"8d81974f36151cb89362a6f5104f19b854e720e1","modified":1712539901946},{"_id":"public/2017/10/26/喜欢的歌静静听/index.html","hash":"3e0e1186e002be6887eec4944ad92fd1c651747d","modified":1712539901946},{"_id":"public/2017/10/25/(三)NodeJs快速入门/index.html","hash":"b22bc1fd57ffaa064913941fe4e283199baf176c","modified":1712539901946},{"_id":"public/2017/10/23/(二)NodeJs模块机制和异步IO/index.html","hash":"c25769ca9b3bae26e5a2703e9884954db1b2b8c6","modified":1712539901946},{"_id":"public/2017/10/22/(一)初识NodeJs/index.html","hash":"c76adf1340913053a8afc034972e6ffe567b9054","modified":1712539901946},{"_id":"public/2017/10/18/让终端走代理的几种方法/index.html","hash":"4c1d43bb99c636e0caf87addd73ef84decb9a746","modified":1712539901946},{"_id":"public/2017/09/09/小论python的迭代器和生成器/index.html","hash":"13b769de8bd0a5a664a7c920bc67e041eb092d15","modified":1712539901946},{"_id":"public/2017/08/09/你不知道的javascript中卷阅读笔记/index.html","hash":"500de7e823ca8589d8c615fb8a16d26ef9279642","modified":1712539901946},{"_id":"public/2017/08/06/python核心编程阅读笔记/index.html","hash":"c55180a842206f64faaeddbe8f2554be1150d166","modified":1712539901946},{"_id":"public/2017/08/04/妙计旅行面试经历和总结/index.html","hash":"72c6d1107b6f5bbed7e2424b695926e2a546b927","modified":1712539901946},{"_id":"public/2017/07/29/实现python tornado框架下的大文件秒传等技术（3）/index.html","hash":"89bfa9bf0b983f0624b6b5a0785b01aa39ae1ea2","modified":1712539901946},{"_id":"public/2017/07/28/实现python tornado框架下的大文件秒传等技术（2）/index.html","hash":"8527ea3517ff9462c4437d8a67052fa396a60d3d","modified":1712539901946},{"_id":"public/2017/07/24/JavaScript DOM阅读笔记/index.html","hash":"4edd632eeb8183ce7a1a5556337156fe3287ab3a","modified":1712539901946},{"_id":"public/2017/05/31/sublime text 3在ubunt下设置输入中文方法/index.html","hash":"1c5ef4e521d72bd55a228c46b0ddd4d897f342f4","modified":1712539901946},{"_id":"public/2017/07/27/实现python tornado框架下的大文件秒传等技术（1）/index.html","hash":"06bffbce07883ff6d23abb539cb521c170b61573","modified":1712539901946},{"_id":"public/2017/05/30/nginx+uwsgi实现负载均衡/index.html","hash":"3659afdd7eb17c66b99efcae1ca52cb39d9e010f","modified":1712539901946},{"_id":"public/2017/05/30/nginx+uwsgi部署django服务/index.html","hash":"5b49689b7711b44baad4d3c5861868a39a562a64","modified":1712539901946},{"_id":"public/2017/05/29/nginx+uwsgi部署odoo服务/index.html","hash":"33e6ac7c26b907a706a8d9daa1a1844bd018a99e","modified":1712539901946},{"_id":"public/2017/03/22/在路上（写给2017年的自己）/index.html","hash":"6f5218c0b501c212b7577ac789816d02e9a22c09","modified":1712539901946},{"_id":"public/2016/12/23/Linux踢出其他正在SSH登陆用户/index.html","hash":"e29f33021052b384f53a071406ed089df7f2c09b","modified":1712539901946},{"_id":"public/2016/10/18/MySQL服务器配置远程数据库访问/index.html","hash":"2e5d9d8a44e0fb3af5cf160efd8a70dec10567f9","modified":1712539901946},{"_id":"public/2016/06/19/django定时任务/index.html","hash":"24828a67ffb4043ab05933ba5fce1cbfabaee8a8","modified":1712539901946},{"_id":"public/page/2/index.html","hash":"b41e49a945ba281dc9ad6146afaf3d940266165d","modified":1712539901946},{"_id":"public/index.html","hash":"16fc7dcb22fad07e243a39d7b201ec3791e302fe","modified":1712539901946},{"_id":"public/page/3/index.html","hash":"8312f752a8f5b047ff8fc7e2bb061ffea37f62ef","modified":1712539901946},{"_id":"public/page/4/index.html","hash":"2ae00bed4391dbe914d603e20aebaca5c27e8166","modified":1712539901946},{"_id":"public/page/5/index.html","hash":"87f7ef013b558699186deb2c1114194aa6235dd9","modified":1712539901946},{"_id":"public/page/6/index.html","hash":"41a5ba92d2071d231a5d859444bf3edbe98e583c","modified":1712539901946},{"_id":"public/page/7/index.html","hash":"4fcb2c3de21ee334870d2d752bf6ba2393dcf2bd","modified":1712539901946},{"_id":"public/page/8/index.html","hash":"a1083526ae7ba5af45d27cf2d632d73f733e66ec","modified":1712539901946},{"_id":"public/page/9/index.html","hash":"9771f63c2a8e39bd654f3cf211123f891144b6b6","modified":1712539901946},{"_id":"public/archives/index.html","hash":"d847a7144cdefd5b7bb16026eb7c1414b63bfa48","modified":1712539901946},{"_id":"public/archives/page/2/index.html","hash":"b14ec9ce5ba43295ae39ad80636b6d35d2120cb5","modified":1712539901946},{"_id":"public/archives/page/3/index.html","hash":"dccba6bbf33247cbd59cfde4af9e30d7d27e08e6","modified":1712539901946},{"_id":"public/archives/page/4/index.html","hash":"ad2fb0134fd0e5ff5f205afeeb014f4028a485d3","modified":1712539901946},{"_id":"public/archives/page/5/index.html","hash":"ddfa50cc6edabde24b891fd2e199b2b657aa0149","modified":1712539901946},{"_id":"public/archives/page/6/index.html","hash":"6e8a87ba2e9b54f2bd026da1832429801fd23425","modified":1712539901946},{"_id":"public/archives/page/7/index.html","hash":"650f06a8dd40037ff378f484413503945e7c5e74","modified":1712539901946},{"_id":"public/archives/page/8/index.html","hash":"77fb43895a2438e69bb4828320ac6a793c8dd4cd","modified":1712539901946},{"_id":"public/archives/page/9/index.html","hash":"3375cf4a8994d71e8e3c23dcdebf0c8b70411927","modified":1712539901946},{"_id":"public/archives/2016/index.html","hash":"61739ca8e4151441c7099b99b7c4717751d4f7b9","modified":1712539901946},{"_id":"public/archives/2016/06/index.html","hash":"eec37c4e9bc41c5901615c94e495422657386dbd","modified":1712539901946},{"_id":"public/archives/2016/10/index.html","hash":"9f2932ad9e43bd00e29b32102e8b5399e594dfb0","modified":1712539901946},{"_id":"public/archives/2016/12/index.html","hash":"151284dbba9d703077eb2b2f74f3ee94666b59a1","modified":1712539901946},{"_id":"public/archives/2017/index.html","hash":"38fabf9442b00208e218339e614ae99d1bd07c4d","modified":1712539901946},{"_id":"public/archives/2017/page/2/index.html","hash":"1503528210c42cb522df7f08717b17814fbcd728","modified":1712539901946},{"_id":"public/archives/2017/page/3/index.html","hash":"da700245860e0a11a354aa594b2eeff5145e0dd2","modified":1712539901946},{"_id":"public/archives/2017/03/index.html","hash":"866062dbf2034eea02a9693dade41d3eeebd4e8f","modified":1712539901946},{"_id":"public/archives/2017/05/index.html","hash":"fa3bc964b9e3e02f8e7a6873df8e143d8da26291","modified":1712539901946},{"_id":"public/archives/2017/07/index.html","hash":"1e01356aceeeac42f21352c44df36e6bae6c428f","modified":1712539901946},{"_id":"public/archives/2017/08/index.html","hash":"b9da39ee86892aa45503a1929d1f14c076bc10b8","modified":1712539901946},{"_id":"public/archives/2017/09/index.html","hash":"bb8883bc310d08c16fc5f3de1aacbfa2f89cad00","modified":1712539901946},{"_id":"public/archives/2017/10/index.html","hash":"2e09cced492bbfc85810198146f1b63e48082eb2","modified":1712539901946},{"_id":"public/archives/2017/11/index.html","hash":"7142a07f10f226fca632f413e67ba524c63a79ec","modified":1712539901946},{"_id":"public/archives/2017/12/index.html","hash":"f7dc2db49426ec5fc88d1e2cc71e0451d4f19737","modified":1712539901946},{"_id":"public/archives/2018/index.html","hash":"89e75b0148e40e29cc1831ea53e5961667bce64a","modified":1712539901946},{"_id":"public/archives/2018/page/2/index.html","hash":"44500eca578ed23e0c502f3e7f68854861818ac5","modified":1712539901946},{"_id":"public/archives/2018/01/index.html","hash":"cd6488335682cbb9fb0d1d9f81e82ff136562596","modified":1712539901946},{"_id":"public/archives/2018/02/index.html","hash":"300ff2c40a6e19db13b6c7d522ebec31f0f36eee","modified":1712539901946},{"_id":"public/archives/2018/03/index.html","hash":"052a8bc13f4daff60fdfa9b67eb889fa8f78731f","modified":1712539901946},{"_id":"public/archives/2018/04/index.html","hash":"33c915b547911c680ceb493d68ea37937760e7d2","modified":1712539901946},{"_id":"public/archives/2018/06/index.html","hash":"f9f8f75a0837490f96b919499629e60c754370d2","modified":1712539901946},{"_id":"public/archives/2018/08/index.html","hash":"5cf584f66ef497c55c1af6551a4994a9481f3573","modified":1712539901946},{"_id":"public/archives/2018/09/index.html","hash":"0931026700715f69bc87b5c4f1089d9d4d46845e","modified":1712539901946},{"_id":"public/archives/2018/11/index.html","hash":"270d4e7ec60c417a2af2c40893589998eb12ec74","modified":1712539901946},{"_id":"public/archives/2018/12/index.html","hash":"100b1343d45a210d972e4ed31229bc2823a51886","modified":1712539901946},{"_id":"public/archives/2019/index.html","hash":"87f9ff6370adb563eb8d3bf4c754e9515c845d2a","modified":1712539901946},{"_id":"public/archives/2019/page/2/index.html","hash":"8b14f85d4c3249308c771a2799690da52a03eb5e","modified":1712539901946},{"_id":"public/archives/2019/01/index.html","hash":"2f41df9e344b52d0e675205878da1e72aab4c244","modified":1712539901946},{"_id":"public/archives/2019/03/index.html","hash":"16543bd873cee2dbc600e57aaa6de778b58219a4","modified":1712539901946},{"_id":"public/archives/2019/04/index.html","hash":"842b2e5f2e0e9a75194472db481edeee03993ae1","modified":1712539901946},{"_id":"public/archives/2019/08/index.html","hash":"1edbe05b98a4e2767f40774bb0ff92c40f13bffa","modified":1712539901946},{"_id":"public/archives/2019/09/index.html","hash":"5092ad2449076732ff25cdab1b4ef002cca27a54","modified":1712539901946},{"_id":"public/archives/2019/10/index.html","hash":"e9b08a67b98e276a7e3b18d06b209dd1223905dd","modified":1712539901946},{"_id":"public/archives/2019/12/index.html","hash":"2305c323888e55afe1ce7bb9b7d87e8ed63811d8","modified":1712539901946},{"_id":"public/archives/2020/index.html","hash":"725e231bc2b3f55af61f33f8f07a76b65dbb8aeb","modified":1712539901946},{"_id":"public/archives/2020/01/index.html","hash":"10ddd93fcec52621c1dd1133251d670c010f10d9","modified":1712539901946},{"_id":"public/archives/2020/02/index.html","hash":"ad4dceda899bb38b4ebe80d0deabb3fe00685f64","modified":1712539901946},{"_id":"public/archives/2021/index.html","hash":"24ef030527d977761a8824e181f16bb593b96b64","modified":1712539901946},{"_id":"public/archives/2021/03/index.html","hash":"4d4983722d04904bec8c9d7d2f7586b014971b57","modified":1712539901946},{"_id":"public/archives/2022/index.html","hash":"619d23222b8a57057b76b64015f1c0eac70f1d7f","modified":1712539901946},{"_id":"public/archives/2022/07/index.html","hash":"51479204dacf1f208ccb1fb1657f49b1c9724620","modified":1712539901946},{"_id":"public/archives/2022/10/index.html","hash":"b3445c707b0259c983d0d0867920f0f4e17c5a45","modified":1712539901946},{"_id":"public/archives/2022/11/index.html","hash":"282195c72686b9a3ac1433bc827fb488c8023eac","modified":1712539901946},{"_id":"public/archives/2022/12/index.html","hash":"ebc987d28805c81cea57c4e049fd57c7983ef4bb","modified":1712539901946},{"_id":"public/archives/2023/index.html","hash":"5a2b4c6223389b6f7eb1e3e70ef85c7521b8b923","modified":1712539901946},{"_id":"public/archives/2023/07/index.html","hash":"16850e292960f0988a2cab8f65990ae3541877ab","modified":1712539901946},{"_id":"public/archives/2023/08/index.html","hash":"9b51f58688d01a4ed57be1c59ee5412f9dbaf9c7","modified":1712539901946},{"_id":"public/archives/2023/10/index.html","hash":"afe99a1518fb32926bb33f2576c2e9699be20232","modified":1712539901946},{"_id":"public/archives/2023/11/index.html","hash":"a83714ef68034a5ddb989bba0819c27ac97d645a","modified":1712539901946},{"_id":"public/archives/2023/12/index.html","hash":"7483fbfce319301ccd502c49a2d843f7a13362d8","modified":1712539901946},{"_id":"public/archives/2024/index.html","hash":"9f2dfceb4a1dd48795dd296a94c70e85e3d05cdd","modified":1712539901946},{"_id":"public/archives/2024/03/index.html","hash":"7998338ebe56b6757c8b866d0242a8b4c006f5f4","modified":1712539901946},{"_id":"public/archives/2024/04/index.html","hash":"5f2a4e7ab8095174e51ca63c7af33b0cef924ccb","modified":1712539901946},{"_id":"public/tags/NodeJs/index.html","hash":"67767ff1d9cb2427ac3962d9a04b3d71aa8177fb","modified":1712539901946},{"_id":"public/tags/阅读笔记/index.html","hash":"eab37501c05d53ce8bc5b8f8876bf7182de6b1e5","modified":1712539901946},{"_id":"public/tags/阅读笔记/page/2/index.html","hash":"1bfb59a74485b22f8141507a4e396b409907f38d","modified":1712539901946},{"_id":"public/tags/Python/index.html","hash":"8569efd4d7c15585eaf54a2f878aae7dc97eb457","modified":1712539901946},{"_id":"public/tags/Python/page/2/index.html","hash":"096967fe08d2e780be899f91f9e8604088e4a4d7","modified":1712539901946},{"_id":"public/tags/Celery/index.html","hash":"83a11271a081aa6860d08b2cab9a82e22f69c015","modified":1712539901946},{"_id":"public/tags/Ubuntu/index.html","hash":"faa3965ee307b5f0426b8600b424ee733a2948da","modified":1712539901946},{"_id":"public/tags/敏捷开发/index.html","hash":"1c3f77abf1a60185bb9d20d304f59fb999ab85ae","modified":1712539901946},{"_id":"public/tags/devpi/index.html","hash":"b9abfc366362d879676df5ee72dc519aabfa160e","modified":1712539901946},{"_id":"public/tags/pip/index.html","hash":"679768321184489abbc38eff6781f8a80448eea7","modified":1712539901946},{"_id":"public/tags/Linux/index.html","hash":"9565cac2995ba728f6becfe9d8ce27e54754f4a4","modified":1712539901946},{"_id":"public/tags/Linux/page/2/index.html","hash":"c7283cad1bffcd1d765071575138b1a02497e0a9","modified":1712539901946},{"_id":"public/tags/Docker/index.html","hash":"09d1b4fbcdf4faeba9cf42771109c316dcd5ff2f","modified":1712539901946},{"_id":"public/tags/FFmpeg/index.html","hash":"7cfc2fbccaa8e1ac9a39e22f132e6259d0211698","modified":1712539901946},{"_id":"public/tags/视频/index.html","hash":"45a62329f9ab3f63fcfa292f07e3f391de8b9824","modified":1712539901946},{"_id":"public/tags/JavaScript/index.html","hash":"5ec14491b10a86e823089d3c0848c5f8770716f7","modified":1712539901946},{"_id":"public/tags/MACOS/index.html","hash":"8f12daf11b9b5118f42d9a615a391872741e287b","modified":1712539901946},{"_id":"public/tags/数据库/index.html","hash":"760ed0808124825a12159248765b3f723e12fcef","modified":1712539901946},{"_id":"public/tags/mongodb/index.html","hash":"9de46af1b56e2e34d27fc44ae6bdebb88734e127","modified":1712539901946},{"_id":"public/tags/mysql/index.html","hash":"551dc01b8ce8905f79622e1a612d0d1b07060e81","modified":1712539901946},{"_id":"public/tags/Nginx/index.html","hash":"29411b23b6c87a5c95d2cb7a1902d15d1efe968c","modified":1712539901946},{"_id":"public/tags/PG/index.html","hash":"eee090653ec64708f2191fe04075007880d2cdea","modified":1712539901946},{"_id":"public/tags/VIM/index.html","hash":"07a335e80e0b66665ccd10e92115fb8643151c8d","modified":1712539901946},{"_id":"public/tags/数据结构/index.html","hash":"18bd0b8ccc522ab674e968cf0414780b4dabb09b","modified":1712539901946},{"_id":"public/tags/python/index.html","hash":"62dc6f003b9fd00b7b0e23f17fcc95a78f83603f","modified":1712539901946},{"_id":"public/tags/python/page/2/index.html","hash":"6f16068ee132ab60120d067a1bdfed492854d8dc","modified":1712539901946},{"_id":"public/tags/python/page/3/index.html","hash":"68387b62307e59eb6c351d1a04e0d9be64df1650","modified":1712539901946},{"_id":"public/tags/java/index.html","hash":"985c2e22d6a2b045230d8987c6b54fec63eb25b6","modified":1712539901946},{"_id":"public/tags/调试/index.html","hash":"6dd56cf60491390dd4e05a3bebb9619df305826e","modified":1712539901946},{"_id":"public/tags/中间件/index.html","hash":"0cdbb88b93db0976b6c87cb927af06d572eb8f99","modified":1712539901946},{"_id":"public/tags/Tmux/index.html","hash":"5f35e691a367dcfe3c001321e43b8b5b235b6610","modified":1712539901946},{"_id":"public/tags/udp/index.html","hash":"b86ef929e44ab2c622d38f24eb2fe87e155a2b50","modified":1712539901946},{"_id":"public/tags/matplotlib/index.html","hash":"38cc2a4101e338ecb6e3ca2a2943be08989b65f8","modified":1712539901946},{"_id":"public/tags/服务器/index.html","hash":"d81f9be3e818a9560175e6722b45a602fd095e8c","modified":1712539901946},{"_id":"public/tags/winrm/index.html","hash":"d6e2811b729a3ba34d1e2950d1901f0d6c8d3164","modified":1712539901946},{"_id":"public/tags/https/index.html","hash":"83927c38d12201a234f2345f06b4e9c5c9eedacd","modified":1712539901946},{"_id":"public/tags/Windows/index.html","hash":"4d47de2c98403e29b736f9421233b70474c3e44a","modified":1712539901946},{"_id":"public/tags/PowerShell/index.html","hash":"5b2ae6f5d9e9cc77a2736bf3f371beaf945a9c92","modified":1712539901946},{"_id":"public/tags/物联网/index.html","hash":"ba3d5b67f603002ff33eb3357abdcd0d8204b75e","modified":1712539901946},{"_id":"public/tags/ZMQ/index.html","hash":"f07c01f0abd6deb9149c8d698bc075106fdd0f63","modified":1712539901946},{"_id":"public/tags/django/index.html","hash":"24e1ade9d66ac4545f536a2f7a7e136179e45123","modified":1712539901946},{"_id":"public/tags/git/index.html","hash":"905af248c2c2d051a7c531559e54efcd7bced9c6","modified":1712539901946},{"_id":"public/tags/hexo/index.html","hash":"8472a332f1a335329eb259b8ccd1fc0fc0d05ca1","modified":1712539901946},{"_id":"public/tags/travis/index.html","hash":"80995c4d1ca4fe4fe337b4fcf66645fb6e12c8f4","modified":1712539901946},{"_id":"public/tags/nginx/index.html","hash":"77eec68b664de15f02b42eca299274668be31fdc","modified":1712539901946},{"_id":"public/tags/pyenv/index.html","hash":"41ed68dce77574e615f5f4bf515724f366f3e3bc","modified":1712539901946},{"_id":"public/tags/TDD/index.html","hash":"792a5f0f3ace2c489c431441a5d7a96a497fc53d","modified":1712539901946},{"_id":"public/tags/排序算法/index.html","hash":"b52e740ff1ddc679cebf77b61a06e3c5f2eed13e","modified":1712539901946},{"_id":"public/tags/网络爬虫/index.html","hash":"eb41f154fd34c3a088c55118ae74132bf9bda6ed","modified":1712539901946},{"_id":"public/tags/sublime/index.html","hash":"a5f2c47221279e6e5aac564fc82af457b7d2354f","modified":1712539901946},{"_id":"public/tags/工作笔记/index.html","hash":"cab4902029a76adb48d439f328fb9bd095c83a66","modified":1712539901946},{"_id":"public/tags/github/index.html","hash":"21143b07cc04e744c27dd0a53f9f732462c2c40d","modified":1712539901946},{"_id":"public/tags/blog/index.html","hash":"6d7d538d37139480ebc70b7397c1bdf1613ef913","modified":1712539901946},{"_id":"public/tags/开发技巧/index.html","hash":"814301e5a4fe2c4c690bef1a81e9e10030ff000c","modified":1712539901946},{"_id":"public/tags/心情/index.html","hash":"349ffff3e253d72c569937876f3073aadae86a68","modified":1712539901946},{"_id":"public/tags/随笔/index.html","hash":"6336c17805300a2687f597c2abf1771a164565ab","modified":1712539901946},{"_id":"public/tags/设计模式/index.html","hash":"f12fe92f8b0003e2409e6805aa4f7b8ab0d749b5","modified":1712539901946},{"_id":"public/tags/面经/index.html","hash":"7d2b82278cd936ae86b296e8431c55a5f82693d2","modified":1712539901946},{"_id":"public/tags/tornado/index.html","hash":"ce61f20dcde78c0acae38fb6419fc4749b9ef114","modified":1712539901946},{"_id":"public/tags/技术/index.html","hash":"21cff27eb020d8ff1d731e9ff0545128a685227b","modified":1712539901946},{"_id":"public/tags/debian/index.html","hash":"09e4932ab0f59dbba61584733f58d1075d8caa2f","modified":1712539901946},{"_id":"public/tags/VPN/index.html","hash":"e1371c31a101b7b11b411c421a694979e189dfde","modified":1712539901946},{"_id":"public/wechat.jpg","hash":"a9b00e0ccc14d17d58f8a6bf12f8a5347921d7ec","modified":1712539901946},{"_id":"public/favicon.png","hash":"519c97e91764aa424a5bca255f410ce154d3eba8","modified":1712539901946},{"_id":"public/zhifubao.jpg","hash":"b80ebd076b5ff625baf542b5e7cc36957de5596e","modified":1712539901946},{"_id":"public/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1712539901946},{"_id":"public/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1712539901946},{"_id":"public/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1712539901946},{"_id":"public/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1712539901946},{"_id":"public/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1712539901946},{"_id":"public/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1712539901946},{"_id":"public/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1712539901946},{"_id":"public/img/favicon.png","hash":"519c97e91764aa424a5bca255f410ce154d3eba8","modified":1712539901946},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1712539901946},{"_id":"public/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1712539901946},{"_id":"public/favicon.jpeg","hash":"a5c42909641db320cd892ea7cdc8bc8e0f5d42aa","modified":1712539901946},{"_id":"public/blog-img/2018021001.png","hash":"9ea54328443447a6a2ef5183de30d83a1e4f9f7b","modified":1712539901946},{"_id":"public/blog-img/2018042201.png","hash":"bfc5da9a36ed4c7ed9354bdf1e5f5391260dee42","modified":1712539901946},{"_id":"public/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1712539901946},{"_id":"public/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1712539901946},{"_id":"public/main.266c1c.css","hash":"6b9cfabb81f021081a93da5a069674e9be910194","modified":1712539901946},{"_id":"public/main.266c1c.js","hash":"59ccafbd45d28c397a8a901152ef5e196077e4f4","modified":1712539901946},{"_id":"public/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1712539901946},{"_id":"public/slider.096dc6.js","hash":"a8b66ef85d96616086ea6256e7288d0b5a2df56d","modified":1712539901946},{"_id":"public/mobile.906508.js","hash":"86e50eecba93644d6cf4f78fd4f9ff54a0ea82d5","modified":1712539901946},{"_id":"public/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1712539901946},{"_id":"public/wen.png","hash":"097f9d0b6baea19e2aed2a9fb0edf1782ab6eed9","modified":1712539901946},{"_id":"public/img/wen.png","hash":"097f9d0b6baea19e2aed2a9fb0edf1782ab6eed9","modified":1712539901946}],"Category":[],"Data":[],"Page":[{"title":"王志文","date":"2019-03-01T10:50:32.000Z","_content":"\n# 王志文——Python工程师\n\n## 基本信息\n\n联系电话：15131601294 <br>\n学   历：本科   <br>\n电子邮箱：w_angzhiwen@163.com   <br>  \n个人博客：http://suadminwen.github.io   <br>\n求职意向：Python工程师   <br>\n\n## 个人技能\n\n- 掌握Python语言，熟悉常用数据结构和算法。\n- 熟练掌握常用库celery、SQLAlchey、pyenv、pytest等。\n- 熟悉Flask、Django，了解Tornado。能够搭建基于Flask项目框架的API框架，熟悉Restful规范。\n- 熟悉MySQL、Redis，使用MongoDB。能够根据需求独立完成数据库的设计和优化。\n- 长期使用Ubuntu系统进行开发，熟悉Linux常用命令。\n- 掌握Nginx、Docker、uwsgi、supervisor 等，有线上维护的经验，能够独立部署项目。\n- 掌握Git的使用和MarkDown文档的编写，推崇容器化、TDD和持续集成开发。\n- 熟练掌握W3C标准、HTML、CSS、JavaScript以及页面架构和布局。\n- 了解网页爬虫，数据分析技术等。\n- 了解常见的WEB工具方式XSS（跨站脚本攻击）、SQL注入和CSRF（跨站请求伪造攻击）等，有基本的安全意识。\n\n## 工作经历\n\n2018.3-至今\t\t杭州风胜科技有限公司 \t\t研发部\t\t\tpython后端开发   <br>\n1、我所在的小组是Python后端研发小组，参与公司产品的迭代开发，对产品需求进行分析并设计、实现接口、数据库存储结构等工作。   <br>\n2、先后参与多个产品的研发，后负责管理端的研发工作，全权负责管理端项目进度、项目代码结构和人员分工等工作。在参与项目过程中，攻克产品的多个重难点实现，提出合理的解决方案并实现。\n\n## 教育经历\n\n2014.9-2018.6 \t\t华北理工大学 \t\t计算机科学与技术 \t\t本科\n\n- 证书获取\n\n  - 2017年中国大学生计算机设计大赛--软件应用与开发组全国二等奖\n  - 2014年院级优秀班干部\n  - 多次院级奖学金\n\n- 培训经历\n\n  - 2017.9-2017.12 \t思特沃克学院  \t软件研发思维训练、全栈研发技能\n\n- 校园经历  \n\n  - 2015-2017   \t 华北理工大学\t   智慧应用软件研发工作室   \t软件研发负责人   <br>\n    1、与学校各部门合作。   <br>\n    带领工作室团队与校办、教务处、后勤集团等部门合作，实现各部门管理信息化。   <br>\n    2、与企业合作   <br>\n    带领工作室团队与唐山公交公司合作研发华北理工大学教职工班车在线预约系统。   <br>\n    3、组织比赛。组织第二、三、四届华北理工大学计算机设计大赛，组织多次相关讲座。   <br>\n    4、成立协会   <br>\n    2015年成立智慧应用软件研发协会，旨在创造一个应用软件设计方面爱好者的交流平台，普及计算机应用以及软件研发的基础知识，并担任会长至2017年9月。\n\n## 公司项目经验\n\n**2018.10\t杭州风胜科技有限公司\t赞我\tPC端项目负责人、Python后端开发**\n\n- **项目简介：**\n  - 赞我是一个全内容社区的app，用纯市场共识机制，保证所有的好内容得以脱颖而出。\n  - 项目分为移动客户端和PC管理端，PC管理端主要完成对app的配置、内容管理和日常运营等工作。\n  - 采用前后端分离的开发模式，使用Flask提供后台服务。\n- **个人工作：** \n  - 参与项目数据库设计，任PC管理端研发负责人。\n  - 完成基于Flask和Flask-restful与项目结合的API项目框架，优化框架。\n  - 完成集成环境基于docker的服务部署和日常维护。\n  - 开发过程中尝试推行TDD和code review。\n  - 进行任务分配和项目进度规划等工作。\n\n**2018-05  杭州风胜科技有限公司   令牌   客户端 后端开发、Flask开发**\n\n- **项目简介：** 令牌是一款去中心化应用DAPP产品，希望实现一个币圈交流的社区中心，产品前期主打内容和社区的推广，后期涉及到商品的抢购和区块链部分资产的提现等功能。在V1.0版本中，主要分为以下几大功能模块：文章信息流板块、社区排行榜板块、商品抢购板块、实名认证板块等。\n- **个人工作：** \n  - 1、完成分页模式的优化。在开发过程中，发现移动客户端中，原本分页参数“page”和“count”在信息流中会出现数据重复、丢失等问题，更改分页模式以“since_id”、“max_id”、“count”为分页参数的方式，解决了该问题。\n  - 2、热门文章的产生是动态变化的，不应该在用户请求接口时进行计算，所以我在这里使用celery任务调度计算热门文章，同时用redis缓存，减轻了服务器的压力。客户端在请求时需要携带其本地缓存的热门文章id，我将过滤其缓存的数据，返回最新的数据，解决了数据重复和丢失等问题。\n  - 3、社区的关注人数是影响排行榜的重要因素，但同时它也是动态变化的，所以传统的处理方式会出现数据重复或丢失的问题，我在处理的过程中也使用了定时任务调度负责生成社区排行榜，冗余表暂存生成的信息，同时记录任务的时间戳，作为同一次任务的标识，在客户端请求时需要携带该时间戳进行分页处理。\n\n## 其他项目经验\n\n**2016.09   \t华北理工大学 \t 班车在线预约系统  \t 微信企业号、Django开发**\n\n- **访问网址：** http://zhrj.wangzhiwen.top/admin\n- **项目简介：** \n  - 项目是面向我校全体教职工、通勤车管理部门和唐山市公交公司的集在线预约排座、通勤车相关管理和通勤车调度安排于一体的班车在线预约系统。\n  - 系统于2016年11月正式上线，平均每天解决我校1000余名教职工的乘车问题。\n- **个人工作：** \n  - 带领团队伙伴与校办等职能部门探讨业务需求。\n  - 在协调全组成员20天内完成该项目的第一个版本并保证3000多名教职工乘车的及时性和准确性。\n  - 对项目进行全新升级：增加座位号和车号的功能。\n  - 利用Linux的crontab定时完成车辆调度的计算和车号座位号的分配。\n\n## 个人介绍\n\n- 代码风格严谨、细心，有添加注释提高代码可读性的习惯，注重代码的拓展性和性能优化。\n- 具有良好的自学习惯，喜欢研究技术，学习新知识。\n- 熟悉Web应用编程，对前后端开发有全面的认识，熟练运用相应的开发工具和插件等。\n- 具有高度的团队合作精神和责任感，抗压能力强，有带领团队的经验。\n","source":"about/index.md","raw":"---\ntitle: 王志文\ndate: 2019-03-01 18:50:32\n---\n\n# 王志文——Python工程师\n\n## 基本信息\n\n联系电话：15131601294 <br>\n学   历：本科   <br>\n电子邮箱：w_angzhiwen@163.com   <br>  \n个人博客：http://suadminwen.github.io   <br>\n求职意向：Python工程师   <br>\n\n## 个人技能\n\n- 掌握Python语言，熟悉常用数据结构和算法。\n- 熟练掌握常用库celery、SQLAlchey、pyenv、pytest等。\n- 熟悉Flask、Django，了解Tornado。能够搭建基于Flask项目框架的API框架，熟悉Restful规范。\n- 熟悉MySQL、Redis，使用MongoDB。能够根据需求独立完成数据库的设计和优化。\n- 长期使用Ubuntu系统进行开发，熟悉Linux常用命令。\n- 掌握Nginx、Docker、uwsgi、supervisor 等，有线上维护的经验，能够独立部署项目。\n- 掌握Git的使用和MarkDown文档的编写，推崇容器化、TDD和持续集成开发。\n- 熟练掌握W3C标准、HTML、CSS、JavaScript以及页面架构和布局。\n- 了解网页爬虫，数据分析技术等。\n- 了解常见的WEB工具方式XSS（跨站脚本攻击）、SQL注入和CSRF（跨站请求伪造攻击）等，有基本的安全意识。\n\n## 工作经历\n\n2018.3-至今\t\t杭州风胜科技有限公司 \t\t研发部\t\t\tpython后端开发   <br>\n1、我所在的小组是Python后端研发小组，参与公司产品的迭代开发，对产品需求进行分析并设计、实现接口、数据库存储结构等工作。   <br>\n2、先后参与多个产品的研发，后负责管理端的研发工作，全权负责管理端项目进度、项目代码结构和人员分工等工作。在参与项目过程中，攻克产品的多个重难点实现，提出合理的解决方案并实现。\n\n## 教育经历\n\n2014.9-2018.6 \t\t华北理工大学 \t\t计算机科学与技术 \t\t本科\n\n- 证书获取\n\n  - 2017年中国大学生计算机设计大赛--软件应用与开发组全国二等奖\n  - 2014年院级优秀班干部\n  - 多次院级奖学金\n\n- 培训经历\n\n  - 2017.9-2017.12 \t思特沃克学院  \t软件研发思维训练、全栈研发技能\n\n- 校园经历  \n\n  - 2015-2017   \t 华北理工大学\t   智慧应用软件研发工作室   \t软件研发负责人   <br>\n    1、与学校各部门合作。   <br>\n    带领工作室团队与校办、教务处、后勤集团等部门合作，实现各部门管理信息化。   <br>\n    2、与企业合作   <br>\n    带领工作室团队与唐山公交公司合作研发华北理工大学教职工班车在线预约系统。   <br>\n    3、组织比赛。组织第二、三、四届华北理工大学计算机设计大赛，组织多次相关讲座。   <br>\n    4、成立协会   <br>\n    2015年成立智慧应用软件研发协会，旨在创造一个应用软件设计方面爱好者的交流平台，普及计算机应用以及软件研发的基础知识，并担任会长至2017年9月。\n\n## 公司项目经验\n\n**2018.10\t杭州风胜科技有限公司\t赞我\tPC端项目负责人、Python后端开发**\n\n- **项目简介：**\n  - 赞我是一个全内容社区的app，用纯市场共识机制，保证所有的好内容得以脱颖而出。\n  - 项目分为移动客户端和PC管理端，PC管理端主要完成对app的配置、内容管理和日常运营等工作。\n  - 采用前后端分离的开发模式，使用Flask提供后台服务。\n- **个人工作：** \n  - 参与项目数据库设计，任PC管理端研发负责人。\n  - 完成基于Flask和Flask-restful与项目结合的API项目框架，优化框架。\n  - 完成集成环境基于docker的服务部署和日常维护。\n  - 开发过程中尝试推行TDD和code review。\n  - 进行任务分配和项目进度规划等工作。\n\n**2018-05  杭州风胜科技有限公司   令牌   客户端 后端开发、Flask开发**\n\n- **项目简介：** 令牌是一款去中心化应用DAPP产品，希望实现一个币圈交流的社区中心，产品前期主打内容和社区的推广，后期涉及到商品的抢购和区块链部分资产的提现等功能。在V1.0版本中，主要分为以下几大功能模块：文章信息流板块、社区排行榜板块、商品抢购板块、实名认证板块等。\n- **个人工作：** \n  - 1、完成分页模式的优化。在开发过程中，发现移动客户端中，原本分页参数“page”和“count”在信息流中会出现数据重复、丢失等问题，更改分页模式以“since_id”、“max_id”、“count”为分页参数的方式，解决了该问题。\n  - 2、热门文章的产生是动态变化的，不应该在用户请求接口时进行计算，所以我在这里使用celery任务调度计算热门文章，同时用redis缓存，减轻了服务器的压力。客户端在请求时需要携带其本地缓存的热门文章id，我将过滤其缓存的数据，返回最新的数据，解决了数据重复和丢失等问题。\n  - 3、社区的关注人数是影响排行榜的重要因素，但同时它也是动态变化的，所以传统的处理方式会出现数据重复或丢失的问题，我在处理的过程中也使用了定时任务调度负责生成社区排行榜，冗余表暂存生成的信息，同时记录任务的时间戳，作为同一次任务的标识，在客户端请求时需要携带该时间戳进行分页处理。\n\n## 其他项目经验\n\n**2016.09   \t华北理工大学 \t 班车在线预约系统  \t 微信企业号、Django开发**\n\n- **访问网址：** http://zhrj.wangzhiwen.top/admin\n- **项目简介：** \n  - 项目是面向我校全体教职工、通勤车管理部门和唐山市公交公司的集在线预约排座、通勤车相关管理和通勤车调度安排于一体的班车在线预约系统。\n  - 系统于2016年11月正式上线，平均每天解决我校1000余名教职工的乘车问题。\n- **个人工作：** \n  - 带领团队伙伴与校办等职能部门探讨业务需求。\n  - 在协调全组成员20天内完成该项目的第一个版本并保证3000多名教职工乘车的及时性和准确性。\n  - 对项目进行全新升级：增加座位号和车号的功能。\n  - 利用Linux的crontab定时完成车辆调度的计算和车号座位号的分配。\n\n## 个人介绍\n\n- 代码风格严谨、细心，有添加注释提高代码可读性的习惯，注重代码的拓展性和性能优化。\n- 具有良好的自学习惯，喜欢研究技术，学习新知识。\n- 熟悉Web应用编程，对前后端开发有全面的认识，熟练运用相应的开发工具和插件等。\n- 具有高度的团队合作精神和责任感，抗压能力强，有带领团队的经验。\n","updated":"2021-09-01T15:25:22.992Z","path":"about/index.html","comments":1,"layout":"page","_id":"cluqa1hhy0000rlog3lpih3pn","content":"<h1 id=\"王志文——Python工程师\"><a href=\"#王志文——Python工程师\" class=\"headerlink\" title=\"王志文——Python工程师\"></a>王志文——Python工程师</h1><h2 id=\"基本信息\"><a href=\"#基本信息\" class=\"headerlink\" title=\"基本信息\"></a>基本信息</h2><p>联系电话：15131601294 <br><br>学   历：本科   <br><br>电子邮箱：<a href=\"mailto:&#x77;&#95;&#x61;&#110;&#x67;&#x7a;&#x68;&#x69;&#119;&#101;&#x6e;&#64;&#x31;&#54;&#x33;&#x2e;&#x63;&#x6f;&#x6d;\">&#x77;&#95;&#x61;&#110;&#x67;&#x7a;&#x68;&#x69;&#119;&#101;&#x6e;&#64;&#x31;&#54;&#x33;&#x2e;&#x63;&#x6f;&#x6d;</a>   <br><br>个人博客：<a href=\"http://suadminwen.github.io/\">http://suadminwen.github.io</a>   <br><br>求职意向：Python工程师   <br></p>\n<h2 id=\"个人技能\"><a href=\"#个人技能\" class=\"headerlink\" title=\"个人技能\"></a>个人技能</h2><ul>\n<li>掌握Python语言，熟悉常用数据结构和算法。</li>\n<li>熟练掌握常用库celery、SQLAlchey、pyenv、pytest等。</li>\n<li>熟悉Flask、Django，了解Tornado。能够搭建基于Flask项目框架的API框架，熟悉Restful规范。</li>\n<li>熟悉MySQL、Redis，使用MongoDB。能够根据需求独立完成数据库的设计和优化。</li>\n<li>长期使用Ubuntu系统进行开发，熟悉Linux常用命令。</li>\n<li>掌握Nginx、Docker、uwsgi、supervisor 等，有线上维护的经验，能够独立部署项目。</li>\n<li>掌握Git的使用和MarkDown文档的编写，推崇容器化、TDD和持续集成开发。</li>\n<li>熟练掌握W3C标准、HTML、CSS、JavaScript以及页面架构和布局。</li>\n<li>了解网页爬虫，数据分析技术等。</li>\n<li>了解常见的WEB工具方式XSS（跨站脚本攻击）、SQL注入和CSRF（跨站请求伪造攻击）等，有基本的安全意识。</li>\n</ul>\n<h2 id=\"工作经历\"><a href=\"#工作经历\" class=\"headerlink\" title=\"工作经历\"></a>工作经历</h2><p>2018.3-至今\t\t杭州风胜科技有限公司 \t\t研发部\t\t\tpython后端开发   <br><br>1、我所在的小组是Python后端研发小组，参与公司产品的迭代开发，对产品需求进行分析并设计、实现接口、数据库存储结构等工作。   <br><br>2、先后参与多个产品的研发，后负责管理端的研发工作，全权负责管理端项目进度、项目代码结构和人员分工等工作。在参与项目过程中，攻克产品的多个重难点实现，提出合理的解决方案并实现。</p>\n<h2 id=\"教育经历\"><a href=\"#教育经历\" class=\"headerlink\" title=\"教育经历\"></a>教育经历</h2><p>2014.9-2018.6 \t\t华北理工大学 \t\t计算机科学与技术 \t\t本科</p>\n<ul>\n<li><p>证书获取</p>\n<ul>\n<li>2017年中国大学生计算机设计大赛–软件应用与开发组全国二等奖</li>\n<li>2014年院级优秀班干部</li>\n<li>多次院级奖学金</li>\n</ul>\n</li>\n<li><p>培训经历</p>\n<ul>\n<li>2017.9-2017.12 \t思特沃克学院  \t软件研发思维训练、全栈研发技能</li>\n</ul>\n</li>\n<li><p>校园经历  </p>\n<ul>\n<li>2015-2017   \t 华北理工大学\t   智慧应用软件研发工作室   \t软件研发负责人   <br><br>1、与学校各部门合作。   <br><br>带领工作室团队与校办、教务处、后勤集团等部门合作，实现各部门管理信息化。   <br><br>2、与企业合作   <br><br>带领工作室团队与唐山公交公司合作研发华北理工大学教职工班车在线预约系统。   <br><br>3、组织比赛。组织第二、三、四届华北理工大学计算机设计大赛，组织多次相关讲座。   <br><br>4、成立协会   <br><br>2015年成立智慧应用软件研发协会，旨在创造一个应用软件设计方面爱好者的交流平台，普及计算机应用以及软件研发的基础知识，并担任会长至2017年9月。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"公司项目经验\"><a href=\"#公司项目经验\" class=\"headerlink\" title=\"公司项目经验\"></a>公司项目经验</h2><p><strong>2018.10\t杭州风胜科技有限公司\t赞我\tPC端项目负责人、Python后端开发</strong></p>\n<ul>\n<li><strong>项目简介：</strong><ul>\n<li>赞我是一个全内容社区的app，用纯市场共识机制，保证所有的好内容得以脱颖而出。</li>\n<li>项目分为移动客户端和PC管理端，PC管理端主要完成对app的配置、内容管理和日常运营等工作。</li>\n<li>采用前后端分离的开发模式，使用Flask提供后台服务。</li>\n</ul>\n</li>\n<li><strong>个人工作：</strong> <ul>\n<li>参与项目数据库设计，任PC管理端研发负责人。</li>\n<li>完成基于Flask和Flask-restful与项目结合的API项目框架，优化框架。</li>\n<li>完成集成环境基于docker的服务部署和日常维护。</li>\n<li>开发过程中尝试推行TDD和code review。</li>\n<li>进行任务分配和项目进度规划等工作。</li>\n</ul>\n</li>\n</ul>\n<p><strong>2018-05  杭州风胜科技有限公司   令牌   客户端 后端开发、Flask开发</strong></p>\n<ul>\n<li><strong>项目简介：</strong> 令牌是一款去中心化应用DAPP产品，希望实现一个币圈交流的社区中心，产品前期主打内容和社区的推广，后期涉及到商品的抢购和区块链部分资产的提现等功能。在V1.0版本中，主要分为以下几大功能模块：文章信息流板块、社区排行榜板块、商品抢购板块、实名认证板块等。</li>\n<li><strong>个人工作：</strong> <ul>\n<li>1、完成分页模式的优化。在开发过程中，发现移动客户端中，原本分页参数“page”和“count”在信息流中会出现数据重复、丢失等问题，更改分页模式以“since_id”、“max_id”、“count”为分页参数的方式，解决了该问题。</li>\n<li>2、热门文章的产生是动态变化的，不应该在用户请求接口时进行计算，所以我在这里使用celery任务调度计算热门文章，同时用redis缓存，减轻了服务器的压力。客户端在请求时需要携带其本地缓存的热门文章id，我将过滤其缓存的数据，返回最新的数据，解决了数据重复和丢失等问题。</li>\n<li>3、社区的关注人数是影响排行榜的重要因素，但同时它也是动态变化的，所以传统的处理方式会出现数据重复或丢失的问题，我在处理的过程中也使用了定时任务调度负责生成社区排行榜，冗余表暂存生成的信息，同时记录任务的时间戳，作为同一次任务的标识，在客户端请求时需要携带该时间戳进行分页处理。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"其他项目经验\"><a href=\"#其他项目经验\" class=\"headerlink\" title=\"其他项目经验\"></a>其他项目经验</h2><p><strong>2016.09   \t华北理工大学 \t 班车在线预约系统  \t 微信企业号、Django开发</strong></p>\n<ul>\n<li><strong>访问网址：</strong> <a href=\"http://zhrj.wangzhiwen.top/admin\">http://zhrj.wangzhiwen.top/admin</a></li>\n<li><strong>项目简介：</strong> <ul>\n<li>项目是面向我校全体教职工、通勤车管理部门和唐山市公交公司的集在线预约排座、通勤车相关管理和通勤车调度安排于一体的班车在线预约系统。</li>\n<li>系统于2016年11月正式上线，平均每天解决我校1000余名教职工的乘车问题。</li>\n</ul>\n</li>\n<li><strong>个人工作：</strong> <ul>\n<li>带领团队伙伴与校办等职能部门探讨业务需求。</li>\n<li>在协调全组成员20天内完成该项目的第一个版本并保证3000多名教职工乘车的及时性和准确性。</li>\n<li>对项目进行全新升级：增加座位号和车号的功能。</li>\n<li>利用Linux的crontab定时完成车辆调度的计算和车号座位号的分配。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"个人介绍\"><a href=\"#个人介绍\" class=\"headerlink\" title=\"个人介绍\"></a>个人介绍</h2><ul>\n<li>代码风格严谨、细心，有添加注释提高代码可读性的习惯，注重代码的拓展性和性能优化。</li>\n<li>具有良好的自学习惯，喜欢研究技术，学习新知识。</li>\n<li>熟悉Web应用编程，对前后端开发有全面的认识，熟练运用相应的开发工具和插件等。</li>\n<li>具有高度的团队合作精神和责任感，抗压能力强，有带领团队的经验。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"王志文——Python工程师\"><a href=\"#王志文——Python工程师\" class=\"headerlink\" title=\"王志文——Python工程师\"></a>王志文——Python工程师</h1><h2 id=\"基本信息\"><a href=\"#基本信息\" class=\"headerlink\" title=\"基本信息\"></a>基本信息</h2><p>联系电话：15131601294 <br><br>学   历：本科   <br><br>电子邮箱：<a href=\"mailto:&#x77;&#95;&#x61;&#110;&#x67;&#x7a;&#x68;&#x69;&#119;&#101;&#x6e;&#64;&#x31;&#54;&#x33;&#x2e;&#x63;&#x6f;&#x6d;\">&#x77;&#95;&#x61;&#110;&#x67;&#x7a;&#x68;&#x69;&#119;&#101;&#x6e;&#64;&#x31;&#54;&#x33;&#x2e;&#x63;&#x6f;&#x6d;</a>   <br><br>个人博客：<a href=\"http://suadminwen.github.io/\">http://suadminwen.github.io</a>   <br><br>求职意向：Python工程师   <br></p>\n<h2 id=\"个人技能\"><a href=\"#个人技能\" class=\"headerlink\" title=\"个人技能\"></a>个人技能</h2><ul>\n<li>掌握Python语言，熟悉常用数据结构和算法。</li>\n<li>熟练掌握常用库celery、SQLAlchey、pyenv、pytest等。</li>\n<li>熟悉Flask、Django，了解Tornado。能够搭建基于Flask项目框架的API框架，熟悉Restful规范。</li>\n<li>熟悉MySQL、Redis，使用MongoDB。能够根据需求独立完成数据库的设计和优化。</li>\n<li>长期使用Ubuntu系统进行开发，熟悉Linux常用命令。</li>\n<li>掌握Nginx、Docker、uwsgi、supervisor 等，有线上维护的经验，能够独立部署项目。</li>\n<li>掌握Git的使用和MarkDown文档的编写，推崇容器化、TDD和持续集成开发。</li>\n<li>熟练掌握W3C标准、HTML、CSS、JavaScript以及页面架构和布局。</li>\n<li>了解网页爬虫，数据分析技术等。</li>\n<li>了解常见的WEB工具方式XSS（跨站脚本攻击）、SQL注入和CSRF（跨站请求伪造攻击）等，有基本的安全意识。</li>\n</ul>\n<h2 id=\"工作经历\"><a href=\"#工作经历\" class=\"headerlink\" title=\"工作经历\"></a>工作经历</h2><p>2018.3-至今\t\t杭州风胜科技有限公司 \t\t研发部\t\t\tpython后端开发   <br><br>1、我所在的小组是Python后端研发小组，参与公司产品的迭代开发，对产品需求进行分析并设计、实现接口、数据库存储结构等工作。   <br><br>2、先后参与多个产品的研发，后负责管理端的研发工作，全权负责管理端项目进度、项目代码结构和人员分工等工作。在参与项目过程中，攻克产品的多个重难点实现，提出合理的解决方案并实现。</p>\n<h2 id=\"教育经历\"><a href=\"#教育经历\" class=\"headerlink\" title=\"教育经历\"></a>教育经历</h2><p>2014.9-2018.6 \t\t华北理工大学 \t\t计算机科学与技术 \t\t本科</p>\n<ul>\n<li><p>证书获取</p>\n<ul>\n<li>2017年中国大学生计算机设计大赛–软件应用与开发组全国二等奖</li>\n<li>2014年院级优秀班干部</li>\n<li>多次院级奖学金</li>\n</ul>\n</li>\n<li><p>培训经历</p>\n<ul>\n<li>2017.9-2017.12 \t思特沃克学院  \t软件研发思维训练、全栈研发技能</li>\n</ul>\n</li>\n<li><p>校园经历  </p>\n<ul>\n<li>2015-2017   \t 华北理工大学\t   智慧应用软件研发工作室   \t软件研发负责人   <br><br>1、与学校各部门合作。   <br><br>带领工作室团队与校办、教务处、后勤集团等部门合作，实现各部门管理信息化。   <br><br>2、与企业合作   <br><br>带领工作室团队与唐山公交公司合作研发华北理工大学教职工班车在线预约系统。   <br><br>3、组织比赛。组织第二、三、四届华北理工大学计算机设计大赛，组织多次相关讲座。   <br><br>4、成立协会   <br><br>2015年成立智慧应用软件研发协会，旨在创造一个应用软件设计方面爱好者的交流平台，普及计算机应用以及软件研发的基础知识，并担任会长至2017年9月。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"公司项目经验\"><a href=\"#公司项目经验\" class=\"headerlink\" title=\"公司项目经验\"></a>公司项目经验</h2><p><strong>2018.10\t杭州风胜科技有限公司\t赞我\tPC端项目负责人、Python后端开发</strong></p>\n<ul>\n<li><strong>项目简介：</strong><ul>\n<li>赞我是一个全内容社区的app，用纯市场共识机制，保证所有的好内容得以脱颖而出。</li>\n<li>项目分为移动客户端和PC管理端，PC管理端主要完成对app的配置、内容管理和日常运营等工作。</li>\n<li>采用前后端分离的开发模式，使用Flask提供后台服务。</li>\n</ul>\n</li>\n<li><strong>个人工作：</strong> <ul>\n<li>参与项目数据库设计，任PC管理端研发负责人。</li>\n<li>完成基于Flask和Flask-restful与项目结合的API项目框架，优化框架。</li>\n<li>完成集成环境基于docker的服务部署和日常维护。</li>\n<li>开发过程中尝试推行TDD和code review。</li>\n<li>进行任务分配和项目进度规划等工作。</li>\n</ul>\n</li>\n</ul>\n<p><strong>2018-05  杭州风胜科技有限公司   令牌   客户端 后端开发、Flask开发</strong></p>\n<ul>\n<li><strong>项目简介：</strong> 令牌是一款去中心化应用DAPP产品，希望实现一个币圈交流的社区中心，产品前期主打内容和社区的推广，后期涉及到商品的抢购和区块链部分资产的提现等功能。在V1.0版本中，主要分为以下几大功能模块：文章信息流板块、社区排行榜板块、商品抢购板块、实名认证板块等。</li>\n<li><strong>个人工作：</strong> <ul>\n<li>1、完成分页模式的优化。在开发过程中，发现移动客户端中，原本分页参数“page”和“count”在信息流中会出现数据重复、丢失等问题，更改分页模式以“since_id”、“max_id”、“count”为分页参数的方式，解决了该问题。</li>\n<li>2、热门文章的产生是动态变化的，不应该在用户请求接口时进行计算，所以我在这里使用celery任务调度计算热门文章，同时用redis缓存，减轻了服务器的压力。客户端在请求时需要携带其本地缓存的热门文章id，我将过滤其缓存的数据，返回最新的数据，解决了数据重复和丢失等问题。</li>\n<li>3、社区的关注人数是影响排行榜的重要因素，但同时它也是动态变化的，所以传统的处理方式会出现数据重复或丢失的问题，我在处理的过程中也使用了定时任务调度负责生成社区排行榜，冗余表暂存生成的信息，同时记录任务的时间戳，作为同一次任务的标识，在客户端请求时需要携带该时间戳进行分页处理。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"其他项目经验\"><a href=\"#其他项目经验\" class=\"headerlink\" title=\"其他项目经验\"></a>其他项目经验</h2><p><strong>2016.09   \t华北理工大学 \t 班车在线预约系统  \t 微信企业号、Django开发</strong></p>\n<ul>\n<li><strong>访问网址：</strong> <a href=\"http://zhrj.wangzhiwen.top/admin\">http://zhrj.wangzhiwen.top/admin</a></li>\n<li><strong>项目简介：</strong> <ul>\n<li>项目是面向我校全体教职工、通勤车管理部门和唐山市公交公司的集在线预约排座、通勤车相关管理和通勤车调度安排于一体的班车在线预约系统。</li>\n<li>系统于2016年11月正式上线，平均每天解决我校1000余名教职工的乘车问题。</li>\n</ul>\n</li>\n<li><strong>个人工作：</strong> <ul>\n<li>带领团队伙伴与校办等职能部门探讨业务需求。</li>\n<li>在协调全组成员20天内完成该项目的第一个版本并保证3000多名教职工乘车的及时性和准确性。</li>\n<li>对项目进行全新升级：增加座位号和车号的功能。</li>\n<li>利用Linux的crontab定时完成车辆调度的计算和车号座位号的分配。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"个人介绍\"><a href=\"#个人介绍\" class=\"headerlink\" title=\"个人介绍\"></a>个人介绍</h2><ul>\n<li>代码风格严谨、细心，有添加注释提高代码可读性的习惯，注重代码的拓展性和性能优化。</li>\n<li>具有良好的自学习惯，喜欢研究技术，学习新知识。</li>\n<li>熟悉Web应用编程，对前后端开发有全面的认识，熟练运用相应的开发工具和插件等。</li>\n<li>具有高度的团队合作精神和责任感，抗压能力强，有带领团队的经验。</li>\n</ul>\n"}],"Post":[{"title":"(一)初识NodeJs","date":"2017-10-21T16:00:00.000Z","_content":"\n> 说明：该学习笔记参考《深入浅出Node.js》在学习过程中，添加了自己的理解和适当的补充！仅供参考！\n\nNodeJs的出现，让JavaScript工程师实现了独自完成全栈的梦想。NodeJs作为后端JavaScript的运行平台，保留了前端浏览器中那些熟悉的接口，没有改写语言本身的任何特性，依然基于**作用链**和**原型链**。\n\n## NodeJs有以下几个特点：\n\n### 异步I/O\n\n异步I/O的最常见实现场景就是发起Ajax调用。这里演示的是一个Ajax请求：\n\n<!--more-->\n\n```js\n$.post(\"/url\", {\"title\": \"这是参数\"}， function(data){\n    console.log(\"收到响应\");\n});\nconsole.log(\"发送Ajax结束\");\n```\n\n这里，我们会注意到，输出“发送Ajax结束”并不一定是在输出“收到响应”之后，因为“收到响应”的执行时间是不被预期的。这里是比较重要的异步的原则：‘Don`t call me, I will call you’，**注重结果，不关心过程**。\n\n在NodeJs中，绝大多数的操作都是以异步的方式进行调用。在NodeJs中，我们可以从语言层面很自然的进行并行I/O操作，每个调用之间无需等待其他调用结束，在**编程模型上可以极大的提升效率**。\n\n这里是两个文件读取任务的耗时取决于最慢的那个文件读取的耗时：\n\n```js\nvar fs = require(\"fs\");\nfs.readFile(\"/path1\", function(err, file){\n    console.log(\"读取文件1完成\");\n});\nfs.readFile(\"/path2\", function(err, file){\n    console.log(\"读取文件2完成\");\n});\n```\n\n### 事件与回调函数\n\nNodeJs是将前端浏览器中广泛且成熟的事件引入后端，配合异步I/O，将事件点暴露给业务逻辑。\n\n```js\nvar http = require(\"http\");\nvar querystring = require(\"querystring\");\n\n// 侦听服务其的request事件\n\nhttp.createServer(function(req, res){\n  var postData = '';\n  req.setEncoding('utf8');\n\n  // 侦听请求的data事件\n\n  req.on('data', function(chunk){\n    postData += chunk;\n  });\n\n  // 侦听请求的end事件\n  req.on('end', function(){\n    res.end(postData);\n  });\n\n}).listen(8080);\nconsole.log('server start at port:8080')\n```\n在web服务器绑定request事件，对于请求对象，为其绑定data事件和end事件。相应的在前端Ajax请求中绑定success事件，在发出请求后，只需关心请求成功时执行相应的业务逻辑即可。\n\n```js\n$.ajax({\n  'url': '127.0.0.1:8080',\n  'method': 'POST',\n  'data': {},\n  'success': function(data){\n    console.log(data);\n  }\n})\n```\n\n以上代码只是演示，此处的ajax并不能运行。在此只是说明“事件”。\n\n事件的编程方式具有**轻量级**、**松耦合**、**只关注事务点**等优势。但是也会造成在多个异步任务的场景下，事件和事件之间各自独立，如何协作是一个重要的问题。\n\n回调函数无处不在。在JavaScript中，是**将函数作为第一等公民来对待的，可以将函数作为对象传递给方法作为参数进行调用**(这里说的是不是闭包？可以去深揪一下！)\n\n回调函数是最好的接受异步调用、返回数据的方式，但是这种编程方式对于同步思路编程的人来说，是一大挑战。**代码的编写顺序与执行顺序并无关系**，在流程控制方面，由于穿插了异步和回调使得变得不是那么一目了然。但是对于业务的划分和对事件的提炼上复杂度与同步方式是一致的。\n\n### 单线程\n\nNodeJs保持了**JavaScript在浏览器中的单线程**的特点。而且在NodeJs中，JavaScript**与其他线程是无法共享任何状态的**。\n\n单线程的最大好处就是：**不用向多线程那样处处在意状态的同步问题，没有死锁的的存在，也没有线程上下文交换（这点需要深入解释下）所带来的性能上的开销**。\n\n当然单线程也是有很大的弱点，但是必须要积极面对才能享受到node带来的好处。主要有以下三大方面：\n\n- 无法利用多核CPU。\n- **错误会引起整个应用的退出，应用的健壮性值得考验**。\n- **大量计算占用CPU导致无法继续调用异步I/O**。\n\n在浏览器中**JavaScript与UI共用一个线程，JavaSript长时间执行会导致UI的渲染和相应被终端**(这里思考浏览器加载资源的方式是并行还是串行，如何提高这方面的性能！)\n\n第三个弱点，有相应的解决方案，这里暂时先不提！\n\n### 跨平台\n\n兼容于Windows和Linux平台。\n\n## 应用场景\n\n### I/O密集型\n\nNodeJs擅长I/O密集型的应用场景，面向网络且擅长并行I/O，能够有效的组织更多的硬件资源，\n\nI/O密集的优势主要在于NodeJs利用**事件循环**的处理能力，而不是启动每一个线程为每一个请求服务，资源占用极少。\n\n### 分布式应用\n\n### 与遗留系统和平相处\n\n### 是否不擅长CPU密集型业务\n\n\n这里简单的认识NodeJs，了解了其特性和应用场景，接下来，需要深入了，加油哦！","source":"_posts/(一)初识NodeJs.md","raw":"---\ntitle: (一)初识NodeJs\ndate: 2017-10-22\ntags: [NodeJs, 阅读笔记]\n---\n\n> 说明：该学习笔记参考《深入浅出Node.js》在学习过程中，添加了自己的理解和适当的补充！仅供参考！\n\nNodeJs的出现，让JavaScript工程师实现了独自完成全栈的梦想。NodeJs作为后端JavaScript的运行平台，保留了前端浏览器中那些熟悉的接口，没有改写语言本身的任何特性，依然基于**作用链**和**原型链**。\n\n## NodeJs有以下几个特点：\n\n### 异步I/O\n\n异步I/O的最常见实现场景就是发起Ajax调用。这里演示的是一个Ajax请求：\n\n<!--more-->\n\n```js\n$.post(\"/url\", {\"title\": \"这是参数\"}， function(data){\n    console.log(\"收到响应\");\n});\nconsole.log(\"发送Ajax结束\");\n```\n\n这里，我们会注意到，输出“发送Ajax结束”并不一定是在输出“收到响应”之后，因为“收到响应”的执行时间是不被预期的。这里是比较重要的异步的原则：‘Don`t call me, I will call you’，**注重结果，不关心过程**。\n\n在NodeJs中，绝大多数的操作都是以异步的方式进行调用。在NodeJs中，我们可以从语言层面很自然的进行并行I/O操作，每个调用之间无需等待其他调用结束，在**编程模型上可以极大的提升效率**。\n\n这里是两个文件读取任务的耗时取决于最慢的那个文件读取的耗时：\n\n```js\nvar fs = require(\"fs\");\nfs.readFile(\"/path1\", function(err, file){\n    console.log(\"读取文件1完成\");\n});\nfs.readFile(\"/path2\", function(err, file){\n    console.log(\"读取文件2完成\");\n});\n```\n\n### 事件与回调函数\n\nNodeJs是将前端浏览器中广泛且成熟的事件引入后端，配合异步I/O，将事件点暴露给业务逻辑。\n\n```js\nvar http = require(\"http\");\nvar querystring = require(\"querystring\");\n\n// 侦听服务其的request事件\n\nhttp.createServer(function(req, res){\n  var postData = '';\n  req.setEncoding('utf8');\n\n  // 侦听请求的data事件\n\n  req.on('data', function(chunk){\n    postData += chunk;\n  });\n\n  // 侦听请求的end事件\n  req.on('end', function(){\n    res.end(postData);\n  });\n\n}).listen(8080);\nconsole.log('server start at port:8080')\n```\n在web服务器绑定request事件，对于请求对象，为其绑定data事件和end事件。相应的在前端Ajax请求中绑定success事件，在发出请求后，只需关心请求成功时执行相应的业务逻辑即可。\n\n```js\n$.ajax({\n  'url': '127.0.0.1:8080',\n  'method': 'POST',\n  'data': {},\n  'success': function(data){\n    console.log(data);\n  }\n})\n```\n\n以上代码只是演示，此处的ajax并不能运行。在此只是说明“事件”。\n\n事件的编程方式具有**轻量级**、**松耦合**、**只关注事务点**等优势。但是也会造成在多个异步任务的场景下，事件和事件之间各自独立，如何协作是一个重要的问题。\n\n回调函数无处不在。在JavaScript中，是**将函数作为第一等公民来对待的，可以将函数作为对象传递给方法作为参数进行调用**(这里说的是不是闭包？可以去深揪一下！)\n\n回调函数是最好的接受异步调用、返回数据的方式，但是这种编程方式对于同步思路编程的人来说，是一大挑战。**代码的编写顺序与执行顺序并无关系**，在流程控制方面，由于穿插了异步和回调使得变得不是那么一目了然。但是对于业务的划分和对事件的提炼上复杂度与同步方式是一致的。\n\n### 单线程\n\nNodeJs保持了**JavaScript在浏览器中的单线程**的特点。而且在NodeJs中，JavaScript**与其他线程是无法共享任何状态的**。\n\n单线程的最大好处就是：**不用向多线程那样处处在意状态的同步问题，没有死锁的的存在，也没有线程上下文交换（这点需要深入解释下）所带来的性能上的开销**。\n\n当然单线程也是有很大的弱点，但是必须要积极面对才能享受到node带来的好处。主要有以下三大方面：\n\n- 无法利用多核CPU。\n- **错误会引起整个应用的退出，应用的健壮性值得考验**。\n- **大量计算占用CPU导致无法继续调用异步I/O**。\n\n在浏览器中**JavaScript与UI共用一个线程，JavaSript长时间执行会导致UI的渲染和相应被终端**(这里思考浏览器加载资源的方式是并行还是串行，如何提高这方面的性能！)\n\n第三个弱点，有相应的解决方案，这里暂时先不提！\n\n### 跨平台\n\n兼容于Windows和Linux平台。\n\n## 应用场景\n\n### I/O密集型\n\nNodeJs擅长I/O密集型的应用场景，面向网络且擅长并行I/O，能够有效的组织更多的硬件资源，\n\nI/O密集的优势主要在于NodeJs利用**事件循环**的处理能力，而不是启动每一个线程为每一个请求服务，资源占用极少。\n\n### 分布式应用\n\n### 与遗留系统和平相处\n\n### 是否不擅长CPU密集型业务\n\n\n这里简单的认识NodeJs，了解了其特性和应用场景，接下来，需要深入了，加油哦！","slug":"(一)初识NodeJs","published":1,"updated":"2024-03-22T08:56:51.234Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluqa1hi10001rlog4737big4","content":"<blockquote>\n<p>说明：该学习笔记参考《深入浅出Node.js》在学习过程中，添加了自己的理解和适当的补充！仅供参考！</p>\n</blockquote>\n<p>NodeJs的出现，让JavaScript工程师实现了独自完成全栈的梦想。NodeJs作为后端JavaScript的运行平台，保留了前端浏览器中那些熟悉的接口，没有改写语言本身的任何特性，依然基于<strong>作用链</strong>和<strong>原型链</strong>。</p>\n<h2 id=\"NodeJs有以下几个特点：\"><a href=\"#NodeJs有以下几个特点：\" class=\"headerlink\" title=\"NodeJs有以下几个特点：\"></a>NodeJs有以下几个特点：</h2><h3 id=\"异步I-x2F-O\"><a href=\"#异步I-x2F-O\" class=\"headerlink\" title=\"异步I&#x2F;O\"></a>异步I&#x2F;O</h3><p>异步I&#x2F;O的最常见实现场景就是发起Ajax调用。这里演示的是一个Ajax请求：</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.<span class=\"title function_\">post</span>(<span class=\"string\">&quot;/url&quot;</span>, &#123;<span class=\"string\">&quot;title&quot;</span>: <span class=\"string\">&quot;这是参数&quot;</span>&#125;， <span class=\"keyword\">function</span>(<span class=\"params\">data</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;收到响应&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;发送Ajax结束&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>这里，我们会注意到，输出“发送Ajax结束”并不一定是在输出“收到响应”之后，因为“收到响应”的执行时间是不被预期的。这里是比较重要的异步的原则：‘Don&#96;t call me, I will call you’，<strong>注重结果，不关心过程</strong>。</p>\n<p>在NodeJs中，绝大多数的操作都是以异步的方式进行调用。在NodeJs中，我们可以从语言层面很自然的进行并行I&#x2F;O操作，每个调用之间无需等待其他调用结束，在<strong>编程模型上可以极大的提升效率</strong>。</p>\n<p>这里是两个文件读取任务的耗时取决于最慢的那个文件读取的耗时：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;fs&quot;</span>);</span><br><span class=\"line\">fs.<span class=\"title function_\">readFile</span>(<span class=\"string\">&quot;/path1&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">err, file</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;读取文件1完成&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">fs.<span class=\"title function_\">readFile</span>(<span class=\"string\">&quot;/path2&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">err, file</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;读取文件2完成&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"事件与回调函数\"><a href=\"#事件与回调函数\" class=\"headerlink\" title=\"事件与回调函数\"></a>事件与回调函数</h3><p>NodeJs是将前端浏览器中广泛且成熟的事件引入后端，配合异步I&#x2F;O，将事件点暴露给业务逻辑。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;http&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> querystring = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;querystring&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 侦听服务其的request事件</span></span><br><span class=\"line\"></span><br><span class=\"line\">http.<span class=\"title function_\">createServer</span>(<span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> postData = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">  req.<span class=\"title function_\">setEncoding</span>(<span class=\"string\">&#x27;utf8&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 侦听请求的data事件</span></span><br><span class=\"line\"></span><br><span class=\"line\">  req.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;data&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">chunk</span>)&#123;</span><br><span class=\"line\">    postData += chunk;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 侦听请求的end事件</span></span><br><span class=\"line\">  req.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;end&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    res.<span class=\"title function_\">end</span>(postData);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;).<span class=\"title function_\">listen</span>(<span class=\"number\">8080</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;server start at port:8080&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>在web服务器绑定request事件，对于请求对象，为其绑定data事件和end事件。相应的在前端Ajax请求中绑定success事件，在发出请求后，只需关心请求成功时执行相应的业务逻辑即可。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.<span class=\"title function_\">ajax</span>(&#123;</span><br><span class=\"line\">  <span class=\"string\">&#x27;url&#x27;</span>: <span class=\"string\">&#x27;127.0.0.1:8080&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;method&#x27;</span>: <span class=\"string\">&#x27;POST&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;data&#x27;</span>: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"string\">&#x27;success&#x27;</span>: <span class=\"keyword\">function</span>(<span class=\"params\">data</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>以上代码只是演示，此处的ajax并不能运行。在此只是说明“事件”。</p>\n<p>事件的编程方式具有<strong>轻量级</strong>、<strong>松耦合</strong>、<strong>只关注事务点</strong>等优势。但是也会造成在多个异步任务的场景下，事件和事件之间各自独立，如何协作是一个重要的问题。</p>\n<p>回调函数无处不在。在JavaScript中，是<strong>将函数作为第一等公民来对待的，可以将函数作为对象传递给方法作为参数进行调用</strong>(这里说的是不是闭包？可以去深揪一下！)</p>\n<p>回调函数是最好的接受异步调用、返回数据的方式，但是这种编程方式对于同步思路编程的人来说，是一大挑战。<strong>代码的编写顺序与执行顺序并无关系</strong>，在流程控制方面，由于穿插了异步和回调使得变得不是那么一目了然。但是对于业务的划分和对事件的提炼上复杂度与同步方式是一致的。</p>\n<h3 id=\"单线程\"><a href=\"#单线程\" class=\"headerlink\" title=\"单线程\"></a>单线程</h3><p>NodeJs保持了<strong>JavaScript在浏览器中的单线程</strong>的特点。而且在NodeJs中，JavaScript<strong>与其他线程是无法共享任何状态的</strong>。</p>\n<p>单线程的最大好处就是：<strong>不用向多线程那样处处在意状态的同步问题，没有死锁的的存在，也没有线程上下文交换（这点需要深入解释下）所带来的性能上的开销</strong>。</p>\n<p>当然单线程也是有很大的弱点，但是必须要积极面对才能享受到node带来的好处。主要有以下三大方面：</p>\n<ul>\n<li>无法利用多核CPU。</li>\n<li><strong>错误会引起整个应用的退出，应用的健壮性值得考验</strong>。</li>\n<li><strong>大量计算占用CPU导致无法继续调用异步I&#x2F;O</strong>。</li>\n</ul>\n<p>在浏览器中<strong>JavaScript与UI共用一个线程，JavaSript长时间执行会导致UI的渲染和相应被终端</strong>(这里思考浏览器加载资源的方式是并行还是串行，如何提高这方面的性能！)</p>\n<p>第三个弱点，有相应的解决方案，这里暂时先不提！</p>\n<h3 id=\"跨平台\"><a href=\"#跨平台\" class=\"headerlink\" title=\"跨平台\"></a>跨平台</h3><p>兼容于Windows和Linux平台。</p>\n<h2 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h2><h3 id=\"I-x2F-O密集型\"><a href=\"#I-x2F-O密集型\" class=\"headerlink\" title=\"I&#x2F;O密集型\"></a>I&#x2F;O密集型</h3><p>NodeJs擅长I&#x2F;O密集型的应用场景，面向网络且擅长并行I&#x2F;O，能够有效的组织更多的硬件资源，</p>\n<p>I&#x2F;O密集的优势主要在于NodeJs利用<strong>事件循环</strong>的处理能力，而不是启动每一个线程为每一个请求服务，资源占用极少。</p>\n<h3 id=\"分布式应用\"><a href=\"#分布式应用\" class=\"headerlink\" title=\"分布式应用\"></a>分布式应用</h3><h3 id=\"与遗留系统和平相处\"><a href=\"#与遗留系统和平相处\" class=\"headerlink\" title=\"与遗留系统和平相处\"></a>与遗留系统和平相处</h3><h3 id=\"是否不擅长CPU密集型业务\"><a href=\"#是否不擅长CPU密集型业务\" class=\"headerlink\" title=\"是否不擅长CPU密集型业务\"></a>是否不擅长CPU密集型业务</h3><p>这里简单的认识NodeJs，了解了其特性和应用场景，接下来，需要深入了，加油哦！</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>说明：该学习笔记参考《深入浅出Node.js》在学习过程中，添加了自己的理解和适当的补充！仅供参考！</p>\n</blockquote>\n<p>NodeJs的出现，让JavaScript工程师实现了独自完成全栈的梦想。NodeJs作为后端JavaScript的运行平台，保留了前端浏览器中那些熟悉的接口，没有改写语言本身的任何特性，依然基于<strong>作用链</strong>和<strong>原型链</strong>。</p>\n<h2 id=\"NodeJs有以下几个特点：\"><a href=\"#NodeJs有以下几个特点：\" class=\"headerlink\" title=\"NodeJs有以下几个特点：\"></a>NodeJs有以下几个特点：</h2><h3 id=\"异步I-x2F-O\"><a href=\"#异步I-x2F-O\" class=\"headerlink\" title=\"异步I&#x2F;O\"></a>异步I&#x2F;O</h3><p>异步I&#x2F;O的最常见实现场景就是发起Ajax调用。这里演示的是一个Ajax请求：</p>","more":"<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.<span class=\"title function_\">post</span>(<span class=\"string\">&quot;/url&quot;</span>, &#123;<span class=\"string\">&quot;title&quot;</span>: <span class=\"string\">&quot;这是参数&quot;</span>&#125;， <span class=\"keyword\">function</span>(<span class=\"params\">data</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;收到响应&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;发送Ajax结束&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>这里，我们会注意到，输出“发送Ajax结束”并不一定是在输出“收到响应”之后，因为“收到响应”的执行时间是不被预期的。这里是比较重要的异步的原则：‘Don&#96;t call me, I will call you’，<strong>注重结果，不关心过程</strong>。</p>\n<p>在NodeJs中，绝大多数的操作都是以异步的方式进行调用。在NodeJs中，我们可以从语言层面很自然的进行并行I&#x2F;O操作，每个调用之间无需等待其他调用结束，在<strong>编程模型上可以极大的提升效率</strong>。</p>\n<p>这里是两个文件读取任务的耗时取决于最慢的那个文件读取的耗时：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;fs&quot;</span>);</span><br><span class=\"line\">fs.<span class=\"title function_\">readFile</span>(<span class=\"string\">&quot;/path1&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">err, file</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;读取文件1完成&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">fs.<span class=\"title function_\">readFile</span>(<span class=\"string\">&quot;/path2&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">err, file</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;读取文件2完成&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"事件与回调函数\"><a href=\"#事件与回调函数\" class=\"headerlink\" title=\"事件与回调函数\"></a>事件与回调函数</h3><p>NodeJs是将前端浏览器中广泛且成熟的事件引入后端，配合异步I&#x2F;O，将事件点暴露给业务逻辑。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;http&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> querystring = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;querystring&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 侦听服务其的request事件</span></span><br><span class=\"line\"></span><br><span class=\"line\">http.<span class=\"title function_\">createServer</span>(<span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> postData = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">  req.<span class=\"title function_\">setEncoding</span>(<span class=\"string\">&#x27;utf8&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 侦听请求的data事件</span></span><br><span class=\"line\"></span><br><span class=\"line\">  req.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;data&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">chunk</span>)&#123;</span><br><span class=\"line\">    postData += chunk;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 侦听请求的end事件</span></span><br><span class=\"line\">  req.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;end&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    res.<span class=\"title function_\">end</span>(postData);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;).<span class=\"title function_\">listen</span>(<span class=\"number\">8080</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;server start at port:8080&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>在web服务器绑定request事件，对于请求对象，为其绑定data事件和end事件。相应的在前端Ajax请求中绑定success事件，在发出请求后，只需关心请求成功时执行相应的业务逻辑即可。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.<span class=\"title function_\">ajax</span>(&#123;</span><br><span class=\"line\">  <span class=\"string\">&#x27;url&#x27;</span>: <span class=\"string\">&#x27;127.0.0.1:8080&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;method&#x27;</span>: <span class=\"string\">&#x27;POST&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;data&#x27;</span>: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"string\">&#x27;success&#x27;</span>: <span class=\"keyword\">function</span>(<span class=\"params\">data</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>以上代码只是演示，此处的ajax并不能运行。在此只是说明“事件”。</p>\n<p>事件的编程方式具有<strong>轻量级</strong>、<strong>松耦合</strong>、<strong>只关注事务点</strong>等优势。但是也会造成在多个异步任务的场景下，事件和事件之间各自独立，如何协作是一个重要的问题。</p>\n<p>回调函数无处不在。在JavaScript中，是<strong>将函数作为第一等公民来对待的，可以将函数作为对象传递给方法作为参数进行调用</strong>(这里说的是不是闭包？可以去深揪一下！)</p>\n<p>回调函数是最好的接受异步调用、返回数据的方式，但是这种编程方式对于同步思路编程的人来说，是一大挑战。<strong>代码的编写顺序与执行顺序并无关系</strong>，在流程控制方面，由于穿插了异步和回调使得变得不是那么一目了然。但是对于业务的划分和对事件的提炼上复杂度与同步方式是一致的。</p>\n<h3 id=\"单线程\"><a href=\"#单线程\" class=\"headerlink\" title=\"单线程\"></a>单线程</h3><p>NodeJs保持了<strong>JavaScript在浏览器中的单线程</strong>的特点。而且在NodeJs中，JavaScript<strong>与其他线程是无法共享任何状态的</strong>。</p>\n<p>单线程的最大好处就是：<strong>不用向多线程那样处处在意状态的同步问题，没有死锁的的存在，也没有线程上下文交换（这点需要深入解释下）所带来的性能上的开销</strong>。</p>\n<p>当然单线程也是有很大的弱点，但是必须要积极面对才能享受到node带来的好处。主要有以下三大方面：</p>\n<ul>\n<li>无法利用多核CPU。</li>\n<li><strong>错误会引起整个应用的退出，应用的健壮性值得考验</strong>。</li>\n<li><strong>大量计算占用CPU导致无法继续调用异步I&#x2F;O</strong>。</li>\n</ul>\n<p>在浏览器中<strong>JavaScript与UI共用一个线程，JavaSript长时间执行会导致UI的渲染和相应被终端</strong>(这里思考浏览器加载资源的方式是并行还是串行，如何提高这方面的性能！)</p>\n<p>第三个弱点，有相应的解决方案，这里暂时先不提！</p>\n<h3 id=\"跨平台\"><a href=\"#跨平台\" class=\"headerlink\" title=\"跨平台\"></a>跨平台</h3><p>兼容于Windows和Linux平台。</p>\n<h2 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h2><h3 id=\"I-x2F-O密集型\"><a href=\"#I-x2F-O密集型\" class=\"headerlink\" title=\"I&#x2F;O密集型\"></a>I&#x2F;O密集型</h3><p>NodeJs擅长I&#x2F;O密集型的应用场景，面向网络且擅长并行I&#x2F;O，能够有效的组织更多的硬件资源，</p>\n<p>I&#x2F;O密集的优势主要在于NodeJs利用<strong>事件循环</strong>的处理能力，而不是启动每一个线程为每一个请求服务，资源占用极少。</p>\n<h3 id=\"分布式应用\"><a href=\"#分布式应用\" class=\"headerlink\" title=\"分布式应用\"></a>分布式应用</h3><h3 id=\"与遗留系统和平相处\"><a href=\"#与遗留系统和平相处\" class=\"headerlink\" title=\"与遗留系统和平相处\"></a>与遗留系统和平相处</h3><h3 id=\"是否不擅长CPU密集型业务\"><a href=\"#是否不擅长CPU密集型业务\" class=\"headerlink\" title=\"是否不擅长CPU密集型业务\"></a>是否不擅长CPU密集型业务</h3><p>这里简单的认识NodeJs，了解了其特性和应用场景，接下来，需要深入了，加油哦！</p>"},{"title":"(三)NodeJs快速入门","date":"2017-10-24T16:00:00.000Z","_content":"\n> 本学习笔记是根据《Node.js开发指南》一书进行学习。前面的几篇是根据《深入浅出Node.js》学习，但是学习到第三四章关于异步I/O和异步编程时，就暂时先放弃了，主要因为那本书讲的有点深，更多从底层说起，对于从来没有接触过NodeJs的同学来说，学习起来有一些难度。《Node.js开发指南》这本书比较适合新手学习。当然本人也算新手。\n\n## 开始用NodeJs编程\n\n### Hello World \n\n创建`hello.js`编写如下代码：\n\n    conlose.log(\"Hello World\")\n\n打开终端，进入`hello.js`所在目录，执行命令：\n\n    node hello.js\n\n`console.log`是我们最常用的输出指令,它和C语言中的`printf`的功能类似,也可以接受任意多个参数,支持`%d`、`%s`变量引用。\n\n    console.log(\"%d\", 1000)\n\n<!-- more -->\n\n### 建立HTTP服务器\n\nNode.js将“HTTP服务器”这一层抽离,直接面向浏览器用户。\n\n\n![Node.js与PHP的架构](http://upload-images.jianshu.io/upload_images/3248493-a60384e1e638e02d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n让我们创建一个HTTP服务，建立一个名为app.js的文件\n\n```js\n// app.js\nvar http = require(\"http\");\n\nhttp.createServer(function(req, res){\n    res.writeHead(200, {\"Content-Type\": \"text/html\"});\n    res.write(\"<h1>Hello world!</h1>\");\n    res.end(\"<p>NodeJs</p>\");\n}).listen(3000);\n\nconsole.log(\"Server start at port 3000!\")\n\n```\n\n运行`node app.js`命令，打开浏览器访问http://127.0.0.1:3000，即可看到输出。\n\n`listen`函数中创建了事件监听器，使得Node.js进程不会退出事件循环。\n\n## 异步式I/O与事件式编程\n\nNodeJs最大的特点就是异步式I/O（或者非阻塞I/O）与事件紧密结合的编程模式。控制流很大程度上要靠事件和回调函数来组织，一个逻辑要拆分为若干个单元。\n\n### 阻塞与线程\n\n### 回调函数\n\n在NodeJs中如何用异步的方式读取一个文件，下面是一个例子：\n\n```js\n// readFile.js\nvar fs = require(\"fs\");\n\nfs.readFile(\"server.js\", \"utf-8\", function (err, data) {\n    if(err){\n        console.log(\"file read err!\");\n    }else {\n        console.log(data);\n    }\n});\nconsole.log(\"End!\")\n```\n\n运行文件会发现，首先输出“End!”，然后才是读取文件的内容！\n\nNodeJs也支持同步读取文件：\n\n```js\n//readFile.js\n\nvar fs = require(\"fs\");\nvar data = fs.readFileSync(\"server.js\", \"utf-8\");\nconsole.log(data);\nconsole.log(\"End!\");\n```\n\n运行文件，先输出文件内容，最后输出\"End!\"\n\n异步式I/O是通过回调函数来实现的。fs.readFile接收了三个参数，第一个是文件名，第二个是编码方式，第三个是一个函数，我们称这个函数为回调函数。\n\n**NodeJs中，并不是所有的API都提供了同步和异步版本。Node.js不鼓励使用同步I/O。**\n\n### 事件\nNodeJs所有的异步I/O操作在完成时都会发送一个事件到事件队列。事件由`EventEmitter`对象提供\n\n```js\n//event.js\nvar EventEmitter = require(\"events\").EventEmitter;\nvar event = new EventEmitter();\nevent.on(\"some_event\", function(){\n    console.log(\"some_event occured\");\n});\nsetTimeout(function(){\n    event.emit(\"some_event\");\n}, 1000);\n```\n\n运行这段代码，1秒后控制台输出了`some_event occured`。其原理是`event`对象注册了事件`some_event`的一个监听器，然后我们通过`setTimeout`在1000毫秒以后向`event`对象发送事件`some_event`，此时会调用`some_event`的监听器。\n\nNodeJs程序由事件循环开始，到事件循环结束，所有的逻辑都是事件的回调函数，所以NodeJs始终在事件循环中，程序入口就是事件循环第一个事件的回调函数。事件的回调函数在执行的过程中，可能会发出I/O请求或直接发射（emit）事件，执行完毕后再返回事件循环，事件循环会检查事件队列中有没有未处理的事件，直到程序结束。\n\n### 模块和包\n\nNodeJs提供了require函数来调用其他模块，而且模块都是基于文件的，机制十分简单。\n\nNodeJs提供了`exports`和`require`两个对象，其中`exports`是模块公开的接口，`require`用于从外部获取一个模块的接口，即所获取模块的`exports`对象。\n\n让我们以一个例子来了解模块。\n\n```js\n// module.js\nvar name;\nexports.setName = function(thyName){\n    name = thyName;\n}\nexports.getName = function(){\n    console.log(\"Hello \" + name);\n}\n```\n\n编写getModule.js\n\n```\n// getModule.js\nvar myModule = require(\"./module\");\nmyModule.setName(\"Hak\");\nmyModule.getName();\n```\n\n运行`getModule.js`会输出： `Hello Hak`\n\n**单次加载**\n\n上面这个例子有点类似于创建一个对象，但实际上和对象又有本质的区别，因为require不会重复加载模块，也就是说无论调用多少次require，获得的模块都是同一个。\n\n我们在getModule.js的基础上稍作修改：\n\n```js\nvar myModule1 = require(\"./module\");\nmyModule1.setName(\"Hak\");\n\nvar myModule2 = require(\"./module\");\nmyModule2.setName(\"Jack\");\n\nmyModule1.getName();\n```\n运行后发现输出结果是： Hello Jack。这是因为myModule1 和myModule2指向的是同一个实例，前者的结果被后者覆盖。\n\n事实上，exports本身仅仅是一个普通的空对象，即{}，它专门用来声明接口，本质上是通过它为模块闭包\n的内部建立了一个有限的访问接口。因为它没有任何特殊的地方，所以可以用其他东西来代替。\n\n**不可以通过对exports直接赋值代替对module.exports赋值。exports实际上只是一个和module.exports指向同一个对象的变量，它本身会在模块执行结束后释放，但module不会，因此只能通过指定module.exports来改变访问接口。**\n\n### 模块和包\n\nnpm是NodeJs官方提供的包管理工具。npm提供了命令行工具，使你可以方便地下载、安装、升级、删除包，也可以让你作为开发者发布并维护包。\n\n在使用npm安装包的时候，有两种模式：本地模式和全局模式。默认情况下我们使用npm install命令就是采用本地模式，即把包安装到当前目录的node_modules子目录下。\n\nnpm还有另一种不同的安装模式被成为全局模式，使用方法为：\n\n     npm install -g [page_name]\n\n|模式|可通过require使用|注册PATH|\n|--|--|--|\n|本地模式|是|否|\n|全局模式|否|是|\n\n\n当我们要把某个包作为工程运行时的一部分时，通过本地模式获取，如果要在命令行下使用，则使用全局模式安装。\n\n## 调试\n\n### 命令行调试\n\nNodeJs支持命令行下的单步调试。\n\n```js\n// debug.js\nvar a = 1;\nvar b = 'world';\nvar c =function(x){\n    console.log('hello' + x + a);\n};\nc(b);\n```\n\n在命令行下执行`node debug debug.js`，将会启动调试工具：\n\n![image.png](http://upload-images.jianshu.io/upload_images/3248493-5a5a44a085d529dc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n这样就打开了一个NodeJs的调试终端。可以用一些基本的命令进行单步跟踪调试。\n\n|命令|功能|\n|-|-|\n|run|执行脚本在第一行暂停|\n|restart|重新执行脚本|\n|cont, c|继续执行，直到遇到下一个断点|\n|next, n|单步执行|\n|step, s|单步执行并进入函数|\n|kill|终止当前执行的脚本|\n|...|...|\n\n### 远程调试\n\nV8提供的调试功能是基于TCP协议的，因此Node.js可以轻松地实现远程调试。在命令行下使用以下两个语句之一可以打开调试服务器。\n\n    node --debug[=port] script.js\n    node --debug-brk[=port] script.js\n\n### 利用工具\n\n### 使用node-inspector调试NodeJs","source":"_posts/(三)NodeJs快速入门.md","raw":"---\ntitle: (三)NodeJs快速入门\ndate: 2017-10-25\ntags: [NodeJs, 阅读笔记]\n---\n\n> 本学习笔记是根据《Node.js开发指南》一书进行学习。前面的几篇是根据《深入浅出Node.js》学习，但是学习到第三四章关于异步I/O和异步编程时，就暂时先放弃了，主要因为那本书讲的有点深，更多从底层说起，对于从来没有接触过NodeJs的同学来说，学习起来有一些难度。《Node.js开发指南》这本书比较适合新手学习。当然本人也算新手。\n\n## 开始用NodeJs编程\n\n### Hello World \n\n创建`hello.js`编写如下代码：\n\n    conlose.log(\"Hello World\")\n\n打开终端，进入`hello.js`所在目录，执行命令：\n\n    node hello.js\n\n`console.log`是我们最常用的输出指令,它和C语言中的`printf`的功能类似,也可以接受任意多个参数,支持`%d`、`%s`变量引用。\n\n    console.log(\"%d\", 1000)\n\n<!-- more -->\n\n### 建立HTTP服务器\n\nNode.js将“HTTP服务器”这一层抽离,直接面向浏览器用户。\n\n\n![Node.js与PHP的架构](http://upload-images.jianshu.io/upload_images/3248493-a60384e1e638e02d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n让我们创建一个HTTP服务，建立一个名为app.js的文件\n\n```js\n// app.js\nvar http = require(\"http\");\n\nhttp.createServer(function(req, res){\n    res.writeHead(200, {\"Content-Type\": \"text/html\"});\n    res.write(\"<h1>Hello world!</h1>\");\n    res.end(\"<p>NodeJs</p>\");\n}).listen(3000);\n\nconsole.log(\"Server start at port 3000!\")\n\n```\n\n运行`node app.js`命令，打开浏览器访问http://127.0.0.1:3000，即可看到输出。\n\n`listen`函数中创建了事件监听器，使得Node.js进程不会退出事件循环。\n\n## 异步式I/O与事件式编程\n\nNodeJs最大的特点就是异步式I/O（或者非阻塞I/O）与事件紧密结合的编程模式。控制流很大程度上要靠事件和回调函数来组织，一个逻辑要拆分为若干个单元。\n\n### 阻塞与线程\n\n### 回调函数\n\n在NodeJs中如何用异步的方式读取一个文件，下面是一个例子：\n\n```js\n// readFile.js\nvar fs = require(\"fs\");\n\nfs.readFile(\"server.js\", \"utf-8\", function (err, data) {\n    if(err){\n        console.log(\"file read err!\");\n    }else {\n        console.log(data);\n    }\n});\nconsole.log(\"End!\")\n```\n\n运行文件会发现，首先输出“End!”，然后才是读取文件的内容！\n\nNodeJs也支持同步读取文件：\n\n```js\n//readFile.js\n\nvar fs = require(\"fs\");\nvar data = fs.readFileSync(\"server.js\", \"utf-8\");\nconsole.log(data);\nconsole.log(\"End!\");\n```\n\n运行文件，先输出文件内容，最后输出\"End!\"\n\n异步式I/O是通过回调函数来实现的。fs.readFile接收了三个参数，第一个是文件名，第二个是编码方式，第三个是一个函数，我们称这个函数为回调函数。\n\n**NodeJs中，并不是所有的API都提供了同步和异步版本。Node.js不鼓励使用同步I/O。**\n\n### 事件\nNodeJs所有的异步I/O操作在完成时都会发送一个事件到事件队列。事件由`EventEmitter`对象提供\n\n```js\n//event.js\nvar EventEmitter = require(\"events\").EventEmitter;\nvar event = new EventEmitter();\nevent.on(\"some_event\", function(){\n    console.log(\"some_event occured\");\n});\nsetTimeout(function(){\n    event.emit(\"some_event\");\n}, 1000);\n```\n\n运行这段代码，1秒后控制台输出了`some_event occured`。其原理是`event`对象注册了事件`some_event`的一个监听器，然后我们通过`setTimeout`在1000毫秒以后向`event`对象发送事件`some_event`，此时会调用`some_event`的监听器。\n\nNodeJs程序由事件循环开始，到事件循环结束，所有的逻辑都是事件的回调函数，所以NodeJs始终在事件循环中，程序入口就是事件循环第一个事件的回调函数。事件的回调函数在执行的过程中，可能会发出I/O请求或直接发射（emit）事件，执行完毕后再返回事件循环，事件循环会检查事件队列中有没有未处理的事件，直到程序结束。\n\n### 模块和包\n\nNodeJs提供了require函数来调用其他模块，而且模块都是基于文件的，机制十分简单。\n\nNodeJs提供了`exports`和`require`两个对象，其中`exports`是模块公开的接口，`require`用于从外部获取一个模块的接口，即所获取模块的`exports`对象。\n\n让我们以一个例子来了解模块。\n\n```js\n// module.js\nvar name;\nexports.setName = function(thyName){\n    name = thyName;\n}\nexports.getName = function(){\n    console.log(\"Hello \" + name);\n}\n```\n\n编写getModule.js\n\n```\n// getModule.js\nvar myModule = require(\"./module\");\nmyModule.setName(\"Hak\");\nmyModule.getName();\n```\n\n运行`getModule.js`会输出： `Hello Hak`\n\n**单次加载**\n\n上面这个例子有点类似于创建一个对象，但实际上和对象又有本质的区别，因为require不会重复加载模块，也就是说无论调用多少次require，获得的模块都是同一个。\n\n我们在getModule.js的基础上稍作修改：\n\n```js\nvar myModule1 = require(\"./module\");\nmyModule1.setName(\"Hak\");\n\nvar myModule2 = require(\"./module\");\nmyModule2.setName(\"Jack\");\n\nmyModule1.getName();\n```\n运行后发现输出结果是： Hello Jack。这是因为myModule1 和myModule2指向的是同一个实例，前者的结果被后者覆盖。\n\n事实上，exports本身仅仅是一个普通的空对象，即{}，它专门用来声明接口，本质上是通过它为模块闭包\n的内部建立了一个有限的访问接口。因为它没有任何特殊的地方，所以可以用其他东西来代替。\n\n**不可以通过对exports直接赋值代替对module.exports赋值。exports实际上只是一个和module.exports指向同一个对象的变量，它本身会在模块执行结束后释放，但module不会，因此只能通过指定module.exports来改变访问接口。**\n\n### 模块和包\n\nnpm是NodeJs官方提供的包管理工具。npm提供了命令行工具，使你可以方便地下载、安装、升级、删除包，也可以让你作为开发者发布并维护包。\n\n在使用npm安装包的时候，有两种模式：本地模式和全局模式。默认情况下我们使用npm install命令就是采用本地模式，即把包安装到当前目录的node_modules子目录下。\n\nnpm还有另一种不同的安装模式被成为全局模式，使用方法为：\n\n     npm install -g [page_name]\n\n|模式|可通过require使用|注册PATH|\n|--|--|--|\n|本地模式|是|否|\n|全局模式|否|是|\n\n\n当我们要把某个包作为工程运行时的一部分时，通过本地模式获取，如果要在命令行下使用，则使用全局模式安装。\n\n## 调试\n\n### 命令行调试\n\nNodeJs支持命令行下的单步调试。\n\n```js\n// debug.js\nvar a = 1;\nvar b = 'world';\nvar c =function(x){\n    console.log('hello' + x + a);\n};\nc(b);\n```\n\n在命令行下执行`node debug debug.js`，将会启动调试工具：\n\n![image.png](http://upload-images.jianshu.io/upload_images/3248493-5a5a44a085d529dc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n这样就打开了一个NodeJs的调试终端。可以用一些基本的命令进行单步跟踪调试。\n\n|命令|功能|\n|-|-|\n|run|执行脚本在第一行暂停|\n|restart|重新执行脚本|\n|cont, c|继续执行，直到遇到下一个断点|\n|next, n|单步执行|\n|step, s|单步执行并进入函数|\n|kill|终止当前执行的脚本|\n|...|...|\n\n### 远程调试\n\nV8提供的调试功能是基于TCP协议的，因此Node.js可以轻松地实现远程调试。在命令行下使用以下两个语句之一可以打开调试服务器。\n\n    node --debug[=port] script.js\n    node --debug-brk[=port] script.js\n\n### 利用工具\n\n### 使用node-inspector调试NodeJs","slug":"(三)NodeJs快速入门","published":1,"updated":"2021-06-20T10:25:20.122Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluqa1hi40002rloggmt191w7","content":"<blockquote>\n<p>本学习笔记是根据《Node.js开发指南》一书进行学习。前面的几篇是根据《深入浅出Node.js》学习，但是学习到第三四章关于异步I&#x2F;O和异步编程时，就暂时先放弃了，主要因为那本书讲的有点深，更多从底层说起，对于从来没有接触过NodeJs的同学来说，学习起来有一些难度。《Node.js开发指南》这本书比较适合新手学习。当然本人也算新手。</p>\n</blockquote>\n<h2 id=\"开始用NodeJs编程\"><a href=\"#开始用NodeJs编程\" class=\"headerlink\" title=\"开始用NodeJs编程\"></a>开始用NodeJs编程</h2><h3 id=\"Hello-World\"><a href=\"#Hello-World\" class=\"headerlink\" title=\"Hello World\"></a>Hello World</h3><p>创建<code>hello.js</code>编写如下代码：</p>\n<pre><code>conlose.log(&quot;Hello World&quot;)\n</code></pre>\n<p>打开终端，进入<code>hello.js</code>所在目录，执行命令：</p>\n<pre><code>node hello.js\n</code></pre>\n<p><code>console.log</code>是我们最常用的输出指令,它和C语言中的<code>printf</code>的功能类似,也可以接受任意多个参数,支持<code>%d</code>、<code>%s</code>变量引用。</p>\n<pre><code>console.log(&quot;%d&quot;, 1000)\n</code></pre>\n<span id=\"more\"></span>\n\n<h3 id=\"建立HTTP服务器\"><a href=\"#建立HTTP服务器\" class=\"headerlink\" title=\"建立HTTP服务器\"></a>建立HTTP服务器</h3><p>Node.js将“HTTP服务器”这一层抽离,直接面向浏览器用户。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3248493-a60384e1e638e02d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Node.js与PHP的架构\"></p>\n<p>让我们创建一个HTTP服务，建立一个名为app.js的文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// app.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;http&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">http.<span class=\"title function_\">createServer</span>(<span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>)&#123;</span><br><span class=\"line\">    res.<span class=\"title function_\">writeHead</span>(<span class=\"number\">200</span>, &#123;<span class=\"string\">&quot;Content-Type&quot;</span>: <span class=\"string\">&quot;text/html&quot;</span>&#125;);</span><br><span class=\"line\">    res.<span class=\"title function_\">write</span>(<span class=\"string\">&quot;&lt;h1&gt;Hello world!&lt;/h1&gt;&quot;</span>);</span><br><span class=\"line\">    res.<span class=\"title function_\">end</span>(<span class=\"string\">&quot;&lt;p&gt;NodeJs&lt;/p&gt;&quot;</span>);</span><br><span class=\"line\">&#125;).<span class=\"title function_\">listen</span>(<span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Server start at port 3000!&quot;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>运行<code>node app.js</code>命令，打开浏览器访问<a href=\"http://127.0.0.1:3000，即可看到输出。\">http://127.0.0.1:3000，即可看到输出。</a></p>\n<p><code>listen</code>函数中创建了事件监听器，使得Node.js进程不会退出事件循环。</p>\n<h2 id=\"异步式I-x2F-O与事件式编程\"><a href=\"#异步式I-x2F-O与事件式编程\" class=\"headerlink\" title=\"异步式I&#x2F;O与事件式编程\"></a>异步式I&#x2F;O与事件式编程</h2><p>NodeJs最大的特点就是异步式I&#x2F;O（或者非阻塞I&#x2F;O）与事件紧密结合的编程模式。控制流很大程度上要靠事件和回调函数来组织，一个逻辑要拆分为若干个单元。</p>\n<h3 id=\"阻塞与线程\"><a href=\"#阻塞与线程\" class=\"headerlink\" title=\"阻塞与线程\"></a>阻塞与线程</h3><h3 id=\"回调函数\"><a href=\"#回调函数\" class=\"headerlink\" title=\"回调函数\"></a>回调函数</h3><p>在NodeJs中如何用异步的方式读取一个文件，下面是一个例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// readFile.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;fs&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">fs.<span class=\"title function_\">readFile</span>(<span class=\"string\">&quot;server.js&quot;</span>, <span class=\"string\">&quot;utf-8&quot;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">err, data</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;file read err!&quot;</span>);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;End!&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>运行文件会发现，首先输出“End!”，然后才是读取文件的内容！</p>\n<p>NodeJs也支持同步读取文件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//readFile.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;fs&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> data = fs.<span class=\"title function_\">readFileSync</span>(<span class=\"string\">&quot;server.js&quot;</span>, <span class=\"string\">&quot;utf-8&quot;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;End!&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>运行文件，先输出文件内容，最后输出”End!”</p>\n<p>异步式I&#x2F;O是通过回调函数来实现的。fs.readFile接收了三个参数，第一个是文件名，第二个是编码方式，第三个是一个函数，我们称这个函数为回调函数。</p>\n<p><strong>NodeJs中，并不是所有的API都提供了同步和异步版本。Node.js不鼓励使用同步I&#x2F;O。</strong></p>\n<h3 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a>事件</h3><p>NodeJs所有的异步I&#x2F;O操作在完成时都会发送一个事件到事件队列。事件由<code>EventEmitter</code>对象提供</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//event.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">EventEmitter</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;events&quot;</span>).<span class=\"property\">EventEmitter</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> event = <span class=\"keyword\">new</span> <span class=\"title class_\">EventEmitter</span>();</span><br><span class=\"line\">event.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;some_event&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;some_event occured&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    event.<span class=\"title function_\">emit</span>(<span class=\"string\">&quot;some_event&quot;</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n\n<p>运行这段代码，1秒后控制台输出了<code>some_event occured</code>。其原理是<code>event</code>对象注册了事件<code>some_event</code>的一个监听器，然后我们通过<code>setTimeout</code>在1000毫秒以后向<code>event</code>对象发送事件<code>some_event</code>，此时会调用<code>some_event</code>的监听器。</p>\n<p>NodeJs程序由事件循环开始，到事件循环结束，所有的逻辑都是事件的回调函数，所以NodeJs始终在事件循环中，程序入口就是事件循环第一个事件的回调函数。事件的回调函数在执行的过程中，可能会发出I&#x2F;O请求或直接发射（emit）事件，执行完毕后再返回事件循环，事件循环会检查事件队列中有没有未处理的事件，直到程序结束。</p>\n<h3 id=\"模块和包\"><a href=\"#模块和包\" class=\"headerlink\" title=\"模块和包\"></a>模块和包</h3><p>NodeJs提供了require函数来调用其他模块，而且模块都是基于文件的，机制十分简单。</p>\n<p>NodeJs提供了<code>exports</code>和<code>require</code>两个对象，其中<code>exports</code>是模块公开的接口，<code>require</code>用于从外部获取一个模块的接口，即所获取模块的<code>exports</code>对象。</p>\n<p>让我们以一个例子来了解模块。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// module.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> name;</span><br><span class=\"line\"><span class=\"built_in\">exports</span>.<span class=\"property\">setName</span> = <span class=\"keyword\">function</span>(<span class=\"params\">thyName</span>)&#123;</span><br><span class=\"line\">    name = thyName;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">exports</span>.<span class=\"property\">getName</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Hello &quot;</span> + name);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编写getModule.js</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// getModule.js</span><br><span class=\"line\">var myModule = require(&quot;./module&quot;);</span><br><span class=\"line\">myModule.setName(&quot;Hak&quot;);</span><br><span class=\"line\">myModule.getName();</span><br></pre></td></tr></table></figure>\n\n<p>运行<code>getModule.js</code>会输出： <code>Hello Hak</code></p>\n<p><strong>单次加载</strong></p>\n<p>上面这个例子有点类似于创建一个对象，但实际上和对象又有本质的区别，因为require不会重复加载模块，也就是说无论调用多少次require，获得的模块都是同一个。</p>\n<p>我们在getModule.js的基础上稍作修改：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myModule1 = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;./module&quot;</span>);</span><br><span class=\"line\">myModule1.<span class=\"title function_\">setName</span>(<span class=\"string\">&quot;Hak&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> myModule2 = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;./module&quot;</span>);</span><br><span class=\"line\">myModule2.<span class=\"title function_\">setName</span>(<span class=\"string\">&quot;Jack&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">myModule1.<span class=\"title function_\">getName</span>();</span><br></pre></td></tr></table></figure>\n<p>运行后发现输出结果是： Hello Jack。这是因为myModule1 和myModule2指向的是同一个实例，前者的结果被后者覆盖。</p>\n<p>事实上，exports本身仅仅是一个普通的空对象，即{}，它专门用来声明接口，本质上是通过它为模块闭包<br>的内部建立了一个有限的访问接口。因为它没有任何特殊的地方，所以可以用其他东西来代替。</p>\n<p><strong>不可以通过对exports直接赋值代替对module.exports赋值。exports实际上只是一个和module.exports指向同一个对象的变量，它本身会在模块执行结束后释放，但module不会，因此只能通过指定module.exports来改变访问接口。</strong></p>\n<h3 id=\"模块和包-1\"><a href=\"#模块和包-1\" class=\"headerlink\" title=\"模块和包\"></a>模块和包</h3><p>npm是NodeJs官方提供的包管理工具。npm提供了命令行工具，使你可以方便地下载、安装、升级、删除包，也可以让你作为开发者发布并维护包。</p>\n<p>在使用npm安装包的时候，有两种模式：本地模式和全局模式。默认情况下我们使用npm install命令就是采用本地模式，即把包安装到当前目录的node_modules子目录下。</p>\n<p>npm还有另一种不同的安装模式被成为全局模式，使用方法为：</p>\n<pre><code> npm install -g [page_name]\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>模式</th>\n<th>可通过require使用</th>\n<th>注册PATH</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>本地模式</td>\n<td>是</td>\n<td>否</td>\n</tr>\n<tr>\n<td>全局模式</td>\n<td>否</td>\n<td>是</td>\n</tr>\n</tbody></table>\n<p>当我们要把某个包作为工程运行时的一部分时，通过本地模式获取，如果要在命令行下使用，则使用全局模式安装。</p>\n<h2 id=\"调试\"><a href=\"#调试\" class=\"headerlink\" title=\"调试\"></a>调试</h2><h3 id=\"命令行调试\"><a href=\"#命令行调试\" class=\"headerlink\" title=\"命令行调试\"></a>命令行调试</h3><p>NodeJs支持命令行下的单步调试。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// debug.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"string\">&#x27;world&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> c =<span class=\"keyword\">function</span>(<span class=\"params\">x</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;hello&#x27;</span> + x + a);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"title function_\">c</span>(b);</span><br></pre></td></tr></table></figure>\n\n<p>在命令行下执行<code>node debug debug.js</code>，将会启动调试工具：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3248493-5a5a44a085d529dc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>这样就打开了一个NodeJs的调试终端。可以用一些基本的命令进行单步跟踪调试。</p>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>run</td>\n<td>执行脚本在第一行暂停</td>\n</tr>\n<tr>\n<td>restart</td>\n<td>重新执行脚本</td>\n</tr>\n<tr>\n<td>cont, c</td>\n<td>继续执行，直到遇到下一个断点</td>\n</tr>\n<tr>\n<td>next, n</td>\n<td>单步执行</td>\n</tr>\n<tr>\n<td>step, s</td>\n<td>单步执行并进入函数</td>\n</tr>\n<tr>\n<td>kill</td>\n<td>终止当前执行的脚本</td>\n</tr>\n<tr>\n<td>…</td>\n<td>…</td>\n</tr>\n</tbody></table>\n<h3 id=\"远程调试\"><a href=\"#远程调试\" class=\"headerlink\" title=\"远程调试\"></a>远程调试</h3><p>V8提供的调试功能是基于TCP协议的，因此Node.js可以轻松地实现远程调试。在命令行下使用以下两个语句之一可以打开调试服务器。</p>\n<pre><code>node --debug[=port] script.js\nnode --debug-brk[=port] script.js\n</code></pre>\n<h3 id=\"利用工具\"><a href=\"#利用工具\" class=\"headerlink\" title=\"利用工具\"></a>利用工具</h3><h3 id=\"使用node-inspector调试NodeJs\"><a href=\"#使用node-inspector调试NodeJs\" class=\"headerlink\" title=\"使用node-inspector调试NodeJs\"></a>使用node-inspector调试NodeJs</h3>","site":{"data":{}},"excerpt":"<blockquote>\n<p>本学习笔记是根据《Node.js开发指南》一书进行学习。前面的几篇是根据《深入浅出Node.js》学习，但是学习到第三四章关于异步I&#x2F;O和异步编程时，就暂时先放弃了，主要因为那本书讲的有点深，更多从底层说起，对于从来没有接触过NodeJs的同学来说，学习起来有一些难度。《Node.js开发指南》这本书比较适合新手学习。当然本人也算新手。</p>\n</blockquote>\n<h2 id=\"开始用NodeJs编程\"><a href=\"#开始用NodeJs编程\" class=\"headerlink\" title=\"开始用NodeJs编程\"></a>开始用NodeJs编程</h2><h3 id=\"Hello-World\"><a href=\"#Hello-World\" class=\"headerlink\" title=\"Hello World\"></a>Hello World</h3><p>创建<code>hello.js</code>编写如下代码：</p>\n<pre><code>conlose.log(&quot;Hello World&quot;)\n</code></pre>\n<p>打开终端，进入<code>hello.js</code>所在目录，执行命令：</p>\n<pre><code>node hello.js\n</code></pre>\n<p><code>console.log</code>是我们最常用的输出指令,它和C语言中的<code>printf</code>的功能类似,也可以接受任意多个参数,支持<code>%d</code>、<code>%s</code>变量引用。</p>\n<pre><code>console.log(&quot;%d&quot;, 1000)\n</code></pre>","more":"<h3 id=\"建立HTTP服务器\"><a href=\"#建立HTTP服务器\" class=\"headerlink\" title=\"建立HTTP服务器\"></a>建立HTTP服务器</h3><p>Node.js将“HTTP服务器”这一层抽离,直接面向浏览器用户。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3248493-a60384e1e638e02d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Node.js与PHP的架构\"></p>\n<p>让我们创建一个HTTP服务，建立一个名为app.js的文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// app.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;http&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">http.<span class=\"title function_\">createServer</span>(<span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>)&#123;</span><br><span class=\"line\">    res.<span class=\"title function_\">writeHead</span>(<span class=\"number\">200</span>, &#123;<span class=\"string\">&quot;Content-Type&quot;</span>: <span class=\"string\">&quot;text/html&quot;</span>&#125;);</span><br><span class=\"line\">    res.<span class=\"title function_\">write</span>(<span class=\"string\">&quot;&lt;h1&gt;Hello world!&lt;/h1&gt;&quot;</span>);</span><br><span class=\"line\">    res.<span class=\"title function_\">end</span>(<span class=\"string\">&quot;&lt;p&gt;NodeJs&lt;/p&gt;&quot;</span>);</span><br><span class=\"line\">&#125;).<span class=\"title function_\">listen</span>(<span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Server start at port 3000!&quot;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>运行<code>node app.js</code>命令，打开浏览器访问<a href=\"http://127.0.0.1:3000，即可看到输出。\">http://127.0.0.1:3000，即可看到输出。</a></p>\n<p><code>listen</code>函数中创建了事件监听器，使得Node.js进程不会退出事件循环。</p>\n<h2 id=\"异步式I-x2F-O与事件式编程\"><a href=\"#异步式I-x2F-O与事件式编程\" class=\"headerlink\" title=\"异步式I&#x2F;O与事件式编程\"></a>异步式I&#x2F;O与事件式编程</h2><p>NodeJs最大的特点就是异步式I&#x2F;O（或者非阻塞I&#x2F;O）与事件紧密结合的编程模式。控制流很大程度上要靠事件和回调函数来组织，一个逻辑要拆分为若干个单元。</p>\n<h3 id=\"阻塞与线程\"><a href=\"#阻塞与线程\" class=\"headerlink\" title=\"阻塞与线程\"></a>阻塞与线程</h3><h3 id=\"回调函数\"><a href=\"#回调函数\" class=\"headerlink\" title=\"回调函数\"></a>回调函数</h3><p>在NodeJs中如何用异步的方式读取一个文件，下面是一个例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// readFile.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;fs&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">fs.<span class=\"title function_\">readFile</span>(<span class=\"string\">&quot;server.js&quot;</span>, <span class=\"string\">&quot;utf-8&quot;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">err, data</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;file read err!&quot;</span>);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;End!&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>运行文件会发现，首先输出“End!”，然后才是读取文件的内容！</p>\n<p>NodeJs也支持同步读取文件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//readFile.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;fs&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> data = fs.<span class=\"title function_\">readFileSync</span>(<span class=\"string\">&quot;server.js&quot;</span>, <span class=\"string\">&quot;utf-8&quot;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;End!&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>运行文件，先输出文件内容，最后输出”End!”</p>\n<p>异步式I&#x2F;O是通过回调函数来实现的。fs.readFile接收了三个参数，第一个是文件名，第二个是编码方式，第三个是一个函数，我们称这个函数为回调函数。</p>\n<p><strong>NodeJs中，并不是所有的API都提供了同步和异步版本。Node.js不鼓励使用同步I&#x2F;O。</strong></p>\n<h3 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a>事件</h3><p>NodeJs所有的异步I&#x2F;O操作在完成时都会发送一个事件到事件队列。事件由<code>EventEmitter</code>对象提供</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//event.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">EventEmitter</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;events&quot;</span>).<span class=\"property\">EventEmitter</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> event = <span class=\"keyword\">new</span> <span class=\"title class_\">EventEmitter</span>();</span><br><span class=\"line\">event.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;some_event&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;some_event occured&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    event.<span class=\"title function_\">emit</span>(<span class=\"string\">&quot;some_event&quot;</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n\n<p>运行这段代码，1秒后控制台输出了<code>some_event occured</code>。其原理是<code>event</code>对象注册了事件<code>some_event</code>的一个监听器，然后我们通过<code>setTimeout</code>在1000毫秒以后向<code>event</code>对象发送事件<code>some_event</code>，此时会调用<code>some_event</code>的监听器。</p>\n<p>NodeJs程序由事件循环开始，到事件循环结束，所有的逻辑都是事件的回调函数，所以NodeJs始终在事件循环中，程序入口就是事件循环第一个事件的回调函数。事件的回调函数在执行的过程中，可能会发出I&#x2F;O请求或直接发射（emit）事件，执行完毕后再返回事件循环，事件循环会检查事件队列中有没有未处理的事件，直到程序结束。</p>\n<h3 id=\"模块和包\"><a href=\"#模块和包\" class=\"headerlink\" title=\"模块和包\"></a>模块和包</h3><p>NodeJs提供了require函数来调用其他模块，而且模块都是基于文件的，机制十分简单。</p>\n<p>NodeJs提供了<code>exports</code>和<code>require</code>两个对象，其中<code>exports</code>是模块公开的接口，<code>require</code>用于从外部获取一个模块的接口，即所获取模块的<code>exports</code>对象。</p>\n<p>让我们以一个例子来了解模块。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// module.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> name;</span><br><span class=\"line\"><span class=\"built_in\">exports</span>.<span class=\"property\">setName</span> = <span class=\"keyword\">function</span>(<span class=\"params\">thyName</span>)&#123;</span><br><span class=\"line\">    name = thyName;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">exports</span>.<span class=\"property\">getName</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Hello &quot;</span> + name);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编写getModule.js</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// getModule.js</span><br><span class=\"line\">var myModule = require(&quot;./module&quot;);</span><br><span class=\"line\">myModule.setName(&quot;Hak&quot;);</span><br><span class=\"line\">myModule.getName();</span><br></pre></td></tr></table></figure>\n\n<p>运行<code>getModule.js</code>会输出： <code>Hello Hak</code></p>\n<p><strong>单次加载</strong></p>\n<p>上面这个例子有点类似于创建一个对象，但实际上和对象又有本质的区别，因为require不会重复加载模块，也就是说无论调用多少次require，获得的模块都是同一个。</p>\n<p>我们在getModule.js的基础上稍作修改：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myModule1 = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;./module&quot;</span>);</span><br><span class=\"line\">myModule1.<span class=\"title function_\">setName</span>(<span class=\"string\">&quot;Hak&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> myModule2 = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;./module&quot;</span>);</span><br><span class=\"line\">myModule2.<span class=\"title function_\">setName</span>(<span class=\"string\">&quot;Jack&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">myModule1.<span class=\"title function_\">getName</span>();</span><br></pre></td></tr></table></figure>\n<p>运行后发现输出结果是： Hello Jack。这是因为myModule1 和myModule2指向的是同一个实例，前者的结果被后者覆盖。</p>\n<p>事实上，exports本身仅仅是一个普通的空对象，即{}，它专门用来声明接口，本质上是通过它为模块闭包<br>的内部建立了一个有限的访问接口。因为它没有任何特殊的地方，所以可以用其他东西来代替。</p>\n<p><strong>不可以通过对exports直接赋值代替对module.exports赋值。exports实际上只是一个和module.exports指向同一个对象的变量，它本身会在模块执行结束后释放，但module不会，因此只能通过指定module.exports来改变访问接口。</strong></p>\n<h3 id=\"模块和包-1\"><a href=\"#模块和包-1\" class=\"headerlink\" title=\"模块和包\"></a>模块和包</h3><p>npm是NodeJs官方提供的包管理工具。npm提供了命令行工具，使你可以方便地下载、安装、升级、删除包，也可以让你作为开发者发布并维护包。</p>\n<p>在使用npm安装包的时候，有两种模式：本地模式和全局模式。默认情况下我们使用npm install命令就是采用本地模式，即把包安装到当前目录的node_modules子目录下。</p>\n<p>npm还有另一种不同的安装模式被成为全局模式，使用方法为：</p>\n<pre><code> npm install -g [page_name]\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>模式</th>\n<th>可通过require使用</th>\n<th>注册PATH</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>本地模式</td>\n<td>是</td>\n<td>否</td>\n</tr>\n<tr>\n<td>全局模式</td>\n<td>否</td>\n<td>是</td>\n</tr>\n</tbody></table>\n<p>当我们要把某个包作为工程运行时的一部分时，通过本地模式获取，如果要在命令行下使用，则使用全局模式安装。</p>\n<h2 id=\"调试\"><a href=\"#调试\" class=\"headerlink\" title=\"调试\"></a>调试</h2><h3 id=\"命令行调试\"><a href=\"#命令行调试\" class=\"headerlink\" title=\"命令行调试\"></a>命令行调试</h3><p>NodeJs支持命令行下的单步调试。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// debug.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"string\">&#x27;world&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> c =<span class=\"keyword\">function</span>(<span class=\"params\">x</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;hello&#x27;</span> + x + a);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"title function_\">c</span>(b);</span><br></pre></td></tr></table></figure>\n\n<p>在命令行下执行<code>node debug debug.js</code>，将会启动调试工具：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3248493-5a5a44a085d529dc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>这样就打开了一个NodeJs的调试终端。可以用一些基本的命令进行单步跟踪调试。</p>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>run</td>\n<td>执行脚本在第一行暂停</td>\n</tr>\n<tr>\n<td>restart</td>\n<td>重新执行脚本</td>\n</tr>\n<tr>\n<td>cont, c</td>\n<td>继续执行，直到遇到下一个断点</td>\n</tr>\n<tr>\n<td>next, n</td>\n<td>单步执行</td>\n</tr>\n<tr>\n<td>step, s</td>\n<td>单步执行并进入函数</td>\n</tr>\n<tr>\n<td>kill</td>\n<td>终止当前执行的脚本</td>\n</tr>\n<tr>\n<td>…</td>\n<td>…</td>\n</tr>\n</tbody></table>\n<h3 id=\"远程调试\"><a href=\"#远程调试\" class=\"headerlink\" title=\"远程调试\"></a>远程调试</h3><p>V8提供的调试功能是基于TCP协议的，因此Node.js可以轻松地实现远程调试。在命令行下使用以下两个语句之一可以打开调试服务器。</p>\n<pre><code>node --debug[=port] script.js\nnode --debug-brk[=port] script.js\n</code></pre>\n<h3 id=\"利用工具\"><a href=\"#利用工具\" class=\"headerlink\" title=\"利用工具\"></a>利用工具</h3><h3 id=\"使用node-inspector调试NodeJs\"><a href=\"#使用node-inspector调试NodeJs\" class=\"headerlink\" title=\"使用node-inspector调试NodeJs\"></a>使用node-inspector调试NodeJs</h3>"},{"title":"(二)NodeJs模块机制和异步IO","date":"2017-10-22T16:00:00.000Z","_content":"\n> 说明：该学习笔记参考《深入浅出Node.js》在学习过程中，添加了自己的理解和适当的补充！仅供参考！\n\n# NodeJsmo模块机制\n\n## CommonJs的模块规范\n\n### 模块引用\n\n示例代码如下：\n\n```js\nvar math = require(\"math\");\n```\n\n在CommonJs规范中，存在`require()`方法，这个方法接受模块标识，以此引入一个模块的API到当前上下文中。\n\n<!--more-->\n\n### 模块定义\n\n在模块中，上下文提供`require()`方法来引入外部模块。对应引入的功能，上下文提供了`exports`对象用于导出当前模块的方法或者变量，并且它是唯一到处的出口。在模块中，还存在一个`module`对象，它代表模块自身，而`exports`是`module`的属性。在NodeJs中一个文件就是一个模块，将方法挂载在`exports`对象上可作为属性即可定义导出的方式：\n\n```js\n//math.js\n\nexports.add = function(){\n\tvar sum = 0,\n\ti = 0,\n\targs = arguments,\n\tl = args.length;\n\twhile(i < 1){\n\t\tsum += args[i++];\n\t}\n\treturn sum;\n}\n```\n在另一个文件中通过require()方法引入模块后，就能调用定义的属性和方法了，\n\n```js\n//program.js\nvar math = require(\"./math\");\nexports.iscrement = function(val){\n\treturn math.add(val, 1);\n};\n```\n\n这里，`math.js`和`program.js`在同一级目录下，最后在`program.js`中`require(\"./math\")`。\n\n### 模块标识\n\n模块标识其实就是通过传递给`require()`方法的参数，它必须是符合小驼峰命名的字符串，或者是以`.`、`..`开头的相对路径，或者是绝对路径，它可以没有文件后缀.js\n\n每个模块具有独立的空间，它们相互不干扰，在引用时也显得干净利落。这套模块导出和引用机制使得用户完全不必考虑变量污染，命名空间等。\n\n## NodeJs的模块实现\n\n在NodeJs中引入模块，需要经历以下三个步骤：\n\n- 1 路径分析\n- 2 文件定位\n- 3 编译执行\n\n模块分为两大类：\n\n- 核心模块，有NodeJs提供的模块。\n- 文件模块，有用户编写的模块。\n\n### 优先从缓存加载\n\nNodeJs对引入过的模块都会进行缓存，缓存的是编译和执行之后的对象。\n\n不管是核心模块还是文件模块，`require()`方法对相同模块的二次加载都一律采用缓存优先。不同的是核心模块的缓存先于文件模块的缓存检查。\n\n### 路径分析和文件定位\n\n**模块标识符**主要分为以下几类：\n\n- 核心模块，如`http`，`fs`， `path`\n- `.`或者`..`开始的相对路径文件模块\n- 以`/` 开始的绝对路径文件模块\n- 非路径形式的文件模块，如自定义的`connect`模块自定义模块\n\n如果试图加载一个与核心模块标识符相同的，那是不会成功的。想要加载成功，必须选择一个不同的标识符或者换用路径的方式。\n\n自定义模块的查找是最费时间的。\n\n模块路径是NodeJs在定义文件模块的具体文件时定制的查找策略，具体表现为一个路径组成的数组。它的生成方式与JavaScript的原型链或作用域链的查找方式十分类似。在加载的的过程中，NodeJs会逐个尝试模块路径中的路径，直到找到目标文件为止。\n\n```js\n// moudle_path.js\nconsole.log(module.paths);\n```\n**文件定位**\nrequire()在分析标识符的过程中，会出现标识符中不包含文件扩展名的情况。CommonJs模块规范也允许标识符中不包含文件扩展名，这种情况下，NodeJs会按`.js` 、`.json`、`.node`的次序补足扩展名，依次尝试。\n\n\n![文件定位流程图](http://upload-images.jianshu.io/upload_images/3248493-7e36a65fa76a1983.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n在尝试的过程中，需要调用fs模块同步阻塞式地判断文件是否存在，由于NodeJs是单线程的，所以这里会引起一个性能问题。\n\n**如果是`.node`和`.json`文件，在传递给`require()`的标识符中带上扩展名，会加快一些速度。**\n**同步配合缓存，可以大幅度缓解NodeJs单线程中阻塞式调用的缺陷。**\n\n\n在分析标识符的过程中，`require()`通过分析文件扩展名之后，可能没有查找到对应文件，但却得到一个目录，这在引入自定义模块和逐个模块路径精心查找时经常会出现，此时NodeJs会将目录当成一个包来处理。\n\n### 模块编译\n\n在NodeJs中，每个文件都是一个对象，它的定义如下：\n\n```js\nfunction Module(id, parent){\n    this.id = id;\n    this.exports = {};\n    this.parent = parent;\n    if (parent && parent.children){\n        parent.children.push(this);\n    }\n\n    this.filename = null;\n    this.loaded = false;\n    this.children = [];\n}\n```\n\n定位到文件之后，NodeJs会新建一个模块对象，然后根据路径载入并编译。不同的文件拓展名，其载入的方法有所不同。\n- `.js`文件，通过fs模块同步读取文件后编译执行。\n- .`node`，这是C/C++编写的拓展文件，通过`dlopen()`方法加载最后编译生成的文件。\n- `.json`，通过fs模块同步读取文件后，用`JSON.parse()`解析后返回结果。\n- 其余扩展名文件，当作.js文件载入。\n\n每一个编译成功的模块都会将其文件路径作为索引缓存在 `Module._cache` 对象上,以提高二次引入的性能。\n\n**JavaScript模块的编译**\n\n每个模块文件中存在着 `require` 、 `exports` 、 `module` 这3个变量,在编译的过程中,Node对获取的JavaScript文件内容进行了头尾包装。在头部添加了 `(function (exports, require, module, __filename, __dirname) {\\n` ,在尾部添加了` \\n});` 。一个正常的JavaScript文件会被包装成如下的样子:\n\n```js\n(function (exports, require, module, __filename, __dirname) {\n    var math = require('math');\n    exports.area = function (radius) {\n      return Math.PI * radius * radius;\n    };\n});\n```\n这 样 每 个 模 块 文 件 之 间 都 进 行 了 作 用 域 隔 离 。 包 装 之 后 的 代 码 会 通 过 `vm` 原 生 模 块 的`runInThisContext ()` 方法执行(类似 `eval` ,只是具有明确上下文,不污染全局),返回一个具体的`function` 对象。\n\n`exports` 对象是通过形参的方式传入的,直接赋值形参会改变形参的引用,但并不能改变作用域外的值。\n\n```js\nvar change = function (a){\n  a = 100;\n  console.log(a);  // 100\n}\nvar a = 10;\nchange(a);\nconsole.log(a);  // 10\n```\n\n**C/C++模块的编译**\n\n**JSON文件的编译**\n\nNodeJs利用 `fs` 模块同步读取`JSON`文件的内容之后,调用 `JSON.parse ()` 方法得到对象,然后将它赋给模块对象的 `exports` ,以供外部调用。\n\n### NodeJs核心模块\n\nNodeJs的核心模块在编译成可执行文件的过程中被编译进了二进制文件。核心模块其实分为C/C++编写的和JavaScript编写的两部分,其中C/C++文件存放在Node项目的src目录下,JavaScript文件存放在lib目录下。\n\nNodeJs的 `buffer` 、`crypto` 、 `evals` 、 `fs` 、 `os` 等模块都是部分通过C/C++编写的。\n\n\n![依赖层次关系](http://upload-images.jianshu.io/upload_images/3248493-177b481df1694dcc.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**JavaScript的一个典型弱点就是位运算。JavaScript的位运算参照Java的位运算实现,但是Java位运算是在 int 型数字的基础上进行的,而JavaScript中只有 double 型的数据类型,在进行位运算的过程中,需要将 double 型转换为 int 型,然后再进行。所以,在JavaScript层面上做位运算的效率不高。**\n\n## 包与 NPM\n\nCommonJS的包规范的定义其实也十分简单,它由包结构和包描述文件两个部分组成,前者用于组织包中的各种文件,后者则用于描述包的相关信息,以供外部读取分析。\n\n![包组织模块示意图](http://upload-images.jianshu.io/upload_images/3248493-e2dd8a0f9932e25e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n包实际上是一个存档文件,即一个目录直接打包为.zip或tar.gz格式的文件,安装后解压还原为目录。完全符合CommonJS规范的包目录应该包含如下这些文件。\n\n- package.json:包描述文件。\n- bin:用于存放可执行二进制文件的目录。\n- lib:用于存放JavaScript代码的目录。\n- doc:用于存放文档的目录。\n- test:用于存放单元测试用例的代码。\n\n包描述文件用于表达非代码相关的信息,它是一个JSON格式的文件——package.json,位于包的根目录下,是包的重要组成部分。而NPM的所有行为都与包描述文件的字段息息相关。\n\n对于NodeJs而言,NPM帮助完成了第三方模块的发布、安装和依赖等。借助NPM,Node与第三方模块之间形成了很好的一个生态系统。借助NPM,可以帮助用户快速安装和管理依赖包。\n\n### NPM常用功能\n\n**查看帮助**\n\n- 在安装Node之后,执行 npm –v 命令可以查看当前NPM的版本\n\n\n    npm -v\n\n\n- 在不熟悉NPM的命令之前,可以直接执行NPM查看到帮助引导说明\n\n\n    npm\n\n- 安装依赖包是NPM最常见的用法,它的执行语句是\n\n\n    npm install express\n\nNPM会在**当前目录**下创建node_modules目录,然后在node_modules目录下创建express目录,接着将包解压到这个目录下。\n\n- 进行全局模式安装\n\n\n    npm install express –g\n\n需要注意的是,全局模式并不是将一个模块包安装为一个全局包的意思,它**并不意味着可以从任何地方通过 `require()` 来引用到它**。实际上, `-g` 是将一个包安装为全局可用的可执行命令。它根据包描述文件中的 bin 字段配置,将实际脚本链接到与NodeJs可执行文件相同的路径下。\n\n- 如果不能通过官方源安装,可以通过镜像源安装，在执行命令时,添加 `--registry=http://registry.url `即可\n\n\n    npm install underscore --registry=http://registry.url\n\n如果使用过程中几乎都采用镜像源安装,可以执行以下命令指定默认源\n\n    npm config set registry http://registry.url\n\n\n在执行 `npm uninstall <package> `时, `uninstall` 指向的脚本也许会\n做一些清理工作等。\n\n- 分析出当前路径下能够通过模块路径找到的所有包,并生成依赖树\n\n\n    npm ls\n\n\n# 异步I/O","source":"_posts/(二)NodeJs模块机制和异步IO.md","raw":"---\ntitle: (二)NodeJs模块机制和异步IO\ndate: 2017-10-23\ntags: [NodeJs, 阅读笔记]\n---\n\n> 说明：该学习笔记参考《深入浅出Node.js》在学习过程中，添加了自己的理解和适当的补充！仅供参考！\n\n# NodeJsmo模块机制\n\n## CommonJs的模块规范\n\n### 模块引用\n\n示例代码如下：\n\n```js\nvar math = require(\"math\");\n```\n\n在CommonJs规范中，存在`require()`方法，这个方法接受模块标识，以此引入一个模块的API到当前上下文中。\n\n<!--more-->\n\n### 模块定义\n\n在模块中，上下文提供`require()`方法来引入外部模块。对应引入的功能，上下文提供了`exports`对象用于导出当前模块的方法或者变量，并且它是唯一到处的出口。在模块中，还存在一个`module`对象，它代表模块自身，而`exports`是`module`的属性。在NodeJs中一个文件就是一个模块，将方法挂载在`exports`对象上可作为属性即可定义导出的方式：\n\n```js\n//math.js\n\nexports.add = function(){\n\tvar sum = 0,\n\ti = 0,\n\targs = arguments,\n\tl = args.length;\n\twhile(i < 1){\n\t\tsum += args[i++];\n\t}\n\treturn sum;\n}\n```\n在另一个文件中通过require()方法引入模块后，就能调用定义的属性和方法了，\n\n```js\n//program.js\nvar math = require(\"./math\");\nexports.iscrement = function(val){\n\treturn math.add(val, 1);\n};\n```\n\n这里，`math.js`和`program.js`在同一级目录下，最后在`program.js`中`require(\"./math\")`。\n\n### 模块标识\n\n模块标识其实就是通过传递给`require()`方法的参数，它必须是符合小驼峰命名的字符串，或者是以`.`、`..`开头的相对路径，或者是绝对路径，它可以没有文件后缀.js\n\n每个模块具有独立的空间，它们相互不干扰，在引用时也显得干净利落。这套模块导出和引用机制使得用户完全不必考虑变量污染，命名空间等。\n\n## NodeJs的模块实现\n\n在NodeJs中引入模块，需要经历以下三个步骤：\n\n- 1 路径分析\n- 2 文件定位\n- 3 编译执行\n\n模块分为两大类：\n\n- 核心模块，有NodeJs提供的模块。\n- 文件模块，有用户编写的模块。\n\n### 优先从缓存加载\n\nNodeJs对引入过的模块都会进行缓存，缓存的是编译和执行之后的对象。\n\n不管是核心模块还是文件模块，`require()`方法对相同模块的二次加载都一律采用缓存优先。不同的是核心模块的缓存先于文件模块的缓存检查。\n\n### 路径分析和文件定位\n\n**模块标识符**主要分为以下几类：\n\n- 核心模块，如`http`，`fs`， `path`\n- `.`或者`..`开始的相对路径文件模块\n- 以`/` 开始的绝对路径文件模块\n- 非路径形式的文件模块，如自定义的`connect`模块自定义模块\n\n如果试图加载一个与核心模块标识符相同的，那是不会成功的。想要加载成功，必须选择一个不同的标识符或者换用路径的方式。\n\n自定义模块的查找是最费时间的。\n\n模块路径是NodeJs在定义文件模块的具体文件时定制的查找策略，具体表现为一个路径组成的数组。它的生成方式与JavaScript的原型链或作用域链的查找方式十分类似。在加载的的过程中，NodeJs会逐个尝试模块路径中的路径，直到找到目标文件为止。\n\n```js\n// moudle_path.js\nconsole.log(module.paths);\n```\n**文件定位**\nrequire()在分析标识符的过程中，会出现标识符中不包含文件扩展名的情况。CommonJs模块规范也允许标识符中不包含文件扩展名，这种情况下，NodeJs会按`.js` 、`.json`、`.node`的次序补足扩展名，依次尝试。\n\n\n![文件定位流程图](http://upload-images.jianshu.io/upload_images/3248493-7e36a65fa76a1983.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n在尝试的过程中，需要调用fs模块同步阻塞式地判断文件是否存在，由于NodeJs是单线程的，所以这里会引起一个性能问题。\n\n**如果是`.node`和`.json`文件，在传递给`require()`的标识符中带上扩展名，会加快一些速度。**\n**同步配合缓存，可以大幅度缓解NodeJs单线程中阻塞式调用的缺陷。**\n\n\n在分析标识符的过程中，`require()`通过分析文件扩展名之后，可能没有查找到对应文件，但却得到一个目录，这在引入自定义模块和逐个模块路径精心查找时经常会出现，此时NodeJs会将目录当成一个包来处理。\n\n### 模块编译\n\n在NodeJs中，每个文件都是一个对象，它的定义如下：\n\n```js\nfunction Module(id, parent){\n    this.id = id;\n    this.exports = {};\n    this.parent = parent;\n    if (parent && parent.children){\n        parent.children.push(this);\n    }\n\n    this.filename = null;\n    this.loaded = false;\n    this.children = [];\n}\n```\n\n定位到文件之后，NodeJs会新建一个模块对象，然后根据路径载入并编译。不同的文件拓展名，其载入的方法有所不同。\n- `.js`文件，通过fs模块同步读取文件后编译执行。\n- .`node`，这是C/C++编写的拓展文件，通过`dlopen()`方法加载最后编译生成的文件。\n- `.json`，通过fs模块同步读取文件后，用`JSON.parse()`解析后返回结果。\n- 其余扩展名文件，当作.js文件载入。\n\n每一个编译成功的模块都会将其文件路径作为索引缓存在 `Module._cache` 对象上,以提高二次引入的性能。\n\n**JavaScript模块的编译**\n\n每个模块文件中存在着 `require` 、 `exports` 、 `module` 这3个变量,在编译的过程中,Node对获取的JavaScript文件内容进行了头尾包装。在头部添加了 `(function (exports, require, module, __filename, __dirname) {\\n` ,在尾部添加了` \\n});` 。一个正常的JavaScript文件会被包装成如下的样子:\n\n```js\n(function (exports, require, module, __filename, __dirname) {\n    var math = require('math');\n    exports.area = function (radius) {\n      return Math.PI * radius * radius;\n    };\n});\n```\n这 样 每 个 模 块 文 件 之 间 都 进 行 了 作 用 域 隔 离 。 包 装 之 后 的 代 码 会 通 过 `vm` 原 生 模 块 的`runInThisContext ()` 方法执行(类似 `eval` ,只是具有明确上下文,不污染全局),返回一个具体的`function` 对象。\n\n`exports` 对象是通过形参的方式传入的,直接赋值形参会改变形参的引用,但并不能改变作用域外的值。\n\n```js\nvar change = function (a){\n  a = 100;\n  console.log(a);  // 100\n}\nvar a = 10;\nchange(a);\nconsole.log(a);  // 10\n```\n\n**C/C++模块的编译**\n\n**JSON文件的编译**\n\nNodeJs利用 `fs` 模块同步读取`JSON`文件的内容之后,调用 `JSON.parse ()` 方法得到对象,然后将它赋给模块对象的 `exports` ,以供外部调用。\n\n### NodeJs核心模块\n\nNodeJs的核心模块在编译成可执行文件的过程中被编译进了二进制文件。核心模块其实分为C/C++编写的和JavaScript编写的两部分,其中C/C++文件存放在Node项目的src目录下,JavaScript文件存放在lib目录下。\n\nNodeJs的 `buffer` 、`crypto` 、 `evals` 、 `fs` 、 `os` 等模块都是部分通过C/C++编写的。\n\n\n![依赖层次关系](http://upload-images.jianshu.io/upload_images/3248493-177b481df1694dcc.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**JavaScript的一个典型弱点就是位运算。JavaScript的位运算参照Java的位运算实现,但是Java位运算是在 int 型数字的基础上进行的,而JavaScript中只有 double 型的数据类型,在进行位运算的过程中,需要将 double 型转换为 int 型,然后再进行。所以,在JavaScript层面上做位运算的效率不高。**\n\n## 包与 NPM\n\nCommonJS的包规范的定义其实也十分简单,它由包结构和包描述文件两个部分组成,前者用于组织包中的各种文件,后者则用于描述包的相关信息,以供外部读取分析。\n\n![包组织模块示意图](http://upload-images.jianshu.io/upload_images/3248493-e2dd8a0f9932e25e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n包实际上是一个存档文件,即一个目录直接打包为.zip或tar.gz格式的文件,安装后解压还原为目录。完全符合CommonJS规范的包目录应该包含如下这些文件。\n\n- package.json:包描述文件。\n- bin:用于存放可执行二进制文件的目录。\n- lib:用于存放JavaScript代码的目录。\n- doc:用于存放文档的目录。\n- test:用于存放单元测试用例的代码。\n\n包描述文件用于表达非代码相关的信息,它是一个JSON格式的文件——package.json,位于包的根目录下,是包的重要组成部分。而NPM的所有行为都与包描述文件的字段息息相关。\n\n对于NodeJs而言,NPM帮助完成了第三方模块的发布、安装和依赖等。借助NPM,Node与第三方模块之间形成了很好的一个生态系统。借助NPM,可以帮助用户快速安装和管理依赖包。\n\n### NPM常用功能\n\n**查看帮助**\n\n- 在安装Node之后,执行 npm –v 命令可以查看当前NPM的版本\n\n\n    npm -v\n\n\n- 在不熟悉NPM的命令之前,可以直接执行NPM查看到帮助引导说明\n\n\n    npm\n\n- 安装依赖包是NPM最常见的用法,它的执行语句是\n\n\n    npm install express\n\nNPM会在**当前目录**下创建node_modules目录,然后在node_modules目录下创建express目录,接着将包解压到这个目录下。\n\n- 进行全局模式安装\n\n\n    npm install express –g\n\n需要注意的是,全局模式并不是将一个模块包安装为一个全局包的意思,它**并不意味着可以从任何地方通过 `require()` 来引用到它**。实际上, `-g` 是将一个包安装为全局可用的可执行命令。它根据包描述文件中的 bin 字段配置,将实际脚本链接到与NodeJs可执行文件相同的路径下。\n\n- 如果不能通过官方源安装,可以通过镜像源安装，在执行命令时,添加 `--registry=http://registry.url `即可\n\n\n    npm install underscore --registry=http://registry.url\n\n如果使用过程中几乎都采用镜像源安装,可以执行以下命令指定默认源\n\n    npm config set registry http://registry.url\n\n\n在执行 `npm uninstall <package> `时, `uninstall` 指向的脚本也许会\n做一些清理工作等。\n\n- 分析出当前路径下能够通过模块路径找到的所有包,并生成依赖树\n\n\n    npm ls\n\n\n# 异步I/O","slug":"(二)NodeJs模块机制和异步IO","published":1,"updated":"2021-06-20T10:25:20.122Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluqa1hi60004rlog3z6c51lg","content":"<blockquote>\n<p>说明：该学习笔记参考《深入浅出Node.js》在学习过程中，添加了自己的理解和适当的补充！仅供参考！</p>\n</blockquote>\n<h1 id=\"NodeJsmo模块机制\"><a href=\"#NodeJsmo模块机制\" class=\"headerlink\" title=\"NodeJsmo模块机制\"></a>NodeJsmo模块机制</h1><h2 id=\"CommonJs的模块规范\"><a href=\"#CommonJs的模块规范\" class=\"headerlink\" title=\"CommonJs的模块规范\"></a>CommonJs的模块规范</h2><h3 id=\"模块引用\"><a href=\"#模块引用\" class=\"headerlink\" title=\"模块引用\"></a>模块引用</h3><p>示例代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> math = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;math&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>在CommonJs规范中，存在<code>require()</code>方法，这个方法接受模块标识，以此引入一个模块的API到当前上下文中。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"模块定义\"><a href=\"#模块定义\" class=\"headerlink\" title=\"模块定义\"></a>模块定义</h3><p>在模块中，上下文提供<code>require()</code>方法来引入外部模块。对应引入的功能，上下文提供了<code>exports</code>对象用于导出当前模块的方法或者变量，并且它是唯一到处的出口。在模块中，还存在一个<code>module</code>对象，它代表模块自身，而<code>exports</code>是<code>module</code>的属性。在NodeJs中一个文件就是一个模块，将方法挂载在<code>exports</code>对象上可作为属性即可定义导出的方式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//math.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">exports</span>.<span class=\"property\">add</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>,</span><br><span class=\"line\">\ti = <span class=\"number\">0</span>,</span><br><span class=\"line\">\targs = <span class=\"variable language_\">arguments</span>,</span><br><span class=\"line\">\tl = args.<span class=\"property\">length</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(i &lt; <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">\t\tsum += args[i++];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在另一个文件中通过require()方法引入模块后，就能调用定义的属性和方法了，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//program.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> math = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;./math&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">exports</span>.<span class=\"property\">iscrement</span> = <span class=\"keyword\">function</span>(<span class=\"params\">val</span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> math.<span class=\"title function_\">add</span>(val, <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>这里，<code>math.js</code>和<code>program.js</code>在同一级目录下，最后在<code>program.js</code>中<code>require(&quot;./math&quot;)</code>。</p>\n<h3 id=\"模块标识\"><a href=\"#模块标识\" class=\"headerlink\" title=\"模块标识\"></a>模块标识</h3><p>模块标识其实就是通过传递给<code>require()</code>方法的参数，它必须是符合小驼峰命名的字符串，或者是以<code>.</code>、<code>..</code>开头的相对路径，或者是绝对路径，它可以没有文件后缀.js</p>\n<p>每个模块具有独立的空间，它们相互不干扰，在引用时也显得干净利落。这套模块导出和引用机制使得用户完全不必考虑变量污染，命名空间等。</p>\n<h2 id=\"NodeJs的模块实现\"><a href=\"#NodeJs的模块实现\" class=\"headerlink\" title=\"NodeJs的模块实现\"></a>NodeJs的模块实现</h2><p>在NodeJs中引入模块，需要经历以下三个步骤：</p>\n<ul>\n<li>1 路径分析</li>\n<li>2 文件定位</li>\n<li>3 编译执行</li>\n</ul>\n<p>模块分为两大类：</p>\n<ul>\n<li>核心模块，有NodeJs提供的模块。</li>\n<li>文件模块，有用户编写的模块。</li>\n</ul>\n<h3 id=\"优先从缓存加载\"><a href=\"#优先从缓存加载\" class=\"headerlink\" title=\"优先从缓存加载\"></a>优先从缓存加载</h3><p>NodeJs对引入过的模块都会进行缓存，缓存的是编译和执行之后的对象。</p>\n<p>不管是核心模块还是文件模块，<code>require()</code>方法对相同模块的二次加载都一律采用缓存优先。不同的是核心模块的缓存先于文件模块的缓存检查。</p>\n<h3 id=\"路径分析和文件定位\"><a href=\"#路径分析和文件定位\" class=\"headerlink\" title=\"路径分析和文件定位\"></a>路径分析和文件定位</h3><p><strong>模块标识符</strong>主要分为以下几类：</p>\n<ul>\n<li>核心模块，如<code>http</code>，<code>fs</code>， <code>path</code></li>\n<li><code>.</code>或者<code>..</code>开始的相对路径文件模块</li>\n<li>以<code>/</code> 开始的绝对路径文件模块</li>\n<li>非路径形式的文件模块，如自定义的<code>connect</code>模块自定义模块</li>\n</ul>\n<p>如果试图加载一个与核心模块标识符相同的，那是不会成功的。想要加载成功，必须选择一个不同的标识符或者换用路径的方式。</p>\n<p>自定义模块的查找是最费时间的。</p>\n<p>模块路径是NodeJs在定义文件模块的具体文件时定制的查找策略，具体表现为一个路径组成的数组。它的生成方式与JavaScript的原型链或作用域链的查找方式十分类似。在加载的的过程中，NodeJs会逐个尝试模块路径中的路径，直到找到目标文件为止。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// moudle_path.js</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">module</span>.<span class=\"property\">paths</span>);</span><br></pre></td></tr></table></figure>\n<p><strong>文件定位</strong><br>require()在分析标识符的过程中，会出现标识符中不包含文件扩展名的情况。CommonJs模块规范也允许标识符中不包含文件扩展名，这种情况下，NodeJs会按<code>.js</code> 、<code>.json</code>、<code>.node</code>的次序补足扩展名，依次尝试。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3248493-7e36a65fa76a1983.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"文件定位流程图\"></p>\n<p>在尝试的过程中，需要调用fs模块同步阻塞式地判断文件是否存在，由于NodeJs是单线程的，所以这里会引起一个性能问题。</p>\n<p><strong>如果是<code>.node</code>和<code>.json</code>文件，在传递给<code>require()</code>的标识符中带上扩展名，会加快一些速度。</strong><br><strong>同步配合缓存，可以大幅度缓解NodeJs单线程中阻塞式调用的缺陷。</strong></p>\n<p>在分析标识符的过程中，<code>require()</code>通过分析文件扩展名之后，可能没有查找到对应文件，但却得到一个目录，这在引入自定义模块和逐个模块路径精心查找时经常会出现，此时NodeJs会将目录当成一个包来处理。</p>\n<h3 id=\"模块编译\"><a href=\"#模块编译\" class=\"headerlink\" title=\"模块编译\"></a>模块编译</h3><p>在NodeJs中，每个文件都是一个对象，它的定义如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Module</span>(<span class=\"params\">id, parent</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">id</span> = id;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">exports</span> = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">parent</span> = parent;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (parent &amp;&amp; parent.<span class=\"property\">children</span>)&#123;</span><br><span class=\"line\">        parent.<span class=\"property\">children</span>.<span class=\"title function_\">push</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">filename</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">loaded</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">children</span> = [];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>定位到文件之后，NodeJs会新建一个模块对象，然后根据路径载入并编译。不同的文件拓展名，其载入的方法有所不同。</p>\n<ul>\n<li><code>.js</code>文件，通过fs模块同步读取文件后编译执行。</li>\n<li>.<code>node</code>，这是C&#x2F;C++编写的拓展文件，通过<code>dlopen()</code>方法加载最后编译生成的文件。</li>\n<li><code>.json</code>，通过fs模块同步读取文件后，用<code>JSON.parse()</code>解析后返回结果。</li>\n<li>其余扩展名文件，当作.js文件载入。</li>\n</ul>\n<p>每一个编译成功的模块都会将其文件路径作为索引缓存在 <code>Module._cache</code> 对象上,以提高二次引入的性能。</p>\n<p><strong>JavaScript模块的编译</strong></p>\n<p>每个模块文件中存在着 <code>require</code> 、 <code>exports</code> 、 <code>module</code> 这3个变量,在编译的过程中,Node对获取的JavaScript文件内容进行了头尾包装。在头部添加了 <code>(function (exports, require, module, __filename, __dirname) &#123;\\n</code> ,在尾部添加了<code> \\n&#125;);</code> 。一个正常的JavaScript文件会被包装成如下的样子:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">function</span> (<span class=\"params\"><span class=\"built_in\">exports</span>, <span class=\"built_in\">require</span>, <span class=\"variable language_\">module</span>, __filename, __dirname</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> math = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;math&#x27;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">exports</span>.<span class=\"property\">area</span> = <span class=\"keyword\">function</span> (<span class=\"params\">radius</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"title class_\">Math</span>.<span class=\"property\">PI</span> * radius * radius;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>这 样 每 个 模 块 文 件 之 间 都 进 行 了 作 用 域 隔 离 。 包 装 之 后 的 代 码 会 通 过 <code>vm</code> 原 生 模 块 的<code>runInThisContext ()</code> 方法执行(类似 <code>eval</code> ,只是具有明确上下文,不污染全局),返回一个具体的<code>function</code> 对象。</p>\n<p><code>exports</code> 对象是通过形参的方式传入的,直接赋值形参会改变形参的引用,但并不能改变作用域外的值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> change = <span class=\"keyword\">function</span> (<span class=\"params\">a</span>)&#123;</span><br><span class=\"line\">  a = <span class=\"number\">100</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);  <span class=\"comment\">// 100</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"title function_\">change</span>(a);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);  <span class=\"comment\">// 10</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>C&#x2F;C++模块的编译</strong></p>\n<p><strong>JSON文件的编译</strong></p>\n<p>NodeJs利用 <code>fs</code> 模块同步读取<code>JSON</code>文件的内容之后,调用 <code>JSON.parse ()</code> 方法得到对象,然后将它赋给模块对象的 <code>exports</code> ,以供外部调用。</p>\n<h3 id=\"NodeJs核心模块\"><a href=\"#NodeJs核心模块\" class=\"headerlink\" title=\"NodeJs核心模块\"></a>NodeJs核心模块</h3><p>NodeJs的核心模块在编译成可执行文件的过程中被编译进了二进制文件。核心模块其实分为C&#x2F;C++编写的和JavaScript编写的两部分,其中C&#x2F;C++文件存放在Node项目的src目录下,JavaScript文件存放在lib目录下。</p>\n<p>NodeJs的 <code>buffer</code> 、<code>crypto</code> 、 <code>evals</code> 、 <code>fs</code> 、 <code>os</code> 等模块都是部分通过C&#x2F;C++编写的。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3248493-177b481df1694dcc.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"依赖层次关系\"></p>\n<p><strong>JavaScript的一个典型弱点就是位运算。JavaScript的位运算参照Java的位运算实现,但是Java位运算是在 int 型数字的基础上进行的,而JavaScript中只有 double 型的数据类型,在进行位运算的过程中,需要将 double 型转换为 int 型,然后再进行。所以,在JavaScript层面上做位运算的效率不高。</strong></p>\n<h2 id=\"包与-NPM\"><a href=\"#包与-NPM\" class=\"headerlink\" title=\"包与 NPM\"></a>包与 NPM</h2><p>CommonJS的包规范的定义其实也十分简单,它由包结构和包描述文件两个部分组成,前者用于组织包中的各种文件,后者则用于描述包的相关信息,以供外部读取分析。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3248493-e2dd8a0f9932e25e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"包组织模块示意图\"></p>\n<p>包实际上是一个存档文件,即一个目录直接打包为.zip或tar.gz格式的文件,安装后解压还原为目录。完全符合CommonJS规范的包目录应该包含如下这些文件。</p>\n<ul>\n<li>package.json:包描述文件。</li>\n<li>bin:用于存放可执行二进制文件的目录。</li>\n<li>lib:用于存放JavaScript代码的目录。</li>\n<li>doc:用于存放文档的目录。</li>\n<li>test:用于存放单元测试用例的代码。</li>\n</ul>\n<p>包描述文件用于表达非代码相关的信息,它是一个JSON格式的文件——package.json,位于包的根目录下,是包的重要组成部分。而NPM的所有行为都与包描述文件的字段息息相关。</p>\n<p>对于NodeJs而言,NPM帮助完成了第三方模块的发布、安装和依赖等。借助NPM,Node与第三方模块之间形成了很好的一个生态系统。借助NPM,可以帮助用户快速安装和管理依赖包。</p>\n<h3 id=\"NPM常用功能\"><a href=\"#NPM常用功能\" class=\"headerlink\" title=\"NPM常用功能\"></a>NPM常用功能</h3><p><strong>查看帮助</strong></p>\n<ul>\n<li><p>在安装Node之后,执行 npm –v 命令可以查看当前NPM的版本</p>\n<p>  npm -v</p>\n</li>\n<li><p>在不熟悉NPM的命令之前,可以直接执行NPM查看到帮助引导说明</p>\n<p>  npm</p>\n</li>\n<li><p>安装依赖包是NPM最常见的用法,它的执行语句是</p>\n<p>  npm install express</p>\n</li>\n</ul>\n<p>NPM会在<strong>当前目录</strong>下创建node_modules目录,然后在node_modules目录下创建express目录,接着将包解压到这个目录下。</p>\n<ul>\n<li><p>进行全局模式安装</p>\n<p>  npm install express –g</p>\n</li>\n</ul>\n<p>需要注意的是,全局模式并不是将一个模块包安装为一个全局包的意思,它<strong>并不意味着可以从任何地方通过 <code>require()</code> 来引用到它</strong>。实际上, <code>-g</code> 是将一个包安装为全局可用的可执行命令。它根据包描述文件中的 bin 字段配置,将实际脚本链接到与NodeJs可执行文件相同的路径下。</p>\n<ul>\n<li><p>如果不能通过官方源安装,可以通过镜像源安装，在执行命令时,添加 <code>--registry=http://registry.url </code>即可</p>\n<p>  npm install underscore –registry&#x3D;<a href=\"http://registry.url/\">http://registry.url</a></p>\n</li>\n</ul>\n<p>如果使用过程中几乎都采用镜像源安装,可以执行以下命令指定默认源</p>\n<pre><code>npm config set registry http://registry.url\n</code></pre>\n<p>在执行 <code>npm uninstall &lt;package&gt; </code>时, <code>uninstall</code> 指向的脚本也许会<br>做一些清理工作等。</p>\n<ul>\n<li><p>分析出当前路径下能够通过模块路径找到的所有包,并生成依赖树</p>\n<p>  npm ls</p>\n</li>\n</ul>\n<h1 id=\"异步I-x2F-O\"><a href=\"#异步I-x2F-O\" class=\"headerlink\" title=\"异步I&#x2F;O\"></a>异步I&#x2F;O</h1>","site":{"data":{}},"excerpt":"<blockquote>\n<p>说明：该学习笔记参考《深入浅出Node.js》在学习过程中，添加了自己的理解和适当的补充！仅供参考！</p>\n</blockquote>\n<h1 id=\"NodeJsmo模块机制\"><a href=\"#NodeJsmo模块机制\" class=\"headerlink\" title=\"NodeJsmo模块机制\"></a>NodeJsmo模块机制</h1><h2 id=\"CommonJs的模块规范\"><a href=\"#CommonJs的模块规范\" class=\"headerlink\" title=\"CommonJs的模块规范\"></a>CommonJs的模块规范</h2><h3 id=\"模块引用\"><a href=\"#模块引用\" class=\"headerlink\" title=\"模块引用\"></a>模块引用</h3><p>示例代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> math = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;math&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>在CommonJs规范中，存在<code>require()</code>方法，这个方法接受模块标识，以此引入一个模块的API到当前上下文中。</p>","more":"<h3 id=\"模块定义\"><a href=\"#模块定义\" class=\"headerlink\" title=\"模块定义\"></a>模块定义</h3><p>在模块中，上下文提供<code>require()</code>方法来引入外部模块。对应引入的功能，上下文提供了<code>exports</code>对象用于导出当前模块的方法或者变量，并且它是唯一到处的出口。在模块中，还存在一个<code>module</code>对象，它代表模块自身，而<code>exports</code>是<code>module</code>的属性。在NodeJs中一个文件就是一个模块，将方法挂载在<code>exports</code>对象上可作为属性即可定义导出的方式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//math.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">exports</span>.<span class=\"property\">add</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>,</span><br><span class=\"line\">\ti = <span class=\"number\">0</span>,</span><br><span class=\"line\">\targs = <span class=\"variable language_\">arguments</span>,</span><br><span class=\"line\">\tl = args.<span class=\"property\">length</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(i &lt; <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">\t\tsum += args[i++];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在另一个文件中通过require()方法引入模块后，就能调用定义的属性和方法了，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//program.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> math = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;./math&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">exports</span>.<span class=\"property\">iscrement</span> = <span class=\"keyword\">function</span>(<span class=\"params\">val</span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> math.<span class=\"title function_\">add</span>(val, <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>这里，<code>math.js</code>和<code>program.js</code>在同一级目录下，最后在<code>program.js</code>中<code>require(&quot;./math&quot;)</code>。</p>\n<h3 id=\"模块标识\"><a href=\"#模块标识\" class=\"headerlink\" title=\"模块标识\"></a>模块标识</h3><p>模块标识其实就是通过传递给<code>require()</code>方法的参数，它必须是符合小驼峰命名的字符串，或者是以<code>.</code>、<code>..</code>开头的相对路径，或者是绝对路径，它可以没有文件后缀.js</p>\n<p>每个模块具有独立的空间，它们相互不干扰，在引用时也显得干净利落。这套模块导出和引用机制使得用户完全不必考虑变量污染，命名空间等。</p>\n<h2 id=\"NodeJs的模块实现\"><a href=\"#NodeJs的模块实现\" class=\"headerlink\" title=\"NodeJs的模块实现\"></a>NodeJs的模块实现</h2><p>在NodeJs中引入模块，需要经历以下三个步骤：</p>\n<ul>\n<li>1 路径分析</li>\n<li>2 文件定位</li>\n<li>3 编译执行</li>\n</ul>\n<p>模块分为两大类：</p>\n<ul>\n<li>核心模块，有NodeJs提供的模块。</li>\n<li>文件模块，有用户编写的模块。</li>\n</ul>\n<h3 id=\"优先从缓存加载\"><a href=\"#优先从缓存加载\" class=\"headerlink\" title=\"优先从缓存加载\"></a>优先从缓存加载</h3><p>NodeJs对引入过的模块都会进行缓存，缓存的是编译和执行之后的对象。</p>\n<p>不管是核心模块还是文件模块，<code>require()</code>方法对相同模块的二次加载都一律采用缓存优先。不同的是核心模块的缓存先于文件模块的缓存检查。</p>\n<h3 id=\"路径分析和文件定位\"><a href=\"#路径分析和文件定位\" class=\"headerlink\" title=\"路径分析和文件定位\"></a>路径分析和文件定位</h3><p><strong>模块标识符</strong>主要分为以下几类：</p>\n<ul>\n<li>核心模块，如<code>http</code>，<code>fs</code>， <code>path</code></li>\n<li><code>.</code>或者<code>..</code>开始的相对路径文件模块</li>\n<li>以<code>/</code> 开始的绝对路径文件模块</li>\n<li>非路径形式的文件模块，如自定义的<code>connect</code>模块自定义模块</li>\n</ul>\n<p>如果试图加载一个与核心模块标识符相同的，那是不会成功的。想要加载成功，必须选择一个不同的标识符或者换用路径的方式。</p>\n<p>自定义模块的查找是最费时间的。</p>\n<p>模块路径是NodeJs在定义文件模块的具体文件时定制的查找策略，具体表现为一个路径组成的数组。它的生成方式与JavaScript的原型链或作用域链的查找方式十分类似。在加载的的过程中，NodeJs会逐个尝试模块路径中的路径，直到找到目标文件为止。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// moudle_path.js</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">module</span>.<span class=\"property\">paths</span>);</span><br></pre></td></tr></table></figure>\n<p><strong>文件定位</strong><br>require()在分析标识符的过程中，会出现标识符中不包含文件扩展名的情况。CommonJs模块规范也允许标识符中不包含文件扩展名，这种情况下，NodeJs会按<code>.js</code> 、<code>.json</code>、<code>.node</code>的次序补足扩展名，依次尝试。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3248493-7e36a65fa76a1983.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"文件定位流程图\"></p>\n<p>在尝试的过程中，需要调用fs模块同步阻塞式地判断文件是否存在，由于NodeJs是单线程的，所以这里会引起一个性能问题。</p>\n<p><strong>如果是<code>.node</code>和<code>.json</code>文件，在传递给<code>require()</code>的标识符中带上扩展名，会加快一些速度。</strong><br><strong>同步配合缓存，可以大幅度缓解NodeJs单线程中阻塞式调用的缺陷。</strong></p>\n<p>在分析标识符的过程中，<code>require()</code>通过分析文件扩展名之后，可能没有查找到对应文件，但却得到一个目录，这在引入自定义模块和逐个模块路径精心查找时经常会出现，此时NodeJs会将目录当成一个包来处理。</p>\n<h3 id=\"模块编译\"><a href=\"#模块编译\" class=\"headerlink\" title=\"模块编译\"></a>模块编译</h3><p>在NodeJs中，每个文件都是一个对象，它的定义如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Module</span>(<span class=\"params\">id, parent</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">id</span> = id;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">exports</span> = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">parent</span> = parent;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (parent &amp;&amp; parent.<span class=\"property\">children</span>)&#123;</span><br><span class=\"line\">        parent.<span class=\"property\">children</span>.<span class=\"title function_\">push</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">filename</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">loaded</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">children</span> = [];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>定位到文件之后，NodeJs会新建一个模块对象，然后根据路径载入并编译。不同的文件拓展名，其载入的方法有所不同。</p>\n<ul>\n<li><code>.js</code>文件，通过fs模块同步读取文件后编译执行。</li>\n<li>.<code>node</code>，这是C&#x2F;C++编写的拓展文件，通过<code>dlopen()</code>方法加载最后编译生成的文件。</li>\n<li><code>.json</code>，通过fs模块同步读取文件后，用<code>JSON.parse()</code>解析后返回结果。</li>\n<li>其余扩展名文件，当作.js文件载入。</li>\n</ul>\n<p>每一个编译成功的模块都会将其文件路径作为索引缓存在 <code>Module._cache</code> 对象上,以提高二次引入的性能。</p>\n<p><strong>JavaScript模块的编译</strong></p>\n<p>每个模块文件中存在着 <code>require</code> 、 <code>exports</code> 、 <code>module</code> 这3个变量,在编译的过程中,Node对获取的JavaScript文件内容进行了头尾包装。在头部添加了 <code>(function (exports, require, module, __filename, __dirname) &#123;\\n</code> ,在尾部添加了<code> \\n&#125;);</code> 。一个正常的JavaScript文件会被包装成如下的样子:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">function</span> (<span class=\"params\"><span class=\"built_in\">exports</span>, <span class=\"built_in\">require</span>, <span class=\"variable language_\">module</span>, __filename, __dirname</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> math = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;math&#x27;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">exports</span>.<span class=\"property\">area</span> = <span class=\"keyword\">function</span> (<span class=\"params\">radius</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"title class_\">Math</span>.<span class=\"property\">PI</span> * radius * radius;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>这 样 每 个 模 块 文 件 之 间 都 进 行 了 作 用 域 隔 离 。 包 装 之 后 的 代 码 会 通 过 <code>vm</code> 原 生 模 块 的<code>runInThisContext ()</code> 方法执行(类似 <code>eval</code> ,只是具有明确上下文,不污染全局),返回一个具体的<code>function</code> 对象。</p>\n<p><code>exports</code> 对象是通过形参的方式传入的,直接赋值形参会改变形参的引用,但并不能改变作用域外的值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> change = <span class=\"keyword\">function</span> (<span class=\"params\">a</span>)&#123;</span><br><span class=\"line\">  a = <span class=\"number\">100</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);  <span class=\"comment\">// 100</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"title function_\">change</span>(a);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);  <span class=\"comment\">// 10</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>C&#x2F;C++模块的编译</strong></p>\n<p><strong>JSON文件的编译</strong></p>\n<p>NodeJs利用 <code>fs</code> 模块同步读取<code>JSON</code>文件的内容之后,调用 <code>JSON.parse ()</code> 方法得到对象,然后将它赋给模块对象的 <code>exports</code> ,以供外部调用。</p>\n<h3 id=\"NodeJs核心模块\"><a href=\"#NodeJs核心模块\" class=\"headerlink\" title=\"NodeJs核心模块\"></a>NodeJs核心模块</h3><p>NodeJs的核心模块在编译成可执行文件的过程中被编译进了二进制文件。核心模块其实分为C&#x2F;C++编写的和JavaScript编写的两部分,其中C&#x2F;C++文件存放在Node项目的src目录下,JavaScript文件存放在lib目录下。</p>\n<p>NodeJs的 <code>buffer</code> 、<code>crypto</code> 、 <code>evals</code> 、 <code>fs</code> 、 <code>os</code> 等模块都是部分通过C&#x2F;C++编写的。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3248493-177b481df1694dcc.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"依赖层次关系\"></p>\n<p><strong>JavaScript的一个典型弱点就是位运算。JavaScript的位运算参照Java的位运算实现,但是Java位运算是在 int 型数字的基础上进行的,而JavaScript中只有 double 型的数据类型,在进行位运算的过程中,需要将 double 型转换为 int 型,然后再进行。所以,在JavaScript层面上做位运算的效率不高。</strong></p>\n<h2 id=\"包与-NPM\"><a href=\"#包与-NPM\" class=\"headerlink\" title=\"包与 NPM\"></a>包与 NPM</h2><p>CommonJS的包规范的定义其实也十分简单,它由包结构和包描述文件两个部分组成,前者用于组织包中的各种文件,后者则用于描述包的相关信息,以供外部读取分析。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3248493-e2dd8a0f9932e25e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"包组织模块示意图\"></p>\n<p>包实际上是一个存档文件,即一个目录直接打包为.zip或tar.gz格式的文件,安装后解压还原为目录。完全符合CommonJS规范的包目录应该包含如下这些文件。</p>\n<ul>\n<li>package.json:包描述文件。</li>\n<li>bin:用于存放可执行二进制文件的目录。</li>\n<li>lib:用于存放JavaScript代码的目录。</li>\n<li>doc:用于存放文档的目录。</li>\n<li>test:用于存放单元测试用例的代码。</li>\n</ul>\n<p>包描述文件用于表达非代码相关的信息,它是一个JSON格式的文件——package.json,位于包的根目录下,是包的重要组成部分。而NPM的所有行为都与包描述文件的字段息息相关。</p>\n<p>对于NodeJs而言,NPM帮助完成了第三方模块的发布、安装和依赖等。借助NPM,Node与第三方模块之间形成了很好的一个生态系统。借助NPM,可以帮助用户快速安装和管理依赖包。</p>\n<h3 id=\"NPM常用功能\"><a href=\"#NPM常用功能\" class=\"headerlink\" title=\"NPM常用功能\"></a>NPM常用功能</h3><p><strong>查看帮助</strong></p>\n<ul>\n<li><p>在安装Node之后,执行 npm –v 命令可以查看当前NPM的版本</p>\n<p>  npm -v</p>\n</li>\n<li><p>在不熟悉NPM的命令之前,可以直接执行NPM查看到帮助引导说明</p>\n<p>  npm</p>\n</li>\n<li><p>安装依赖包是NPM最常见的用法,它的执行语句是</p>\n<p>  npm install express</p>\n</li>\n</ul>\n<p>NPM会在<strong>当前目录</strong>下创建node_modules目录,然后在node_modules目录下创建express目录,接着将包解压到这个目录下。</p>\n<ul>\n<li><p>进行全局模式安装</p>\n<p>  npm install express –g</p>\n</li>\n</ul>\n<p>需要注意的是,全局模式并不是将一个模块包安装为一个全局包的意思,它<strong>并不意味着可以从任何地方通过 <code>require()</code> 来引用到它</strong>。实际上, <code>-g</code> 是将一个包安装为全局可用的可执行命令。它根据包描述文件中的 bin 字段配置,将实际脚本链接到与NodeJs可执行文件相同的路径下。</p>\n<ul>\n<li><p>如果不能通过官方源安装,可以通过镜像源安装，在执行命令时,添加 <code>--registry=http://registry.url </code>即可</p>\n<p>  npm install underscore –registry&#x3D;<a href=\"http://registry.url/\">http://registry.url</a></p>\n</li>\n</ul>\n<p>如果使用过程中几乎都采用镜像源安装,可以执行以下命令指定默认源</p>\n<pre><code>npm config set registry http://registry.url\n</code></pre>\n<p>在执行 <code>npm uninstall &lt;package&gt; </code>时, <code>uninstall</code> 指向的脚本也许会<br>做一些清理工作等。</p>\n<ul>\n<li><p>分析出当前路径下能够通过模块路径找到的所有包,并生成依赖树</p>\n<p>  npm ls</p>\n</li>\n</ul>\n<h1 id=\"异步I-x2F-O\"><a href=\"#异步I-x2F-O\" class=\"headerlink\" title=\"异步I&#x2F;O\"></a>异步I&#x2F;O</h1>"},{"title":"(五)NodeJs构建web应用","date":"2017-10-26T16:00:00.000Z","_content":"\n> 说明：该学习笔记参考《Node.js开发指南》，但是选用的模板和书中不同，添加了自己的理解和适当的补充！仅供参考！\n\n我们打算从零开始用Node.js实现一个微博系统,功能包括路由控制、页面模板、数据库访问、用户注册、登录、用户会话等内容。在这里我们会使用Express框架、MVC设计模式、Jkig模板和MongoDB数据库的操作。\n\n## 构建项目\n\n###1 Express 应用生成器\n\n通过应用生成器工具 express 可以快速创建一个应用的骨架。执行一下命令进行安装到全局环境中\n\n    npm install express-generator -g\n\n<!-- more -->\n\n![安装应用生成器.png](http://upload-images.jianshu.io/upload_images/3248493-3d62a95537360ce1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n我们可以看到同时安装了一些依赖。在当前目录下创建`blog`的应用。\n\n    express blog\n\n创建完成后进入应用。应用目录如下：\n\n![目录结构](http://upload-images.jianshu.io/upload_images/3248493-8d3c92208166060f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n然后安装所有依赖包。\n\n    npm install\n\n启动项目。\n\n（windows下）\n\n    set DEBUG=blog & npm start\n\n（Linux平台下）\n\n    DEBUG=blog npm start\n\n打开浏览器，访问`http://127.0.0.1:3000`即可看到应用。\n\n## 选定swig模板引擎\n\nexpress构建的应用默认使用ejs模板引擎，本人觉得这种奇怪的东东暂时难以接受，之前做过django的项目，最后选定swig，也比较看好它！\n\n###1 安装swig\n\n    npm install swig\n\n###2 在app.js中配置如下：\n\n```\nvar swig = require('swig');\n\nvar swig  = new swig.Swig();\napp.engine('html', swig.readerFile);\napp.set('view engine', 'html');\n```\n\n###3 模板编写\n\n移除`views`下的`*.jade`，创建同名的`*.html`。\n\n编写`index.html`\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>index</title>\n</head>\n<body>\n    Welcome, {{ title }}\n</body>\n</html>\n```\n\n启动服务\n\n    set DEBUG=blog &npm start\n\n打开浏览器访问`http://127.0.0.1:3000`，能够看到：Welcome, Express\n\n## 使用Bootstrap和界面设计\n\n我们选定Bootstrap开始设计我们的界面。首先[下载](http://v3.bootcss.com/getting-started/#download)，解压之后，将文件夹改名为`bootstrap-dist`并放在`public/`中，同时下载最新的jquery，放在`public/javascripts/`中。\n\n![添加bootstrap文件夹到项目中](http://upload-images.jianshu.io/upload_images/3248493-64988b292b7d5378.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n这里补充一下**Swig的使用**[参考](http://www.cnblogs.com/elementstorm/p/3142644.html)。\n\n修改`layout.html`中的代码：\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>{% block title %}My Blog{% endblock %}</title>\n    {% block head %}\n        <link rel=\"stylesheet\" href=\"/bootstrap-dist/css/bootstrap.min.css\">\n    {% endblock %}\n</head>\n<body>\n    {% block content %}{% endblock %}\n    <script src=\"/javascripts/jquery-3.2.1.js\"></script>\n    <script src=\"/bootstrap-dist/js/bootstrap.js\"></script>\n</body>\n</html>\n```\n\n在`views/`下创建`login.html`，并编写代码如下：\n\n```html\n{% extends 'layout.html' %}\n\n{% block title %}用户登录{% endblock %}\n\n{% block content %}\n\n    <div class=\"container\" style=\"margin-top: 30px;\">\n        <div class=\"row clearfix\">\n            <div class=\"col-md-12 column\">\n                <form class=\"form-horizontal\" role=\"form\" method=\"post\" action=\"/users/login\">\n                    <div class=\"form-group\">\n                         <label for=\"inputEmail3\" class=\"col-sm-2 control-label\">用户名</label>\n                        <div class=\"col-sm-10\">\n                            <input type=\"text\" class=\"form-control\" id=\"inputText3\" />\n                        </div>\n                    </div>\n                    <div class=\"form-group\">\n                         <label for=\"inputPassword3\" class=\"col-sm-2 control-label\">密码</label>\n                        <div class=\"col-sm-10\">\n                            <input type=\"password\" class=\"form-control\" id=\"inputPassword3\" />\n                        </div>\n                    </div>\n                    <div class=\"form-group\">\n                        <div class=\"col-sm-offset-2 col-sm-10\">\n                            <div class=\"checkbox\">\n                                 <label><input type=\"checkbox\" />记住我</label>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"form-group\">\n                        <div class=\"col-sm-offset-2 col-sm-10\">\n                             <button type=\"submit\" class=\"btn btn-default\">登陆</button>\n                        </div>\n                    </div>\n                </form>\n            </div>\n        </div>\n    </div>\n\n{% endblock %}\n```\n\n目前登录的界面已经创建完成，接下来就是添加路由了。修改`routes/users.js`文件，添加`login` GET视图后文件中代码如下：\n\n```js\nvar express = require('express');\nvar router = express.Router();\n\n/* GET users listing. */\nrouter.get('/', function(req, res, next) {\n  res.send('respond with a resource');\n});\n\n\nrouter.get('/login', function(req, res){\n    res.render('login');\n})\n\nmodule.exports = router;\n```\n\n重新启动服务，浏览器访问[http://127.0.0.1:3000/users/login](http://127.0.0.1:3000/users/login)，即可以看到登录输入框，则成功！\n\n\n![登录界面](http://upload-images.jianshu.io/upload_images/3248493-ec03d6cd5bef8840.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## 数据持久化——MongoDB\n\n从官网[下载](https://www.mongodb.com/download-center#community)并安装。\n\n### 连接数据库\n\n打开工\n程目录中的package.json，在`dependencies`属性中添加以下代码代码:\n\n    \"connect-mongo\": \">= 0.1.7\",\n    \"mongodb\": \">= 0.9.9\"\n\n然后运行`npm install`更新依赖的模块。接下来在工程的目录中创建`settings.js`文件，这个文件用于保存数据库的连接信息。\n\n将用到的数据库起名为`blog`：\n\n```\nmodule.exports = {\n    cookieSecret: \"blogid\",\n    db: \"blog\",\n    host: \"localhost\",\n    port: 27017\n};\n```\n\n`db`是数据库的名称，`host`是数据库的地址，`port`是数据库的端口。`cookieSecret`用于`Cookie`加密与数据库无关，我们留作后用。\n\n接下来在项目中创建`modules`目录，然后在其下中创建`db.js`：\n\n```js\nvar settings = require(\"../settings\");\nvar mongodb = require(\"mongodb\");\nvar Db = mongodb.Db;\nvar Server = mongodb.Server;\n\nmodule.exports = new Db(settings.db, new Server(settings.host, settings.port, {}));\n```\n\n以上代码通过`module.exports`输出了创建的数据库连接。\n\n### 会话支持\n\n打开`app.js`添加以下内容：\n\n```js\nvar session = require('express-session');\nvar settings = require('./settings');\nvar MongoStore = require('connect-mongo')(session);\n\napp.use(session({\n    secret: settings.cookieSecret,\n    store: new MongoStore({\n        db: settings.db,\n        url: 'mongodb://localhost/blog'  \n    })\n}));\n```\n\n其中`express.cookieParser()`是Cookie解析的中间件。`express.session()`则提供会话支持，设置它的`store`参数为`MongoStore`实例，把会话信息存储到数据库中，以避免丢失。\n\n这里需要**注意的是在Express4.X版本中，session已经分离出来**，所以这里需要去手动下载：\n\n    npm install express-session\n\n还需要注意的是**store中的url是需要填上去的**！这些地方由于书中所用版本较低的原因，这些都是“坑”，就是改这些东西，和查资料折腾了一下午！\n\n### 注册功能的实现\n\n####1 注册界面\n\n设计注册界面在`views`中添加`registered.html`：\n\n```\n{% extends 'layout.html' %}\n\n{% block title %}用户注册{% endblock %}\n\n{% block content %}\n\n<div class=\"container\" style=\"margin-top: 30px;width: 500px;\">\n\n    {% if success %}\n    <div class=\"alert alert-success alert-dismissable\">\n        <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-hidden=\"true\">×</button>\n        <h4>\n            {{success}}\n        </h4>\n    </div>\n\n    {% endif %}\n    {% if error %}\n    <div class=\"alert alert-danger alert-dismissable\">\n        <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-hidden=\"true\">×</button>\n        <h4>\n            {{error[0]}}\n        </h4>\n    </div>\n    {% endif %}\n\n    <div class=\"row clearfix\">\n        <div class=\"col-md-12 column\">\n            <form class=\"form-horizontal\" role=\"form\" method=\"post\" action=\"/users/registered\">\n                <div class=\"form-group\">\n                    <label for=\"inputText3\" class=\"col-sm-2 control-label\">用户名</label>\n                    <div class=\"col-sm-10\">\n                        <input type=\"text\" class=\"form-control\" id=\"inputText3\" name=\"username\"/>\n                    </div>\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"inputPassword3\" class=\"col-sm-2 control-label\">密码</label>\n                    <div class=\"col-sm-10\">\n                        <input type=\"password\" class=\"form-control\" id=\"inputPassword3\" name=\"password\" />\n                    </div>\n                </div>\n                <div class=\"form-group\">\n                    <div class=\"col-sm-offset-2 col-sm-10\">\n                        <div class=\"checkbox\">\n                            <label><input type=\"checkbox\" />记住我</label>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"form-group\">\n                    <div class=\"col-sm-offset-2 col-sm-10\">\n                        <button type=\"submit\" class=\"btn btn-default\">注册</button>\n                    </div>\n                </div>\n            </form>\n        </div>\n    </div>\n</div>\n\n{% endblock %}\n```\n\n界面完成之后，添加路由，在users.js下添加以下内容：\n\n```js\nrouter.get('/registered', function(req, res){\n    res.render('registered');\n});\n```\n\n浏览器打开[http://127.0.0.1:3000/users/registered](http://127.0.0.1:3000/users/registered)，这个页面刚开始进去是这样子的：\n\n\n![注册界面](http://upload-images.jianshu.io/upload_images/3248493-18c26bef7da0891c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n当注册失败是这样子的：\n\n\n![注册失败](http://upload-images.jianshu.io/upload_images/3248493-efba69537fd37231.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n成功我就不贴了。接下来继续：\n\n####2 注册响应\n\n在user.js中添加`registered`的`post`请求：\n\n```js\nvar User = require('../modules/user')\n\nrouter.post('/registered', function(req, res){\n    if (!(req.body['username'])){\n        req.flash(\"error\", '用户名不能为空！');\n        return res.redirect(\"/users/registered\");\n    }\n    var user = new User({\n        name: req.body['username'],\n        password: req.body['password'],\n    });\n\n    // 检查用户是否存在\n    User.get(user.name, function(err, has_user){\n        if(has_user){\n            err = { \"errmsg\": \"用户已存在\"};\n        }\n        if(err){\n            req.flash(\"error\", err.errmsg);\n            return res.redirect(\"/users/registered\");\n        }\n\n        // 保存新用户\n        user.save(function(err){\n            if(err){\n                req.flash(\"error\", err.errmsg);\n                return res.redirect(\"/users/registered\");\n            }\n            req.flash(\"success\", \"注册成功！\");\n            res.redirect(\"/users/login\");\n        });\n    });\n});\n```\n\n在这段代码中：\n\n- **req.body**就是POST请求信息解析过后的对象。\n- **req.flash**是Express提供的一个奇妙的工具，通过它保存的变量只会在用户当前和下一次的请求中被访问，之后会被清除。当然这里使用的时候需要就行一些设置，待会再说。\n- **res.redirect**是重定向功能。\n- **User**对象，是接下来要创建的用户模型。实现了用户的判断和保存等。\n\n####3 创建用户模型\n\nUser是一个描述数据的对象，即MVC架构中的模型。在modules目录下创建user.js，编写内容如下：\n\n```js\nvar mongodb = require('./db');\n\nfunction User(user){\n    this.name = user.name;\n    this.password = user.password;\n}\n\nmodule.exports = User;\n\nUser.prototype.save = function save(callback){\n\n    var user = {\n        name: this.name,\n        password: this.password\n    };\n\n    mongodb.open(function(err, db){\n        if (err){\n            return callback(err);\n        }\n        db.collection('users', function(err, collection){\n            if(err){\n                mongodb.close();\n                return callback(err);\n            }\n\n            // 将name属性添加为索引\n            collection.ensureIndex('name', {unique: true});\n            // 写入新用户到文档\n            collection.insert(user, function(err, user){\n                mongodb.close();\n                callback(err, user);\n            });\n        });\n\n    });\n\n};\n\n\nUser.get = function get(username, callback){\n\n    mongodb.open(function(err, db){\n        if (err){\n            return callback(err);\n        }\n\n        db.collection('users', function(err, collection){\n            if(err) {\n                mongodb.close();\n                return callback(err);\n            }\n            collection.findOne({name: username}, function(err, doc){\n\n                // 对数据库操作完成之后，及时关闭数据库\n                mongodb.close();\n\n                // 如果同名的用户存在，那么就直接返回这个用户信息\n                if(doc){\n                    return callback(err, doc);\n                }else{\n                    return callback(err, null);\n                }\n            });\n\n        });\n    });\n};\n```\n\n以上代码实现了两个接口，`User.prototype.save`和`User.get`，前者是**对象实例的方法**，用于将用户对象的数据保存到数据库中，后者是**对象构造函数的方法**，用于从数据库中查找指定的用户。\n\n注意：以上两个接口的类型是不一样的，所以在前面`users.js`中，是使用`User.get(...)`和`var user = new User(..);user.save(...);`。\n\n####4 视图交互\n\n在视图中访问会话中的用户数据，同时为了显示错误和成功的信息，也要增加响应的函数。在app.js中添加以下内容：\n\n```js\nvar flash = require('connect-flash');\napp.use(flash());\napp.use(function(req,res,next){\n  res.locals.user=req.session.user;\n\n  var err = req.flash('error');\n  var success = req.flash('success');\n  res.locals.error = err.length ? err : null;\n  res.locals.success = success.length ? success : null;\n   \n  next();\n});\n```\n\n`'connect-flash`也是需要通过`npm install connect-flash`进行安装的。这里还需要注意的是以上在app.js中添加的代码在文件中的顺序很重要。这点也是一个大坑：\n\n数据库连接在相应函数前面，响应函数在路由前面，这样才能在代码中正确调用`flash()`方法。\n\n####5 小段总结\n\n到这里注册的功能差不多就完成了，假设没有出现意外的话。祝你我都好运，以上代码折腾了一天，但是基本上让自己了解了Express和MongoDB的相互配合使用，也对整个系统的数据流了解的更加透彻。\n\n接下来就是实现登录和首页的问题了，到这里就不贴代码了，会将现在实现的这些代码放在github上，做一个tab，感兴趣的同学可以去看看。","source":"_posts/(五)NodeJs构建web应用.md","raw":"---\ntitle: (五)NodeJs构建web应用\ndate: 2017-10-27\ntags: [NodeJs, 阅读笔记]\n---\n\n> 说明：该学习笔记参考《Node.js开发指南》，但是选用的模板和书中不同，添加了自己的理解和适当的补充！仅供参考！\n\n我们打算从零开始用Node.js实现一个微博系统,功能包括路由控制、页面模板、数据库访问、用户注册、登录、用户会话等内容。在这里我们会使用Express框架、MVC设计模式、Jkig模板和MongoDB数据库的操作。\n\n## 构建项目\n\n###1 Express 应用生成器\n\n通过应用生成器工具 express 可以快速创建一个应用的骨架。执行一下命令进行安装到全局环境中\n\n    npm install express-generator -g\n\n<!-- more -->\n\n![安装应用生成器.png](http://upload-images.jianshu.io/upload_images/3248493-3d62a95537360ce1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n我们可以看到同时安装了一些依赖。在当前目录下创建`blog`的应用。\n\n    express blog\n\n创建完成后进入应用。应用目录如下：\n\n![目录结构](http://upload-images.jianshu.io/upload_images/3248493-8d3c92208166060f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n然后安装所有依赖包。\n\n    npm install\n\n启动项目。\n\n（windows下）\n\n    set DEBUG=blog & npm start\n\n（Linux平台下）\n\n    DEBUG=blog npm start\n\n打开浏览器，访问`http://127.0.0.1:3000`即可看到应用。\n\n## 选定swig模板引擎\n\nexpress构建的应用默认使用ejs模板引擎，本人觉得这种奇怪的东东暂时难以接受，之前做过django的项目，最后选定swig，也比较看好它！\n\n###1 安装swig\n\n    npm install swig\n\n###2 在app.js中配置如下：\n\n```\nvar swig = require('swig');\n\nvar swig  = new swig.Swig();\napp.engine('html', swig.readerFile);\napp.set('view engine', 'html');\n```\n\n###3 模板编写\n\n移除`views`下的`*.jade`，创建同名的`*.html`。\n\n编写`index.html`\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>index</title>\n</head>\n<body>\n    Welcome, {{ title }}\n</body>\n</html>\n```\n\n启动服务\n\n    set DEBUG=blog &npm start\n\n打开浏览器访问`http://127.0.0.1:3000`，能够看到：Welcome, Express\n\n## 使用Bootstrap和界面设计\n\n我们选定Bootstrap开始设计我们的界面。首先[下载](http://v3.bootcss.com/getting-started/#download)，解压之后，将文件夹改名为`bootstrap-dist`并放在`public/`中，同时下载最新的jquery，放在`public/javascripts/`中。\n\n![添加bootstrap文件夹到项目中](http://upload-images.jianshu.io/upload_images/3248493-64988b292b7d5378.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n这里补充一下**Swig的使用**[参考](http://www.cnblogs.com/elementstorm/p/3142644.html)。\n\n修改`layout.html`中的代码：\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>{% block title %}My Blog{% endblock %}</title>\n    {% block head %}\n        <link rel=\"stylesheet\" href=\"/bootstrap-dist/css/bootstrap.min.css\">\n    {% endblock %}\n</head>\n<body>\n    {% block content %}{% endblock %}\n    <script src=\"/javascripts/jquery-3.2.1.js\"></script>\n    <script src=\"/bootstrap-dist/js/bootstrap.js\"></script>\n</body>\n</html>\n```\n\n在`views/`下创建`login.html`，并编写代码如下：\n\n```html\n{% extends 'layout.html' %}\n\n{% block title %}用户登录{% endblock %}\n\n{% block content %}\n\n    <div class=\"container\" style=\"margin-top: 30px;\">\n        <div class=\"row clearfix\">\n            <div class=\"col-md-12 column\">\n                <form class=\"form-horizontal\" role=\"form\" method=\"post\" action=\"/users/login\">\n                    <div class=\"form-group\">\n                         <label for=\"inputEmail3\" class=\"col-sm-2 control-label\">用户名</label>\n                        <div class=\"col-sm-10\">\n                            <input type=\"text\" class=\"form-control\" id=\"inputText3\" />\n                        </div>\n                    </div>\n                    <div class=\"form-group\">\n                         <label for=\"inputPassword3\" class=\"col-sm-2 control-label\">密码</label>\n                        <div class=\"col-sm-10\">\n                            <input type=\"password\" class=\"form-control\" id=\"inputPassword3\" />\n                        </div>\n                    </div>\n                    <div class=\"form-group\">\n                        <div class=\"col-sm-offset-2 col-sm-10\">\n                            <div class=\"checkbox\">\n                                 <label><input type=\"checkbox\" />记住我</label>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"form-group\">\n                        <div class=\"col-sm-offset-2 col-sm-10\">\n                             <button type=\"submit\" class=\"btn btn-default\">登陆</button>\n                        </div>\n                    </div>\n                </form>\n            </div>\n        </div>\n    </div>\n\n{% endblock %}\n```\n\n目前登录的界面已经创建完成，接下来就是添加路由了。修改`routes/users.js`文件，添加`login` GET视图后文件中代码如下：\n\n```js\nvar express = require('express');\nvar router = express.Router();\n\n/* GET users listing. */\nrouter.get('/', function(req, res, next) {\n  res.send('respond with a resource');\n});\n\n\nrouter.get('/login', function(req, res){\n    res.render('login');\n})\n\nmodule.exports = router;\n```\n\n重新启动服务，浏览器访问[http://127.0.0.1:3000/users/login](http://127.0.0.1:3000/users/login)，即可以看到登录输入框，则成功！\n\n\n![登录界面](http://upload-images.jianshu.io/upload_images/3248493-ec03d6cd5bef8840.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## 数据持久化——MongoDB\n\n从官网[下载](https://www.mongodb.com/download-center#community)并安装。\n\n### 连接数据库\n\n打开工\n程目录中的package.json，在`dependencies`属性中添加以下代码代码:\n\n    \"connect-mongo\": \">= 0.1.7\",\n    \"mongodb\": \">= 0.9.9\"\n\n然后运行`npm install`更新依赖的模块。接下来在工程的目录中创建`settings.js`文件，这个文件用于保存数据库的连接信息。\n\n将用到的数据库起名为`blog`：\n\n```\nmodule.exports = {\n    cookieSecret: \"blogid\",\n    db: \"blog\",\n    host: \"localhost\",\n    port: 27017\n};\n```\n\n`db`是数据库的名称，`host`是数据库的地址，`port`是数据库的端口。`cookieSecret`用于`Cookie`加密与数据库无关，我们留作后用。\n\n接下来在项目中创建`modules`目录，然后在其下中创建`db.js`：\n\n```js\nvar settings = require(\"../settings\");\nvar mongodb = require(\"mongodb\");\nvar Db = mongodb.Db;\nvar Server = mongodb.Server;\n\nmodule.exports = new Db(settings.db, new Server(settings.host, settings.port, {}));\n```\n\n以上代码通过`module.exports`输出了创建的数据库连接。\n\n### 会话支持\n\n打开`app.js`添加以下内容：\n\n```js\nvar session = require('express-session');\nvar settings = require('./settings');\nvar MongoStore = require('connect-mongo')(session);\n\napp.use(session({\n    secret: settings.cookieSecret,\n    store: new MongoStore({\n        db: settings.db,\n        url: 'mongodb://localhost/blog'  \n    })\n}));\n```\n\n其中`express.cookieParser()`是Cookie解析的中间件。`express.session()`则提供会话支持，设置它的`store`参数为`MongoStore`实例，把会话信息存储到数据库中，以避免丢失。\n\n这里需要**注意的是在Express4.X版本中，session已经分离出来**，所以这里需要去手动下载：\n\n    npm install express-session\n\n还需要注意的是**store中的url是需要填上去的**！这些地方由于书中所用版本较低的原因，这些都是“坑”，就是改这些东西，和查资料折腾了一下午！\n\n### 注册功能的实现\n\n####1 注册界面\n\n设计注册界面在`views`中添加`registered.html`：\n\n```\n{% extends 'layout.html' %}\n\n{% block title %}用户注册{% endblock %}\n\n{% block content %}\n\n<div class=\"container\" style=\"margin-top: 30px;width: 500px;\">\n\n    {% if success %}\n    <div class=\"alert alert-success alert-dismissable\">\n        <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-hidden=\"true\">×</button>\n        <h4>\n            {{success}}\n        </h4>\n    </div>\n\n    {% endif %}\n    {% if error %}\n    <div class=\"alert alert-danger alert-dismissable\">\n        <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-hidden=\"true\">×</button>\n        <h4>\n            {{error[0]}}\n        </h4>\n    </div>\n    {% endif %}\n\n    <div class=\"row clearfix\">\n        <div class=\"col-md-12 column\">\n            <form class=\"form-horizontal\" role=\"form\" method=\"post\" action=\"/users/registered\">\n                <div class=\"form-group\">\n                    <label for=\"inputText3\" class=\"col-sm-2 control-label\">用户名</label>\n                    <div class=\"col-sm-10\">\n                        <input type=\"text\" class=\"form-control\" id=\"inputText3\" name=\"username\"/>\n                    </div>\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"inputPassword3\" class=\"col-sm-2 control-label\">密码</label>\n                    <div class=\"col-sm-10\">\n                        <input type=\"password\" class=\"form-control\" id=\"inputPassword3\" name=\"password\" />\n                    </div>\n                </div>\n                <div class=\"form-group\">\n                    <div class=\"col-sm-offset-2 col-sm-10\">\n                        <div class=\"checkbox\">\n                            <label><input type=\"checkbox\" />记住我</label>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"form-group\">\n                    <div class=\"col-sm-offset-2 col-sm-10\">\n                        <button type=\"submit\" class=\"btn btn-default\">注册</button>\n                    </div>\n                </div>\n            </form>\n        </div>\n    </div>\n</div>\n\n{% endblock %}\n```\n\n界面完成之后，添加路由，在users.js下添加以下内容：\n\n```js\nrouter.get('/registered', function(req, res){\n    res.render('registered');\n});\n```\n\n浏览器打开[http://127.0.0.1:3000/users/registered](http://127.0.0.1:3000/users/registered)，这个页面刚开始进去是这样子的：\n\n\n![注册界面](http://upload-images.jianshu.io/upload_images/3248493-18c26bef7da0891c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n当注册失败是这样子的：\n\n\n![注册失败](http://upload-images.jianshu.io/upload_images/3248493-efba69537fd37231.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n成功我就不贴了。接下来继续：\n\n####2 注册响应\n\n在user.js中添加`registered`的`post`请求：\n\n```js\nvar User = require('../modules/user')\n\nrouter.post('/registered', function(req, res){\n    if (!(req.body['username'])){\n        req.flash(\"error\", '用户名不能为空！');\n        return res.redirect(\"/users/registered\");\n    }\n    var user = new User({\n        name: req.body['username'],\n        password: req.body['password'],\n    });\n\n    // 检查用户是否存在\n    User.get(user.name, function(err, has_user){\n        if(has_user){\n            err = { \"errmsg\": \"用户已存在\"};\n        }\n        if(err){\n            req.flash(\"error\", err.errmsg);\n            return res.redirect(\"/users/registered\");\n        }\n\n        // 保存新用户\n        user.save(function(err){\n            if(err){\n                req.flash(\"error\", err.errmsg);\n                return res.redirect(\"/users/registered\");\n            }\n            req.flash(\"success\", \"注册成功！\");\n            res.redirect(\"/users/login\");\n        });\n    });\n});\n```\n\n在这段代码中：\n\n- **req.body**就是POST请求信息解析过后的对象。\n- **req.flash**是Express提供的一个奇妙的工具，通过它保存的变量只会在用户当前和下一次的请求中被访问，之后会被清除。当然这里使用的时候需要就行一些设置，待会再说。\n- **res.redirect**是重定向功能。\n- **User**对象，是接下来要创建的用户模型。实现了用户的判断和保存等。\n\n####3 创建用户模型\n\nUser是一个描述数据的对象，即MVC架构中的模型。在modules目录下创建user.js，编写内容如下：\n\n```js\nvar mongodb = require('./db');\n\nfunction User(user){\n    this.name = user.name;\n    this.password = user.password;\n}\n\nmodule.exports = User;\n\nUser.prototype.save = function save(callback){\n\n    var user = {\n        name: this.name,\n        password: this.password\n    };\n\n    mongodb.open(function(err, db){\n        if (err){\n            return callback(err);\n        }\n        db.collection('users', function(err, collection){\n            if(err){\n                mongodb.close();\n                return callback(err);\n            }\n\n            // 将name属性添加为索引\n            collection.ensureIndex('name', {unique: true});\n            // 写入新用户到文档\n            collection.insert(user, function(err, user){\n                mongodb.close();\n                callback(err, user);\n            });\n        });\n\n    });\n\n};\n\n\nUser.get = function get(username, callback){\n\n    mongodb.open(function(err, db){\n        if (err){\n            return callback(err);\n        }\n\n        db.collection('users', function(err, collection){\n            if(err) {\n                mongodb.close();\n                return callback(err);\n            }\n            collection.findOne({name: username}, function(err, doc){\n\n                // 对数据库操作完成之后，及时关闭数据库\n                mongodb.close();\n\n                // 如果同名的用户存在，那么就直接返回这个用户信息\n                if(doc){\n                    return callback(err, doc);\n                }else{\n                    return callback(err, null);\n                }\n            });\n\n        });\n    });\n};\n```\n\n以上代码实现了两个接口，`User.prototype.save`和`User.get`，前者是**对象实例的方法**，用于将用户对象的数据保存到数据库中，后者是**对象构造函数的方法**，用于从数据库中查找指定的用户。\n\n注意：以上两个接口的类型是不一样的，所以在前面`users.js`中，是使用`User.get(...)`和`var user = new User(..);user.save(...);`。\n\n####4 视图交互\n\n在视图中访问会话中的用户数据，同时为了显示错误和成功的信息，也要增加响应的函数。在app.js中添加以下内容：\n\n```js\nvar flash = require('connect-flash');\napp.use(flash());\napp.use(function(req,res,next){\n  res.locals.user=req.session.user;\n\n  var err = req.flash('error');\n  var success = req.flash('success');\n  res.locals.error = err.length ? err : null;\n  res.locals.success = success.length ? success : null;\n   \n  next();\n});\n```\n\n`'connect-flash`也是需要通过`npm install connect-flash`进行安装的。这里还需要注意的是以上在app.js中添加的代码在文件中的顺序很重要。这点也是一个大坑：\n\n数据库连接在相应函数前面，响应函数在路由前面，这样才能在代码中正确调用`flash()`方法。\n\n####5 小段总结\n\n到这里注册的功能差不多就完成了，假设没有出现意外的话。祝你我都好运，以上代码折腾了一天，但是基本上让自己了解了Express和MongoDB的相互配合使用，也对整个系统的数据流了解的更加透彻。\n\n接下来就是实现登录和首页的问题了，到这里就不贴代码了，会将现在实现的这些代码放在github上，做一个tab，感兴趣的同学可以去看看。","slug":"(五)NodeJs构建web应用","published":1,"updated":"2021-06-20T10:25:20.122Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluqa1hi70005rlog7fq7f17o","content":"<blockquote>\n<p>说明：该学习笔记参考《Node.js开发指南》，但是选用的模板和书中不同，添加了自己的理解和适当的补充！仅供参考！</p>\n</blockquote>\n<p>我们打算从零开始用Node.js实现一个微博系统,功能包括路由控制、页面模板、数据库访问、用户注册、登录、用户会话等内容。在这里我们会使用Express框架、MVC设计模式、Jkig模板和MongoDB数据库的操作。</p>\n<h2 id=\"构建项目\"><a href=\"#构建项目\" class=\"headerlink\" title=\"构建项目\"></a>构建项目</h2><p>###1 Express 应用生成器</p>\n<p>通过应用生成器工具 express 可以快速创建一个应用的骨架。执行一下命令进行安装到全局环境中</p>\n<pre><code>npm install express-generator -g\n</code></pre>\n<span id=\"more\"></span>\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3248493-3d62a95537360ce1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"安装应用生成器.png\"></p>\n<p>我们可以看到同时安装了一些依赖。在当前目录下创建<code>blog</code>的应用。</p>\n<pre><code>express blog\n</code></pre>\n<p>创建完成后进入应用。应用目录如下：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3248493-8d3c92208166060f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"目录结构\"></p>\n<p>然后安装所有依赖包。</p>\n<pre><code>npm install\n</code></pre>\n<p>启动项目。</p>\n<p>（windows下）</p>\n<pre><code>set DEBUG=blog &amp; npm start\n</code></pre>\n<p>（Linux平台下）</p>\n<pre><code>DEBUG=blog npm start\n</code></pre>\n<p>打开浏览器，访问<code>http://127.0.0.1:3000</code>即可看到应用。</p>\n<h2 id=\"选定swig模板引擎\"><a href=\"#选定swig模板引擎\" class=\"headerlink\" title=\"选定swig模板引擎\"></a>选定swig模板引擎</h2><p>express构建的应用默认使用ejs模板引擎，本人觉得这种奇怪的东东暂时难以接受，之前做过django的项目，最后选定swig，也比较看好它！</p>\n<p>###1 安装swig</p>\n<pre><code>npm install swig\n</code></pre>\n<p>###2 在app.js中配置如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var swig = require(&#x27;swig&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">var swig  = new swig.Swig();</span><br><span class=\"line\">app.engine(&#x27;html&#x27;, swig.readerFile);</span><br><span class=\"line\">app.set(&#x27;view engine&#x27;, &#x27;html&#x27;);</span><br></pre></td></tr></table></figure>\n\n<p>###3 模板编写</p>\n<p>移除<code>views</code>下的<code>*.jade</code>，创建同名的<code>*.html</code>。</p>\n<p>编写<code>index.html</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>index<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    Welcome, &#123;&#123; title &#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>启动服务</p>\n<pre><code>set DEBUG=blog &amp;npm start\n</code></pre>\n<p>打开浏览器访问<code>http://127.0.0.1:3000</code>，能够看到：Welcome, Express</p>\n<h2 id=\"使用Bootstrap和界面设计\"><a href=\"#使用Bootstrap和界面设计\" class=\"headerlink\" title=\"使用Bootstrap和界面设计\"></a>使用Bootstrap和界面设计</h2><p>我们选定Bootstrap开始设计我们的界面。首先<a href=\"http://v3.bootcss.com/getting-started/#download\">下载</a>，解压之后，将文件夹改名为<code>bootstrap-dist</code>并放在<code>public/</code>中，同时下载最新的jquery，放在<code>public/javascripts/</code>中。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3248493-64988b292b7d5378.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"添加bootstrap文件夹到项目中\"></p>\n<p>这里补充一下<strong>Swig的使用</strong><a href=\"http://www.cnblogs.com/elementstorm/p/3142644.html\">参考</a>。</p>\n<p>修改<code>layout.html</code>中的代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>&#123;% block title %&#125;My Blog&#123;% endblock %&#125;<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    &#123;% block head %&#125;</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;/bootstrap-dist/css/bootstrap.min.css&quot;</span>&gt;</span></span><br><span class=\"line\">    &#123;% endblock %&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    &#123;% block content %&#125;&#123;% endblock %&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;/javascripts/jquery-3.2.1.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;/bootstrap-dist/js/bootstrap.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在<code>views/</code>下创建<code>login.html</code>，并编写代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% extends &#x27;layout.html&#x27; %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% block title %&#125;用户登录&#123;% endblock %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% block content %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;margin-top: 30px;&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;row clearfix&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;col-md-12 column&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-horizontal&quot;</span> <span class=\"attr\">role</span>=<span class=\"string\">&quot;form&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;/users/login&quot;</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">                         <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;inputEmail3&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;col-sm-2 control-label&quot;</span>&gt;</span>用户名<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;col-sm-10&quot;</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;inputText3&quot;</span> /&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">                         <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;inputPassword3&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;col-sm-2 control-label&quot;</span>&gt;</span>密码<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;col-sm-10&quot;</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;inputPassword3&quot;</span> /&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;col-sm-offset-2 col-sm-10&quot;</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;checkbox&quot;</span>&gt;</span></span><br><span class=\"line\">                                 <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span> /&gt;</span>记住我<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;col-sm-offset-2 col-sm-10&quot;</span>&gt;</span></span><br><span class=\"line\">                             <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-default&quot;</span>&gt;</span>登陆<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>\n\n<p>目前登录的界面已经创建完成，接下来就是添加路由了。修改<code>routes/users.js</code>文件，添加<code>login</code> GET视图后文件中代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;express&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> router = express.<span class=\"title class_\">Router</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* GET users listing. */</span></span><br><span class=\"line\">router.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;/&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) &#123;</span><br><span class=\"line\">  res.<span class=\"title function_\">send</span>(<span class=\"string\">&#x27;respond with a resource&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">router.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;/login&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>)&#123;</span><br><span class=\"line\">    res.<span class=\"title function_\">render</span>(<span class=\"string\">&#x27;login&#x27;</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = router;</span><br></pre></td></tr></table></figure>\n\n<p>重新启动服务，浏览器访问<a href=\"http://127.0.0.1:3000/users/login\">http://127.0.0.1:3000/users/login</a>，即可以看到登录输入框，则成功！</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3248493-ec03d6cd5bef8840.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"登录界面\"></p>\n<h2 id=\"数据持久化——MongoDB\"><a href=\"#数据持久化——MongoDB\" class=\"headerlink\" title=\"数据持久化——MongoDB\"></a>数据持久化——MongoDB</h2><p>从官网<a href=\"https://www.mongodb.com/download-center#community\">下载</a>并安装。</p>\n<h3 id=\"连接数据库\"><a href=\"#连接数据库\" class=\"headerlink\" title=\"连接数据库\"></a>连接数据库</h3><p>打开工<br>程目录中的package.json，在<code>dependencies</code>属性中添加以下代码代码:</p>\n<pre><code>&quot;connect-mongo&quot;: &quot;&gt;= 0.1.7&quot;,\n&quot;mongodb&quot;: &quot;&gt;= 0.9.9&quot;\n</code></pre>\n<p>然后运行<code>npm install</code>更新依赖的模块。接下来在工程的目录中创建<code>settings.js</code>文件，这个文件用于保存数据库的连接信息。</p>\n<p>将用到的数据库起名为<code>blog</code>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    cookieSecret: &quot;blogid&quot;,</span><br><span class=\"line\">    db: &quot;blog&quot;,</span><br><span class=\"line\">    host: &quot;localhost&quot;,</span><br><span class=\"line\">    port: 27017</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><code>db</code>是数据库的名称，<code>host</code>是数据库的地址，<code>port</code>是数据库的端口。<code>cookieSecret</code>用于<code>Cookie</code>加密与数据库无关，我们留作后用。</p>\n<p>接下来在项目中创建<code>modules</code>目录，然后在其下中创建<code>db.js</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> settings = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;../settings&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> mongodb = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;mongodb&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">Db</span> = mongodb.<span class=\"property\">Db</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">Server</span> = mongodb.<span class=\"property\">Server</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Db</span>(settings.<span class=\"property\">db</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">Server</span>(settings.<span class=\"property\">host</span>, settings.<span class=\"property\">port</span>, &#123;&#125;));</span><br></pre></td></tr></table></figure>\n\n<p>以上代码通过<code>module.exports</code>输出了创建的数据库连接。</p>\n<h3 id=\"会话支持\"><a href=\"#会话支持\" class=\"headerlink\" title=\"会话支持\"></a>会话支持</h3><p>打开<code>app.js</code>添加以下内容：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> session = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;express-session&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> settings = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./settings&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">MongoStore</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;connect-mongo&#x27;</span>)(session);</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(<span class=\"title function_\">session</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">secret</span>: settings.<span class=\"property\">cookieSecret</span>,</span><br><span class=\"line\">    <span class=\"attr\">store</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">MongoStore</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">db</span>: settings.<span class=\"property\">db</span>,</span><br><span class=\"line\">        <span class=\"attr\">url</span>: <span class=\"string\">&#x27;mongodb://localhost/blog&#x27;</span>  </span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;));</span><br></pre></td></tr></table></figure>\n\n<p>其中<code>express.cookieParser()</code>是Cookie解析的中间件。<code>express.session()</code>则提供会话支持，设置它的<code>store</code>参数为<code>MongoStore</code>实例，把会话信息存储到数据库中，以避免丢失。</p>\n<p>这里需要<strong>注意的是在Express4.X版本中，session已经分离出来</strong>，所以这里需要去手动下载：</p>\n<pre><code>npm install express-session\n</code></pre>\n<p>还需要注意的是<strong>store中的url是需要填上去的</strong>！这些地方由于书中所用版本较低的原因，这些都是“坑”，就是改这些东西，和查资料折腾了一下午！</p>\n<h3 id=\"注册功能的实现\"><a href=\"#注册功能的实现\" class=\"headerlink\" title=\"注册功能的实现\"></a>注册功能的实现</h3><p>####1 注册界面</p>\n<p>设计注册界面在<code>views</code>中添加<code>registered.html</code>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% extends &#x27;layout.html&#x27; %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% block title %&#125;用户注册&#123;% endblock %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% block content %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div class=&quot;container&quot; style=&quot;margin-top: 30px;width: 500px;&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#123;% if success %&#125;</span><br><span class=\"line\">    &lt;div class=&quot;alert alert-success alert-dismissable&quot;&gt;</span><br><span class=\"line\">        &lt;button type=&quot;button&quot; class=&quot;close&quot; data-dismiss=&quot;alert&quot; aria-hidden=&quot;true&quot;&gt;×&lt;/button&gt;</span><br><span class=\"line\">        &lt;h4&gt;</span><br><span class=\"line\">            &#123;&#123;success&#125;&#125;</span><br><span class=\"line\">        &lt;/h4&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#123;% endif %&#125;</span><br><span class=\"line\">    &#123;% if error %&#125;</span><br><span class=\"line\">    &lt;div class=&quot;alert alert-danger alert-dismissable&quot;&gt;</span><br><span class=\"line\">        &lt;button type=&quot;button&quot; class=&quot;close&quot; data-dismiss=&quot;alert&quot; aria-hidden=&quot;true&quot;&gt;×&lt;/button&gt;</span><br><span class=\"line\">        &lt;h4&gt;</span><br><span class=\"line\">            &#123;&#123;error[0]&#125;&#125;</span><br><span class=\"line\">        &lt;/h4&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &#123;% endif %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;div class=&quot;row clearfix&quot;&gt;</span><br><span class=\"line\">        &lt;div class=&quot;col-md-12 column&quot;&gt;</span><br><span class=\"line\">            &lt;form class=&quot;form-horizontal&quot; role=&quot;form&quot; method=&quot;post&quot; action=&quot;/users/registered&quot;&gt;</span><br><span class=\"line\">                &lt;div class=&quot;form-group&quot;&gt;</span><br><span class=\"line\">                    &lt;label for=&quot;inputText3&quot; class=&quot;col-sm-2 control-label&quot;&gt;用户名&lt;/label&gt;</span><br><span class=\"line\">                    &lt;div class=&quot;col-sm-10&quot;&gt;</span><br><span class=\"line\">                        &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;inputText3&quot; name=&quot;username&quot;/&gt;</span><br><span class=\"line\">                    &lt;/div&gt;</span><br><span class=\"line\">                &lt;/div&gt;</span><br><span class=\"line\">                &lt;div class=&quot;form-group&quot;&gt;</span><br><span class=\"line\">                    &lt;label for=&quot;inputPassword3&quot; class=&quot;col-sm-2 control-label&quot;&gt;密码&lt;/label&gt;</span><br><span class=\"line\">                    &lt;div class=&quot;col-sm-10&quot;&gt;</span><br><span class=\"line\">                        &lt;input type=&quot;password&quot; class=&quot;form-control&quot; id=&quot;inputPassword3&quot; name=&quot;password&quot; /&gt;</span><br><span class=\"line\">                    &lt;/div&gt;</span><br><span class=\"line\">                &lt;/div&gt;</span><br><span class=\"line\">                &lt;div class=&quot;form-group&quot;&gt;</span><br><span class=\"line\">                    &lt;div class=&quot;col-sm-offset-2 col-sm-10&quot;&gt;</span><br><span class=\"line\">                        &lt;div class=&quot;checkbox&quot;&gt;</span><br><span class=\"line\">                            &lt;label&gt;&lt;input type=&quot;checkbox&quot; /&gt;记住我&lt;/label&gt;</span><br><span class=\"line\">                        &lt;/div&gt;</span><br><span class=\"line\">                    &lt;/div&gt;</span><br><span class=\"line\">                &lt;/div&gt;</span><br><span class=\"line\">                &lt;div class=&quot;form-group&quot;&gt;</span><br><span class=\"line\">                    &lt;div class=&quot;col-sm-offset-2 col-sm-10&quot;&gt;</span><br><span class=\"line\">                        &lt;button type=&quot;submit&quot; class=&quot;btn btn-default&quot;&gt;注册&lt;/button&gt;</span><br><span class=\"line\">                    &lt;/div&gt;</span><br><span class=\"line\">                &lt;/div&gt;</span><br><span class=\"line\">            &lt;/form&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>\n\n<p>界面完成之后，添加路由，在users.js下添加以下内容：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;/registered&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>)&#123;</span><br><span class=\"line\">    res.<span class=\"title function_\">render</span>(<span class=\"string\">&#x27;registered&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>浏览器打开<a href=\"http://127.0.0.1:3000/users/registered\">http://127.0.0.1:3000/users/registered</a>，这个页面刚开始进去是这样子的：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3248493-18c26bef7da0891c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"注册界面\"></p>\n<p>当注册失败是这样子的：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3248493-efba69537fd37231.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"注册失败\"></p>\n<p>成功我就不贴了。接下来继续：</p>\n<p>####2 注册响应</p>\n<p>在user.js中添加<code>registered</code>的<code>post</code>请求：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">User</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../modules/user&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">router.<span class=\"title function_\">post</span>(<span class=\"string\">&#x27;/registered&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(req.<span class=\"property\">body</span>[<span class=\"string\">&#x27;username&#x27;</span>]))&#123;</span><br><span class=\"line\">        req.<span class=\"title function_\">flash</span>(<span class=\"string\">&quot;error&quot;</span>, <span class=\"string\">&#x27;用户名不能为空！&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res.<span class=\"title function_\">redirect</span>(<span class=\"string\">&quot;/users/registered&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> user = <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>: req.<span class=\"property\">body</span>[<span class=\"string\">&#x27;username&#x27;</span>],</span><br><span class=\"line\">        <span class=\"attr\">password</span>: req.<span class=\"property\">body</span>[<span class=\"string\">&#x27;password&#x27;</span>],</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 检查用户是否存在</span></span><br><span class=\"line\">    <span class=\"title class_\">User</span>.<span class=\"title function_\">get</span>(user.<span class=\"property\">name</span>, <span class=\"keyword\">function</span>(<span class=\"params\">err, has_user</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(has_user)&#123;</span><br><span class=\"line\">            err = &#123; <span class=\"string\">&quot;errmsg&quot;</span>: <span class=\"string\">&quot;用户已存在&quot;</span>&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">            req.<span class=\"title function_\">flash</span>(<span class=\"string\">&quot;error&quot;</span>, err.<span class=\"property\">errmsg</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res.<span class=\"title function_\">redirect</span>(<span class=\"string\">&quot;/users/registered&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 保存新用户</span></span><br><span class=\"line\">        user.<span class=\"title function_\">save</span>(<span class=\"keyword\">function</span>(<span class=\"params\">err</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">                req.<span class=\"title function_\">flash</span>(<span class=\"string\">&quot;error&quot;</span>, err.<span class=\"property\">errmsg</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> res.<span class=\"title function_\">redirect</span>(<span class=\"string\">&quot;/users/registered&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            req.<span class=\"title function_\">flash</span>(<span class=\"string\">&quot;success&quot;</span>, <span class=\"string\">&quot;注册成功！&quot;</span>);</span><br><span class=\"line\">            res.<span class=\"title function_\">redirect</span>(<span class=\"string\">&quot;/users/login&quot;</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>在这段代码中：</p>\n<ul>\n<li><strong>req.body</strong>就是POST请求信息解析过后的对象。</li>\n<li><strong>req.flash</strong>是Express提供的一个奇妙的工具，通过它保存的变量只会在用户当前和下一次的请求中被访问，之后会被清除。当然这里使用的时候需要就行一些设置，待会再说。</li>\n<li><strong>res.redirect</strong>是重定向功能。</li>\n<li><strong>User</strong>对象，是接下来要创建的用户模型。实现了用户的判断和保存等。</li>\n</ul>\n<p>####3 创建用户模型</p>\n<p>User是一个描述数据的对象，即MVC架构中的模型。在modules目录下创建user.js，编写内容如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mongodb = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./db&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">User</span>(<span class=\"params\">user</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = user.<span class=\"property\">name</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">password</span> = user.<span class=\"property\">password</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"title class_\">User</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">User</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">save</span> = <span class=\"keyword\">function</span> <span class=\"title function_\">save</span>(<span class=\"params\">callback</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> user = &#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">name</span>,</span><br><span class=\"line\">        <span class=\"attr\">password</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">password</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    mongodb.<span class=\"title function_\">open</span>(<span class=\"keyword\">function</span>(<span class=\"params\">err, db</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"title function_\">callback</span>(err);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        db.<span class=\"title function_\">collection</span>(<span class=\"string\">&#x27;users&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">err, collection</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">                mongodb.<span class=\"title function_\">close</span>();</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"title function_\">callback</span>(err);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 将name属性添加为索引</span></span><br><span class=\"line\">            collection.<span class=\"title function_\">ensureIndex</span>(<span class=\"string\">&#x27;name&#x27;</span>, &#123;<span class=\"attr\">unique</span>: <span class=\"literal\">true</span>&#125;);</span><br><span class=\"line\">            <span class=\"comment\">// 写入新用户到文档</span></span><br><span class=\"line\">            collection.<span class=\"title function_\">insert</span>(user, <span class=\"keyword\">function</span>(<span class=\"params\">err, user</span>)&#123;</span><br><span class=\"line\">                mongodb.<span class=\"title function_\">close</span>();</span><br><span class=\"line\">                <span class=\"title function_\">callback</span>(err, user);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">User</span>.<span class=\"property\">get</span> = <span class=\"keyword\">function</span> <span class=\"title function_\">get</span>(<span class=\"params\">username, callback</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    mongodb.<span class=\"title function_\">open</span>(<span class=\"keyword\">function</span>(<span class=\"params\">err, db</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"title function_\">callback</span>(err);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        db.<span class=\"title function_\">collection</span>(<span class=\"string\">&#x27;users&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">err, collection</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(err) &#123;</span><br><span class=\"line\">                mongodb.<span class=\"title function_\">close</span>();</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"title function_\">callback</span>(err);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            collection.<span class=\"title function_\">findOne</span>(&#123;<span class=\"attr\">name</span>: username&#125;, <span class=\"keyword\">function</span>(<span class=\"params\">err, doc</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 对数据库操作完成之后，及时关闭数据库</span></span><br><span class=\"line\">                mongodb.<span class=\"title function_\">close</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 如果同名的用户存在，那么就直接返回这个用户信息</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(doc)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"title function_\">callback</span>(err, doc);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"title function_\">callback</span>(err, <span class=\"literal\">null</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>以上代码实现了两个接口，<code>User.prototype.save</code>和<code>User.get</code>，前者是<strong>对象实例的方法</strong>，用于将用户对象的数据保存到数据库中，后者是<strong>对象构造函数的方法</strong>，用于从数据库中查找指定的用户。</p>\n<p>注意：以上两个接口的类型是不一样的，所以在前面<code>users.js</code>中，是使用<code>User.get(...)</code>和<code>var user = new User(..);user.save(...);</code>。</p>\n<p>####4 视图交互</p>\n<p>在视图中访问会话中的用户数据，同时为了显示错误和成功的信息，也要增加响应的函数。在app.js中添加以下内容：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> flash = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;connect-flash&#x27;</span>);</span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(<span class=\"title function_\">flash</span>());</span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(<span class=\"keyword\">function</span>(<span class=\"params\">req,res,next</span>)&#123;</span><br><span class=\"line\">  res.<span class=\"property\">locals</span>.<span class=\"property\">user</span>=req.<span class=\"property\">session</span>.<span class=\"property\">user</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> err = req.<span class=\"title function_\">flash</span>(<span class=\"string\">&#x27;error&#x27;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> success = req.<span class=\"title function_\">flash</span>(<span class=\"string\">&#x27;success&#x27;</span>);</span><br><span class=\"line\">  res.<span class=\"property\">locals</span>.<span class=\"property\">error</span> = err.<span class=\"property\">length</span> ? err : <span class=\"literal\">null</span>;</span><br><span class=\"line\">  res.<span class=\"property\">locals</span>.<span class=\"property\">success</span> = success.<span class=\"property\">length</span> ? success : <span class=\"literal\">null</span>;</span><br><span class=\"line\">   </span><br><span class=\"line\">  <span class=\"title function_\">next</span>();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><code>&#39;connect-flash</code>也是需要通过<code>npm install connect-flash</code>进行安装的。这里还需要注意的是以上在app.js中添加的代码在文件中的顺序很重要。这点也是一个大坑：</p>\n<p>数据库连接在相应函数前面，响应函数在路由前面，这样才能在代码中正确调用<code>flash()</code>方法。</p>\n<p>####5 小段总结</p>\n<p>到这里注册的功能差不多就完成了，假设没有出现意外的话。祝你我都好运，以上代码折腾了一天，但是基本上让自己了解了Express和MongoDB的相互配合使用，也对整个系统的数据流了解的更加透彻。</p>\n<p>接下来就是实现登录和首页的问题了，到这里就不贴代码了，会将现在实现的这些代码放在github上，做一个tab，感兴趣的同学可以去看看。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>说明：该学习笔记参考《Node.js开发指南》，但是选用的模板和书中不同，添加了自己的理解和适当的补充！仅供参考！</p>\n</blockquote>\n<p>我们打算从零开始用Node.js实现一个微博系统,功能包括路由控制、页面模板、数据库访问、用户注册、登录、用户会话等内容。在这里我们会使用Express框架、MVC设计模式、Jkig模板和MongoDB数据库的操作。</p>\n<h2 id=\"构建项目\"><a href=\"#构建项目\" class=\"headerlink\" title=\"构建项目\"></a>构建项目</h2><p>###1 Express 应用生成器</p>\n<p>通过应用生成器工具 express 可以快速创建一个应用的骨架。执行一下命令进行安装到全局环境中</p>\n<pre><code>npm install express-generator -g\n</code></pre>","more":"<p><img src=\"http://upload-images.jianshu.io/upload_images/3248493-3d62a95537360ce1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"安装应用生成器.png\"></p>\n<p>我们可以看到同时安装了一些依赖。在当前目录下创建<code>blog</code>的应用。</p>\n<pre><code>express blog\n</code></pre>\n<p>创建完成后进入应用。应用目录如下：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3248493-8d3c92208166060f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"目录结构\"></p>\n<p>然后安装所有依赖包。</p>\n<pre><code>npm install\n</code></pre>\n<p>启动项目。</p>\n<p>（windows下）</p>\n<pre><code>set DEBUG=blog &amp; npm start\n</code></pre>\n<p>（Linux平台下）</p>\n<pre><code>DEBUG=blog npm start\n</code></pre>\n<p>打开浏览器，访问<code>http://127.0.0.1:3000</code>即可看到应用。</p>\n<h2 id=\"选定swig模板引擎\"><a href=\"#选定swig模板引擎\" class=\"headerlink\" title=\"选定swig模板引擎\"></a>选定swig模板引擎</h2><p>express构建的应用默认使用ejs模板引擎，本人觉得这种奇怪的东东暂时难以接受，之前做过django的项目，最后选定swig，也比较看好它！</p>\n<p>###1 安装swig</p>\n<pre><code>npm install swig\n</code></pre>\n<p>###2 在app.js中配置如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var swig = require(&#x27;swig&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">var swig  = new swig.Swig();</span><br><span class=\"line\">app.engine(&#x27;html&#x27;, swig.readerFile);</span><br><span class=\"line\">app.set(&#x27;view engine&#x27;, &#x27;html&#x27;);</span><br></pre></td></tr></table></figure>\n\n<p>###3 模板编写</p>\n<p>移除<code>views</code>下的<code>*.jade</code>，创建同名的<code>*.html</code>。</p>\n<p>编写<code>index.html</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>index<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    Welcome, &#123;&#123; title &#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>启动服务</p>\n<pre><code>set DEBUG=blog &amp;npm start\n</code></pre>\n<p>打开浏览器访问<code>http://127.0.0.1:3000</code>，能够看到：Welcome, Express</p>\n<h2 id=\"使用Bootstrap和界面设计\"><a href=\"#使用Bootstrap和界面设计\" class=\"headerlink\" title=\"使用Bootstrap和界面设计\"></a>使用Bootstrap和界面设计</h2><p>我们选定Bootstrap开始设计我们的界面。首先<a href=\"http://v3.bootcss.com/getting-started/#download\">下载</a>，解压之后，将文件夹改名为<code>bootstrap-dist</code>并放在<code>public/</code>中，同时下载最新的jquery，放在<code>public/javascripts/</code>中。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3248493-64988b292b7d5378.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"添加bootstrap文件夹到项目中\"></p>\n<p>这里补充一下<strong>Swig的使用</strong><a href=\"http://www.cnblogs.com/elementstorm/p/3142644.html\">参考</a>。</p>\n<p>修改<code>layout.html</code>中的代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>&#123;% block title %&#125;My Blog&#123;% endblock %&#125;<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    &#123;% block head %&#125;</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;/bootstrap-dist/css/bootstrap.min.css&quot;</span>&gt;</span></span><br><span class=\"line\">    &#123;% endblock %&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    &#123;% block content %&#125;&#123;% endblock %&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;/javascripts/jquery-3.2.1.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;/bootstrap-dist/js/bootstrap.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在<code>views/</code>下创建<code>login.html</code>，并编写代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% extends &#x27;layout.html&#x27; %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% block title %&#125;用户登录&#123;% endblock %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% block content %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;margin-top: 30px;&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;row clearfix&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;col-md-12 column&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-horizontal&quot;</span> <span class=\"attr\">role</span>=<span class=\"string\">&quot;form&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;/users/login&quot;</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">                         <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;inputEmail3&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;col-sm-2 control-label&quot;</span>&gt;</span>用户名<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;col-sm-10&quot;</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;inputText3&quot;</span> /&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">                         <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;inputPassword3&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;col-sm-2 control-label&quot;</span>&gt;</span>密码<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;col-sm-10&quot;</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;inputPassword3&quot;</span> /&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;col-sm-offset-2 col-sm-10&quot;</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;checkbox&quot;</span>&gt;</span></span><br><span class=\"line\">                                 <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span> /&gt;</span>记住我<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;col-sm-offset-2 col-sm-10&quot;</span>&gt;</span></span><br><span class=\"line\">                             <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-default&quot;</span>&gt;</span>登陆<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>\n\n<p>目前登录的界面已经创建完成，接下来就是添加路由了。修改<code>routes/users.js</code>文件，添加<code>login</code> GET视图后文件中代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;express&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> router = express.<span class=\"title class_\">Router</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* GET users listing. */</span></span><br><span class=\"line\">router.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;/&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) &#123;</span><br><span class=\"line\">  res.<span class=\"title function_\">send</span>(<span class=\"string\">&#x27;respond with a resource&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">router.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;/login&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>)&#123;</span><br><span class=\"line\">    res.<span class=\"title function_\">render</span>(<span class=\"string\">&#x27;login&#x27;</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = router;</span><br></pre></td></tr></table></figure>\n\n<p>重新启动服务，浏览器访问<a href=\"http://127.0.0.1:3000/users/login\">http://127.0.0.1:3000/users/login</a>，即可以看到登录输入框，则成功！</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3248493-ec03d6cd5bef8840.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"登录界面\"></p>\n<h2 id=\"数据持久化——MongoDB\"><a href=\"#数据持久化——MongoDB\" class=\"headerlink\" title=\"数据持久化——MongoDB\"></a>数据持久化——MongoDB</h2><p>从官网<a href=\"https://www.mongodb.com/download-center#community\">下载</a>并安装。</p>\n<h3 id=\"连接数据库\"><a href=\"#连接数据库\" class=\"headerlink\" title=\"连接数据库\"></a>连接数据库</h3><p>打开工<br>程目录中的package.json，在<code>dependencies</code>属性中添加以下代码代码:</p>\n<pre><code>&quot;connect-mongo&quot;: &quot;&gt;= 0.1.7&quot;,\n&quot;mongodb&quot;: &quot;&gt;= 0.9.9&quot;\n</code></pre>\n<p>然后运行<code>npm install</code>更新依赖的模块。接下来在工程的目录中创建<code>settings.js</code>文件，这个文件用于保存数据库的连接信息。</p>\n<p>将用到的数据库起名为<code>blog</code>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    cookieSecret: &quot;blogid&quot;,</span><br><span class=\"line\">    db: &quot;blog&quot;,</span><br><span class=\"line\">    host: &quot;localhost&quot;,</span><br><span class=\"line\">    port: 27017</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><code>db</code>是数据库的名称，<code>host</code>是数据库的地址，<code>port</code>是数据库的端口。<code>cookieSecret</code>用于<code>Cookie</code>加密与数据库无关，我们留作后用。</p>\n<p>接下来在项目中创建<code>modules</code>目录，然后在其下中创建<code>db.js</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> settings = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;../settings&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> mongodb = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;mongodb&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">Db</span> = mongodb.<span class=\"property\">Db</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">Server</span> = mongodb.<span class=\"property\">Server</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Db</span>(settings.<span class=\"property\">db</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">Server</span>(settings.<span class=\"property\">host</span>, settings.<span class=\"property\">port</span>, &#123;&#125;));</span><br></pre></td></tr></table></figure>\n\n<p>以上代码通过<code>module.exports</code>输出了创建的数据库连接。</p>\n<h3 id=\"会话支持\"><a href=\"#会话支持\" class=\"headerlink\" title=\"会话支持\"></a>会话支持</h3><p>打开<code>app.js</code>添加以下内容：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> session = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;express-session&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> settings = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./settings&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">MongoStore</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;connect-mongo&#x27;</span>)(session);</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(<span class=\"title function_\">session</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">secret</span>: settings.<span class=\"property\">cookieSecret</span>,</span><br><span class=\"line\">    <span class=\"attr\">store</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">MongoStore</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">db</span>: settings.<span class=\"property\">db</span>,</span><br><span class=\"line\">        <span class=\"attr\">url</span>: <span class=\"string\">&#x27;mongodb://localhost/blog&#x27;</span>  </span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;));</span><br></pre></td></tr></table></figure>\n\n<p>其中<code>express.cookieParser()</code>是Cookie解析的中间件。<code>express.session()</code>则提供会话支持，设置它的<code>store</code>参数为<code>MongoStore</code>实例，把会话信息存储到数据库中，以避免丢失。</p>\n<p>这里需要<strong>注意的是在Express4.X版本中，session已经分离出来</strong>，所以这里需要去手动下载：</p>\n<pre><code>npm install express-session\n</code></pre>\n<p>还需要注意的是<strong>store中的url是需要填上去的</strong>！这些地方由于书中所用版本较低的原因，这些都是“坑”，就是改这些东西，和查资料折腾了一下午！</p>\n<h3 id=\"注册功能的实现\"><a href=\"#注册功能的实现\" class=\"headerlink\" title=\"注册功能的实现\"></a>注册功能的实现</h3><p>####1 注册界面</p>\n<p>设计注册界面在<code>views</code>中添加<code>registered.html</code>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% extends &#x27;layout.html&#x27; %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% block title %&#125;用户注册&#123;% endblock %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% block content %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div class=&quot;container&quot; style=&quot;margin-top: 30px;width: 500px;&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#123;% if success %&#125;</span><br><span class=\"line\">    &lt;div class=&quot;alert alert-success alert-dismissable&quot;&gt;</span><br><span class=\"line\">        &lt;button type=&quot;button&quot; class=&quot;close&quot; data-dismiss=&quot;alert&quot; aria-hidden=&quot;true&quot;&gt;×&lt;/button&gt;</span><br><span class=\"line\">        &lt;h4&gt;</span><br><span class=\"line\">            &#123;&#123;success&#125;&#125;</span><br><span class=\"line\">        &lt;/h4&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#123;% endif %&#125;</span><br><span class=\"line\">    &#123;% if error %&#125;</span><br><span class=\"line\">    &lt;div class=&quot;alert alert-danger alert-dismissable&quot;&gt;</span><br><span class=\"line\">        &lt;button type=&quot;button&quot; class=&quot;close&quot; data-dismiss=&quot;alert&quot; aria-hidden=&quot;true&quot;&gt;×&lt;/button&gt;</span><br><span class=\"line\">        &lt;h4&gt;</span><br><span class=\"line\">            &#123;&#123;error[0]&#125;&#125;</span><br><span class=\"line\">        &lt;/h4&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &#123;% endif %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;div class=&quot;row clearfix&quot;&gt;</span><br><span class=\"line\">        &lt;div class=&quot;col-md-12 column&quot;&gt;</span><br><span class=\"line\">            &lt;form class=&quot;form-horizontal&quot; role=&quot;form&quot; method=&quot;post&quot; action=&quot;/users/registered&quot;&gt;</span><br><span class=\"line\">                &lt;div class=&quot;form-group&quot;&gt;</span><br><span class=\"line\">                    &lt;label for=&quot;inputText3&quot; class=&quot;col-sm-2 control-label&quot;&gt;用户名&lt;/label&gt;</span><br><span class=\"line\">                    &lt;div class=&quot;col-sm-10&quot;&gt;</span><br><span class=\"line\">                        &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;inputText3&quot; name=&quot;username&quot;/&gt;</span><br><span class=\"line\">                    &lt;/div&gt;</span><br><span class=\"line\">                &lt;/div&gt;</span><br><span class=\"line\">                &lt;div class=&quot;form-group&quot;&gt;</span><br><span class=\"line\">                    &lt;label for=&quot;inputPassword3&quot; class=&quot;col-sm-2 control-label&quot;&gt;密码&lt;/label&gt;</span><br><span class=\"line\">                    &lt;div class=&quot;col-sm-10&quot;&gt;</span><br><span class=\"line\">                        &lt;input type=&quot;password&quot; class=&quot;form-control&quot; id=&quot;inputPassword3&quot; name=&quot;password&quot; /&gt;</span><br><span class=\"line\">                    &lt;/div&gt;</span><br><span class=\"line\">                &lt;/div&gt;</span><br><span class=\"line\">                &lt;div class=&quot;form-group&quot;&gt;</span><br><span class=\"line\">                    &lt;div class=&quot;col-sm-offset-2 col-sm-10&quot;&gt;</span><br><span class=\"line\">                        &lt;div class=&quot;checkbox&quot;&gt;</span><br><span class=\"line\">                            &lt;label&gt;&lt;input type=&quot;checkbox&quot; /&gt;记住我&lt;/label&gt;</span><br><span class=\"line\">                        &lt;/div&gt;</span><br><span class=\"line\">                    &lt;/div&gt;</span><br><span class=\"line\">                &lt;/div&gt;</span><br><span class=\"line\">                &lt;div class=&quot;form-group&quot;&gt;</span><br><span class=\"line\">                    &lt;div class=&quot;col-sm-offset-2 col-sm-10&quot;&gt;</span><br><span class=\"line\">                        &lt;button type=&quot;submit&quot; class=&quot;btn btn-default&quot;&gt;注册&lt;/button&gt;</span><br><span class=\"line\">                    &lt;/div&gt;</span><br><span class=\"line\">                &lt;/div&gt;</span><br><span class=\"line\">            &lt;/form&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>\n\n<p>界面完成之后，添加路由，在users.js下添加以下内容：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;/registered&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>)&#123;</span><br><span class=\"line\">    res.<span class=\"title function_\">render</span>(<span class=\"string\">&#x27;registered&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>浏览器打开<a href=\"http://127.0.0.1:3000/users/registered\">http://127.0.0.1:3000/users/registered</a>，这个页面刚开始进去是这样子的：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3248493-18c26bef7da0891c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"注册界面\"></p>\n<p>当注册失败是这样子的：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3248493-efba69537fd37231.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"注册失败\"></p>\n<p>成功我就不贴了。接下来继续：</p>\n<p>####2 注册响应</p>\n<p>在user.js中添加<code>registered</code>的<code>post</code>请求：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">User</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../modules/user&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">router.<span class=\"title function_\">post</span>(<span class=\"string\">&#x27;/registered&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(req.<span class=\"property\">body</span>[<span class=\"string\">&#x27;username&#x27;</span>]))&#123;</span><br><span class=\"line\">        req.<span class=\"title function_\">flash</span>(<span class=\"string\">&quot;error&quot;</span>, <span class=\"string\">&#x27;用户名不能为空！&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res.<span class=\"title function_\">redirect</span>(<span class=\"string\">&quot;/users/registered&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> user = <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>: req.<span class=\"property\">body</span>[<span class=\"string\">&#x27;username&#x27;</span>],</span><br><span class=\"line\">        <span class=\"attr\">password</span>: req.<span class=\"property\">body</span>[<span class=\"string\">&#x27;password&#x27;</span>],</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 检查用户是否存在</span></span><br><span class=\"line\">    <span class=\"title class_\">User</span>.<span class=\"title function_\">get</span>(user.<span class=\"property\">name</span>, <span class=\"keyword\">function</span>(<span class=\"params\">err, has_user</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(has_user)&#123;</span><br><span class=\"line\">            err = &#123; <span class=\"string\">&quot;errmsg&quot;</span>: <span class=\"string\">&quot;用户已存在&quot;</span>&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">            req.<span class=\"title function_\">flash</span>(<span class=\"string\">&quot;error&quot;</span>, err.<span class=\"property\">errmsg</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res.<span class=\"title function_\">redirect</span>(<span class=\"string\">&quot;/users/registered&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 保存新用户</span></span><br><span class=\"line\">        user.<span class=\"title function_\">save</span>(<span class=\"keyword\">function</span>(<span class=\"params\">err</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">                req.<span class=\"title function_\">flash</span>(<span class=\"string\">&quot;error&quot;</span>, err.<span class=\"property\">errmsg</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> res.<span class=\"title function_\">redirect</span>(<span class=\"string\">&quot;/users/registered&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            req.<span class=\"title function_\">flash</span>(<span class=\"string\">&quot;success&quot;</span>, <span class=\"string\">&quot;注册成功！&quot;</span>);</span><br><span class=\"line\">            res.<span class=\"title function_\">redirect</span>(<span class=\"string\">&quot;/users/login&quot;</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>在这段代码中：</p>\n<ul>\n<li><strong>req.body</strong>就是POST请求信息解析过后的对象。</li>\n<li><strong>req.flash</strong>是Express提供的一个奇妙的工具，通过它保存的变量只会在用户当前和下一次的请求中被访问，之后会被清除。当然这里使用的时候需要就行一些设置，待会再说。</li>\n<li><strong>res.redirect</strong>是重定向功能。</li>\n<li><strong>User</strong>对象，是接下来要创建的用户模型。实现了用户的判断和保存等。</li>\n</ul>\n<p>####3 创建用户模型</p>\n<p>User是一个描述数据的对象，即MVC架构中的模型。在modules目录下创建user.js，编写内容如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mongodb = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./db&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">User</span>(<span class=\"params\">user</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = user.<span class=\"property\">name</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">password</span> = user.<span class=\"property\">password</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"title class_\">User</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">User</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">save</span> = <span class=\"keyword\">function</span> <span class=\"title function_\">save</span>(<span class=\"params\">callback</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> user = &#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">name</span>,</span><br><span class=\"line\">        <span class=\"attr\">password</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">password</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    mongodb.<span class=\"title function_\">open</span>(<span class=\"keyword\">function</span>(<span class=\"params\">err, db</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"title function_\">callback</span>(err);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        db.<span class=\"title function_\">collection</span>(<span class=\"string\">&#x27;users&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">err, collection</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">                mongodb.<span class=\"title function_\">close</span>();</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"title function_\">callback</span>(err);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 将name属性添加为索引</span></span><br><span class=\"line\">            collection.<span class=\"title function_\">ensureIndex</span>(<span class=\"string\">&#x27;name&#x27;</span>, &#123;<span class=\"attr\">unique</span>: <span class=\"literal\">true</span>&#125;);</span><br><span class=\"line\">            <span class=\"comment\">// 写入新用户到文档</span></span><br><span class=\"line\">            collection.<span class=\"title function_\">insert</span>(user, <span class=\"keyword\">function</span>(<span class=\"params\">err, user</span>)&#123;</span><br><span class=\"line\">                mongodb.<span class=\"title function_\">close</span>();</span><br><span class=\"line\">                <span class=\"title function_\">callback</span>(err, user);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">User</span>.<span class=\"property\">get</span> = <span class=\"keyword\">function</span> <span class=\"title function_\">get</span>(<span class=\"params\">username, callback</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    mongodb.<span class=\"title function_\">open</span>(<span class=\"keyword\">function</span>(<span class=\"params\">err, db</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"title function_\">callback</span>(err);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        db.<span class=\"title function_\">collection</span>(<span class=\"string\">&#x27;users&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">err, collection</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(err) &#123;</span><br><span class=\"line\">                mongodb.<span class=\"title function_\">close</span>();</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"title function_\">callback</span>(err);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            collection.<span class=\"title function_\">findOne</span>(&#123;<span class=\"attr\">name</span>: username&#125;, <span class=\"keyword\">function</span>(<span class=\"params\">err, doc</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 对数据库操作完成之后，及时关闭数据库</span></span><br><span class=\"line\">                mongodb.<span class=\"title function_\">close</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 如果同名的用户存在，那么就直接返回这个用户信息</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(doc)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"title function_\">callback</span>(err, doc);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"title function_\">callback</span>(err, <span class=\"literal\">null</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>以上代码实现了两个接口，<code>User.prototype.save</code>和<code>User.get</code>，前者是<strong>对象实例的方法</strong>，用于将用户对象的数据保存到数据库中，后者是<strong>对象构造函数的方法</strong>，用于从数据库中查找指定的用户。</p>\n<p>注意：以上两个接口的类型是不一样的，所以在前面<code>users.js</code>中，是使用<code>User.get(...)</code>和<code>var user = new User(..);user.save(...);</code>。</p>\n<p>####4 视图交互</p>\n<p>在视图中访问会话中的用户数据，同时为了显示错误和成功的信息，也要增加响应的函数。在app.js中添加以下内容：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> flash = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;connect-flash&#x27;</span>);</span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(<span class=\"title function_\">flash</span>());</span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(<span class=\"keyword\">function</span>(<span class=\"params\">req,res,next</span>)&#123;</span><br><span class=\"line\">  res.<span class=\"property\">locals</span>.<span class=\"property\">user</span>=req.<span class=\"property\">session</span>.<span class=\"property\">user</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> err = req.<span class=\"title function_\">flash</span>(<span class=\"string\">&#x27;error&#x27;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> success = req.<span class=\"title function_\">flash</span>(<span class=\"string\">&#x27;success&#x27;</span>);</span><br><span class=\"line\">  res.<span class=\"property\">locals</span>.<span class=\"property\">error</span> = err.<span class=\"property\">length</span> ? err : <span class=\"literal\">null</span>;</span><br><span class=\"line\">  res.<span class=\"property\">locals</span>.<span class=\"property\">success</span> = success.<span class=\"property\">length</span> ? success : <span class=\"literal\">null</span>;</span><br><span class=\"line\">   </span><br><span class=\"line\">  <span class=\"title function_\">next</span>();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><code>&#39;connect-flash</code>也是需要通过<code>npm install connect-flash</code>进行安装的。这里还需要注意的是以上在app.js中添加的代码在文件中的顺序很重要。这点也是一个大坑：</p>\n<p>数据库连接在相应函数前面，响应函数在路由前面，这样才能在代码中正确调用<code>flash()</code>方法。</p>\n<p>####5 小段总结</p>\n<p>到这里注册的功能差不多就完成了，假设没有出现意外的话。祝你我都好运，以上代码折腾了一天，但是基本上让自己了解了Express和MongoDB的相互配合使用，也对整个系统的数据流了解的更加透彻。</p>\n<p>接下来就是实现登录和首页的问题了，到这里就不贴代码了，会将现在实现的这些代码放在github上，做一个tab，感兴趣的同学可以去看看。</p>"},{"title":"(四)NodeJs核心模块","date":"2017-10-25T16:00:00.000Z","_content":"\n\n> 本学习笔记是根据《Node.js开发指南》一书进行学习。\n\n## 全局对象\n\nJavaScript中有一个特殊的对象，称为全局对象（Global Object），**它及其所有属性都可以在程序的任何地方访问**，即全局变量。在浏览器JavaScript中，通常window是全局对象，而NodeJs中的全局对象是global，所有全局变量（除了global本身以外）都是global对象的属性。\n\n### 全局对象和全局变量\n\n按照ECMAScript的定义，满足以下条件的变量是全局变量：\n\n- 在最外层定义的变量\n- 全局对象的属性\n- 隐式定义的变量（未定义直接赋值的变量）\n\n在NodeJs中你不可能在最外层定义变量，因为所有用户代码都是属于当前模块的，而模块本身不是最外层上下文。\n\n<!-- more -->\n\n**永远使用var定义变量以避免引入全局变量，因为全局变量会污染命名空间，提高代码的耦合风险。**\n\n### process\n\nprocess是一个全局变量，即global对象的属性。它用于描述当前NodeJs进程状态的对象，提供了一个与操作系统的简单接口。\n\n- `process.argv`是命令行参数数组，第一个元素是node，第二个元素是脚本文件名，从第三个元素开始每个元素是一个运行参数。\n- `process.stdout`是标准输出流，通常我们使用的console.log()向标准输出打印字符，而`process.stdout.write()`函数提供了更底层的接口。\n-` process.stdin`是标准输入流，初始时它是被暂停的，要想从标准输入读取数据，你必须恢复流，并手动编写流的事件响应函数。\n- `process.nextTick(callback)`的功能是为事件循环设置一项任务，NodeJs会在下次事件循环调响应时调用`callback`。\n\n```js\n// debug.js\nconsole.log(process.argv);\n\nprocess.stdin.resume();\nprocess.stdin.on(\"data\", function (data) {\n    process.stdout.write(data.toString());\n});\n```\n\n结果：\n\n![image.png](http://upload-images.jianshu.io/upload_images/3248493-c706e1b494bc5f76.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**不要使用`setTimeout(fn, 0)`代替`process.nextTick(callback)`，前者比后者效率要低得多。**\n\n### console\n\n`console`对象用于向标准输出流（stdout）或标准错误流（stderr）输出字符。\n\n- console.log()向标准输出流打印字符并以换行符结束。\n- console.error():与console.log()用法相同，只是向标准错误流输出。\n- console.trace():向标准错误流输出当前的调用栈。\n\nconsole.log接受若干个参数，如果只有一个参数，则输出这个参数的字符串形式。如果有多个参数，则以类似于C语言printf()命令的格式输出。第一个参数是一个字符串，如果没有参数，只打印一个换行。\n\n## 常用工具util\n\n`util`是一个Node.js核心模块，提供常用函数的集合\n\n### util.inherits\n\n**JavaScript的面向对象特性是基于原型的，与常见的基于类的不同。JavaScript没有提供对象继承的语言级别特性，而是通过原型复制来实现的**\n\n`util.inherits(constructor, superConstructor)`是一个实现对象间原型继承的函数。\n\n```js\n// inherits.js\nvar util = require(\"util\");\n\nfunction Base() {\n    this.name = \"base\";\n    this.base = 1991;\n    this.sayHello = function () {\n        console.log(\"Hello\"+this.name);\n    };\n}\nBase.prototype.showName = function () {\n    console.log(this.name);\n};\n\nfunction Sub() {\n    this.name = \"sub\";\n}\n\nutil.inherits(Sub, Base);\n\nvar newBase = new Base();\nnewBase.showName();\nnewBase.sayHello();\nconsole.log(newBase);\n\nvar newSub = new Sub();\nnewSub.showName();\n// newSub.sayHello();\nconsole.log(newSub);\n```\n\n![image.png](http://upload-images.jianshu.io/upload_images/3248493-c100f35b4e1e1887.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n`Sub`仅仅继承了`Base`在原型中定义的函数，而构造函数内部创造的`base`属性和`sayHello`函数都没有被Sub继承。同时，在原型中定义的属性不会被console.log作为对象的属性输出。\n\n### util.inspect\n\n`util.inspect(object,[showHidden],[depth],[colors])`是一个将任意对象转换为字符串的方法，通常用于调试和错误输出。它至少接受一个参数object，即要转换的对象。\n\n`util`还提供了`util.isArray()`、`util.isRegExp()`、`util.isDate()`、`util.isError()`四个类型测试工具，以及`util.format()`、`util.debug()`等工具。\n\n## 事件驱动events\n\nevents是NodeJs最重要的模块。NodeJs本身架构就是事件式的，而它提供了唯一的接口，所以堪称NodeJs事件编程的基石。\n\n### 事件发射器\n\n`events`模块只提供了一个对象：`events.EventEmitter`。`EventEmitter`的核心就是**事件发射与事件监听器功能的封装**。`EventEmitter`的**每个事件由一个事件名和若干个参数组成**，**事件名是一个字符串**，通常表达一定的语义。对于每个事件，`EventEmitter`支持若干个事件监听器。当事件发射时，注册到这个事件的事件监听器被依次调用，事件参数作为回调函数参数传递。\n\n```js\nvar EventEmitter = require(\"events\").EventEmitter;\nvar event = new EventEmitter();\nevent.on(\"some_event\", function(){\n    console.log(\"some_event start1\");\n});\nevent.on(\"some_event\", function () {\n    console.log(\"some_event start2\")\n});\n\nevent.emit(\"some_event\");\n```\n\n执行以上代码输出：\n```\nsome_event start1\nsome_event start2\n```\n\n运行结果中可以看到两个事件监听器回调函数被先后调用。\n\n`EventEmitter`常用的API：\n\n- `EventEmitter.on(event, listener)`为指定事件注册一个监听器，接受一个字符串`event`和一个回调函数`listener`。\n- `EventEmitter.emit(event, [arg1], [arg2], [...])`发射`event`事件，传递若干可选参数到事件监听器的参数表。\n- `EventEmitter.once(event, listener)`为指定事件注册一个单次监听器，即监听器最多只会触发一次，触发后立刻解除该监听\n- `EventEmitter.removeListener(event, listener)`移除指定事件的某个监听器，`listener`必须是该事件已经注册过的监听器。\n- `EventEmitter.removeAllListeners([event])`移除所有事件的所有监听器，如果指定`event`，则移除指定事件的所有监听器。\n\n```js\nvar EventEmitter = require(\"events\").EventEmitter;\nvar event = new EventEmitter();\nevent.on(\"some_event\", function(){\n    console.log(\"some_event start1\");\n});\nevent.on(\"some_event\", function () {\n    console.log(\"some_event start2\")\n});\n\nevent.emit(\"some_event\");\n\nsetTimeout(function(){\n    event.emit(\"some_event\");\n}, 1000);\n\nevent.removeAllListeners(\"some_event\");\nevent.emit(\"some_event\");\n```\n执行以上代码，输出：\n\n![image.png](http://upload-images.jianshu.io/upload_images/3248493-467bc54781ec87df.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### error事件\n\n`EventEmitter`定义了一个特殊的事件`error`，它包含了“错误”的语义，我们在遇到异常的时候通常会发射`error`事件。\n\n### 继承EventEmitter\n\n大多数时候我们不会直接使用EventEmitter，而是**在对象中继承它**。包括`fs`、`net`、`http`在内的，只要是支持事件响应的核心模块都是`EventEmitter`的子类。\n\n原因有两点。首先，具有某个实体功能的对象实现事件符合语义，事件的监听和发射应该是一个对象的方法。其次JavaScript的对象机制是基于原型的，支持部分多重继承，继承`EventEmitter`不会打乱对象原有的继承关系。\n\n## 文件系统fs\n\n### fs.readFile\n\n`fs.readFile(filename, [encoding], [callback(err, data)])`是最简单的读取文件的函数。\n\n```js\nvar fs = require(\"fs\");\nfs.readFile(\"server.js\", \"utf-8\", function(err, data){\n    if (err){\n        console.log(err);\n    }else{\n        console.log(data);\n    }\n})\n```\n\n### fs.readFileSync\n\n`fs.readFileSync(filename, [encoding])`是`fs.readFile`同步的版本。它接受的参数和`fs.readFile`相同，而读取到的文件内容会以函数返回值的形式返回。如果有错误发生，fs将会抛出异常，你需要使用`try`和`catch`捕捉并处理异常。\n\n### fs.open\n\n### fs.read\n\n一般来说，除非必要，否则不要使用以上两种方式读取文件，因为它要求你手动管理缓冲区和文件指针，尤其是在你不知道文件大小的时候，这将会是一件很麻烦的事情。\n\n## HTTP服务器与客户端\n\n### HTTP服务器\n\n**http.Server的事件**\n\n`http.Server`是一个基于事件的HTTP服务器,所有的请求都被封装为独立的事件,开发者只需要对它的事件编写响应函数即可实现HTTP服务器的所有功能。它继承自`EventEmitter`,提供了以下几个事件：\n\n- request:当客户端请求到来时,该事件被触发,提供两个参数`req`和`res`,分别是`http.ServerRequest`和`http.ServerResponse`的实例,表示请求和响应信息。\n- connection:当TCP连接建立时,该事件被触发,提供一个参数`socket`,为`net.Socket`的实例。`connection`事件的粒度要大于`request`,因为客户端在Keep-Alive模式下可能会在同一个连接内发送多次请求。\n- close :当服务器关闭时,该事件被触发。注意不是在用户连接断开时。\n- checkContinue、upgrade、clientError事件。\n\n最常用的就是`request`了,因此`http`提供了一个捷径:`http.createServer([requestListener])`,功能是创建一个HTTP服务器并将`requestListener`作为`request`事件的监听函数。\n\n**http.ServerRequest**\n\n一般由`http.Server`的`request`事件发送,作为第一个参数传递,通常简称request或req。`http.ServerRequest`提供了以下3个事件用于控制请求体传输：\n\n- data :当请求体数据到来时,该事件被触发。该事件提供一个参数chunk,表示接收到的数据。如果该事件没有被监听,那么请求体将会被抛弃。该事件可能会被调用多次。\n- end :当请求体数据传输完成时,该事件被触发,此后将不会再有数据到来。\n- close:用户当前请求结束时,该事件被触发。不同于end,如果用户强制终止了传输,也还是调用close。\n\n**获取GET请求内容**\n\n`url`模块中的parse函数提供解析客户端的表单请求。\n\n```js\n// httpServerRequestGet.js\nvar http = require(\"http\");\nvar url = require(\"url\");\nvar util = require(\"util\");\n\nhttp.createServer(function(req, res){\n    res.writeHead(200, {\"Conetnet-Type\": \"text/html\"});\n    res.end(util.inspect(url.parse(req.url, true)));\n}).listen(3000);\n```\n\n在浏览器中访问`http://127.0.0.1:3000/user?name=byvoid&email=byvoid@byvoid.com`\n\n![image.jpg](http://upload-images.jianshu.io/upload_images/3248493-d9e60b84f5cb9090.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n通过`url.parse`,原始的`path`被解析为一个对象,其中`query`就是我们所谓的GET请求的内容,而路径则是`pathname`。\n\n**获取POST请求内容**\n\n```js\n// httpServerRequestPost.js\nvar http = require(\"http\");\nvar querystring = require(\"querystring\");\nvar util = require(\"util\");\n\nhttp.createServer(function(req, res){\n    var post = \"\";\n    req.on(\"data\", function(chunk){\n        post += chunk\n    });\n    req.on(\"end\", function(){\n        post = querystring.parse(post);\n        res.end(util.inspect(post));\n    });\n}).listen(3000)\n```\n\n通过事件监听函数。上面的代码仅供理解使用，在实际编码中不赞同这样的做法。\n\n**http.ServerResponse**\n\n返回给客户端的信息，也是由http.Server的request事件发送的,作为第二个参数传递,一般简称为response或res。\n\nhttp.ServerResponse有三个重要的成员函数,用于返回响应头、响应内容以及结束请求。\n\n- response.writeHead(statusCode, [headers])：该函数在一个请求内最多只能调用一次。\n- response.write(data, [encoding])：在response.end调用之前,response.write可以被多次调用。\n- response.end([data], [encoding])： 结束响应,告知客户端所有发送已经完成。\n\n### HTTP客户端\n\nhttp模块提供了两个函数`http.request`和`http.get`。\n\n- http.request(options,callback)发起HTTP请求。接受两个参数,`option`是一个类似关联数组的对象,表示请求的参数,`callback`是请求的回调函数。\n\n```js\n// httpRequst.js\nvar http = require(\"http\");\nvar querystring = require(\"querystring\");\n\nvar content = querystring.stringify({\n    name: \"byvoid\",\n    email: \"byvoid@byvoid.com\",\n    address: \"Tangshan\",\n});\n\nvar options = {\n    host: \"127.0.0.1\",\n    port: 3000,\n    path: '/user?hello=wen',\n    method: \"POST\",\n    headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n        \"Content-Length\": content.length\n    }\n};\n\nvar req = http.request(options, function(res){\n    res.setEncoding(\"utf-8\");\n    res.on(\"data\", function(data){\n        console.log(data);\n    });\n});\n\nreq.write(content);\nreq.end();\n```\n\n- http.get(options, callback) `http`模块还提供了一个更加简便的方法用于处理GET请求:`http.get`。它是`http.request`的简化版,唯一的区别在于`http.get`自动将请求方法设为了GET请求,同时不需要手动调用`req.end()`。\n\n**http.ClientRequest**\n\n`http.ClientRequest`是由`http.request`或`http.get`返回产生的对象,表示一个已经产生而且正在进行中的HTTP请求\n\n**http.ClientResponse**\n\n提供了三个事件`data`、`end`和`close`,分别在数据到达、传输结束和连接结束时触发,其中`data`事件传递一个参数`chunk`,表示接收到的数据。","source":"_posts/(四)NodeJs核心模块.md","raw":"---\ntitle: (四)NodeJs核心模块\ndate: 2017-10-26\ntags: [NodeJs, 阅读笔记]\n---\n\n\n> 本学习笔记是根据《Node.js开发指南》一书进行学习。\n\n## 全局对象\n\nJavaScript中有一个特殊的对象，称为全局对象（Global Object），**它及其所有属性都可以在程序的任何地方访问**，即全局变量。在浏览器JavaScript中，通常window是全局对象，而NodeJs中的全局对象是global，所有全局变量（除了global本身以外）都是global对象的属性。\n\n### 全局对象和全局变量\n\n按照ECMAScript的定义，满足以下条件的变量是全局变量：\n\n- 在最外层定义的变量\n- 全局对象的属性\n- 隐式定义的变量（未定义直接赋值的变量）\n\n在NodeJs中你不可能在最外层定义变量，因为所有用户代码都是属于当前模块的，而模块本身不是最外层上下文。\n\n<!-- more -->\n\n**永远使用var定义变量以避免引入全局变量，因为全局变量会污染命名空间，提高代码的耦合风险。**\n\n### process\n\nprocess是一个全局变量，即global对象的属性。它用于描述当前NodeJs进程状态的对象，提供了一个与操作系统的简单接口。\n\n- `process.argv`是命令行参数数组，第一个元素是node，第二个元素是脚本文件名，从第三个元素开始每个元素是一个运行参数。\n- `process.stdout`是标准输出流，通常我们使用的console.log()向标准输出打印字符，而`process.stdout.write()`函数提供了更底层的接口。\n-` process.stdin`是标准输入流，初始时它是被暂停的，要想从标准输入读取数据，你必须恢复流，并手动编写流的事件响应函数。\n- `process.nextTick(callback)`的功能是为事件循环设置一项任务，NodeJs会在下次事件循环调响应时调用`callback`。\n\n```js\n// debug.js\nconsole.log(process.argv);\n\nprocess.stdin.resume();\nprocess.stdin.on(\"data\", function (data) {\n    process.stdout.write(data.toString());\n});\n```\n\n结果：\n\n![image.png](http://upload-images.jianshu.io/upload_images/3248493-c706e1b494bc5f76.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**不要使用`setTimeout(fn, 0)`代替`process.nextTick(callback)`，前者比后者效率要低得多。**\n\n### console\n\n`console`对象用于向标准输出流（stdout）或标准错误流（stderr）输出字符。\n\n- console.log()向标准输出流打印字符并以换行符结束。\n- console.error():与console.log()用法相同，只是向标准错误流输出。\n- console.trace():向标准错误流输出当前的调用栈。\n\nconsole.log接受若干个参数，如果只有一个参数，则输出这个参数的字符串形式。如果有多个参数，则以类似于C语言printf()命令的格式输出。第一个参数是一个字符串，如果没有参数，只打印一个换行。\n\n## 常用工具util\n\n`util`是一个Node.js核心模块，提供常用函数的集合\n\n### util.inherits\n\n**JavaScript的面向对象特性是基于原型的，与常见的基于类的不同。JavaScript没有提供对象继承的语言级别特性，而是通过原型复制来实现的**\n\n`util.inherits(constructor, superConstructor)`是一个实现对象间原型继承的函数。\n\n```js\n// inherits.js\nvar util = require(\"util\");\n\nfunction Base() {\n    this.name = \"base\";\n    this.base = 1991;\n    this.sayHello = function () {\n        console.log(\"Hello\"+this.name);\n    };\n}\nBase.prototype.showName = function () {\n    console.log(this.name);\n};\n\nfunction Sub() {\n    this.name = \"sub\";\n}\n\nutil.inherits(Sub, Base);\n\nvar newBase = new Base();\nnewBase.showName();\nnewBase.sayHello();\nconsole.log(newBase);\n\nvar newSub = new Sub();\nnewSub.showName();\n// newSub.sayHello();\nconsole.log(newSub);\n```\n\n![image.png](http://upload-images.jianshu.io/upload_images/3248493-c100f35b4e1e1887.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n`Sub`仅仅继承了`Base`在原型中定义的函数，而构造函数内部创造的`base`属性和`sayHello`函数都没有被Sub继承。同时，在原型中定义的属性不会被console.log作为对象的属性输出。\n\n### util.inspect\n\n`util.inspect(object,[showHidden],[depth],[colors])`是一个将任意对象转换为字符串的方法，通常用于调试和错误输出。它至少接受一个参数object，即要转换的对象。\n\n`util`还提供了`util.isArray()`、`util.isRegExp()`、`util.isDate()`、`util.isError()`四个类型测试工具，以及`util.format()`、`util.debug()`等工具。\n\n## 事件驱动events\n\nevents是NodeJs最重要的模块。NodeJs本身架构就是事件式的，而它提供了唯一的接口，所以堪称NodeJs事件编程的基石。\n\n### 事件发射器\n\n`events`模块只提供了一个对象：`events.EventEmitter`。`EventEmitter`的核心就是**事件发射与事件监听器功能的封装**。`EventEmitter`的**每个事件由一个事件名和若干个参数组成**，**事件名是一个字符串**，通常表达一定的语义。对于每个事件，`EventEmitter`支持若干个事件监听器。当事件发射时，注册到这个事件的事件监听器被依次调用，事件参数作为回调函数参数传递。\n\n```js\nvar EventEmitter = require(\"events\").EventEmitter;\nvar event = new EventEmitter();\nevent.on(\"some_event\", function(){\n    console.log(\"some_event start1\");\n});\nevent.on(\"some_event\", function () {\n    console.log(\"some_event start2\")\n});\n\nevent.emit(\"some_event\");\n```\n\n执行以上代码输出：\n```\nsome_event start1\nsome_event start2\n```\n\n运行结果中可以看到两个事件监听器回调函数被先后调用。\n\n`EventEmitter`常用的API：\n\n- `EventEmitter.on(event, listener)`为指定事件注册一个监听器，接受一个字符串`event`和一个回调函数`listener`。\n- `EventEmitter.emit(event, [arg1], [arg2], [...])`发射`event`事件，传递若干可选参数到事件监听器的参数表。\n- `EventEmitter.once(event, listener)`为指定事件注册一个单次监听器，即监听器最多只会触发一次，触发后立刻解除该监听\n- `EventEmitter.removeListener(event, listener)`移除指定事件的某个监听器，`listener`必须是该事件已经注册过的监听器。\n- `EventEmitter.removeAllListeners([event])`移除所有事件的所有监听器，如果指定`event`，则移除指定事件的所有监听器。\n\n```js\nvar EventEmitter = require(\"events\").EventEmitter;\nvar event = new EventEmitter();\nevent.on(\"some_event\", function(){\n    console.log(\"some_event start1\");\n});\nevent.on(\"some_event\", function () {\n    console.log(\"some_event start2\")\n});\n\nevent.emit(\"some_event\");\n\nsetTimeout(function(){\n    event.emit(\"some_event\");\n}, 1000);\n\nevent.removeAllListeners(\"some_event\");\nevent.emit(\"some_event\");\n```\n执行以上代码，输出：\n\n![image.png](http://upload-images.jianshu.io/upload_images/3248493-467bc54781ec87df.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### error事件\n\n`EventEmitter`定义了一个特殊的事件`error`，它包含了“错误”的语义，我们在遇到异常的时候通常会发射`error`事件。\n\n### 继承EventEmitter\n\n大多数时候我们不会直接使用EventEmitter，而是**在对象中继承它**。包括`fs`、`net`、`http`在内的，只要是支持事件响应的核心模块都是`EventEmitter`的子类。\n\n原因有两点。首先，具有某个实体功能的对象实现事件符合语义，事件的监听和发射应该是一个对象的方法。其次JavaScript的对象机制是基于原型的，支持部分多重继承，继承`EventEmitter`不会打乱对象原有的继承关系。\n\n## 文件系统fs\n\n### fs.readFile\n\n`fs.readFile(filename, [encoding], [callback(err, data)])`是最简单的读取文件的函数。\n\n```js\nvar fs = require(\"fs\");\nfs.readFile(\"server.js\", \"utf-8\", function(err, data){\n    if (err){\n        console.log(err);\n    }else{\n        console.log(data);\n    }\n})\n```\n\n### fs.readFileSync\n\n`fs.readFileSync(filename, [encoding])`是`fs.readFile`同步的版本。它接受的参数和`fs.readFile`相同，而读取到的文件内容会以函数返回值的形式返回。如果有错误发生，fs将会抛出异常，你需要使用`try`和`catch`捕捉并处理异常。\n\n### fs.open\n\n### fs.read\n\n一般来说，除非必要，否则不要使用以上两种方式读取文件，因为它要求你手动管理缓冲区和文件指针，尤其是在你不知道文件大小的时候，这将会是一件很麻烦的事情。\n\n## HTTP服务器与客户端\n\n### HTTP服务器\n\n**http.Server的事件**\n\n`http.Server`是一个基于事件的HTTP服务器,所有的请求都被封装为独立的事件,开发者只需要对它的事件编写响应函数即可实现HTTP服务器的所有功能。它继承自`EventEmitter`,提供了以下几个事件：\n\n- request:当客户端请求到来时,该事件被触发,提供两个参数`req`和`res`,分别是`http.ServerRequest`和`http.ServerResponse`的实例,表示请求和响应信息。\n- connection:当TCP连接建立时,该事件被触发,提供一个参数`socket`,为`net.Socket`的实例。`connection`事件的粒度要大于`request`,因为客户端在Keep-Alive模式下可能会在同一个连接内发送多次请求。\n- close :当服务器关闭时,该事件被触发。注意不是在用户连接断开时。\n- checkContinue、upgrade、clientError事件。\n\n最常用的就是`request`了,因此`http`提供了一个捷径:`http.createServer([requestListener])`,功能是创建一个HTTP服务器并将`requestListener`作为`request`事件的监听函数。\n\n**http.ServerRequest**\n\n一般由`http.Server`的`request`事件发送,作为第一个参数传递,通常简称request或req。`http.ServerRequest`提供了以下3个事件用于控制请求体传输：\n\n- data :当请求体数据到来时,该事件被触发。该事件提供一个参数chunk,表示接收到的数据。如果该事件没有被监听,那么请求体将会被抛弃。该事件可能会被调用多次。\n- end :当请求体数据传输完成时,该事件被触发,此后将不会再有数据到来。\n- close:用户当前请求结束时,该事件被触发。不同于end,如果用户强制终止了传输,也还是调用close。\n\n**获取GET请求内容**\n\n`url`模块中的parse函数提供解析客户端的表单请求。\n\n```js\n// httpServerRequestGet.js\nvar http = require(\"http\");\nvar url = require(\"url\");\nvar util = require(\"util\");\n\nhttp.createServer(function(req, res){\n    res.writeHead(200, {\"Conetnet-Type\": \"text/html\"});\n    res.end(util.inspect(url.parse(req.url, true)));\n}).listen(3000);\n```\n\n在浏览器中访问`http://127.0.0.1:3000/user?name=byvoid&email=byvoid@byvoid.com`\n\n![image.jpg](http://upload-images.jianshu.io/upload_images/3248493-d9e60b84f5cb9090.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n通过`url.parse`,原始的`path`被解析为一个对象,其中`query`就是我们所谓的GET请求的内容,而路径则是`pathname`。\n\n**获取POST请求内容**\n\n```js\n// httpServerRequestPost.js\nvar http = require(\"http\");\nvar querystring = require(\"querystring\");\nvar util = require(\"util\");\n\nhttp.createServer(function(req, res){\n    var post = \"\";\n    req.on(\"data\", function(chunk){\n        post += chunk\n    });\n    req.on(\"end\", function(){\n        post = querystring.parse(post);\n        res.end(util.inspect(post));\n    });\n}).listen(3000)\n```\n\n通过事件监听函数。上面的代码仅供理解使用，在实际编码中不赞同这样的做法。\n\n**http.ServerResponse**\n\n返回给客户端的信息，也是由http.Server的request事件发送的,作为第二个参数传递,一般简称为response或res。\n\nhttp.ServerResponse有三个重要的成员函数,用于返回响应头、响应内容以及结束请求。\n\n- response.writeHead(statusCode, [headers])：该函数在一个请求内最多只能调用一次。\n- response.write(data, [encoding])：在response.end调用之前,response.write可以被多次调用。\n- response.end([data], [encoding])： 结束响应,告知客户端所有发送已经完成。\n\n### HTTP客户端\n\nhttp模块提供了两个函数`http.request`和`http.get`。\n\n- http.request(options,callback)发起HTTP请求。接受两个参数,`option`是一个类似关联数组的对象,表示请求的参数,`callback`是请求的回调函数。\n\n```js\n// httpRequst.js\nvar http = require(\"http\");\nvar querystring = require(\"querystring\");\n\nvar content = querystring.stringify({\n    name: \"byvoid\",\n    email: \"byvoid@byvoid.com\",\n    address: \"Tangshan\",\n});\n\nvar options = {\n    host: \"127.0.0.1\",\n    port: 3000,\n    path: '/user?hello=wen',\n    method: \"POST\",\n    headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n        \"Content-Length\": content.length\n    }\n};\n\nvar req = http.request(options, function(res){\n    res.setEncoding(\"utf-8\");\n    res.on(\"data\", function(data){\n        console.log(data);\n    });\n});\n\nreq.write(content);\nreq.end();\n```\n\n- http.get(options, callback) `http`模块还提供了一个更加简便的方法用于处理GET请求:`http.get`。它是`http.request`的简化版,唯一的区别在于`http.get`自动将请求方法设为了GET请求,同时不需要手动调用`req.end()`。\n\n**http.ClientRequest**\n\n`http.ClientRequest`是由`http.request`或`http.get`返回产生的对象,表示一个已经产生而且正在进行中的HTTP请求\n\n**http.ClientResponse**\n\n提供了三个事件`data`、`end`和`close`,分别在数据到达、传输结束和连接结束时触发,其中`data`事件传递一个参数`chunk`,表示接收到的数据。","slug":"(四)NodeJs核心模块","published":1,"updated":"2021-06-20T10:25:20.122Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluqa1hi80006rlog1dv29692","content":"<blockquote>\n<p>本学习笔记是根据《Node.js开发指南》一书进行学习。</p>\n</blockquote>\n<h2 id=\"全局对象\"><a href=\"#全局对象\" class=\"headerlink\" title=\"全局对象\"></a>全局对象</h2><p>JavaScript中有一个特殊的对象，称为全局对象（Global Object），<strong>它及其所有属性都可以在程序的任何地方访问</strong>，即全局变量。在浏览器JavaScript中，通常window是全局对象，而NodeJs中的全局对象是global，所有全局变量（除了global本身以外）都是global对象的属性。</p>\n<h3 id=\"全局对象和全局变量\"><a href=\"#全局对象和全局变量\" class=\"headerlink\" title=\"全局对象和全局变量\"></a>全局对象和全局变量</h3><p>按照ECMAScript的定义，满足以下条件的变量是全局变量：</p>\n<ul>\n<li>在最外层定义的变量</li>\n<li>全局对象的属性</li>\n<li>隐式定义的变量（未定义直接赋值的变量）</li>\n</ul>\n<p>在NodeJs中你不可能在最外层定义变量，因为所有用户代码都是属于当前模块的，而模块本身不是最外层上下文。</p>\n<span id=\"more\"></span>\n\n<p><strong>永远使用var定义变量以避免引入全局变量，因为全局变量会污染命名空间，提高代码的耦合风险。</strong></p>\n<h3 id=\"process\"><a href=\"#process\" class=\"headerlink\" title=\"process\"></a>process</h3><p>process是一个全局变量，即global对象的属性。它用于描述当前NodeJs进程状态的对象，提供了一个与操作系统的简单接口。</p>\n<ul>\n<li><code>process.argv</code>是命令行参数数组，第一个元素是node，第二个元素是脚本文件名，从第三个元素开始每个元素是一个运行参数。</li>\n<li><code>process.stdout</code>是标准输出流，通常我们使用的console.log()向标准输出打印字符，而<code>process.stdout.write()</code>函数提供了更底层的接口。<br>-<code> process.stdin</code>是标准输入流，初始时它是被暂停的，要想从标准输入读取数据，你必须恢复流，并手动编写流的事件响应函数。</li>\n<li><code>process.nextTick(callback)</code>的功能是为事件循环设置一项任务，NodeJs会在下次事件循环调响应时调用<code>callback</code>。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// debug.js</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(process.<span class=\"property\">argv</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">process.<span class=\"property\">stdin</span>.<span class=\"title function_\">resume</span>();</span><br><span class=\"line\">process.<span class=\"property\">stdin</span>.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;data&quot;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">    process.<span class=\"property\">stdout</span>.<span class=\"title function_\">write</span>(data.<span class=\"title function_\">toString</span>());</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>结果：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3248493-c706e1b494bc5f76.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p><strong>不要使用<code>setTimeout(fn, 0)</code>代替<code>process.nextTick(callback)</code>，前者比后者效率要低得多。</strong></p>\n<h3 id=\"console\"><a href=\"#console\" class=\"headerlink\" title=\"console\"></a>console</h3><p><code>console</code>对象用于向标准输出流（stdout）或标准错误流（stderr）输出字符。</p>\n<ul>\n<li>console.log()向标准输出流打印字符并以换行符结束。</li>\n<li>console.error():与console.log()用法相同，只是向标准错误流输出。</li>\n<li>console.trace():向标准错误流输出当前的调用栈。</li>\n</ul>\n<p>console.log接受若干个参数，如果只有一个参数，则输出这个参数的字符串形式。如果有多个参数，则以类似于C语言printf()命令的格式输出。第一个参数是一个字符串，如果没有参数，只打印一个换行。</p>\n<h2 id=\"常用工具util\"><a href=\"#常用工具util\" class=\"headerlink\" title=\"常用工具util\"></a>常用工具util</h2><p><code>util</code>是一个Node.js核心模块，提供常用函数的集合</p>\n<h3 id=\"util-inherits\"><a href=\"#util-inherits\" class=\"headerlink\" title=\"util.inherits\"></a>util.inherits</h3><p><strong>JavaScript的面向对象特性是基于原型的，与常见的基于类的不同。JavaScript没有提供对象继承的语言级别特性，而是通过原型复制来实现的</strong></p>\n<p><code>util.inherits(constructor, superConstructor)</code>是一个实现对象间原型继承的函数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// inherits.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> util = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;util&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Base</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = <span class=\"string\">&quot;base&quot;</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">base</span> = <span class=\"number\">1991</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">sayHello</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Hello&quot;</span>+<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">Base</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">showName</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Sub</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = <span class=\"string\">&quot;sub&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">util.<span class=\"title function_\">inherits</span>(<span class=\"title class_\">Sub</span>, <span class=\"title class_\">Base</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> newBase = <span class=\"keyword\">new</span> <span class=\"title class_\">Base</span>();</span><br><span class=\"line\">newBase.<span class=\"title function_\">showName</span>();</span><br><span class=\"line\">newBase.<span class=\"title function_\">sayHello</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newBase);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> newSub = <span class=\"keyword\">new</span> <span class=\"title class_\">Sub</span>();</span><br><span class=\"line\">newSub.<span class=\"title function_\">showName</span>();</span><br><span class=\"line\"><span class=\"comment\">// newSub.sayHello();</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newSub);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3248493-c100f35b4e1e1887.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p><code>Sub</code>仅仅继承了<code>Base</code>在原型中定义的函数，而构造函数内部创造的<code>base</code>属性和<code>sayHello</code>函数都没有被Sub继承。同时，在原型中定义的属性不会被console.log作为对象的属性输出。</p>\n<h3 id=\"util-inspect\"><a href=\"#util-inspect\" class=\"headerlink\" title=\"util.inspect\"></a>util.inspect</h3><p><code>util.inspect(object,[showHidden],[depth],[colors])</code>是一个将任意对象转换为字符串的方法，通常用于调试和错误输出。它至少接受一个参数object，即要转换的对象。</p>\n<p><code>util</code>还提供了<code>util.isArray()</code>、<code>util.isRegExp()</code>、<code>util.isDate()</code>、<code>util.isError()</code>四个类型测试工具，以及<code>util.format()</code>、<code>util.debug()</code>等工具。</p>\n<h2 id=\"事件驱动events\"><a href=\"#事件驱动events\" class=\"headerlink\" title=\"事件驱动events\"></a>事件驱动events</h2><p>events是NodeJs最重要的模块。NodeJs本身架构就是事件式的，而它提供了唯一的接口，所以堪称NodeJs事件编程的基石。</p>\n<h3 id=\"事件发射器\"><a href=\"#事件发射器\" class=\"headerlink\" title=\"事件发射器\"></a>事件发射器</h3><p><code>events</code>模块只提供了一个对象：<code>events.EventEmitter</code>。<code>EventEmitter</code>的核心就是<strong>事件发射与事件监听器功能的封装</strong>。<code>EventEmitter</code>的<strong>每个事件由一个事件名和若干个参数组成</strong>，<strong>事件名是一个字符串</strong>，通常表达一定的语义。对于每个事件，<code>EventEmitter</code>支持若干个事件监听器。当事件发射时，注册到这个事件的事件监听器被依次调用，事件参数作为回调函数参数传递。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">EventEmitter</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;events&quot;</span>).<span class=\"property\">EventEmitter</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> event = <span class=\"keyword\">new</span> <span class=\"title class_\">EventEmitter</span>();</span><br><span class=\"line\">event.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;some_event&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;some_event start1&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">event.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;some_event&quot;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;some_event start2&quot;</span>)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">event.<span class=\"title function_\">emit</span>(<span class=\"string\">&quot;some_event&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>执行以上代码输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">some_event start1</span><br><span class=\"line\">some_event start2</span><br></pre></td></tr></table></figure>\n\n<p>运行结果中可以看到两个事件监听器回调函数被先后调用。</p>\n<p><code>EventEmitter</code>常用的API：</p>\n<ul>\n<li><code>EventEmitter.on(event, listener)</code>为指定事件注册一个监听器，接受一个字符串<code>event</code>和一个回调函数<code>listener</code>。</li>\n<li><code>EventEmitter.emit(event, [arg1], [arg2], [...])</code>发射<code>event</code>事件，传递若干可选参数到事件监听器的参数表。</li>\n<li><code>EventEmitter.once(event, listener)</code>为指定事件注册一个单次监听器，即监听器最多只会触发一次，触发后立刻解除该监听</li>\n<li><code>EventEmitter.removeListener(event, listener)</code>移除指定事件的某个监听器，<code>listener</code>必须是该事件已经注册过的监听器。</li>\n<li><code>EventEmitter.removeAllListeners([event])</code>移除所有事件的所有监听器，如果指定<code>event</code>，则移除指定事件的所有监听器。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">EventEmitter</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;events&quot;</span>).<span class=\"property\">EventEmitter</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> event = <span class=\"keyword\">new</span> <span class=\"title class_\">EventEmitter</span>();</span><br><span class=\"line\">event.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;some_event&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;some_event start1&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">event.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;some_event&quot;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;some_event start2&quot;</span>)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">event.<span class=\"title function_\">emit</span>(<span class=\"string\">&quot;some_event&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    event.<span class=\"title function_\">emit</span>(<span class=\"string\">&quot;some_event&quot;</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">event.<span class=\"title function_\">removeAllListeners</span>(<span class=\"string\">&quot;some_event&quot;</span>);</span><br><span class=\"line\">event.<span class=\"title function_\">emit</span>(<span class=\"string\">&quot;some_event&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p>执行以上代码，输出：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3248493-467bc54781ec87df.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<h3 id=\"error事件\"><a href=\"#error事件\" class=\"headerlink\" title=\"error事件\"></a>error事件</h3><p><code>EventEmitter</code>定义了一个特殊的事件<code>error</code>，它包含了“错误”的语义，我们在遇到异常的时候通常会发射<code>error</code>事件。</p>\n<h3 id=\"继承EventEmitter\"><a href=\"#继承EventEmitter\" class=\"headerlink\" title=\"继承EventEmitter\"></a>继承EventEmitter</h3><p>大多数时候我们不会直接使用EventEmitter，而是<strong>在对象中继承它</strong>。包括<code>fs</code>、<code>net</code>、<code>http</code>在内的，只要是支持事件响应的核心模块都是<code>EventEmitter</code>的子类。</p>\n<p>原因有两点。首先，具有某个实体功能的对象实现事件符合语义，事件的监听和发射应该是一个对象的方法。其次JavaScript的对象机制是基于原型的，支持部分多重继承，继承<code>EventEmitter</code>不会打乱对象原有的继承关系。</p>\n<h2 id=\"文件系统fs\"><a href=\"#文件系统fs\" class=\"headerlink\" title=\"文件系统fs\"></a>文件系统fs</h2><h3 id=\"fs-readFile\"><a href=\"#fs-readFile\" class=\"headerlink\" title=\"fs.readFile\"></a>fs.readFile</h3><p><code>fs.readFile(filename, [encoding], [callback(err, data)])</code>是最简单的读取文件的函数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;fs&quot;</span>);</span><br><span class=\"line\">fs.<span class=\"title function_\">readFile</span>(<span class=\"string\">&quot;server.js&quot;</span>, <span class=\"string\">&quot;utf-8&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">err, data</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"fs-readFileSync\"><a href=\"#fs-readFileSync\" class=\"headerlink\" title=\"fs.readFileSync\"></a>fs.readFileSync</h3><p><code>fs.readFileSync(filename, [encoding])</code>是<code>fs.readFile</code>同步的版本。它接受的参数和<code>fs.readFile</code>相同，而读取到的文件内容会以函数返回值的形式返回。如果有错误发生，fs将会抛出异常，你需要使用<code>try</code>和<code>catch</code>捕捉并处理异常。</p>\n<h3 id=\"fs-open\"><a href=\"#fs-open\" class=\"headerlink\" title=\"fs.open\"></a>fs.open</h3><h3 id=\"fs-read\"><a href=\"#fs-read\" class=\"headerlink\" title=\"fs.read\"></a>fs.read</h3><p>一般来说，除非必要，否则不要使用以上两种方式读取文件，因为它要求你手动管理缓冲区和文件指针，尤其是在你不知道文件大小的时候，这将会是一件很麻烦的事情。</p>\n<h2 id=\"HTTP服务器与客户端\"><a href=\"#HTTP服务器与客户端\" class=\"headerlink\" title=\"HTTP服务器与客户端\"></a>HTTP服务器与客户端</h2><h3 id=\"HTTP服务器\"><a href=\"#HTTP服务器\" class=\"headerlink\" title=\"HTTP服务器\"></a>HTTP服务器</h3><p><strong>http.Server的事件</strong></p>\n<p><code>http.Server</code>是一个基于事件的HTTP服务器,所有的请求都被封装为独立的事件,开发者只需要对它的事件编写响应函数即可实现HTTP服务器的所有功能。它继承自<code>EventEmitter</code>,提供了以下几个事件：</p>\n<ul>\n<li>request:当客户端请求到来时,该事件被触发,提供两个参数<code>req</code>和<code>res</code>,分别是<code>http.ServerRequest</code>和<code>http.ServerResponse</code>的实例,表示请求和响应信息。</li>\n<li>connection:当TCP连接建立时,该事件被触发,提供一个参数<code>socket</code>,为<code>net.Socket</code>的实例。<code>connection</code>事件的粒度要大于<code>request</code>,因为客户端在Keep-Alive模式下可能会在同一个连接内发送多次请求。</li>\n<li>close :当服务器关闭时,该事件被触发。注意不是在用户连接断开时。</li>\n<li>checkContinue、upgrade、clientError事件。</li>\n</ul>\n<p>最常用的就是<code>request</code>了,因此<code>http</code>提供了一个捷径:<code>http.createServer([requestListener])</code>,功能是创建一个HTTP服务器并将<code>requestListener</code>作为<code>request</code>事件的监听函数。</p>\n<p><strong>http.ServerRequest</strong></p>\n<p>一般由<code>http.Server</code>的<code>request</code>事件发送,作为第一个参数传递,通常简称request或req。<code>http.ServerRequest</code>提供了以下3个事件用于控制请求体传输：</p>\n<ul>\n<li>data :当请求体数据到来时,该事件被触发。该事件提供一个参数chunk,表示接收到的数据。如果该事件没有被监听,那么请求体将会被抛弃。该事件可能会被调用多次。</li>\n<li>end :当请求体数据传输完成时,该事件被触发,此后将不会再有数据到来。</li>\n<li>close:用户当前请求结束时,该事件被触发。不同于end,如果用户强制终止了传输,也还是调用close。</li>\n</ul>\n<p><strong>获取GET请求内容</strong></p>\n<p><code>url</code>模块中的parse函数提供解析客户端的表单请求。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// httpServerRequestGet.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;http&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;url&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> util = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;util&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">http.<span class=\"title function_\">createServer</span>(<span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>)&#123;</span><br><span class=\"line\">    res.<span class=\"title function_\">writeHead</span>(<span class=\"number\">200</span>, &#123;<span class=\"string\">&quot;Conetnet-Type&quot;</span>: <span class=\"string\">&quot;text/html&quot;</span>&#125;);</span><br><span class=\"line\">    res.<span class=\"title function_\">end</span>(util.<span class=\"title function_\">inspect</span>(url.<span class=\"title function_\">parse</span>(req.<span class=\"property\">url</span>, <span class=\"literal\">true</span>)));</span><br><span class=\"line\">&#125;).<span class=\"title function_\">listen</span>(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n\n<p>在浏览器中访问<code>http://127.0.0.1:3000/user?name=byvoid&amp;email=byvoid@byvoid.com</code></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3248493-d9e60b84f5cb9090.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.jpg\"></p>\n<p>通过<code>url.parse</code>,原始的<code>path</code>被解析为一个对象,其中<code>query</code>就是我们所谓的GET请求的内容,而路径则是<code>pathname</code>。</p>\n<p><strong>获取POST请求内容</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// httpServerRequestPost.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;http&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> querystring = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;querystring&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> util = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;util&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">http.<span class=\"title function_\">createServer</span>(<span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> post = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    req.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;data&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">chunk</span>)&#123;</span><br><span class=\"line\">        post += chunk</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    req.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;end&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        post = querystring.<span class=\"title function_\">parse</span>(post);</span><br><span class=\"line\">        res.<span class=\"title function_\">end</span>(util.<span class=\"title function_\">inspect</span>(post));</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;).<span class=\"title function_\">listen</span>(<span class=\"number\">3000</span>)</span><br></pre></td></tr></table></figure>\n\n<p>通过事件监听函数。上面的代码仅供理解使用，在实际编码中不赞同这样的做法。</p>\n<p><strong>http.ServerResponse</strong></p>\n<p>返回给客户端的信息，也是由http.Server的request事件发送的,作为第二个参数传递,一般简称为response或res。</p>\n<p>http.ServerResponse有三个重要的成员函数,用于返回响应头、响应内容以及结束请求。</p>\n<ul>\n<li>response.writeHead(statusCode, [headers])：该函数在一个请求内最多只能调用一次。</li>\n<li>response.write(data, [encoding])：在response.end调用之前,response.write可以被多次调用。</li>\n<li>response.end([data], [encoding])： 结束响应,告知客户端所有发送已经完成。</li>\n</ul>\n<h3 id=\"HTTP客户端\"><a href=\"#HTTP客户端\" class=\"headerlink\" title=\"HTTP客户端\"></a>HTTP客户端</h3><p>http模块提供了两个函数<code>http.request</code>和<code>http.get</code>。</p>\n<ul>\n<li>http.request(options,callback)发起HTTP请求。接受两个参数,<code>option</code>是一个类似关联数组的对象,表示请求的参数,<code>callback</code>是请求的回调函数。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// httpRequst.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;http&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> querystring = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;querystring&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> content = querystring.<span class=\"title function_\">stringify</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;byvoid&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">email</span>: <span class=\"string\">&quot;byvoid@byvoid.com&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">address</span>: <span class=\"string\">&quot;Tangshan&quot;</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> options = &#123;</span><br><span class=\"line\">    <span class=\"attr\">host</span>: <span class=\"string\">&quot;127.0.0.1&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">port</span>: <span class=\"number\">3000</span>,</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/user?hello=wen&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">method</span>: <span class=\"string\">&quot;POST&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">headers</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;Content-Type&quot;</span>: <span class=\"string\">&quot;application/x-www-form-urlencoded&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;Content-Length&quot;</span>: content.<span class=\"property\">length</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> req = http.<span class=\"title function_\">request</span>(options, <span class=\"keyword\">function</span>(<span class=\"params\">res</span>)&#123;</span><br><span class=\"line\">    res.<span class=\"title function_\">setEncoding</span>(<span class=\"string\">&quot;utf-8&quot;</span>);</span><br><span class=\"line\">    res.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;data&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">data</span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">req.<span class=\"title function_\">write</span>(content);</span><br><span class=\"line\">req.<span class=\"title function_\">end</span>();</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>http.get(options, callback) <code>http</code>模块还提供了一个更加简便的方法用于处理GET请求:<code>http.get</code>。它是<code>http.request</code>的简化版,唯一的区别在于<code>http.get</code>自动将请求方法设为了GET请求,同时不需要手动调用<code>req.end()</code>。</li>\n</ul>\n<p><strong>http.ClientRequest</strong></p>\n<p><code>http.ClientRequest</code>是由<code>http.request</code>或<code>http.get</code>返回产生的对象,表示一个已经产生而且正在进行中的HTTP请求</p>\n<p><strong>http.ClientResponse</strong></p>\n<p>提供了三个事件<code>data</code>、<code>end</code>和<code>close</code>,分别在数据到达、传输结束和连接结束时触发,其中<code>data</code>事件传递一个参数<code>chunk</code>,表示接收到的数据。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>本学习笔记是根据《Node.js开发指南》一书进行学习。</p>\n</blockquote>\n<h2 id=\"全局对象\"><a href=\"#全局对象\" class=\"headerlink\" title=\"全局对象\"></a>全局对象</h2><p>JavaScript中有一个特殊的对象，称为全局对象（Global Object），<strong>它及其所有属性都可以在程序的任何地方访问</strong>，即全局变量。在浏览器JavaScript中，通常window是全局对象，而NodeJs中的全局对象是global，所有全局变量（除了global本身以外）都是global对象的属性。</p>\n<h3 id=\"全局对象和全局变量\"><a href=\"#全局对象和全局变量\" class=\"headerlink\" title=\"全局对象和全局变量\"></a>全局对象和全局变量</h3><p>按照ECMAScript的定义，满足以下条件的变量是全局变量：</p>\n<ul>\n<li>在最外层定义的变量</li>\n<li>全局对象的属性</li>\n<li>隐式定义的变量（未定义直接赋值的变量）</li>\n</ul>\n<p>在NodeJs中你不可能在最外层定义变量，因为所有用户代码都是属于当前模块的，而模块本身不是最外层上下文。</p>","more":"<p><strong>永远使用var定义变量以避免引入全局变量，因为全局变量会污染命名空间，提高代码的耦合风险。</strong></p>\n<h3 id=\"process\"><a href=\"#process\" class=\"headerlink\" title=\"process\"></a>process</h3><p>process是一个全局变量，即global对象的属性。它用于描述当前NodeJs进程状态的对象，提供了一个与操作系统的简单接口。</p>\n<ul>\n<li><code>process.argv</code>是命令行参数数组，第一个元素是node，第二个元素是脚本文件名，从第三个元素开始每个元素是一个运行参数。</li>\n<li><code>process.stdout</code>是标准输出流，通常我们使用的console.log()向标准输出打印字符，而<code>process.stdout.write()</code>函数提供了更底层的接口。<br>-<code> process.stdin</code>是标准输入流，初始时它是被暂停的，要想从标准输入读取数据，你必须恢复流，并手动编写流的事件响应函数。</li>\n<li><code>process.nextTick(callback)</code>的功能是为事件循环设置一项任务，NodeJs会在下次事件循环调响应时调用<code>callback</code>。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// debug.js</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(process.<span class=\"property\">argv</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">process.<span class=\"property\">stdin</span>.<span class=\"title function_\">resume</span>();</span><br><span class=\"line\">process.<span class=\"property\">stdin</span>.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;data&quot;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">    process.<span class=\"property\">stdout</span>.<span class=\"title function_\">write</span>(data.<span class=\"title function_\">toString</span>());</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>结果：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3248493-c706e1b494bc5f76.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p><strong>不要使用<code>setTimeout(fn, 0)</code>代替<code>process.nextTick(callback)</code>，前者比后者效率要低得多。</strong></p>\n<h3 id=\"console\"><a href=\"#console\" class=\"headerlink\" title=\"console\"></a>console</h3><p><code>console</code>对象用于向标准输出流（stdout）或标准错误流（stderr）输出字符。</p>\n<ul>\n<li>console.log()向标准输出流打印字符并以换行符结束。</li>\n<li>console.error():与console.log()用法相同，只是向标准错误流输出。</li>\n<li>console.trace():向标准错误流输出当前的调用栈。</li>\n</ul>\n<p>console.log接受若干个参数，如果只有一个参数，则输出这个参数的字符串形式。如果有多个参数，则以类似于C语言printf()命令的格式输出。第一个参数是一个字符串，如果没有参数，只打印一个换行。</p>\n<h2 id=\"常用工具util\"><a href=\"#常用工具util\" class=\"headerlink\" title=\"常用工具util\"></a>常用工具util</h2><p><code>util</code>是一个Node.js核心模块，提供常用函数的集合</p>\n<h3 id=\"util-inherits\"><a href=\"#util-inherits\" class=\"headerlink\" title=\"util.inherits\"></a>util.inherits</h3><p><strong>JavaScript的面向对象特性是基于原型的，与常见的基于类的不同。JavaScript没有提供对象继承的语言级别特性，而是通过原型复制来实现的</strong></p>\n<p><code>util.inherits(constructor, superConstructor)</code>是一个实现对象间原型继承的函数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// inherits.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> util = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;util&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Base</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = <span class=\"string\">&quot;base&quot;</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">base</span> = <span class=\"number\">1991</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">sayHello</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Hello&quot;</span>+<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">Base</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">showName</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Sub</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = <span class=\"string\">&quot;sub&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">util.<span class=\"title function_\">inherits</span>(<span class=\"title class_\">Sub</span>, <span class=\"title class_\">Base</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> newBase = <span class=\"keyword\">new</span> <span class=\"title class_\">Base</span>();</span><br><span class=\"line\">newBase.<span class=\"title function_\">showName</span>();</span><br><span class=\"line\">newBase.<span class=\"title function_\">sayHello</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newBase);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> newSub = <span class=\"keyword\">new</span> <span class=\"title class_\">Sub</span>();</span><br><span class=\"line\">newSub.<span class=\"title function_\">showName</span>();</span><br><span class=\"line\"><span class=\"comment\">// newSub.sayHello();</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newSub);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3248493-c100f35b4e1e1887.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p><code>Sub</code>仅仅继承了<code>Base</code>在原型中定义的函数，而构造函数内部创造的<code>base</code>属性和<code>sayHello</code>函数都没有被Sub继承。同时，在原型中定义的属性不会被console.log作为对象的属性输出。</p>\n<h3 id=\"util-inspect\"><a href=\"#util-inspect\" class=\"headerlink\" title=\"util.inspect\"></a>util.inspect</h3><p><code>util.inspect(object,[showHidden],[depth],[colors])</code>是一个将任意对象转换为字符串的方法，通常用于调试和错误输出。它至少接受一个参数object，即要转换的对象。</p>\n<p><code>util</code>还提供了<code>util.isArray()</code>、<code>util.isRegExp()</code>、<code>util.isDate()</code>、<code>util.isError()</code>四个类型测试工具，以及<code>util.format()</code>、<code>util.debug()</code>等工具。</p>\n<h2 id=\"事件驱动events\"><a href=\"#事件驱动events\" class=\"headerlink\" title=\"事件驱动events\"></a>事件驱动events</h2><p>events是NodeJs最重要的模块。NodeJs本身架构就是事件式的，而它提供了唯一的接口，所以堪称NodeJs事件编程的基石。</p>\n<h3 id=\"事件发射器\"><a href=\"#事件发射器\" class=\"headerlink\" title=\"事件发射器\"></a>事件发射器</h3><p><code>events</code>模块只提供了一个对象：<code>events.EventEmitter</code>。<code>EventEmitter</code>的核心就是<strong>事件发射与事件监听器功能的封装</strong>。<code>EventEmitter</code>的<strong>每个事件由一个事件名和若干个参数组成</strong>，<strong>事件名是一个字符串</strong>，通常表达一定的语义。对于每个事件，<code>EventEmitter</code>支持若干个事件监听器。当事件发射时，注册到这个事件的事件监听器被依次调用，事件参数作为回调函数参数传递。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">EventEmitter</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;events&quot;</span>).<span class=\"property\">EventEmitter</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> event = <span class=\"keyword\">new</span> <span class=\"title class_\">EventEmitter</span>();</span><br><span class=\"line\">event.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;some_event&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;some_event start1&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">event.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;some_event&quot;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;some_event start2&quot;</span>)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">event.<span class=\"title function_\">emit</span>(<span class=\"string\">&quot;some_event&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>执行以上代码输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">some_event start1</span><br><span class=\"line\">some_event start2</span><br></pre></td></tr></table></figure>\n\n<p>运行结果中可以看到两个事件监听器回调函数被先后调用。</p>\n<p><code>EventEmitter</code>常用的API：</p>\n<ul>\n<li><code>EventEmitter.on(event, listener)</code>为指定事件注册一个监听器，接受一个字符串<code>event</code>和一个回调函数<code>listener</code>。</li>\n<li><code>EventEmitter.emit(event, [arg1], [arg2], [...])</code>发射<code>event</code>事件，传递若干可选参数到事件监听器的参数表。</li>\n<li><code>EventEmitter.once(event, listener)</code>为指定事件注册一个单次监听器，即监听器最多只会触发一次，触发后立刻解除该监听</li>\n<li><code>EventEmitter.removeListener(event, listener)</code>移除指定事件的某个监听器，<code>listener</code>必须是该事件已经注册过的监听器。</li>\n<li><code>EventEmitter.removeAllListeners([event])</code>移除所有事件的所有监听器，如果指定<code>event</code>，则移除指定事件的所有监听器。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">EventEmitter</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;events&quot;</span>).<span class=\"property\">EventEmitter</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> event = <span class=\"keyword\">new</span> <span class=\"title class_\">EventEmitter</span>();</span><br><span class=\"line\">event.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;some_event&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;some_event start1&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">event.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;some_event&quot;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;some_event start2&quot;</span>)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">event.<span class=\"title function_\">emit</span>(<span class=\"string\">&quot;some_event&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    event.<span class=\"title function_\">emit</span>(<span class=\"string\">&quot;some_event&quot;</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">event.<span class=\"title function_\">removeAllListeners</span>(<span class=\"string\">&quot;some_event&quot;</span>);</span><br><span class=\"line\">event.<span class=\"title function_\">emit</span>(<span class=\"string\">&quot;some_event&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p>执行以上代码，输出：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3248493-467bc54781ec87df.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<h3 id=\"error事件\"><a href=\"#error事件\" class=\"headerlink\" title=\"error事件\"></a>error事件</h3><p><code>EventEmitter</code>定义了一个特殊的事件<code>error</code>，它包含了“错误”的语义，我们在遇到异常的时候通常会发射<code>error</code>事件。</p>\n<h3 id=\"继承EventEmitter\"><a href=\"#继承EventEmitter\" class=\"headerlink\" title=\"继承EventEmitter\"></a>继承EventEmitter</h3><p>大多数时候我们不会直接使用EventEmitter，而是<strong>在对象中继承它</strong>。包括<code>fs</code>、<code>net</code>、<code>http</code>在内的，只要是支持事件响应的核心模块都是<code>EventEmitter</code>的子类。</p>\n<p>原因有两点。首先，具有某个实体功能的对象实现事件符合语义，事件的监听和发射应该是一个对象的方法。其次JavaScript的对象机制是基于原型的，支持部分多重继承，继承<code>EventEmitter</code>不会打乱对象原有的继承关系。</p>\n<h2 id=\"文件系统fs\"><a href=\"#文件系统fs\" class=\"headerlink\" title=\"文件系统fs\"></a>文件系统fs</h2><h3 id=\"fs-readFile\"><a href=\"#fs-readFile\" class=\"headerlink\" title=\"fs.readFile\"></a>fs.readFile</h3><p><code>fs.readFile(filename, [encoding], [callback(err, data)])</code>是最简单的读取文件的函数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;fs&quot;</span>);</span><br><span class=\"line\">fs.<span class=\"title function_\">readFile</span>(<span class=\"string\">&quot;server.js&quot;</span>, <span class=\"string\">&quot;utf-8&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">err, data</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"fs-readFileSync\"><a href=\"#fs-readFileSync\" class=\"headerlink\" title=\"fs.readFileSync\"></a>fs.readFileSync</h3><p><code>fs.readFileSync(filename, [encoding])</code>是<code>fs.readFile</code>同步的版本。它接受的参数和<code>fs.readFile</code>相同，而读取到的文件内容会以函数返回值的形式返回。如果有错误发生，fs将会抛出异常，你需要使用<code>try</code>和<code>catch</code>捕捉并处理异常。</p>\n<h3 id=\"fs-open\"><a href=\"#fs-open\" class=\"headerlink\" title=\"fs.open\"></a>fs.open</h3><h3 id=\"fs-read\"><a href=\"#fs-read\" class=\"headerlink\" title=\"fs.read\"></a>fs.read</h3><p>一般来说，除非必要，否则不要使用以上两种方式读取文件，因为它要求你手动管理缓冲区和文件指针，尤其是在你不知道文件大小的时候，这将会是一件很麻烦的事情。</p>\n<h2 id=\"HTTP服务器与客户端\"><a href=\"#HTTP服务器与客户端\" class=\"headerlink\" title=\"HTTP服务器与客户端\"></a>HTTP服务器与客户端</h2><h3 id=\"HTTP服务器\"><a href=\"#HTTP服务器\" class=\"headerlink\" title=\"HTTP服务器\"></a>HTTP服务器</h3><p><strong>http.Server的事件</strong></p>\n<p><code>http.Server</code>是一个基于事件的HTTP服务器,所有的请求都被封装为独立的事件,开发者只需要对它的事件编写响应函数即可实现HTTP服务器的所有功能。它继承自<code>EventEmitter</code>,提供了以下几个事件：</p>\n<ul>\n<li>request:当客户端请求到来时,该事件被触发,提供两个参数<code>req</code>和<code>res</code>,分别是<code>http.ServerRequest</code>和<code>http.ServerResponse</code>的实例,表示请求和响应信息。</li>\n<li>connection:当TCP连接建立时,该事件被触发,提供一个参数<code>socket</code>,为<code>net.Socket</code>的实例。<code>connection</code>事件的粒度要大于<code>request</code>,因为客户端在Keep-Alive模式下可能会在同一个连接内发送多次请求。</li>\n<li>close :当服务器关闭时,该事件被触发。注意不是在用户连接断开时。</li>\n<li>checkContinue、upgrade、clientError事件。</li>\n</ul>\n<p>最常用的就是<code>request</code>了,因此<code>http</code>提供了一个捷径:<code>http.createServer([requestListener])</code>,功能是创建一个HTTP服务器并将<code>requestListener</code>作为<code>request</code>事件的监听函数。</p>\n<p><strong>http.ServerRequest</strong></p>\n<p>一般由<code>http.Server</code>的<code>request</code>事件发送,作为第一个参数传递,通常简称request或req。<code>http.ServerRequest</code>提供了以下3个事件用于控制请求体传输：</p>\n<ul>\n<li>data :当请求体数据到来时,该事件被触发。该事件提供一个参数chunk,表示接收到的数据。如果该事件没有被监听,那么请求体将会被抛弃。该事件可能会被调用多次。</li>\n<li>end :当请求体数据传输完成时,该事件被触发,此后将不会再有数据到来。</li>\n<li>close:用户当前请求结束时,该事件被触发。不同于end,如果用户强制终止了传输,也还是调用close。</li>\n</ul>\n<p><strong>获取GET请求内容</strong></p>\n<p><code>url</code>模块中的parse函数提供解析客户端的表单请求。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// httpServerRequestGet.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;http&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;url&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> util = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;util&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">http.<span class=\"title function_\">createServer</span>(<span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>)&#123;</span><br><span class=\"line\">    res.<span class=\"title function_\">writeHead</span>(<span class=\"number\">200</span>, &#123;<span class=\"string\">&quot;Conetnet-Type&quot;</span>: <span class=\"string\">&quot;text/html&quot;</span>&#125;);</span><br><span class=\"line\">    res.<span class=\"title function_\">end</span>(util.<span class=\"title function_\">inspect</span>(url.<span class=\"title function_\">parse</span>(req.<span class=\"property\">url</span>, <span class=\"literal\">true</span>)));</span><br><span class=\"line\">&#125;).<span class=\"title function_\">listen</span>(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n\n<p>在浏览器中访问<code>http://127.0.0.1:3000/user?name=byvoid&amp;email=byvoid@byvoid.com</code></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3248493-d9e60b84f5cb9090.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.jpg\"></p>\n<p>通过<code>url.parse</code>,原始的<code>path</code>被解析为一个对象,其中<code>query</code>就是我们所谓的GET请求的内容,而路径则是<code>pathname</code>。</p>\n<p><strong>获取POST请求内容</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// httpServerRequestPost.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;http&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> querystring = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;querystring&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> util = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;util&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">http.<span class=\"title function_\">createServer</span>(<span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> post = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    req.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;data&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">chunk</span>)&#123;</span><br><span class=\"line\">        post += chunk</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    req.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;end&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        post = querystring.<span class=\"title function_\">parse</span>(post);</span><br><span class=\"line\">        res.<span class=\"title function_\">end</span>(util.<span class=\"title function_\">inspect</span>(post));</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;).<span class=\"title function_\">listen</span>(<span class=\"number\">3000</span>)</span><br></pre></td></tr></table></figure>\n\n<p>通过事件监听函数。上面的代码仅供理解使用，在实际编码中不赞同这样的做法。</p>\n<p><strong>http.ServerResponse</strong></p>\n<p>返回给客户端的信息，也是由http.Server的request事件发送的,作为第二个参数传递,一般简称为response或res。</p>\n<p>http.ServerResponse有三个重要的成员函数,用于返回响应头、响应内容以及结束请求。</p>\n<ul>\n<li>response.writeHead(statusCode, [headers])：该函数在一个请求内最多只能调用一次。</li>\n<li>response.write(data, [encoding])：在response.end调用之前,response.write可以被多次调用。</li>\n<li>response.end([data], [encoding])： 结束响应,告知客户端所有发送已经完成。</li>\n</ul>\n<h3 id=\"HTTP客户端\"><a href=\"#HTTP客户端\" class=\"headerlink\" title=\"HTTP客户端\"></a>HTTP客户端</h3><p>http模块提供了两个函数<code>http.request</code>和<code>http.get</code>。</p>\n<ul>\n<li>http.request(options,callback)发起HTTP请求。接受两个参数,<code>option</code>是一个类似关联数组的对象,表示请求的参数,<code>callback</code>是请求的回调函数。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// httpRequst.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;http&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> querystring = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;querystring&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> content = querystring.<span class=\"title function_\">stringify</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;byvoid&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">email</span>: <span class=\"string\">&quot;byvoid@byvoid.com&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">address</span>: <span class=\"string\">&quot;Tangshan&quot;</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> options = &#123;</span><br><span class=\"line\">    <span class=\"attr\">host</span>: <span class=\"string\">&quot;127.0.0.1&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">port</span>: <span class=\"number\">3000</span>,</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/user?hello=wen&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">method</span>: <span class=\"string\">&quot;POST&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">headers</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;Content-Type&quot;</span>: <span class=\"string\">&quot;application/x-www-form-urlencoded&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;Content-Length&quot;</span>: content.<span class=\"property\">length</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> req = http.<span class=\"title function_\">request</span>(options, <span class=\"keyword\">function</span>(<span class=\"params\">res</span>)&#123;</span><br><span class=\"line\">    res.<span class=\"title function_\">setEncoding</span>(<span class=\"string\">&quot;utf-8&quot;</span>);</span><br><span class=\"line\">    res.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;data&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">data</span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">req.<span class=\"title function_\">write</span>(content);</span><br><span class=\"line\">req.<span class=\"title function_\">end</span>();</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>http.get(options, callback) <code>http</code>模块还提供了一个更加简便的方法用于处理GET请求:<code>http.get</code>。它是<code>http.request</code>的简化版,唯一的区别在于<code>http.get</code>自动将请求方法设为了GET请求,同时不需要手动调用<code>req.end()</code>。</li>\n</ul>\n<p><strong>http.ClientRequest</strong></p>\n<p><code>http.ClientRequest</code>是由<code>http.request</code>或<code>http.get</code>返回产生的对象,表示一个已经产生而且正在进行中的HTTP请求</p>\n<p><strong>http.ClientResponse</strong></p>\n<p>提供了三个事件<code>data</code>、<code>end</code>和<code>close</code>,分别在数据到达、传输结束和连接结束时触发,其中<code>data</code>事件传递一个参数<code>chunk</code>,表示接收到的数据。</p>"},{"title":"Celery启动Worker方式","date":"2023-10-14T16:00:00.000Z","_content":"\n\n参考[https://www.aiuai.cn/aifarm2045.html](https://www.aiuai.cn/aifarm2045.html)\n\n启动Celery的Worker时，会生成子进程（或线程）执行池用来处理任务。使用 `--pool` 命令行参数选择进程或线程。\n\n### 1、Solo\n\nSolo 池是一个內联池(inline pool)，意味着，任务不会同时处理，其只是创建一个线程(thread) 并使用该线程执行任务。\nSolo适用需要逐一执行(one by one)的任务。不过，实际中不使用并发而仅使用 solo pool 的场景不多。\n\n- 使用方式如：\n```\ncelery -A tasks worker --pool=solo --loglevel=info\n```\n\n### 2、Prefork \n\nprefork池是 Celery 对 Python 标准库 multiprocess 的改造，其能够同时处理多个任务。也是默认执行池。\n\n多进程的方式去实现并发，默认的并发数为当前计算机的 CPU 数，可以通过设置 `-c` 进行自定义设置并发数。没有推荐的并发数，因为最佳的并发数取决于很多因素，如果任务主要是 I/O 限制，可以进行增加并发数，经过测试，设置超过两倍的 CPU 数量效果不是很好，很有可能会降低性能;\n\n- 使用方式如：\n```\ncelery -A tasks worker --pool=prefork -c 4 --loglevel=info\n```\n- 适用场景如：\n  + CPU密集型(CPU-bound)，即，任务的大部分时间主要是 CPU 计算；只有 CPU 越快时才会速度更快.\n  + CPU密集型任务如：文件转换、压缩、搜索算法等.\n\n### 3、Eventlet & Gevent\n\n<!--more-->\n\nEventlet & Gevent 池使用协程来执行任务，不是产生传统线程. 能够同时处理多个任务。\ngevent是对eventlet的高级封装,一般使用时 用 gevent 因为此包有 monkey.patch_all() 方法将 所有能转为协程的地方都转为协程,从而增加处理能力\n注意的是，一些第三方的库，通常指带有C扩展的，由于无法使用猴子补丁，因此不能从使用 Eventet 中获得好处\n\n- Eventlet Pool 使用方式如：\n```\ncelery -A tasks worker --pool=eventlet --concurrency=500 --loglevel=info\n```\n- Gevent Pool 使用方式如：\n```\ncelery -A tasks worker --pool=gevent --concurrency=500 --loglevel=info\n```\n- 适用场景如：\n  + I/O 密集型任务，即，任务的主要瓶颈是 I/O 操作的等待时间. 与 Prefork 不同的是，其可以设置并发高的数量，而不受限于 CPUs 的数量.\n  + I/O密集型任务如，邮件发送、API请求等.\n\n由于 eventlet 和 gevent 不是 Python 标准库，因此需要单独安装：\n\n```\n pip install celery[eventlet]\n pip install celery[gevent]\n```\n\n### 4、Threads\n\n使用 -P threads\n\n问题：\n\n- 脚本执行时，通过signal.signal(signal.SIGALRM, handle)设置信号报错：ValueError: signal only works in main thread of the main interpreter\n    ```\n\tTraceback (most recent call last):\n  ...\n  ...\n  File \"/usr/python/lib/python3.11/signal.py\", line 56, in signal\n    handler = _signal.signal(_enum_to_int(signalnum), _enum_to_int(handler))\n              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  ValueError: signal only works in main thread of the main interpreter\n  ```\n- 只在主线程设置信号后，子线程执行脚本超时时，整个进程重启\n- 任务并发时，报错：AttributeError: 'TaskPool' object has no attribute 'grow'\n\t```\n\tTraceback (most recent call last):\n  File \"/usr/python/lib/python3.11/site-packages/celery/worker/worker.py\", line 203, in start\n    self.blueprint.start(self)\n  File \"/usr/python/lib/python3.11/site-packages/celery/bootsteps.py\", line 116, in start\n    step.start(parent)\n  File \"/usr/python/lib/python3.11/site-packages/celery/bootsteps.py\", line 365, in start\n    return self.obj.start()\n           ^^^^^^^^^^^^^^^^\n  File \"/usr/python/lib/python3.11/site-packages/celery/worker/consumer/consumer.py\", line 332, in start\n    blueprint.start(self)\n  File \"/usr/python/lib/python3.11/site-packages/celery/bootsteps.py\", line 116, in start\n    step.start(parent)\n  File \"/usr/python/lib/python3.11/site-packages/celery/worker/consumer/consumer.py\", line 628, in start\n    c.loop(*c.loop_args())\n  File \"/usr/python/lib/python3.11/site-packages/celery/worker/loops.py\", line 97, in asynloop\n    next(loop)\n  File \"/usr/python/lib/python3.11/site-packages/kombu/asynchronous/hub.py\", line 362, in create_loop\n    cb(*cbargs)\n  File \"/usr/python/lib/python3.11/site-packages/kombu/transport/redis.py\", line 1326, in on_readable\n    self.cycle.on_readable(fileno)\n  File \"/usr/python/lib/python3.11/site-packages/kombu/transport/redis.py\", line 562, in on_readable\n    chan.handlers[type]()\n  File \"/usr/python/lib/python3.11/site-packages/kombu/transport/redis.py\", line 967, in _brpop_read\n    self.connection._deliver(loads(bytes_to_str(item)), dest)\n  File \"/usr/python/lib/python3.11/site-packages/kombu/transport/virtual/base.py\", line 991, in _deliver\n    callback(message)\n  File \"/usr/python/lib/python3.11/site-packages/kombu/transport/virtual/base.py\", line 624, in _callback\n    return callback(message)\n           ^^^^^^^^^^^^^^^^^\n  File \"/usr/python/lib/python3.11/site-packages/kombu/messaging.py\", line 626, in _receive_callback\n    return on_m(message) if on_m else self.receive(decoded, message)\n           ^^^^^^^^^^^^^\n  File \"/usr/python/lib/python3.11/site-packages/celery/worker/consumer/consumer.py\", line 596, in on_task_received\n    strategy(\n  File \"/usr/python/lib/python3.11/site-packages/celery/worker/strategy.py\", line 206, in task_message_handler\n    [callback(req) for callback in callbacks]\n  File \"/usr/python/lib/python3.11/site-packages/celery/worker/strategy.py\", line 206, in <listcomp>\n    [callback(req) for callback in callbacks]\n     ^^^^^^^^^^^^^\n  File \"/usr/python/lib/python3.11/site-packages/celery/worker/autoscale.py\", line 95, in maybe_scale\n    if self._maybe_scale(req):\n       ^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/python/lib/python3.11/site-packages/celery/worker/autoscale.py\", line 87, in _maybe_scale\n    self.scale_up(cur - procs)\n  File \"/usr/python/lib/python3.11/site-packages/celery/worker/autoscale.py\", line 113, in scale_up\n    return self._grow(n)\n           ^^^^^^^^^^^^^\n  File \"/usr/python/lib/python3.11/site-packages/celery/worker/autoscale.py\", line 122, in _grow\n    self.pool.grow(n)\n    ^^^^^^^^^^^^^^\n\tAttributeError: 'TaskPool' object has no attribute 'grow'\n\t```\n- Celery设置的Task最大执行时间无效\n\n","source":"_posts/Celery启动Worker方式.md","raw":"---\ntitle: Celery启动Worker方式\ndate: 2023-10-15\ntags: [Python, Celery]\n---\n\n\n参考[https://www.aiuai.cn/aifarm2045.html](https://www.aiuai.cn/aifarm2045.html)\n\n启动Celery的Worker时，会生成子进程（或线程）执行池用来处理任务。使用 `--pool` 命令行参数选择进程或线程。\n\n### 1、Solo\n\nSolo 池是一个內联池(inline pool)，意味着，任务不会同时处理，其只是创建一个线程(thread) 并使用该线程执行任务。\nSolo适用需要逐一执行(one by one)的任务。不过，实际中不使用并发而仅使用 solo pool 的场景不多。\n\n- 使用方式如：\n```\ncelery -A tasks worker --pool=solo --loglevel=info\n```\n\n### 2、Prefork \n\nprefork池是 Celery 对 Python 标准库 multiprocess 的改造，其能够同时处理多个任务。也是默认执行池。\n\n多进程的方式去实现并发，默认的并发数为当前计算机的 CPU 数，可以通过设置 `-c` 进行自定义设置并发数。没有推荐的并发数，因为最佳的并发数取决于很多因素，如果任务主要是 I/O 限制，可以进行增加并发数，经过测试，设置超过两倍的 CPU 数量效果不是很好，很有可能会降低性能;\n\n- 使用方式如：\n```\ncelery -A tasks worker --pool=prefork -c 4 --loglevel=info\n```\n- 适用场景如：\n  + CPU密集型(CPU-bound)，即，任务的大部分时间主要是 CPU 计算；只有 CPU 越快时才会速度更快.\n  + CPU密集型任务如：文件转换、压缩、搜索算法等.\n\n### 3、Eventlet & Gevent\n\n<!--more-->\n\nEventlet & Gevent 池使用协程来执行任务，不是产生传统线程. 能够同时处理多个任务。\ngevent是对eventlet的高级封装,一般使用时 用 gevent 因为此包有 monkey.patch_all() 方法将 所有能转为协程的地方都转为协程,从而增加处理能力\n注意的是，一些第三方的库，通常指带有C扩展的，由于无法使用猴子补丁，因此不能从使用 Eventet 中获得好处\n\n- Eventlet Pool 使用方式如：\n```\ncelery -A tasks worker --pool=eventlet --concurrency=500 --loglevel=info\n```\n- Gevent Pool 使用方式如：\n```\ncelery -A tasks worker --pool=gevent --concurrency=500 --loglevel=info\n```\n- 适用场景如：\n  + I/O 密集型任务，即，任务的主要瓶颈是 I/O 操作的等待时间. 与 Prefork 不同的是，其可以设置并发高的数量，而不受限于 CPUs 的数量.\n  + I/O密集型任务如，邮件发送、API请求等.\n\n由于 eventlet 和 gevent 不是 Python 标准库，因此需要单独安装：\n\n```\n pip install celery[eventlet]\n pip install celery[gevent]\n```\n\n### 4、Threads\n\n使用 -P threads\n\n问题：\n\n- 脚本执行时，通过signal.signal(signal.SIGALRM, handle)设置信号报错：ValueError: signal only works in main thread of the main interpreter\n    ```\n\tTraceback (most recent call last):\n  ...\n  ...\n  File \"/usr/python/lib/python3.11/signal.py\", line 56, in signal\n    handler = _signal.signal(_enum_to_int(signalnum), _enum_to_int(handler))\n              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  ValueError: signal only works in main thread of the main interpreter\n  ```\n- 只在主线程设置信号后，子线程执行脚本超时时，整个进程重启\n- 任务并发时，报错：AttributeError: 'TaskPool' object has no attribute 'grow'\n\t```\n\tTraceback (most recent call last):\n  File \"/usr/python/lib/python3.11/site-packages/celery/worker/worker.py\", line 203, in start\n    self.blueprint.start(self)\n  File \"/usr/python/lib/python3.11/site-packages/celery/bootsteps.py\", line 116, in start\n    step.start(parent)\n  File \"/usr/python/lib/python3.11/site-packages/celery/bootsteps.py\", line 365, in start\n    return self.obj.start()\n           ^^^^^^^^^^^^^^^^\n  File \"/usr/python/lib/python3.11/site-packages/celery/worker/consumer/consumer.py\", line 332, in start\n    blueprint.start(self)\n  File \"/usr/python/lib/python3.11/site-packages/celery/bootsteps.py\", line 116, in start\n    step.start(parent)\n  File \"/usr/python/lib/python3.11/site-packages/celery/worker/consumer/consumer.py\", line 628, in start\n    c.loop(*c.loop_args())\n  File \"/usr/python/lib/python3.11/site-packages/celery/worker/loops.py\", line 97, in asynloop\n    next(loop)\n  File \"/usr/python/lib/python3.11/site-packages/kombu/asynchronous/hub.py\", line 362, in create_loop\n    cb(*cbargs)\n  File \"/usr/python/lib/python3.11/site-packages/kombu/transport/redis.py\", line 1326, in on_readable\n    self.cycle.on_readable(fileno)\n  File \"/usr/python/lib/python3.11/site-packages/kombu/transport/redis.py\", line 562, in on_readable\n    chan.handlers[type]()\n  File \"/usr/python/lib/python3.11/site-packages/kombu/transport/redis.py\", line 967, in _brpop_read\n    self.connection._deliver(loads(bytes_to_str(item)), dest)\n  File \"/usr/python/lib/python3.11/site-packages/kombu/transport/virtual/base.py\", line 991, in _deliver\n    callback(message)\n  File \"/usr/python/lib/python3.11/site-packages/kombu/transport/virtual/base.py\", line 624, in _callback\n    return callback(message)\n           ^^^^^^^^^^^^^^^^^\n  File \"/usr/python/lib/python3.11/site-packages/kombu/messaging.py\", line 626, in _receive_callback\n    return on_m(message) if on_m else self.receive(decoded, message)\n           ^^^^^^^^^^^^^\n  File \"/usr/python/lib/python3.11/site-packages/celery/worker/consumer/consumer.py\", line 596, in on_task_received\n    strategy(\n  File \"/usr/python/lib/python3.11/site-packages/celery/worker/strategy.py\", line 206, in task_message_handler\n    [callback(req) for callback in callbacks]\n  File \"/usr/python/lib/python3.11/site-packages/celery/worker/strategy.py\", line 206, in <listcomp>\n    [callback(req) for callback in callbacks]\n     ^^^^^^^^^^^^^\n  File \"/usr/python/lib/python3.11/site-packages/celery/worker/autoscale.py\", line 95, in maybe_scale\n    if self._maybe_scale(req):\n       ^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/python/lib/python3.11/site-packages/celery/worker/autoscale.py\", line 87, in _maybe_scale\n    self.scale_up(cur - procs)\n  File \"/usr/python/lib/python3.11/site-packages/celery/worker/autoscale.py\", line 113, in scale_up\n    return self._grow(n)\n           ^^^^^^^^^^^^^\n  File \"/usr/python/lib/python3.11/site-packages/celery/worker/autoscale.py\", line 122, in _grow\n    self.pool.grow(n)\n    ^^^^^^^^^^^^^^\n\tAttributeError: 'TaskPool' object has no attribute 'grow'\n\t```\n- Celery设置的Task最大执行时间无效\n\n","slug":"Celery启动Worker方式","published":1,"updated":"2023-10-17T01:11:41.259Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluqa1hi90008rlog0dnief2v","content":"<p>参考<a href=\"https://www.aiuai.cn/aifarm2045.html\">https://www.aiuai.cn/aifarm2045.html</a></p>\n<p>启动Celery的Worker时，会生成子进程（或线程）执行池用来处理任务。使用 <code>--pool</code> 命令行参数选择进程或线程。</p>\n<h3 id=\"1、Solo\"><a href=\"#1、Solo\" class=\"headerlink\" title=\"1、Solo\"></a>1、Solo</h3><p>Solo 池是一个內联池(inline pool)，意味着，任务不会同时处理，其只是创建一个线程(thread) 并使用该线程执行任务。<br>Solo适用需要逐一执行(one by one)的任务。不过，实际中不使用并发而仅使用 solo pool 的场景不多。</p>\n<ul>\n<li>使用方式如：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">celery -A tasks worker --pool=solo --loglevel=info</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"2、Prefork\"><a href=\"#2、Prefork\" class=\"headerlink\" title=\"2、Prefork\"></a>2、Prefork</h3><p>prefork池是 Celery 对 Python 标准库 multiprocess 的改造，其能够同时处理多个任务。也是默认执行池。</p>\n<p>多进程的方式去实现并发，默认的并发数为当前计算机的 CPU 数，可以通过设置 <code>-c</code> 进行自定义设置并发数。没有推荐的并发数，因为最佳的并发数取决于很多因素，如果任务主要是 I&#x2F;O 限制，可以进行增加并发数，经过测试，设置超过两倍的 CPU 数量效果不是很好，很有可能会降低性能;</p>\n<ul>\n<li>使用方式如：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">celery -A tasks worker --pool=prefork -c 4 --loglevel=info</span><br></pre></td></tr></table></figure></li>\n<li>适用场景如：<ul>\n<li>CPU密集型(CPU-bound)，即，任务的大部分时间主要是 CPU 计算；只有 CPU 越快时才会速度更快.</li>\n<li>CPU密集型任务如：文件转换、压缩、搜索算法等.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3、Eventlet-amp-Gevent\"><a href=\"#3、Eventlet-amp-Gevent\" class=\"headerlink\" title=\"3、Eventlet &amp; Gevent\"></a>3、Eventlet &amp; Gevent</h3><span id=\"more\"></span>\n\n<p>Eventlet &amp; Gevent 池使用协程来执行任务，不是产生传统线程. 能够同时处理多个任务。<br>gevent是对eventlet的高级封装,一般使用时 用 gevent 因为此包有 monkey.patch_all() 方法将 所有能转为协程的地方都转为协程,从而增加处理能力<br>注意的是，一些第三方的库，通常指带有C扩展的，由于无法使用猴子补丁，因此不能从使用 Eventet 中获得好处</p>\n<ul>\n<li>Eventlet Pool 使用方式如：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">celery -A tasks worker --pool=eventlet --concurrency=500 --loglevel=info</span><br></pre></td></tr></table></figure></li>\n<li>Gevent Pool 使用方式如：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">celery -A tasks worker --pool=gevent --concurrency=500 --loglevel=info</span><br></pre></td></tr></table></figure></li>\n<li>适用场景如：<ul>\n<li>I&#x2F;O 密集型任务，即，任务的主要瓶颈是 I&#x2F;O 操作的等待时间. 与 Prefork 不同的是，其可以设置并发高的数量，而不受限于 CPUs 的数量.</li>\n<li>I&#x2F;O密集型任务如，邮件发送、API请求等.</li>\n</ul>\n</li>\n</ul>\n<p>由于 eventlet 和 gevent 不是 Python 标准库，因此需要单独安装：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install celery[eventlet]</span><br><span class=\"line\">pip install celery[gevent]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、Threads\"><a href=\"#4、Threads\" class=\"headerlink\" title=\"4、Threads\"></a>4、Threads</h3><p>使用 -P threads</p>\n<p>问题：</p>\n<ul>\n<li>脚本执行时，通过signal.signal(signal.SIGALRM, handle)设置信号报错：ValueError: signal only works in main thread of the main interpreter  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\"> ...</span><br><span class=\"line\"> ...</span><br><span class=\"line\"> File &quot;/usr/python/lib/python3.11/signal.py&quot;, line 56, in signal</span><br><span class=\"line\">   handler = _signal.signal(_enum_to_int(signalnum), _enum_to_int(handler))</span><br><span class=\"line\">             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span><br><span class=\"line\"> ValueError: signal only works in main thread of the main interpreter</span><br></pre></td></tr></table></figure></li>\n<li>只在主线程设置信号后，子线程执行脚本超时时，整个进程重启</li>\n<li>任务并发时，报错：AttributeError: ‘TaskPool’ object has no attribute ‘grow’  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\"> File &quot;/usr/python/lib/python3.11/site-packages/celery/worker/worker.py&quot;, line 203, in start</span><br><span class=\"line\">   self.blueprint.start(self)</span><br><span class=\"line\"> File &quot;/usr/python/lib/python3.11/site-packages/celery/bootsteps.py&quot;, line 116, in start</span><br><span class=\"line\">   step.start(parent)</span><br><span class=\"line\"> File &quot;/usr/python/lib/python3.11/site-packages/celery/bootsteps.py&quot;, line 365, in start</span><br><span class=\"line\">   return self.obj.start()</span><br><span class=\"line\">          ^^^^^^^^^^^^^^^^</span><br><span class=\"line\"> File &quot;/usr/python/lib/python3.11/site-packages/celery/worker/consumer/consumer.py&quot;, line 332, in start</span><br><span class=\"line\">   blueprint.start(self)</span><br><span class=\"line\"> File &quot;/usr/python/lib/python3.11/site-packages/celery/bootsteps.py&quot;, line 116, in start</span><br><span class=\"line\">   step.start(parent)</span><br><span class=\"line\"> File &quot;/usr/python/lib/python3.11/site-packages/celery/worker/consumer/consumer.py&quot;, line 628, in start</span><br><span class=\"line\">   c.loop(*c.loop_args())</span><br><span class=\"line\"> File &quot;/usr/python/lib/python3.11/site-packages/celery/worker/loops.py&quot;, line 97, in asynloop</span><br><span class=\"line\">   next(loop)</span><br><span class=\"line\"> File &quot;/usr/python/lib/python3.11/site-packages/kombu/asynchronous/hub.py&quot;, line 362, in create_loop</span><br><span class=\"line\">   cb(*cbargs)</span><br><span class=\"line\"> File &quot;/usr/python/lib/python3.11/site-packages/kombu/transport/redis.py&quot;, line 1326, in on_readable</span><br><span class=\"line\">   self.cycle.on_readable(fileno)</span><br><span class=\"line\"> File &quot;/usr/python/lib/python3.11/site-packages/kombu/transport/redis.py&quot;, line 562, in on_readable</span><br><span class=\"line\">   chan.handlers[type]()</span><br><span class=\"line\"> File &quot;/usr/python/lib/python3.11/site-packages/kombu/transport/redis.py&quot;, line 967, in _brpop_read</span><br><span class=\"line\">   self.connection._deliver(loads(bytes_to_str(item)), dest)</span><br><span class=\"line\"> File &quot;/usr/python/lib/python3.11/site-packages/kombu/transport/virtual/base.py&quot;, line 991, in _deliver</span><br><span class=\"line\">   callback(message)</span><br><span class=\"line\"> File &quot;/usr/python/lib/python3.11/site-packages/kombu/transport/virtual/base.py&quot;, line 624, in _callback</span><br><span class=\"line\">   return callback(message)</span><br><span class=\"line\">          ^^^^^^^^^^^^^^^^^</span><br><span class=\"line\"> File &quot;/usr/python/lib/python3.11/site-packages/kombu/messaging.py&quot;, line 626, in _receive_callback</span><br><span class=\"line\">   return on_m(message) if on_m else self.receive(decoded, message)</span><br><span class=\"line\">          ^^^^^^^^^^^^^</span><br><span class=\"line\"> File &quot;/usr/python/lib/python3.11/site-packages/celery/worker/consumer/consumer.py&quot;, line 596, in on_task_received</span><br><span class=\"line\">   strategy(</span><br><span class=\"line\"> File &quot;/usr/python/lib/python3.11/site-packages/celery/worker/strategy.py&quot;, line 206, in task_message_handler</span><br><span class=\"line\">   [callback(req) for callback in callbacks]</span><br><span class=\"line\"> File &quot;/usr/python/lib/python3.11/site-packages/celery/worker/strategy.py&quot;, line 206, in &lt;listcomp&gt;</span><br><span class=\"line\">   [callback(req) for callback in callbacks]</span><br><span class=\"line\">    ^^^^^^^^^^^^^</span><br><span class=\"line\"> File &quot;/usr/python/lib/python3.11/site-packages/celery/worker/autoscale.py&quot;, line 95, in maybe_scale</span><br><span class=\"line\">   if self._maybe_scale(req):</span><br><span class=\"line\">      ^^^^^^^^^^^^^^^^^^^^^^</span><br><span class=\"line\"> File &quot;/usr/python/lib/python3.11/site-packages/celery/worker/autoscale.py&quot;, line 87, in _maybe_scale</span><br><span class=\"line\">   self.scale_up(cur - procs)</span><br><span class=\"line\"> File &quot;/usr/python/lib/python3.11/site-packages/celery/worker/autoscale.py&quot;, line 113, in scale_up</span><br><span class=\"line\">   return self._grow(n)</span><br><span class=\"line\">          ^^^^^^^^^^^^^</span><br><span class=\"line\"> File &quot;/usr/python/lib/python3.11/site-packages/celery/worker/autoscale.py&quot;, line 122, in _grow</span><br><span class=\"line\">   self.pool.grow(n)</span><br><span class=\"line\">   ^^^^^^^^^^^^^^</span><br><span class=\"line\">AttributeError: &#x27;TaskPool&#x27; object has no attribute &#x27;grow&#x27;</span><br></pre></td></tr></table></figure></li>\n<li>Celery设置的Task最大执行时间无效</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>参考<a href=\"https://www.aiuai.cn/aifarm2045.html\">https://www.aiuai.cn/aifarm2045.html</a></p>\n<p>启动Celery的Worker时，会生成子进程（或线程）执行池用来处理任务。使用 <code>--pool</code> 命令行参数选择进程或线程。</p>\n<h3 id=\"1、Solo\"><a href=\"#1、Solo\" class=\"headerlink\" title=\"1、Solo\"></a>1、Solo</h3><p>Solo 池是一个內联池(inline pool)，意味着，任务不会同时处理，其只是创建一个线程(thread) 并使用该线程执行任务。<br>Solo适用需要逐一执行(one by one)的任务。不过，实际中不使用并发而仅使用 solo pool 的场景不多。</p>\n<ul>\n<li>使用方式如：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">celery -A tasks worker --pool=solo --loglevel=info</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"2、Prefork\"><a href=\"#2、Prefork\" class=\"headerlink\" title=\"2、Prefork\"></a>2、Prefork</h3><p>prefork池是 Celery 对 Python 标准库 multiprocess 的改造，其能够同时处理多个任务。也是默认执行池。</p>\n<p>多进程的方式去实现并发，默认的并发数为当前计算机的 CPU 数，可以通过设置 <code>-c</code> 进行自定义设置并发数。没有推荐的并发数，因为最佳的并发数取决于很多因素，如果任务主要是 I&#x2F;O 限制，可以进行增加并发数，经过测试，设置超过两倍的 CPU 数量效果不是很好，很有可能会降低性能;</p>\n<ul>\n<li>使用方式如：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">celery -A tasks worker --pool=prefork -c 4 --loglevel=info</span><br></pre></td></tr></table></figure></li>\n<li>适用场景如：<ul>\n<li>CPU密集型(CPU-bound)，即，任务的大部分时间主要是 CPU 计算；只有 CPU 越快时才会速度更快.</li>\n<li>CPU密集型任务如：文件转换、压缩、搜索算法等.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3、Eventlet-amp-Gevent\"><a href=\"#3、Eventlet-amp-Gevent\" class=\"headerlink\" title=\"3、Eventlet &amp; Gevent\"></a>3、Eventlet &amp; Gevent</h3>","more":"<p>Eventlet &amp; Gevent 池使用协程来执行任务，不是产生传统线程. 能够同时处理多个任务。<br>gevent是对eventlet的高级封装,一般使用时 用 gevent 因为此包有 monkey.patch_all() 方法将 所有能转为协程的地方都转为协程,从而增加处理能力<br>注意的是，一些第三方的库，通常指带有C扩展的，由于无法使用猴子补丁，因此不能从使用 Eventet 中获得好处</p>\n<ul>\n<li>Eventlet Pool 使用方式如：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">celery -A tasks worker --pool=eventlet --concurrency=500 --loglevel=info</span><br></pre></td></tr></table></figure></li>\n<li>Gevent Pool 使用方式如：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">celery -A tasks worker --pool=gevent --concurrency=500 --loglevel=info</span><br></pre></td></tr></table></figure></li>\n<li>适用场景如：<ul>\n<li>I&#x2F;O 密集型任务，即，任务的主要瓶颈是 I&#x2F;O 操作的等待时间. 与 Prefork 不同的是，其可以设置并发高的数量，而不受限于 CPUs 的数量.</li>\n<li>I&#x2F;O密集型任务如，邮件发送、API请求等.</li>\n</ul>\n</li>\n</ul>\n<p>由于 eventlet 和 gevent 不是 Python 标准库，因此需要单独安装：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install celery[eventlet]</span><br><span class=\"line\">pip install celery[gevent]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、Threads\"><a href=\"#4、Threads\" class=\"headerlink\" title=\"4、Threads\"></a>4、Threads</h3><p>使用 -P threads</p>\n<p>问题：</p>\n<ul>\n<li>脚本执行时，通过signal.signal(signal.SIGALRM, handle)设置信号报错：ValueError: signal only works in main thread of the main interpreter  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\"> ...</span><br><span class=\"line\"> ...</span><br><span class=\"line\"> File &quot;/usr/python/lib/python3.11/signal.py&quot;, line 56, in signal</span><br><span class=\"line\">   handler = _signal.signal(_enum_to_int(signalnum), _enum_to_int(handler))</span><br><span class=\"line\">             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span><br><span class=\"line\"> ValueError: signal only works in main thread of the main interpreter</span><br></pre></td></tr></table></figure></li>\n<li>只在主线程设置信号后，子线程执行脚本超时时，整个进程重启</li>\n<li>任务并发时，报错：AttributeError: ‘TaskPool’ object has no attribute ‘grow’  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\"> File &quot;/usr/python/lib/python3.11/site-packages/celery/worker/worker.py&quot;, line 203, in start</span><br><span class=\"line\">   self.blueprint.start(self)</span><br><span class=\"line\"> File &quot;/usr/python/lib/python3.11/site-packages/celery/bootsteps.py&quot;, line 116, in start</span><br><span class=\"line\">   step.start(parent)</span><br><span class=\"line\"> File &quot;/usr/python/lib/python3.11/site-packages/celery/bootsteps.py&quot;, line 365, in start</span><br><span class=\"line\">   return self.obj.start()</span><br><span class=\"line\">          ^^^^^^^^^^^^^^^^</span><br><span class=\"line\"> File &quot;/usr/python/lib/python3.11/site-packages/celery/worker/consumer/consumer.py&quot;, line 332, in start</span><br><span class=\"line\">   blueprint.start(self)</span><br><span class=\"line\"> File &quot;/usr/python/lib/python3.11/site-packages/celery/bootsteps.py&quot;, line 116, in start</span><br><span class=\"line\">   step.start(parent)</span><br><span class=\"line\"> File &quot;/usr/python/lib/python3.11/site-packages/celery/worker/consumer/consumer.py&quot;, line 628, in start</span><br><span class=\"line\">   c.loop(*c.loop_args())</span><br><span class=\"line\"> File &quot;/usr/python/lib/python3.11/site-packages/celery/worker/loops.py&quot;, line 97, in asynloop</span><br><span class=\"line\">   next(loop)</span><br><span class=\"line\"> File &quot;/usr/python/lib/python3.11/site-packages/kombu/asynchronous/hub.py&quot;, line 362, in create_loop</span><br><span class=\"line\">   cb(*cbargs)</span><br><span class=\"line\"> File &quot;/usr/python/lib/python3.11/site-packages/kombu/transport/redis.py&quot;, line 1326, in on_readable</span><br><span class=\"line\">   self.cycle.on_readable(fileno)</span><br><span class=\"line\"> File &quot;/usr/python/lib/python3.11/site-packages/kombu/transport/redis.py&quot;, line 562, in on_readable</span><br><span class=\"line\">   chan.handlers[type]()</span><br><span class=\"line\"> File &quot;/usr/python/lib/python3.11/site-packages/kombu/transport/redis.py&quot;, line 967, in _brpop_read</span><br><span class=\"line\">   self.connection._deliver(loads(bytes_to_str(item)), dest)</span><br><span class=\"line\"> File &quot;/usr/python/lib/python3.11/site-packages/kombu/transport/virtual/base.py&quot;, line 991, in _deliver</span><br><span class=\"line\">   callback(message)</span><br><span class=\"line\"> File &quot;/usr/python/lib/python3.11/site-packages/kombu/transport/virtual/base.py&quot;, line 624, in _callback</span><br><span class=\"line\">   return callback(message)</span><br><span class=\"line\">          ^^^^^^^^^^^^^^^^^</span><br><span class=\"line\"> File &quot;/usr/python/lib/python3.11/site-packages/kombu/messaging.py&quot;, line 626, in _receive_callback</span><br><span class=\"line\">   return on_m(message) if on_m else self.receive(decoded, message)</span><br><span class=\"line\">          ^^^^^^^^^^^^^</span><br><span class=\"line\"> File &quot;/usr/python/lib/python3.11/site-packages/celery/worker/consumer/consumer.py&quot;, line 596, in on_task_received</span><br><span class=\"line\">   strategy(</span><br><span class=\"line\"> File &quot;/usr/python/lib/python3.11/site-packages/celery/worker/strategy.py&quot;, line 206, in task_message_handler</span><br><span class=\"line\">   [callback(req) for callback in callbacks]</span><br><span class=\"line\"> File &quot;/usr/python/lib/python3.11/site-packages/celery/worker/strategy.py&quot;, line 206, in &lt;listcomp&gt;</span><br><span class=\"line\">   [callback(req) for callback in callbacks]</span><br><span class=\"line\">    ^^^^^^^^^^^^^</span><br><span class=\"line\"> File &quot;/usr/python/lib/python3.11/site-packages/celery/worker/autoscale.py&quot;, line 95, in maybe_scale</span><br><span class=\"line\">   if self._maybe_scale(req):</span><br><span class=\"line\">      ^^^^^^^^^^^^^^^^^^^^^^</span><br><span class=\"line\"> File &quot;/usr/python/lib/python3.11/site-packages/celery/worker/autoscale.py&quot;, line 87, in _maybe_scale</span><br><span class=\"line\">   self.scale_up(cur - procs)</span><br><span class=\"line\"> File &quot;/usr/python/lib/python3.11/site-packages/celery/worker/autoscale.py&quot;, line 113, in scale_up</span><br><span class=\"line\">   return self._grow(n)</span><br><span class=\"line\">          ^^^^^^^^^^^^^</span><br><span class=\"line\"> File &quot;/usr/python/lib/python3.11/site-packages/celery/worker/autoscale.py&quot;, line 122, in _grow</span><br><span class=\"line\">   self.pool.grow(n)</span><br><span class=\"line\">   ^^^^^^^^^^^^^^</span><br><span class=\"line\">AttributeError: &#x27;TaskPool&#x27; object has no attribute &#x27;grow&#x27;</span><br></pre></td></tr></table></figure></li>\n<li>Celery设置的Task最大执行时间无效</li>\n</ul>"},{"title":"Confluence安装在Linux上","date":"2019-04-23T16:00:00.000Z","_content":"\nConfluence是一个适用于团队协作的文档管理软件，使用java开发的，功能方面类似Wiki，但是功能比Wiki强大。在安全性方面，Confluence 具有完善和精细的权限控制，可以很好地控制用户在 Wiki 中创建、编辑内容和添加注释。Confluence 直观易于使用，您不需要学习任何新的语言就可以使用它，用所见即所得的方式在 Confluence 中添加内容。\n\n虽然Confluence是收费的，但是Atlassian公司将其使用门槛降低了，最低设置了10人版每年10$的授权费，企业可以根据具体的使用人数进行[购买授权](https://cn.atlassian.com/software/confluence/pricing?tab=self-managed)。\n\n个人学习使用，这里根据网上的资源提供了一个破解的方法，仅供学习参考。\n\n## 下载安装\n\n去官网下载最新的安装包（[传送门](https://www.atlassian.com/software/confluence/download)）。官网下载可能比较慢，可以通过下面的链接下载(6.15.2 Linux版本)，顺带下载破解的工具包。\n\n破解包: https://pan.baidu.com/s/1SYJ_nWfNkH0AlgBjqcVBsA (提取码: pava)\n\n<!--more-->\n\n### JDK环境安装\n\n### 安装mysql\n\n这里使用了外部的mysql数据库：\n\n```\nsudo apt update\nsudo apt install mysql-server mysql-client\n```\n\n创建对应的数据库并授权指定用户\n\n```\nmysql -u root -p\nmysql> create database confluence character SET utf8 COLLATE utf8_bin;\nmysql> SET GLOBAL tx_isolation='READ-COMMITTED';\nmysql> grant all on confluence.* to confluence@\"%\" identified by \"123456\";\nmysql> FLUSH PRIVILEGES;\n```\n\nmysql的其他安装配置可以参考[Mysql数据库配置]\n\n### 安装Confluence\n\n给atlassian-confluence-6.15.2-x64.bin添加运行的权限：\n\n```\nsudo chmod +x atlassian-confluence-6.15.2-x64.bin\n```\n\n运行上述文件：\n\n```\nsudo ./atlassian-confluence-6.15.2-x64.bin\n```\n\n![1555988876289](https://i.loli.net/2019/04/23/5cbea0d5b9574.png)\n\n先后输入o，1，i三个指令，需要注意的是Confluence的安装路径。安装过程中，没有选择启动，这里补充一些Confluence的启动服务和关闭服务：\n\n```\n# 关闭服务\nsudo service confluence stop\n# 启动服务\nsudo service confluence start\n```\n\nConfluence的卸载：\n\n```\nsudo /opt/atlassian/confluence/uninstall\n# 手动删除两个路径\nsudo rm -rf /opt/atlassian /var/atlassian\n```\n\n## 破解Confluence\n\n安装完成之后，启动Confluence：\n\n```\nsudo service confluence start\n```\n\n启动完成之后，可以在浏览器http://127.0.0.1:8090访问到服务，记下Server ID。\n\n![1555989749457.png](https://i.loli.net/2019/04/23/5cbe9e94c34b9.png)\n\n![1555989764220.png](https://i.loli.net/2019/04/23/5cbe9e94bf903.png)\n\n![1555989782771](https://i.loli.net/2019/04/23/5cbe9e94a9e53.png)\n\n然后可以停止服务：\n\n```\nsudo service confluence stop\n```\n\n下载工具包，解压。将`/opt/atlassian/confluence/confluence/WEB-INF/lib/atlassian-extras-decoder-v2-3.4.1.jar` 复制到方便的位置，我这里放到了home下。\n\n```\nsudo cp /opt/atlassian/confluence/confluence/WEB-INF/lib/atlassian-extras-decoder-v2-3.4.1.jar /home/\n```\n\n然后进入工具包：\n\n```\n# 将工具包中mysql-connector-java-5.1.32-bin.jar复制到Confluence的依赖文件夹下\nsudo cp mysql-connector-java-5.1.32-bin.jar /opt/atlassian/confluence/confluence/WEB-INF/lib\n\n# 用原版复制出来的atlassian-extras-decoder-v2-3.4.1.jar 包替换该目录下 atlassian-extras-2.4.jar\ncd confluence5.1-crack\nsudo cp /home/atlassian-extras-decoder-v2-3.4.1.jar atlassian-extras-2.4.jar\ncd iNViSiBLE\nsudo bash ./keygen.sh\n```\n\n**注：必须是在图形界面下，因为这个运行需要图形。如果没有图形，那么就会报错。**\n\n首先填入Server ID，在图形工具点击`.patch`选择`atlassian-extras-2.4.jar`文件。\n\n![1555989833935](https://i.loli.net/2019/04/23/5cbe9e94a2bdf.png)\n\n![1555989867280](https://i.loli.net/2019/04/23/5cbe9e94921fc.png)\n\n然后点击`.gen`生成key，复制所得的key。\n\n![1555989885366](https://i.loli.net/2019/04/23/5cbea0a94bece.png)\n\n在原本的atlassian-extras-2.4.jar所在的目录，多了一个atlassian-extras-2.4.bak为文件，不用管该文件。需要将atlassian-extras-2.4.jar文件替换成Confluence中的atlassian-extras-decoder-v2-3.4.1.jar，也就是复制出来的那个文件。\n\n```\ncd ..\nsudo cp atlassian-extras-2.4.jar /opt/atlassian/confluence/confluence/WEB-INF/lib/atlassian-extras-decoder-v2-3.4.1.jar\n```\n\n![1555989913161](https://i.loli.net/2019/04/23/5cbe9e94be989.png)\n\n点击下一步，就可以快乐的玩耍啦：\n\n![1555991064801](https://i.loli.net/2019/04/23/5cbea05bf418c.png)\n\n设置数据库的时间较长，请耐心等待。\n\n![1555993565787](https://i.loli.net/2019/04/23/5cbea05c02448.png)\n\n\n\n参考\n\n- [confluence安装破解](<https://www.jianshu.com/p/d621c5eec1c8>)\n- [linux 破解版confluence安装](https://www.cnblogs.com/wspblog/p/4750128.html)\n","source":"_posts/Confluence安装在Linux上.md","raw":"---\ntitle: Confluence安装在Linux上\ndate: 2019-04-24\ntags: [Ubuntu, 敏捷开发]\n---\n\nConfluence是一个适用于团队协作的文档管理软件，使用java开发的，功能方面类似Wiki，但是功能比Wiki强大。在安全性方面，Confluence 具有完善和精细的权限控制，可以很好地控制用户在 Wiki 中创建、编辑内容和添加注释。Confluence 直观易于使用，您不需要学习任何新的语言就可以使用它，用所见即所得的方式在 Confluence 中添加内容。\n\n虽然Confluence是收费的，但是Atlassian公司将其使用门槛降低了，最低设置了10人版每年10$的授权费，企业可以根据具体的使用人数进行[购买授权](https://cn.atlassian.com/software/confluence/pricing?tab=self-managed)。\n\n个人学习使用，这里根据网上的资源提供了一个破解的方法，仅供学习参考。\n\n## 下载安装\n\n去官网下载最新的安装包（[传送门](https://www.atlassian.com/software/confluence/download)）。官网下载可能比较慢，可以通过下面的链接下载(6.15.2 Linux版本)，顺带下载破解的工具包。\n\n破解包: https://pan.baidu.com/s/1SYJ_nWfNkH0AlgBjqcVBsA (提取码: pava)\n\n<!--more-->\n\n### JDK环境安装\n\n### 安装mysql\n\n这里使用了外部的mysql数据库：\n\n```\nsudo apt update\nsudo apt install mysql-server mysql-client\n```\n\n创建对应的数据库并授权指定用户\n\n```\nmysql -u root -p\nmysql> create database confluence character SET utf8 COLLATE utf8_bin;\nmysql> SET GLOBAL tx_isolation='READ-COMMITTED';\nmysql> grant all on confluence.* to confluence@\"%\" identified by \"123456\";\nmysql> FLUSH PRIVILEGES;\n```\n\nmysql的其他安装配置可以参考[Mysql数据库配置]\n\n### 安装Confluence\n\n给atlassian-confluence-6.15.2-x64.bin添加运行的权限：\n\n```\nsudo chmod +x atlassian-confluence-6.15.2-x64.bin\n```\n\n运行上述文件：\n\n```\nsudo ./atlassian-confluence-6.15.2-x64.bin\n```\n\n![1555988876289](https://i.loli.net/2019/04/23/5cbea0d5b9574.png)\n\n先后输入o，1，i三个指令，需要注意的是Confluence的安装路径。安装过程中，没有选择启动，这里补充一些Confluence的启动服务和关闭服务：\n\n```\n# 关闭服务\nsudo service confluence stop\n# 启动服务\nsudo service confluence start\n```\n\nConfluence的卸载：\n\n```\nsudo /opt/atlassian/confluence/uninstall\n# 手动删除两个路径\nsudo rm -rf /opt/atlassian /var/atlassian\n```\n\n## 破解Confluence\n\n安装完成之后，启动Confluence：\n\n```\nsudo service confluence start\n```\n\n启动完成之后，可以在浏览器http://127.0.0.1:8090访问到服务，记下Server ID。\n\n![1555989749457.png](https://i.loli.net/2019/04/23/5cbe9e94c34b9.png)\n\n![1555989764220.png](https://i.loli.net/2019/04/23/5cbe9e94bf903.png)\n\n![1555989782771](https://i.loli.net/2019/04/23/5cbe9e94a9e53.png)\n\n然后可以停止服务：\n\n```\nsudo service confluence stop\n```\n\n下载工具包，解压。将`/opt/atlassian/confluence/confluence/WEB-INF/lib/atlassian-extras-decoder-v2-3.4.1.jar` 复制到方便的位置，我这里放到了home下。\n\n```\nsudo cp /opt/atlassian/confluence/confluence/WEB-INF/lib/atlassian-extras-decoder-v2-3.4.1.jar /home/\n```\n\n然后进入工具包：\n\n```\n# 将工具包中mysql-connector-java-5.1.32-bin.jar复制到Confluence的依赖文件夹下\nsudo cp mysql-connector-java-5.1.32-bin.jar /opt/atlassian/confluence/confluence/WEB-INF/lib\n\n# 用原版复制出来的atlassian-extras-decoder-v2-3.4.1.jar 包替换该目录下 atlassian-extras-2.4.jar\ncd confluence5.1-crack\nsudo cp /home/atlassian-extras-decoder-v2-3.4.1.jar atlassian-extras-2.4.jar\ncd iNViSiBLE\nsudo bash ./keygen.sh\n```\n\n**注：必须是在图形界面下，因为这个运行需要图形。如果没有图形，那么就会报错。**\n\n首先填入Server ID，在图形工具点击`.patch`选择`atlassian-extras-2.4.jar`文件。\n\n![1555989833935](https://i.loli.net/2019/04/23/5cbe9e94a2bdf.png)\n\n![1555989867280](https://i.loli.net/2019/04/23/5cbe9e94921fc.png)\n\n然后点击`.gen`生成key，复制所得的key。\n\n![1555989885366](https://i.loli.net/2019/04/23/5cbea0a94bece.png)\n\n在原本的atlassian-extras-2.4.jar所在的目录，多了一个atlassian-extras-2.4.bak为文件，不用管该文件。需要将atlassian-extras-2.4.jar文件替换成Confluence中的atlassian-extras-decoder-v2-3.4.1.jar，也就是复制出来的那个文件。\n\n```\ncd ..\nsudo cp atlassian-extras-2.4.jar /opt/atlassian/confluence/confluence/WEB-INF/lib/atlassian-extras-decoder-v2-3.4.1.jar\n```\n\n![1555989913161](https://i.loli.net/2019/04/23/5cbe9e94be989.png)\n\n点击下一步，就可以快乐的玩耍啦：\n\n![1555991064801](https://i.loli.net/2019/04/23/5cbea05bf418c.png)\n\n设置数据库的时间较长，请耐心等待。\n\n![1555993565787](https://i.loli.net/2019/04/23/5cbea05c02448.png)\n\n\n\n参考\n\n- [confluence安装破解](<https://www.jianshu.com/p/d621c5eec1c8>)\n- [linux 破解版confluence安装](https://www.cnblogs.com/wspblog/p/4750128.html)\n","slug":"Confluence安装在Linux上","published":1,"updated":"2021-06-20T10:25:20.122Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluqa1hi90009rloghwjth7z9","content":"<p>Confluence是一个适用于团队协作的文档管理软件，使用java开发的，功能方面类似Wiki，但是功能比Wiki强大。在安全性方面，Confluence 具有完善和精细的权限控制，可以很好地控制用户在 Wiki 中创建、编辑内容和添加注释。Confluence 直观易于使用，您不需要学习任何新的语言就可以使用它，用所见即所得的方式在 Confluence 中添加内容。</p>\n<p>虽然Confluence是收费的，但是Atlassian公司将其使用门槛降低了，最低设置了10人版每年10$的授权费，企业可以根据具体的使用人数进行<a href=\"https://cn.atlassian.com/software/confluence/pricing?tab=self-managed\">购买授权</a>。</p>\n<p>个人学习使用，这里根据网上的资源提供了一个破解的方法，仅供学习参考。</p>\n<h2 id=\"下载安装\"><a href=\"#下载安装\" class=\"headerlink\" title=\"下载安装\"></a>下载安装</h2><p>去官网下载最新的安装包（<a href=\"https://www.atlassian.com/software/confluence/download\">传送门</a>）。官网下载可能比较慢，可以通过下面的链接下载(6.15.2 Linux版本)，顺带下载破解的工具包。</p>\n<p>破解包: <a href=\"https://pan.baidu.com/s/1SYJ_nWfNkH0AlgBjqcVBsA\">https://pan.baidu.com/s/1SYJ_nWfNkH0AlgBjqcVBsA</a> (提取码: pava)</p>\n<span id=\"more\"></span>\n\n<h3 id=\"JDK环境安装\"><a href=\"#JDK环境安装\" class=\"headerlink\" title=\"JDK环境安装\"></a>JDK环境安装</h3><h3 id=\"安装mysql\"><a href=\"#安装mysql\" class=\"headerlink\" title=\"安装mysql\"></a>安装mysql</h3><p>这里使用了外部的mysql数据库：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt update</span><br><span class=\"line\">sudo apt install mysql-server mysql-client</span><br></pre></td></tr></table></figure>\n\n<p>创建对应的数据库并授权指定用户</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -u root -p</span><br><span class=\"line\">mysql&gt; create database confluence character SET utf8 COLLATE utf8_bin;</span><br><span class=\"line\">mysql&gt; SET GLOBAL tx_isolation=&#x27;READ-COMMITTED&#x27;;</span><br><span class=\"line\">mysql&gt; grant all on confluence.* to confluence@&quot;%&quot; identified by &quot;123456&quot;;</span><br><span class=\"line\">mysql&gt; FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>\n\n<p>mysql的其他安装配置可以参考[Mysql数据库配置]</p>\n<h3 id=\"安装Confluence\"><a href=\"#安装Confluence\" class=\"headerlink\" title=\"安装Confluence\"></a>安装Confluence</h3><p>给atlassian-confluence-6.15.2-x64.bin添加运行的权限：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chmod +x atlassian-confluence-6.15.2-x64.bin</span><br></pre></td></tr></table></figure>\n\n<p>运行上述文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ./atlassian-confluence-6.15.2-x64.bin</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.loli.net/2019/04/23/5cbea0d5b9574.png\" alt=\"1555988876289\"></p>\n<p>先后输入o，1，i三个指令，需要注意的是Confluence的安装路径。安装过程中，没有选择启动，这里补充一些Confluence的启动服务和关闭服务：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 关闭服务</span><br><span class=\"line\">sudo service confluence stop</span><br><span class=\"line\"># 启动服务</span><br><span class=\"line\">sudo service confluence start</span><br></pre></td></tr></table></figure>\n\n<p>Confluence的卸载：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo /opt/atlassian/confluence/uninstall</span><br><span class=\"line\"># 手动删除两个路径</span><br><span class=\"line\">sudo rm -rf /opt/atlassian /var/atlassian</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"破解Confluence\"><a href=\"#破解Confluence\" class=\"headerlink\" title=\"破解Confluence\"></a>破解Confluence</h2><p>安装完成之后，启动Confluence：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service confluence start</span><br></pre></td></tr></table></figure>\n\n<p>启动完成之后，可以在浏览器<a href=\"http://127.0.0.1:8090访问到服务，记下Server\">http://127.0.0.1:8090访问到服务，记下Server</a> ID。</p>\n<p><img src=\"https://i.loli.net/2019/04/23/5cbe9e94c34b9.png\" alt=\"1555989749457.png\"></p>\n<p><img src=\"https://i.loli.net/2019/04/23/5cbe9e94bf903.png\" alt=\"1555989764220.png\"></p>\n<p><img src=\"https://i.loli.net/2019/04/23/5cbe9e94a9e53.png\" alt=\"1555989782771\"></p>\n<p>然后可以停止服务：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service confluence stop</span><br></pre></td></tr></table></figure>\n\n<p>下载工具包，解压。将<code>/opt/atlassian/confluence/confluence/WEB-INF/lib/atlassian-extras-decoder-v2-3.4.1.jar</code> 复制到方便的位置，我这里放到了home下。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo cp /opt/atlassian/confluence/confluence/WEB-INF/lib/atlassian-extras-decoder-v2-3.4.1.jar /home/</span><br></pre></td></tr></table></figure>\n\n<p>然后进入工具包：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 将工具包中mysql-connector-java-5.1.32-bin.jar复制到Confluence的依赖文件夹下</span><br><span class=\"line\">sudo cp mysql-connector-java-5.1.32-bin.jar /opt/atlassian/confluence/confluence/WEB-INF/lib</span><br><span class=\"line\"></span><br><span class=\"line\"># 用原版复制出来的atlassian-extras-decoder-v2-3.4.1.jar 包替换该目录下 atlassian-extras-2.4.jar</span><br><span class=\"line\">cd confluence5.1-crack</span><br><span class=\"line\">sudo cp /home/atlassian-extras-decoder-v2-3.4.1.jar atlassian-extras-2.4.jar</span><br><span class=\"line\">cd iNViSiBLE</span><br><span class=\"line\">sudo bash ./keygen.sh</span><br></pre></td></tr></table></figure>\n\n<p><strong>注：必须是在图形界面下，因为这个运行需要图形。如果没有图形，那么就会报错。</strong></p>\n<p>首先填入Server ID，在图形工具点击<code>.patch</code>选择<code>atlassian-extras-2.4.jar</code>文件。</p>\n<p><img src=\"https://i.loli.net/2019/04/23/5cbe9e94a2bdf.png\" alt=\"1555989833935\"></p>\n<p><img src=\"https://i.loli.net/2019/04/23/5cbe9e94921fc.png\" alt=\"1555989867280\"></p>\n<p>然后点击<code>.gen</code>生成key，复制所得的key。</p>\n<p><img src=\"https://i.loli.net/2019/04/23/5cbea0a94bece.png\" alt=\"1555989885366\"></p>\n<p>在原本的atlassian-extras-2.4.jar所在的目录，多了一个atlassian-extras-2.4.bak为文件，不用管该文件。需要将atlassian-extras-2.4.jar文件替换成Confluence中的atlassian-extras-decoder-v2-3.4.1.jar，也就是复制出来的那个文件。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ..</span><br><span class=\"line\">sudo cp atlassian-extras-2.4.jar /opt/atlassian/confluence/confluence/WEB-INF/lib/atlassian-extras-decoder-v2-3.4.1.jar</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.loli.net/2019/04/23/5cbe9e94be989.png\" alt=\"1555989913161\"></p>\n<p>点击下一步，就可以快乐的玩耍啦：</p>\n<p><img src=\"https://i.loli.net/2019/04/23/5cbea05bf418c.png\" alt=\"1555991064801\"></p>\n<p>设置数据库的时间较长，请耐心等待。</p>\n<p><img src=\"https://i.loli.net/2019/04/23/5cbea05c02448.png\" alt=\"1555993565787\"></p>\n<p>参考</p>\n<ul>\n<li><a href=\"https://www.jianshu.com/p/d621c5eec1c8\">confluence安装破解</a></li>\n<li><a href=\"https://www.cnblogs.com/wspblog/p/4750128.html\">linux 破解版confluence安装</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>Confluence是一个适用于团队协作的文档管理软件，使用java开发的，功能方面类似Wiki，但是功能比Wiki强大。在安全性方面，Confluence 具有完善和精细的权限控制，可以很好地控制用户在 Wiki 中创建、编辑内容和添加注释。Confluence 直观易于使用，您不需要学习任何新的语言就可以使用它，用所见即所得的方式在 Confluence 中添加内容。</p>\n<p>虽然Confluence是收费的，但是Atlassian公司将其使用门槛降低了，最低设置了10人版每年10$的授权费，企业可以根据具体的使用人数进行<a href=\"https://cn.atlassian.com/software/confluence/pricing?tab=self-managed\">购买授权</a>。</p>\n<p>个人学习使用，这里根据网上的资源提供了一个破解的方法，仅供学习参考。</p>\n<h2 id=\"下载安装\"><a href=\"#下载安装\" class=\"headerlink\" title=\"下载安装\"></a>下载安装</h2><p>去官网下载最新的安装包（<a href=\"https://www.atlassian.com/software/confluence/download\">传送门</a>）。官网下载可能比较慢，可以通过下面的链接下载(6.15.2 Linux版本)，顺带下载破解的工具包。</p>\n<p>破解包: <a href=\"https://pan.baidu.com/s/1SYJ_nWfNkH0AlgBjqcVBsA\">https://pan.baidu.com/s/1SYJ_nWfNkH0AlgBjqcVBsA</a> (提取码: pava)</p>","more":"<h3 id=\"JDK环境安装\"><a href=\"#JDK环境安装\" class=\"headerlink\" title=\"JDK环境安装\"></a>JDK环境安装</h3><h3 id=\"安装mysql\"><a href=\"#安装mysql\" class=\"headerlink\" title=\"安装mysql\"></a>安装mysql</h3><p>这里使用了外部的mysql数据库：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt update</span><br><span class=\"line\">sudo apt install mysql-server mysql-client</span><br></pre></td></tr></table></figure>\n\n<p>创建对应的数据库并授权指定用户</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -u root -p</span><br><span class=\"line\">mysql&gt; create database confluence character SET utf8 COLLATE utf8_bin;</span><br><span class=\"line\">mysql&gt; SET GLOBAL tx_isolation=&#x27;READ-COMMITTED&#x27;;</span><br><span class=\"line\">mysql&gt; grant all on confluence.* to confluence@&quot;%&quot; identified by &quot;123456&quot;;</span><br><span class=\"line\">mysql&gt; FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>\n\n<p>mysql的其他安装配置可以参考[Mysql数据库配置]</p>\n<h3 id=\"安装Confluence\"><a href=\"#安装Confluence\" class=\"headerlink\" title=\"安装Confluence\"></a>安装Confluence</h3><p>给atlassian-confluence-6.15.2-x64.bin添加运行的权限：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chmod +x atlassian-confluence-6.15.2-x64.bin</span><br></pre></td></tr></table></figure>\n\n<p>运行上述文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ./atlassian-confluence-6.15.2-x64.bin</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.loli.net/2019/04/23/5cbea0d5b9574.png\" alt=\"1555988876289\"></p>\n<p>先后输入o，1，i三个指令，需要注意的是Confluence的安装路径。安装过程中，没有选择启动，这里补充一些Confluence的启动服务和关闭服务：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 关闭服务</span><br><span class=\"line\">sudo service confluence stop</span><br><span class=\"line\"># 启动服务</span><br><span class=\"line\">sudo service confluence start</span><br></pre></td></tr></table></figure>\n\n<p>Confluence的卸载：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo /opt/atlassian/confluence/uninstall</span><br><span class=\"line\"># 手动删除两个路径</span><br><span class=\"line\">sudo rm -rf /opt/atlassian /var/atlassian</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"破解Confluence\"><a href=\"#破解Confluence\" class=\"headerlink\" title=\"破解Confluence\"></a>破解Confluence</h2><p>安装完成之后，启动Confluence：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service confluence start</span><br></pre></td></tr></table></figure>\n\n<p>启动完成之后，可以在浏览器<a href=\"http://127.0.0.1:8090访问到服务，记下Server\">http://127.0.0.1:8090访问到服务，记下Server</a> ID。</p>\n<p><img src=\"https://i.loli.net/2019/04/23/5cbe9e94c34b9.png\" alt=\"1555989749457.png\"></p>\n<p><img src=\"https://i.loli.net/2019/04/23/5cbe9e94bf903.png\" alt=\"1555989764220.png\"></p>\n<p><img src=\"https://i.loli.net/2019/04/23/5cbe9e94a9e53.png\" alt=\"1555989782771\"></p>\n<p>然后可以停止服务：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service confluence stop</span><br></pre></td></tr></table></figure>\n\n<p>下载工具包，解压。将<code>/opt/atlassian/confluence/confluence/WEB-INF/lib/atlassian-extras-decoder-v2-3.4.1.jar</code> 复制到方便的位置，我这里放到了home下。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo cp /opt/atlassian/confluence/confluence/WEB-INF/lib/atlassian-extras-decoder-v2-3.4.1.jar /home/</span><br></pre></td></tr></table></figure>\n\n<p>然后进入工具包：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 将工具包中mysql-connector-java-5.1.32-bin.jar复制到Confluence的依赖文件夹下</span><br><span class=\"line\">sudo cp mysql-connector-java-5.1.32-bin.jar /opt/atlassian/confluence/confluence/WEB-INF/lib</span><br><span class=\"line\"></span><br><span class=\"line\"># 用原版复制出来的atlassian-extras-decoder-v2-3.4.1.jar 包替换该目录下 atlassian-extras-2.4.jar</span><br><span class=\"line\">cd confluence5.1-crack</span><br><span class=\"line\">sudo cp /home/atlassian-extras-decoder-v2-3.4.1.jar atlassian-extras-2.4.jar</span><br><span class=\"line\">cd iNViSiBLE</span><br><span class=\"line\">sudo bash ./keygen.sh</span><br></pre></td></tr></table></figure>\n\n<p><strong>注：必须是在图形界面下，因为这个运行需要图形。如果没有图形，那么就会报错。</strong></p>\n<p>首先填入Server ID，在图形工具点击<code>.patch</code>选择<code>atlassian-extras-2.4.jar</code>文件。</p>\n<p><img src=\"https://i.loli.net/2019/04/23/5cbe9e94a2bdf.png\" alt=\"1555989833935\"></p>\n<p><img src=\"https://i.loli.net/2019/04/23/5cbe9e94921fc.png\" alt=\"1555989867280\"></p>\n<p>然后点击<code>.gen</code>生成key，复制所得的key。</p>\n<p><img src=\"https://i.loli.net/2019/04/23/5cbea0a94bece.png\" alt=\"1555989885366\"></p>\n<p>在原本的atlassian-extras-2.4.jar所在的目录，多了一个atlassian-extras-2.4.bak为文件，不用管该文件。需要将atlassian-extras-2.4.jar文件替换成Confluence中的atlassian-extras-decoder-v2-3.4.1.jar，也就是复制出来的那个文件。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ..</span><br><span class=\"line\">sudo cp atlassian-extras-2.4.jar /opt/atlassian/confluence/confluence/WEB-INF/lib/atlassian-extras-decoder-v2-3.4.1.jar</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.loli.net/2019/04/23/5cbe9e94be989.png\" alt=\"1555989913161\"></p>\n<p>点击下一步，就可以快乐的玩耍啦：</p>\n<p><img src=\"https://i.loli.net/2019/04/23/5cbea05bf418c.png\" alt=\"1555991064801\"></p>\n<p>设置数据库的时间较长，请耐心等待。</p>\n<p><img src=\"https://i.loli.net/2019/04/23/5cbea05c02448.png\" alt=\"1555993565787\"></p>\n<p>参考</p>\n<ul>\n<li><a href=\"https://www.jianshu.com/p/d621c5eec1c8\">confluence安装破解</a></li>\n<li><a href=\"https://www.cnblogs.com/wspblog/p/4750128.html\">linux 破解版confluence安装</a></li>\n</ul>"},{"title":"Devpi私有服务器的搭建和使用","date":"2020-02-23T16:00:00.000Z","_content":"\n## 介绍\nPython私有包的发布，可以使用Pypi、Devpi等可以自己搭建的服务器，相对与Pypi Server，Devpi不仅提供私有包的发布，还有以下特色：\n\n- 支持本地缓存，可以做到公司内网加速的效果。\n- 支持[Sphinx](http://sphinx-doc.org/)文档。\n\n- 提供多索引，多索引之间还可以继承，这在维护多版本系统上十分有用。\n- 支持集群部署，支持一台或多台服务器部署，来加速访问。还支持通过 json 接口，实时监控集群的状态。\n- 支持导入导出功能。\n- 支持给索引设置 Jenkins 触发器，可以使用 tox 自动测试上传的包。\n- 使用插件可以完成Web界面的访问控制，增加私有包的安全。\n## 自建devpi服务\ndevpi服务包含三个组件：\n\n- devpi-server 是 devpi server 核心组件，提供镜像与缓存功能\n- devpi-web 提供Web界面和查询功能\n- devpi-client 命令行工具, 提供包上传等与服务器交互的功能\n\n额外安装的组件：\n\n- devpi-lockdown在nginx的帮助下实现对Web界面添加访问控制的功能\n\n<!--more-->\n\n已经编写好的dockerfile，可以直接使用([https://github.com/suAdminWen/mydocker/tree/master/devpi-server](https://github.com/suAdminWen/mydocker/tree/master/devpi-server))，包含以上四个组件。\n\n- 访问控制\n\n\n![图片.png](/blog-img/2020022401.png)\n\n- 输入帐号密码登录之后\n\n\n![图片.png](/blog-img/2020022402.png)\n### 索引规划\n![图片.png](/blog-img/2020022403.png)\nroot用户是初始化用户，不可删除和修改，root/pypi直接从公有镜像服务查询。\ndevuser是自己创建的用户，该用户下有两个索引：\n\n- staging 对应的是生产环境发布的包，不可删除和修改，基础是root/pypi\n- dev 对应的是开发环境发布的包，可以进行维护。基础是devuser/staging\n\n从devuser/dev索引上下载包时，当包不存在，首先会从devuser/staging索引查询，查询不到时，会在root/pypi上查询，再查询不到时会转向root/pypi对应的公有服务查询。\n\n\n## 初始化设置\n本地的操作是使用devpi-client工具。\n安装devpi-client：`pip install -U devpi-client`\n首先是创建连接 `devpi use http://devpi.xxxxx.com/` \n### 创建用户\n使用root用户登录，初始为设置密码：\n\n```bash\ndevpi login root --password=\n# 修改root用户密码为123\ndevpi user -m root password=123 \n# 创建新用户devuser并设定密码为123\ndevpi user -c devuser password=123\n# 新用户登录\ndevpi login devuser --password=123\n# 退出登录\ndevpi logoff\n```\n\n### 创建索引\n登录之后才可以进行操作\n\n```bash\n# 创建staging索引\ndevpi index -c staging bases=root/pypi\n# 使用staging索引\ndevpi use devuser/staging\n\n# devpi index dev mirror_whitelist=\"*\"\n```\n\n## 上传私有包\n上传包使用的是 `devpi upload` 命令，需要在 setup.py 所在目录下执行，这个命令有两个常用的参数：\n\n- `--with-docs` 参数，连带docs文件一块上传，支持 sphinx 创建的文档，需要 docs 目录和 setup.py 在同个目录下， `pip install sphinx`\n- `--formats bdist_wheel` 参数，上传wheel格式的包，需要安装wheel库， `pip install wheel`\n\n示例：\n\n```bash\ndevpi use http://devpi.xxxxxx.com/\ndevpi login devuser --password=123\ndevpi use devuser/dev\ndevpi upload --formats bdist_wheel\n```\n`devpi push` 命令是将包从一个索引推送到另外一个索引，例如将包example推送到devuser/staging\n```bash\ndevpi push example==1.0 devuser/staging\n```\n\n## pip下载包\n### 直接在终端使用\n无访问限制：\n\n```bash\npip install -i \"http://[host]/devuser/dev/+simple/\" [package] --trusted-host [host]\n```\n有访问限制：\n```bash\npip install -i \"http://[user]:[password]@[host]/devuser/dev/+simple/\" [package] --trusted-host [host]\n```\n### 配置~/.pip/pip.conf\n如果有访问限制，http://后要使用 `http://[user]:[password]@[host]`\n```bash\n[global]\ntimeout = 60\nindex-url = http://devpi.example.com/devuser/dev/+simple/\n[install]\ntrusted-host = devpi.example.com\n```\n\n","source":"_posts/Devpi私有服务器的搭建和使用.md","raw":"---\ntitle: Devpi私有服务器的搭建和使用\ndate: 2020-02-24\ntags: [Python, devpi,pip] \n---\n\n## 介绍\nPython私有包的发布，可以使用Pypi、Devpi等可以自己搭建的服务器，相对与Pypi Server，Devpi不仅提供私有包的发布，还有以下特色：\n\n- 支持本地缓存，可以做到公司内网加速的效果。\n- 支持[Sphinx](http://sphinx-doc.org/)文档。\n\n- 提供多索引，多索引之间还可以继承，这在维护多版本系统上十分有用。\n- 支持集群部署，支持一台或多台服务器部署，来加速访问。还支持通过 json 接口，实时监控集群的状态。\n- 支持导入导出功能。\n- 支持给索引设置 Jenkins 触发器，可以使用 tox 自动测试上传的包。\n- 使用插件可以完成Web界面的访问控制，增加私有包的安全。\n## 自建devpi服务\ndevpi服务包含三个组件：\n\n- devpi-server 是 devpi server 核心组件，提供镜像与缓存功能\n- devpi-web 提供Web界面和查询功能\n- devpi-client 命令行工具, 提供包上传等与服务器交互的功能\n\n额外安装的组件：\n\n- devpi-lockdown在nginx的帮助下实现对Web界面添加访问控制的功能\n\n<!--more-->\n\n已经编写好的dockerfile，可以直接使用([https://github.com/suAdminWen/mydocker/tree/master/devpi-server](https://github.com/suAdminWen/mydocker/tree/master/devpi-server))，包含以上四个组件。\n\n- 访问控制\n\n\n![图片.png](/blog-img/2020022401.png)\n\n- 输入帐号密码登录之后\n\n\n![图片.png](/blog-img/2020022402.png)\n### 索引规划\n![图片.png](/blog-img/2020022403.png)\nroot用户是初始化用户，不可删除和修改，root/pypi直接从公有镜像服务查询。\ndevuser是自己创建的用户，该用户下有两个索引：\n\n- staging 对应的是生产环境发布的包，不可删除和修改，基础是root/pypi\n- dev 对应的是开发环境发布的包，可以进行维护。基础是devuser/staging\n\n从devuser/dev索引上下载包时，当包不存在，首先会从devuser/staging索引查询，查询不到时，会在root/pypi上查询，再查询不到时会转向root/pypi对应的公有服务查询。\n\n\n## 初始化设置\n本地的操作是使用devpi-client工具。\n安装devpi-client：`pip install -U devpi-client`\n首先是创建连接 `devpi use http://devpi.xxxxx.com/` \n### 创建用户\n使用root用户登录，初始为设置密码：\n\n```bash\ndevpi login root --password=\n# 修改root用户密码为123\ndevpi user -m root password=123 \n# 创建新用户devuser并设定密码为123\ndevpi user -c devuser password=123\n# 新用户登录\ndevpi login devuser --password=123\n# 退出登录\ndevpi logoff\n```\n\n### 创建索引\n登录之后才可以进行操作\n\n```bash\n# 创建staging索引\ndevpi index -c staging bases=root/pypi\n# 使用staging索引\ndevpi use devuser/staging\n\n# devpi index dev mirror_whitelist=\"*\"\n```\n\n## 上传私有包\n上传包使用的是 `devpi upload` 命令，需要在 setup.py 所在目录下执行，这个命令有两个常用的参数：\n\n- `--with-docs` 参数，连带docs文件一块上传，支持 sphinx 创建的文档，需要 docs 目录和 setup.py 在同个目录下， `pip install sphinx`\n- `--formats bdist_wheel` 参数，上传wheel格式的包，需要安装wheel库， `pip install wheel`\n\n示例：\n\n```bash\ndevpi use http://devpi.xxxxxx.com/\ndevpi login devuser --password=123\ndevpi use devuser/dev\ndevpi upload --formats bdist_wheel\n```\n`devpi push` 命令是将包从一个索引推送到另外一个索引，例如将包example推送到devuser/staging\n```bash\ndevpi push example==1.0 devuser/staging\n```\n\n## pip下载包\n### 直接在终端使用\n无访问限制：\n\n```bash\npip install -i \"http://[host]/devuser/dev/+simple/\" [package] --trusted-host [host]\n```\n有访问限制：\n```bash\npip install -i \"http://[user]:[password]@[host]/devuser/dev/+simple/\" [package] --trusted-host [host]\n```\n### 配置~/.pip/pip.conf\n如果有访问限制，http://后要使用 `http://[user]:[password]@[host]`\n```bash\n[global]\ntimeout = 60\nindex-url = http://devpi.example.com/devuser/dev/+simple/\n[install]\ntrusted-host = devpi.example.com\n```\n\n","slug":"Devpi私有服务器的搭建和使用","published":1,"updated":"2021-06-20T10:25:20.122Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluqa1hib000brloggpgday1r","content":"<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>Python私有包的发布，可以使用Pypi、Devpi等可以自己搭建的服务器，相对与Pypi Server，Devpi不仅提供私有包的发布，还有以下特色：</p>\n<ul>\n<li><p>支持本地缓存，可以做到公司内网加速的效果。</p>\n</li>\n<li><p>支持<a href=\"http://sphinx-doc.org/\">Sphinx</a>文档。</p>\n</li>\n<li><p>提供多索引，多索引之间还可以继承，这在维护多版本系统上十分有用。</p>\n</li>\n<li><p>支持集群部署，支持一台或多台服务器部署，来加速访问。还支持通过 json 接口，实时监控集群的状态。</p>\n</li>\n<li><p>支持导入导出功能。</p>\n</li>\n<li><p>支持给索引设置 Jenkins 触发器，可以使用 tox 自动测试上传的包。</p>\n</li>\n<li><p>使用插件可以完成Web界面的访问控制，增加私有包的安全。</p>\n</li>\n</ul>\n<h2 id=\"自建devpi服务\"><a href=\"#自建devpi服务\" class=\"headerlink\" title=\"自建devpi服务\"></a>自建devpi服务</h2><p>devpi服务包含三个组件：</p>\n<ul>\n<li>devpi-server 是 devpi server 核心组件，提供镜像与缓存功能</li>\n<li>devpi-web 提供Web界面和查询功能</li>\n<li>devpi-client 命令行工具, 提供包上传等与服务器交互的功能</li>\n</ul>\n<p>额外安装的组件：</p>\n<ul>\n<li>devpi-lockdown在nginx的帮助下实现对Web界面添加访问控制的功能</li>\n</ul>\n<span id=\"more\"></span>\n\n<p>已经编写好的dockerfile，可以直接使用(<a href=\"https://github.com/suAdminWen/mydocker/tree/master/devpi-server\">https://github.com/suAdminWen/mydocker/tree/master/devpi-server</a>)，包含以上四个组件。</p>\n<ul>\n<li>访问控制</li>\n</ul>\n<p><img src=\"/blog-img/2020022401.png\" alt=\"图片.png\"></p>\n<ul>\n<li>输入帐号密码登录之后</li>\n</ul>\n<p><img src=\"/blog-img/2020022402.png\" alt=\"图片.png\"></p>\n<h3 id=\"索引规划\"><a href=\"#索引规划\" class=\"headerlink\" title=\"索引规划\"></a>索引规划</h3><p><img src=\"/blog-img/2020022403.png\" alt=\"图片.png\"><br>root用户是初始化用户，不可删除和修改，root&#x2F;pypi直接从公有镜像服务查询。<br>devuser是自己创建的用户，该用户下有两个索引：</p>\n<ul>\n<li>staging 对应的是生产环境发布的包，不可删除和修改，基础是root&#x2F;pypi</li>\n<li>dev 对应的是开发环境发布的包，可以进行维护。基础是devuser&#x2F;staging</li>\n</ul>\n<p>从devuser&#x2F;dev索引上下载包时，当包不存在，首先会从devuser&#x2F;staging索引查询，查询不到时，会在root&#x2F;pypi上查询，再查询不到时会转向root&#x2F;pypi对应的公有服务查询。</p>\n<h2 id=\"初始化设置\"><a href=\"#初始化设置\" class=\"headerlink\" title=\"初始化设置\"></a>初始化设置</h2><p>本地的操作是使用devpi-client工具。<br>安装devpi-client：<code>pip install -U devpi-client</code><br>首先是创建连接 <code>devpi use http://devpi.xxxxx.com/</code> </p>\n<h3 id=\"创建用户\"><a href=\"#创建用户\" class=\"headerlink\" title=\"创建用户\"></a>创建用户</h3><p>使用root用户登录，初始为设置密码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">devpi login root --password=</span><br><span class=\"line\"><span class=\"comment\"># 修改root用户密码为123</span></span><br><span class=\"line\">devpi user -m root password=123 </span><br><span class=\"line\"><span class=\"comment\"># 创建新用户devuser并设定密码为123</span></span><br><span class=\"line\">devpi user -c devuser password=123</span><br><span class=\"line\"><span class=\"comment\"># 新用户登录</span></span><br><span class=\"line\">devpi login devuser --password=123</span><br><span class=\"line\"><span class=\"comment\"># 退出登录</span></span><br><span class=\"line\">devpi logoff</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建索引\"><a href=\"#创建索引\" class=\"headerlink\" title=\"创建索引\"></a>创建索引</h3><p>登录之后才可以进行操作</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建staging索引</span></span><br><span class=\"line\">devpi index -c staging bases=root/pypi</span><br><span class=\"line\"><span class=\"comment\"># 使用staging索引</span></span><br><span class=\"line\">devpi use devuser/staging</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># devpi index dev mirror_whitelist=&quot;*&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"上传私有包\"><a href=\"#上传私有包\" class=\"headerlink\" title=\"上传私有包\"></a>上传私有包</h2><p>上传包使用的是 <code>devpi upload</code> 命令，需要在 setup.py 所在目录下执行，这个命令有两个常用的参数：</p>\n<ul>\n<li><code>--with-docs</code> 参数，连带docs文件一块上传，支持 sphinx 创建的文档，需要 docs 目录和 setup.py 在同个目录下， <code>pip install sphinx</code></li>\n<li><code>--formats bdist_wheel</code> 参数，上传wheel格式的包，需要安装wheel库， <code>pip install wheel</code></li>\n</ul>\n<p>示例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">devpi use http://devpi.xxxxxx.com/</span><br><span class=\"line\">devpi login devuser --password=123</span><br><span class=\"line\">devpi use devuser/dev</span><br><span class=\"line\">devpi upload --formats bdist_wheel</span><br></pre></td></tr></table></figure>\n<p><code>devpi push</code> 命令是将包从一个索引推送到另外一个索引，例如将包example推送到devuser&#x2F;staging</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">devpi push example==1.0 devuser/staging</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"pip下载包\"><a href=\"#pip下载包\" class=\"headerlink\" title=\"pip下载包\"></a>pip下载包</h2><h3 id=\"直接在终端使用\"><a href=\"#直接在终端使用\" class=\"headerlink\" title=\"直接在终端使用\"></a>直接在终端使用</h3><p>无访问限制：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install -i <span class=\"string\">&quot;http://[host]/devuser/dev/+simple/&quot;</span> [package] --trusted-host [host]</span><br></pre></td></tr></table></figure>\n<p>有访问限制：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install -i <span class=\"string\">&quot;http://[user]:[password]@[host]/devuser/dev/+simple/&quot;</span> [package] --trusted-host [host]</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置-x2F-pip-x2F-pip-conf\"><a href=\"#配置-x2F-pip-x2F-pip-conf\" class=\"headerlink\" title=\"配置~&#x2F;.pip&#x2F;pip.conf\"></a>配置~&#x2F;.pip&#x2F;pip.conf</h3><p>如果有访问限制，http:&#x2F;&#x2F;后要使用 <code>http://[user]:[password]@[host]</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[global]</span><br><span class=\"line\"><span class=\"built_in\">timeout</span> = 60</span><br><span class=\"line\">index-url = http://devpi.example.com/devuser/dev/+simple/</span><br><span class=\"line\">[install]</span><br><span class=\"line\">trusted-host = devpi.example.com</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>Python私有包的发布，可以使用Pypi、Devpi等可以自己搭建的服务器，相对与Pypi Server，Devpi不仅提供私有包的发布，还有以下特色：</p>\n<ul>\n<li><p>支持本地缓存，可以做到公司内网加速的效果。</p>\n</li>\n<li><p>支持<a href=\"http://sphinx-doc.org/\">Sphinx</a>文档。</p>\n</li>\n<li><p>提供多索引，多索引之间还可以继承，这在维护多版本系统上十分有用。</p>\n</li>\n<li><p>支持集群部署，支持一台或多台服务器部署，来加速访问。还支持通过 json 接口，实时监控集群的状态。</p>\n</li>\n<li><p>支持导入导出功能。</p>\n</li>\n<li><p>支持给索引设置 Jenkins 触发器，可以使用 tox 自动测试上传的包。</p>\n</li>\n<li><p>使用插件可以完成Web界面的访问控制，增加私有包的安全。</p>\n</li>\n</ul>\n<h2 id=\"自建devpi服务\"><a href=\"#自建devpi服务\" class=\"headerlink\" title=\"自建devpi服务\"></a>自建devpi服务</h2><p>devpi服务包含三个组件：</p>\n<ul>\n<li>devpi-server 是 devpi server 核心组件，提供镜像与缓存功能</li>\n<li>devpi-web 提供Web界面和查询功能</li>\n<li>devpi-client 命令行工具, 提供包上传等与服务器交互的功能</li>\n</ul>\n<p>额外安装的组件：</p>\n<ul>\n<li>devpi-lockdown在nginx的帮助下实现对Web界面添加访问控制的功能</li>\n</ul>","more":"<p>已经编写好的dockerfile，可以直接使用(<a href=\"https://github.com/suAdminWen/mydocker/tree/master/devpi-server\">https://github.com/suAdminWen/mydocker/tree/master/devpi-server</a>)，包含以上四个组件。</p>\n<ul>\n<li>访问控制</li>\n</ul>\n<p><img src=\"/blog-img/2020022401.png\" alt=\"图片.png\"></p>\n<ul>\n<li>输入帐号密码登录之后</li>\n</ul>\n<p><img src=\"/blog-img/2020022402.png\" alt=\"图片.png\"></p>\n<h3 id=\"索引规划\"><a href=\"#索引规划\" class=\"headerlink\" title=\"索引规划\"></a>索引规划</h3><p><img src=\"/blog-img/2020022403.png\" alt=\"图片.png\"><br>root用户是初始化用户，不可删除和修改，root&#x2F;pypi直接从公有镜像服务查询。<br>devuser是自己创建的用户，该用户下有两个索引：</p>\n<ul>\n<li>staging 对应的是生产环境发布的包，不可删除和修改，基础是root&#x2F;pypi</li>\n<li>dev 对应的是开发环境发布的包，可以进行维护。基础是devuser&#x2F;staging</li>\n</ul>\n<p>从devuser&#x2F;dev索引上下载包时，当包不存在，首先会从devuser&#x2F;staging索引查询，查询不到时，会在root&#x2F;pypi上查询，再查询不到时会转向root&#x2F;pypi对应的公有服务查询。</p>\n<h2 id=\"初始化设置\"><a href=\"#初始化设置\" class=\"headerlink\" title=\"初始化设置\"></a>初始化设置</h2><p>本地的操作是使用devpi-client工具。<br>安装devpi-client：<code>pip install -U devpi-client</code><br>首先是创建连接 <code>devpi use http://devpi.xxxxx.com/</code> </p>\n<h3 id=\"创建用户\"><a href=\"#创建用户\" class=\"headerlink\" title=\"创建用户\"></a>创建用户</h3><p>使用root用户登录，初始为设置密码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">devpi login root --password=</span><br><span class=\"line\"><span class=\"comment\"># 修改root用户密码为123</span></span><br><span class=\"line\">devpi user -m root password=123 </span><br><span class=\"line\"><span class=\"comment\"># 创建新用户devuser并设定密码为123</span></span><br><span class=\"line\">devpi user -c devuser password=123</span><br><span class=\"line\"><span class=\"comment\"># 新用户登录</span></span><br><span class=\"line\">devpi login devuser --password=123</span><br><span class=\"line\"><span class=\"comment\"># 退出登录</span></span><br><span class=\"line\">devpi logoff</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建索引\"><a href=\"#创建索引\" class=\"headerlink\" title=\"创建索引\"></a>创建索引</h3><p>登录之后才可以进行操作</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建staging索引</span></span><br><span class=\"line\">devpi index -c staging bases=root/pypi</span><br><span class=\"line\"><span class=\"comment\"># 使用staging索引</span></span><br><span class=\"line\">devpi use devuser/staging</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># devpi index dev mirror_whitelist=&quot;*&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"上传私有包\"><a href=\"#上传私有包\" class=\"headerlink\" title=\"上传私有包\"></a>上传私有包</h2><p>上传包使用的是 <code>devpi upload</code> 命令，需要在 setup.py 所在目录下执行，这个命令有两个常用的参数：</p>\n<ul>\n<li><code>--with-docs</code> 参数，连带docs文件一块上传，支持 sphinx 创建的文档，需要 docs 目录和 setup.py 在同个目录下， <code>pip install sphinx</code></li>\n<li><code>--formats bdist_wheel</code> 参数，上传wheel格式的包，需要安装wheel库， <code>pip install wheel</code></li>\n</ul>\n<p>示例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">devpi use http://devpi.xxxxxx.com/</span><br><span class=\"line\">devpi login devuser --password=123</span><br><span class=\"line\">devpi use devuser/dev</span><br><span class=\"line\">devpi upload --formats bdist_wheel</span><br></pre></td></tr></table></figure>\n<p><code>devpi push</code> 命令是将包从一个索引推送到另外一个索引，例如将包example推送到devuser&#x2F;staging</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">devpi push example==1.0 devuser/staging</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"pip下载包\"><a href=\"#pip下载包\" class=\"headerlink\" title=\"pip下载包\"></a>pip下载包</h2><h3 id=\"直接在终端使用\"><a href=\"#直接在终端使用\" class=\"headerlink\" title=\"直接在终端使用\"></a>直接在终端使用</h3><p>无访问限制：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install -i <span class=\"string\">&quot;http://[host]/devuser/dev/+simple/&quot;</span> [package] --trusted-host [host]</span><br></pre></td></tr></table></figure>\n<p>有访问限制：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install -i <span class=\"string\">&quot;http://[user]:[password]@[host]/devuser/dev/+simple/&quot;</span> [package] --trusted-host [host]</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置-x2F-pip-x2F-pip-conf\"><a href=\"#配置-x2F-pip-x2F-pip-conf\" class=\"headerlink\" title=\"配置~&#x2F;.pip&#x2F;pip.conf\"></a>配置~&#x2F;.pip&#x2F;pip.conf</h3><p>如果有访问限制，http:&#x2F;&#x2F;后要使用 <code>http://[user]:[password]@[host]</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[global]</span><br><span class=\"line\"><span class=\"built_in\">timeout</span> = 60</span><br><span class=\"line\">index-url = http://devpi.example.com/devuser/dev/+simple/</span><br><span class=\"line\">[install]</span><br><span class=\"line\">trusted-host = devpi.example.com</span><br></pre></td></tr></table></figure>"},{"title":"Docker容器内访问宿主机IP","date":"2023-08-14T16:00:00.000Z","_content":"\n\n\n## 1、使用特殊DNS名称`host.docker.internal`\n\n参考：[从容器连接到宿主机的服务](https://docs.docker.com/desktop/networking/#i-want-to-connect-from-a-container-to-a-service-on-the-host)\n\n使用特殊的DNS名称`host.docker.internal`作为主机的内部IP地址，然后使用：\n\n```bash\n$ ping host.docker.internal\nPING host.docker.internal (192.168.65.2) 56(84) bytes of data.\n64 bytes from host.docker.internal (192.168.65.2): icmp_seq=1 ttl=37 time=3.03 ms\n64 bytes from host.docker.internal (192.168.65.2): icmp_seq=2 ttl=37 time=2.42 ms\n```\n\n**注意该DNS 只支持 Mac 与 Windows 中 desktop 这种环境，并不支持在 Linux 中使用，所以不能直接使用。**\n\n\n## 2、可以在运行时容器内添加一条解析`--add-host=\"host.docker.internal:host-gateway\"`，建议Docker版本大于20，如果使用docker-compose.yaml则\n\n```yaml\nservices:\n  myservice:\n    extra_hosts:\n      - host.docker.internal:host-gateway\n```\n\n参考[https://github.com/docker/for-linux/issues/264](https://github.com/docker/for-linux/issues/264)\n\n实测可能会报错：\n\n```\nCreating network \"t_default\" with the default driver\nCreating t_myservice_1 ... error\n\nERROR: for t_myservice_1  Cannot create container for service myservice: invalid IP address in add-host: \"host-gateway\"\n\nERROR: for myservice  Cannot create container for service myservice: invalid IP address in add-host: \"host-gateway\"\nERROR: Encountered errors while bringing up the project.\n```\n\n\n## 3、设置容器网络，指定网关`172.15.234.1`作为宿主机访问ip\n\n```yaml\nservices:\n  myservice:\n    environment:\n\t    - REDIS_URL=redis://172.15.234.1:6379/1\n    networks:\n      my_net:\n        aliases:\n          - myservice_net\n\nnetworks:\n  my_net:\n    driver: bridge\n    driver_opts:\n      com.docker.network.enable_ipv6: \"false\"\n    ipam:\n      driver: default\n      config:\n      - subnet: 172.15.234.0/24\n        gateway: 172.15.234.1\n```","source":"_posts/Docker容器内访问宿主机IP.md","raw":"---\ntitle: Docker容器内访问宿主机IP\ndate: 2023-08-15\ntags: [Linux, Docker]\n\n---\n\n\n\n## 1、使用特殊DNS名称`host.docker.internal`\n\n参考：[从容器连接到宿主机的服务](https://docs.docker.com/desktop/networking/#i-want-to-connect-from-a-container-to-a-service-on-the-host)\n\n使用特殊的DNS名称`host.docker.internal`作为主机的内部IP地址，然后使用：\n\n```bash\n$ ping host.docker.internal\nPING host.docker.internal (192.168.65.2) 56(84) bytes of data.\n64 bytes from host.docker.internal (192.168.65.2): icmp_seq=1 ttl=37 time=3.03 ms\n64 bytes from host.docker.internal (192.168.65.2): icmp_seq=2 ttl=37 time=2.42 ms\n```\n\n**注意该DNS 只支持 Mac 与 Windows 中 desktop 这种环境，并不支持在 Linux 中使用，所以不能直接使用。**\n\n\n## 2、可以在运行时容器内添加一条解析`--add-host=\"host.docker.internal:host-gateway\"`，建议Docker版本大于20，如果使用docker-compose.yaml则\n\n```yaml\nservices:\n  myservice:\n    extra_hosts:\n      - host.docker.internal:host-gateway\n```\n\n参考[https://github.com/docker/for-linux/issues/264](https://github.com/docker/for-linux/issues/264)\n\n实测可能会报错：\n\n```\nCreating network \"t_default\" with the default driver\nCreating t_myservice_1 ... error\n\nERROR: for t_myservice_1  Cannot create container for service myservice: invalid IP address in add-host: \"host-gateway\"\n\nERROR: for myservice  Cannot create container for service myservice: invalid IP address in add-host: \"host-gateway\"\nERROR: Encountered errors while bringing up the project.\n```\n\n\n## 3、设置容器网络，指定网关`172.15.234.1`作为宿主机访问ip\n\n```yaml\nservices:\n  myservice:\n    environment:\n\t    - REDIS_URL=redis://172.15.234.1:6379/1\n    networks:\n      my_net:\n        aliases:\n          - myservice_net\n\nnetworks:\n  my_net:\n    driver: bridge\n    driver_opts:\n      com.docker.network.enable_ipv6: \"false\"\n    ipam:\n      driver: default\n      config:\n      - subnet: 172.15.234.0/24\n        gateway: 172.15.234.1\n```","slug":"Docker容器内访问宿主机IP","published":1,"updated":"2023-08-15T11:38:53.337Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluqa1hib000drloga9jv8wrq","content":"<h2 id=\"1、使用特殊DNS名称host-docker-internal\"><a href=\"#1、使用特殊DNS名称host-docker-internal\" class=\"headerlink\" title=\"1、使用特殊DNS名称host.docker.internal\"></a>1、使用特殊DNS名称<code>host.docker.internal</code></h2><p>参考：<a href=\"https://docs.docker.com/desktop/networking/#i-want-to-connect-from-a-container-to-a-service-on-the-host\">从容器连接到宿主机的服务</a></p>\n<p>使用特殊的DNS名称<code>host.docker.internal</code>作为主机的内部IP地址，然后使用：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ping host.docker.internal</span><br><span class=\"line\">PING host.docker.internal (192.168.65.2) 56(84) bytes of data.</span><br><span class=\"line\">64 bytes from host.docker.internal (192.168.65.2): icmp_seq=1 ttl=37 time=3.03 ms</span><br><span class=\"line\">64 bytes from host.docker.internal (192.168.65.2): icmp_seq=2 ttl=37 time=2.42 ms</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意该DNS 只支持 Mac 与 Windows 中 desktop 这种环境，并不支持在 Linux 中使用，所以不能直接使用。</strong></p>\n<h2 id=\"2、可以在运行时容器内添加一条解析-add-host-quot-host-docker-internal-host-gateway-quot-，建议Docker版本大于20，如果使用docker-compose-yaml则\"><a href=\"#2、可以在运行时容器内添加一条解析-add-host-quot-host-docker-internal-host-gateway-quot-，建议Docker版本大于20，如果使用docker-compose-yaml则\" class=\"headerlink\" title=\"2、可以在运行时容器内添加一条解析--add-host=&quot;host.docker.internal:host-gateway&quot;，建议Docker版本大于20，如果使用docker-compose.yaml则\"></a>2、可以在运行时容器内添加一条解析<code>--add-host=&quot;host.docker.internal:host-gateway&quot;</code>，建议Docker版本大于20，如果使用docker-compose.yaml则</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">myservice:</span></span><br><span class=\"line\">    <span class=\"attr\">extra_hosts:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">host.docker.internal:host-gateway</span></span><br></pre></td></tr></table></figure>\n\n<p>参考<a href=\"https://github.com/docker/for-linux/issues/264\">https://github.com/docker/for-linux/issues/264</a></p>\n<p>实测可能会报错：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Creating network &quot;t_default&quot; with the default driver</span><br><span class=\"line\">Creating t_myservice_1 ... error</span><br><span class=\"line\"></span><br><span class=\"line\">ERROR: for t_myservice_1  Cannot create container for service myservice: invalid IP address in add-host: &quot;host-gateway&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">ERROR: for myservice  Cannot create container for service myservice: invalid IP address in add-host: &quot;host-gateway&quot;</span><br><span class=\"line\">ERROR: Encountered errors while bringing up the project.</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"3、设置容器网络，指定网关172-15-234-1作为宿主机访问ip\"><a href=\"#3、设置容器网络，指定网关172-15-234-1作为宿主机访问ip\" class=\"headerlink\" title=\"3、设置容器网络，指定网关172.15.234.1作为宿主机访问ip\"></a>3、设置容器网络，指定网关<code>172.15.234.1</code>作为宿主机访问ip</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">myservice:</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">\t    <span class=\"bullet\">-</span> <span class=\"string\">REDIS_URL=redis://172.15.234.1:6379/1</span></span><br><span class=\"line\">    <span class=\"attr\">networks:</span></span><br><span class=\"line\">      <span class=\"attr\">my_net:</span></span><br><span class=\"line\">        <span class=\"attr\">aliases:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">myservice_net</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">networks:</span></span><br><span class=\"line\">  <span class=\"attr\">my_net:</span></span><br><span class=\"line\">    <span class=\"attr\">driver:</span> <span class=\"string\">bridge</span></span><br><span class=\"line\">    <span class=\"attr\">driver_opts:</span></span><br><span class=\"line\">      <span class=\"attr\">com.docker.network.enable_ipv6:</span> <span class=\"string\">&quot;false&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">ipam:</span></span><br><span class=\"line\">      <span class=\"attr\">driver:</span> <span class=\"string\">default</span></span><br><span class=\"line\">      <span class=\"attr\">config:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">subnet:</span> <span class=\"number\">172.15</span><span class=\"number\">.234</span><span class=\"number\">.0</span><span class=\"string\">/24</span></span><br><span class=\"line\">        <span class=\"attr\">gateway:</span> <span class=\"number\">172.15</span><span class=\"number\">.234</span><span class=\"number\">.1</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1、使用特殊DNS名称host-docker-internal\"><a href=\"#1、使用特殊DNS名称host-docker-internal\" class=\"headerlink\" title=\"1、使用特殊DNS名称host.docker.internal\"></a>1、使用特殊DNS名称<code>host.docker.internal</code></h2><p>参考：<a href=\"https://docs.docker.com/desktop/networking/#i-want-to-connect-from-a-container-to-a-service-on-the-host\">从容器连接到宿主机的服务</a></p>\n<p>使用特殊的DNS名称<code>host.docker.internal</code>作为主机的内部IP地址，然后使用：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ping host.docker.internal</span><br><span class=\"line\">PING host.docker.internal (192.168.65.2) 56(84) bytes of data.</span><br><span class=\"line\">64 bytes from host.docker.internal (192.168.65.2): icmp_seq=1 ttl=37 time=3.03 ms</span><br><span class=\"line\">64 bytes from host.docker.internal (192.168.65.2): icmp_seq=2 ttl=37 time=2.42 ms</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意该DNS 只支持 Mac 与 Windows 中 desktop 这种环境，并不支持在 Linux 中使用，所以不能直接使用。</strong></p>\n<h2 id=\"2、可以在运行时容器内添加一条解析-add-host-quot-host-docker-internal-host-gateway-quot-，建议Docker版本大于20，如果使用docker-compose-yaml则\"><a href=\"#2、可以在运行时容器内添加一条解析-add-host-quot-host-docker-internal-host-gateway-quot-，建议Docker版本大于20，如果使用docker-compose-yaml则\" class=\"headerlink\" title=\"2、可以在运行时容器内添加一条解析--add-host=&quot;host.docker.internal:host-gateway&quot;，建议Docker版本大于20，如果使用docker-compose.yaml则\"></a>2、可以在运行时容器内添加一条解析<code>--add-host=&quot;host.docker.internal:host-gateway&quot;</code>，建议Docker版本大于20，如果使用docker-compose.yaml则</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">myservice:</span></span><br><span class=\"line\">    <span class=\"attr\">extra_hosts:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">host.docker.internal:host-gateway</span></span><br></pre></td></tr></table></figure>\n\n<p>参考<a href=\"https://github.com/docker/for-linux/issues/264\">https://github.com/docker/for-linux/issues/264</a></p>\n<p>实测可能会报错：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Creating network &quot;t_default&quot; with the default driver</span><br><span class=\"line\">Creating t_myservice_1 ... error</span><br><span class=\"line\"></span><br><span class=\"line\">ERROR: for t_myservice_1  Cannot create container for service myservice: invalid IP address in add-host: &quot;host-gateway&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">ERROR: for myservice  Cannot create container for service myservice: invalid IP address in add-host: &quot;host-gateway&quot;</span><br><span class=\"line\">ERROR: Encountered errors while bringing up the project.</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"3、设置容器网络，指定网关172-15-234-1作为宿主机访问ip\"><a href=\"#3、设置容器网络，指定网关172-15-234-1作为宿主机访问ip\" class=\"headerlink\" title=\"3、设置容器网络，指定网关172.15.234.1作为宿主机访问ip\"></a>3、设置容器网络，指定网关<code>172.15.234.1</code>作为宿主机访问ip</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">myservice:</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">\t    <span class=\"bullet\">-</span> <span class=\"string\">REDIS_URL=redis://172.15.234.1:6379/1</span></span><br><span class=\"line\">    <span class=\"attr\">networks:</span></span><br><span class=\"line\">      <span class=\"attr\">my_net:</span></span><br><span class=\"line\">        <span class=\"attr\">aliases:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">myservice_net</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">networks:</span></span><br><span class=\"line\">  <span class=\"attr\">my_net:</span></span><br><span class=\"line\">    <span class=\"attr\">driver:</span> <span class=\"string\">bridge</span></span><br><span class=\"line\">    <span class=\"attr\">driver_opts:</span></span><br><span class=\"line\">      <span class=\"attr\">com.docker.network.enable_ipv6:</span> <span class=\"string\">&quot;false&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">ipam:</span></span><br><span class=\"line\">      <span class=\"attr\">driver:</span> <span class=\"string\">default</span></span><br><span class=\"line\">      <span class=\"attr\">config:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">subnet:</span> <span class=\"number\">172.15</span><span class=\"number\">.234</span><span class=\"number\">.0</span><span class=\"string\">/24</span></span><br><span class=\"line\">        <span class=\"attr\">gateway:</span> <span class=\"number\">172.15</span><span class=\"number\">.234</span><span class=\"number\">.1</span></span><br></pre></td></tr></table></figure>"},{"title":"FFmpeg的常用参数和使用示例","date":"2021-03-25T16:00:00.000Z","_content":"\n\n- [阮一峰——FFmpeg视频处理入门教程](https://www.ruanyifeng.com/blog/2020/01/ffmpeg.html)\n\nFFmpeg 是一个开放源代码的自由软件，可以运行音频和视频多种格式的录影、转换、流功能。这里结合自己的实际使用整理FFmpeg常用的命令和参数含义。\n\n## 安装和使用格式\n\n基于Ubuntu系统，只需要简单的apt命令就可以安装。\n\n```bash\nsudo apt update\nsudo apt -y install ffmpeg\n```\n\n安装完成之后就可以使用FFmpeg，输入`ffmpeg` 就可以查看其版本和配置信息。ffmpeg有许多命令参数，可以分为五个部分：\n\n```\nffmpeg {1} {2} -i {3} {4} {5}\n```\n\n- 1.全局参数，例如`-y`,`-v info`等等\n- 2.输入文件参数，例如`-c:v libx264`等等\n- 3.输入文件\n- 4.输出文件参数\n- 5.输出文件\n\n使用示例：\n\n```\nffmpeg -y -v info -c:v libx264 -i input.mp4 -c:v libvpx-vp9 -c:a libvorbi output.webm \n```\n\n## 常用命令行参数\n\n常用的命令行参数说明：\n\n- `-y` 不经过确认，输出时直接覆盖同名文件\n- `-v info` 指定日志级别，常用的有`info`、`error`\n- `-i` 指定输入文件或流地址\n- `-c` 指定编码器，一般常用`-c copy` 表示直接复制不进行重新编码\n- `-c:v` 指定视频编码器\n- `-c:a` 指定音频解码器\n- `-an` 去除音频流\n- `-vn` 去除视频流\n- `-f` 强制使用格式输出，常用有`-f mp4`、`-f flv`、`-f segment` \n- `-r` 指定帧率，缺省25。例如`-r 15`\n\n## 使用示例\n\n### 1、查看文件或流信息\n\n查看视频文件的元信息，比如编码格式和比特率或视频文件的持续时间和分辨率\n\n```\nffmpeg -i input.mp4\n```\n\n### 2、视频流转成本地视频文件\n\n将直播流`rtsp`或`rtmp`录制成视频文件\n\n<!-- more -->\n\n```\nffmpeg -y -i rtmp://ip:port/stream -f mp4 out.mp4\n```\n\n- `-f` 可以指定参数为 `mp4`、`flv`等\n- 如果流格式为`rtsp` 可以使用参数`-f rstp` 指定输入流格式\n- 可以使用`-rtsp_transport tcp` 指定 `rtsp` 使用`tcp`协议\n\n```bash\nffmpeg \\\n-y \\\n-v info \\  # 指定日志级别为info\n-rtsp_transport tcp \\  # rtsp 使用tcp协议\n-i \"rtsp://ip:port/stream\" \\\n-f mp4 \\ # 指定视频文件格式为mp4\nout.mp4\n```\n\n### 3、从视频文件中截取一帧\n\n截取视频文件第一帧输出为`jpg`文件：\n\n```bash\nffmpeg -y -i input.mp4 -vframes 1 -f mjpeg output.jpg\n```\n\n- `-vframes 1` 指定帧数，这里指定1帧\n- `-f` 输出图片格式，`-f mjpeg` 指定为`jpg` ; `-f image2` 指定输出格式为`png`\n\n如果想从指定时间截取需要使用`-ss` 参数指定开始时间\n\n```bash\nffmpeg -y -ss 00:10:00 -i input.mp4 -vframes 1 -f mjpeg output.jpg\n```\n\n- `-ss` 指定开始时间，格式可以是：`hh:mm:ss.xxx`，也可以是秒\n\n如果需要持续截取多张图片，可以使用以下命令：\n\n```bash\nffmpeg -y \\\n-ss 00:00:10 \\  # 指定从视频的第10秒开始截取\n-i input.mp4 \\\n-vframes 10 \\  # 只取10帧\n-t 10 \\  # 持续10秒\n-f image2 \\  # 指定输出格式为png\noutput_%3d.png  # 文件格式为output_001.png\n```\n\n**注意参数 `-ss` 的位置**\n\n **在截取本地视频文件时，参数`-ss` 应该在输入`-i`参数之前**。实际过程中多次将 `-ss` 放在`-i` 之后发现随着偏移时间的增大截取一帧的耗时越长，但是将`-ss`放在`-i`之前，就会发现截图时间是恒定和较低的。原因是前者每次都从视频文件的开始时间进行偏移，而后者直接定位当指定时间位置不用处理`-ss`之前的部分。\n\n### 4、视频文件裁剪\n\n### 5、Mp4转Mp3\n\n### 6、合并多个视频文件\n\n多个视频文件需要将视频文件名按照先后顺序保存到`input_list.txt`文件中，例如\n\n```\na.mp4\nb.mp4\nc.mp4\n```\n\n然后通过 `-f concat` 命令合并`input_list.txt`文件中的视频为`output.mp4`\n\n```\nffmpeg  \\\n-y -v info  \\\n-f concat -safe 0  \\\n-i input_list.txt  \\\n-c copy  \\\n-bsf:a aac_adtstoasc -movflags +faststart  \\\noutput.mp4\n\n```\n\n这种方式是成功率很高，也是最好的\n\n### 7、流文件处理\n\n实际业务中处理过录制直播流按照指定时长切分成多个视频文件。\n\n```\nffmpeg  \\\n-y  \\\n-v info  \\\n-rtbufsize 1m \\\n-i rtmp://host:port/stream \\\n-movflags faststart+frag_keyframe  \\      # 使mp4支持渐进式下载\n-c:v copy  \\                              # 原始编解码数据必须被拷贝\n-c:a copy \\                               # 设定声音编码，降低CPU使用\n-f segment \\                              # 输出流切片\n-segment_format mp4 \\                     # 流输出格式\n-strftime 1  \\                            # 设置切片名为生成切片的时间点\n-segment_time 30   \\                      # 流切分时长30秒\n-reset_timestamps 1  \\                    # 每个切片都重新初始化时间戳\nout_file__%Y-%m-%d_%H-%M-%S.mp4           # 输出文件名\n```\n\n### 8、输出到管道\n\n","source":"_posts/FFmpeg的使用.md","raw":"---\ntitle: FFmpeg的常用参数和使用示例\ndate: 2021-03-26\ntags: [FFmpeg, 视频]\n---\n\n\n- [阮一峰——FFmpeg视频处理入门教程](https://www.ruanyifeng.com/blog/2020/01/ffmpeg.html)\n\nFFmpeg 是一个开放源代码的自由软件，可以运行音频和视频多种格式的录影、转换、流功能。这里结合自己的实际使用整理FFmpeg常用的命令和参数含义。\n\n## 安装和使用格式\n\n基于Ubuntu系统，只需要简单的apt命令就可以安装。\n\n```bash\nsudo apt update\nsudo apt -y install ffmpeg\n```\n\n安装完成之后就可以使用FFmpeg，输入`ffmpeg` 就可以查看其版本和配置信息。ffmpeg有许多命令参数，可以分为五个部分：\n\n```\nffmpeg {1} {2} -i {3} {4} {5}\n```\n\n- 1.全局参数，例如`-y`,`-v info`等等\n- 2.输入文件参数，例如`-c:v libx264`等等\n- 3.输入文件\n- 4.输出文件参数\n- 5.输出文件\n\n使用示例：\n\n```\nffmpeg -y -v info -c:v libx264 -i input.mp4 -c:v libvpx-vp9 -c:a libvorbi output.webm \n```\n\n## 常用命令行参数\n\n常用的命令行参数说明：\n\n- `-y` 不经过确认，输出时直接覆盖同名文件\n- `-v info` 指定日志级别，常用的有`info`、`error`\n- `-i` 指定输入文件或流地址\n- `-c` 指定编码器，一般常用`-c copy` 表示直接复制不进行重新编码\n- `-c:v` 指定视频编码器\n- `-c:a` 指定音频解码器\n- `-an` 去除音频流\n- `-vn` 去除视频流\n- `-f` 强制使用格式输出，常用有`-f mp4`、`-f flv`、`-f segment` \n- `-r` 指定帧率，缺省25。例如`-r 15`\n\n## 使用示例\n\n### 1、查看文件或流信息\n\n查看视频文件的元信息，比如编码格式和比特率或视频文件的持续时间和分辨率\n\n```\nffmpeg -i input.mp4\n```\n\n### 2、视频流转成本地视频文件\n\n将直播流`rtsp`或`rtmp`录制成视频文件\n\n<!-- more -->\n\n```\nffmpeg -y -i rtmp://ip:port/stream -f mp4 out.mp4\n```\n\n- `-f` 可以指定参数为 `mp4`、`flv`等\n- 如果流格式为`rtsp` 可以使用参数`-f rstp` 指定输入流格式\n- 可以使用`-rtsp_transport tcp` 指定 `rtsp` 使用`tcp`协议\n\n```bash\nffmpeg \\\n-y \\\n-v info \\  # 指定日志级别为info\n-rtsp_transport tcp \\  # rtsp 使用tcp协议\n-i \"rtsp://ip:port/stream\" \\\n-f mp4 \\ # 指定视频文件格式为mp4\nout.mp4\n```\n\n### 3、从视频文件中截取一帧\n\n截取视频文件第一帧输出为`jpg`文件：\n\n```bash\nffmpeg -y -i input.mp4 -vframes 1 -f mjpeg output.jpg\n```\n\n- `-vframes 1` 指定帧数，这里指定1帧\n- `-f` 输出图片格式，`-f mjpeg` 指定为`jpg` ; `-f image2` 指定输出格式为`png`\n\n如果想从指定时间截取需要使用`-ss` 参数指定开始时间\n\n```bash\nffmpeg -y -ss 00:10:00 -i input.mp4 -vframes 1 -f mjpeg output.jpg\n```\n\n- `-ss` 指定开始时间，格式可以是：`hh:mm:ss.xxx`，也可以是秒\n\n如果需要持续截取多张图片，可以使用以下命令：\n\n```bash\nffmpeg -y \\\n-ss 00:00:10 \\  # 指定从视频的第10秒开始截取\n-i input.mp4 \\\n-vframes 10 \\  # 只取10帧\n-t 10 \\  # 持续10秒\n-f image2 \\  # 指定输出格式为png\noutput_%3d.png  # 文件格式为output_001.png\n```\n\n**注意参数 `-ss` 的位置**\n\n **在截取本地视频文件时，参数`-ss` 应该在输入`-i`参数之前**。实际过程中多次将 `-ss` 放在`-i` 之后发现随着偏移时间的增大截取一帧的耗时越长，但是将`-ss`放在`-i`之前，就会发现截图时间是恒定和较低的。原因是前者每次都从视频文件的开始时间进行偏移，而后者直接定位当指定时间位置不用处理`-ss`之前的部分。\n\n### 4、视频文件裁剪\n\n### 5、Mp4转Mp3\n\n### 6、合并多个视频文件\n\n多个视频文件需要将视频文件名按照先后顺序保存到`input_list.txt`文件中，例如\n\n```\na.mp4\nb.mp4\nc.mp4\n```\n\n然后通过 `-f concat` 命令合并`input_list.txt`文件中的视频为`output.mp4`\n\n```\nffmpeg  \\\n-y -v info  \\\n-f concat -safe 0  \\\n-i input_list.txt  \\\n-c copy  \\\n-bsf:a aac_adtstoasc -movflags +faststart  \\\noutput.mp4\n\n```\n\n这种方式是成功率很高，也是最好的\n\n### 7、流文件处理\n\n实际业务中处理过录制直播流按照指定时长切分成多个视频文件。\n\n```\nffmpeg  \\\n-y  \\\n-v info  \\\n-rtbufsize 1m \\\n-i rtmp://host:port/stream \\\n-movflags faststart+frag_keyframe  \\      # 使mp4支持渐进式下载\n-c:v copy  \\                              # 原始编解码数据必须被拷贝\n-c:a copy \\                               # 设定声音编码，降低CPU使用\n-f segment \\                              # 输出流切片\n-segment_format mp4 \\                     # 流输出格式\n-strftime 1  \\                            # 设置切片名为生成切片的时间点\n-segment_time 30   \\                      # 流切分时长30秒\n-reset_timestamps 1  \\                    # 每个切片都重新初始化时间戳\nout_file__%Y-%m-%d_%H-%M-%S.mp4           # 输出文件名\n```\n\n### 8、输出到管道\n\n","slug":"FFmpeg的使用","published":1,"updated":"2021-06-20T10:25:20.122Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluqa1hic000grlogbsgyhc5i","content":"<ul>\n<li><a href=\"https://www.ruanyifeng.com/blog/2020/01/ffmpeg.html\">阮一峰——FFmpeg视频处理入门教程</a></li>\n</ul>\n<p>FFmpeg 是一个开放源代码的自由软件，可以运行音频和视频多种格式的录影、转换、流功能。这里结合自己的实际使用整理FFmpeg常用的命令和参数含义。</p>\n<h2 id=\"安装和使用格式\"><a href=\"#安装和使用格式\" class=\"headerlink\" title=\"安装和使用格式\"></a>安装和使用格式</h2><p>基于Ubuntu系统，只需要简单的apt命令就可以安装。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt update</span><br><span class=\"line\">sudo apt -y install ffmpeg</span><br></pre></td></tr></table></figure>\n\n<p>安装完成之后就可以使用FFmpeg，输入<code>ffmpeg</code> 就可以查看其版本和配置信息。ffmpeg有许多命令参数，可以分为五个部分：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ffmpeg &#123;1&#125; &#123;2&#125; -i &#123;3&#125; &#123;4&#125; &#123;5&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>1.全局参数，例如<code>-y</code>,<code>-v info</code>等等</li>\n<li>2.输入文件参数，例如<code>-c:v libx264</code>等等</li>\n<li>3.输入文件</li>\n<li>4.输出文件参数</li>\n<li>5.输出文件</li>\n</ul>\n<p>使用示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ffmpeg -y -v info -c:v libx264 -i input.mp4 -c:v libvpx-vp9 -c:a libvorbi output.webm </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"常用命令行参数\"><a href=\"#常用命令行参数\" class=\"headerlink\" title=\"常用命令行参数\"></a>常用命令行参数</h2><p>常用的命令行参数说明：</p>\n<ul>\n<li><code>-y</code> 不经过确认，输出时直接覆盖同名文件</li>\n<li><code>-v info</code> 指定日志级别，常用的有<code>info</code>、<code>error</code></li>\n<li><code>-i</code> 指定输入文件或流地址</li>\n<li><code>-c</code> 指定编码器，一般常用<code>-c copy</code> 表示直接复制不进行重新编码</li>\n<li><code>-c:v</code> 指定视频编码器</li>\n<li><code>-c:a</code> 指定音频解码器</li>\n<li><code>-an</code> 去除音频流</li>\n<li><code>-vn</code> 去除视频流</li>\n<li><code>-f</code> 强制使用格式输出，常用有<code>-f mp4</code>、<code>-f flv</code>、<code>-f segment</code> </li>\n<li><code>-r</code> 指定帧率，缺省25。例如<code>-r 15</code></li>\n</ul>\n<h2 id=\"使用示例\"><a href=\"#使用示例\" class=\"headerlink\" title=\"使用示例\"></a>使用示例</h2><h3 id=\"1、查看文件或流信息\"><a href=\"#1、查看文件或流信息\" class=\"headerlink\" title=\"1、查看文件或流信息\"></a>1、查看文件或流信息</h3><p>查看视频文件的元信息，比如编码格式和比特率或视频文件的持续时间和分辨率</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ffmpeg -i input.mp4</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、视频流转成本地视频文件\"><a href=\"#2、视频流转成本地视频文件\" class=\"headerlink\" title=\"2、视频流转成本地视频文件\"></a>2、视频流转成本地视频文件</h3><p>将直播流<code>rtsp</code>或<code>rtmp</code>录制成视频文件</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ffmpeg -y -i rtmp://ip:port/stream -f mp4 out.mp4</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>-f</code> 可以指定参数为 <code>mp4</code>、<code>flv</code>等</li>\n<li>如果流格式为<code>rtsp</code> 可以使用参数<code>-f rstp</code> 指定输入流格式</li>\n<li>可以使用<code>-rtsp_transport tcp</code> 指定 <code>rtsp</code> 使用<code>tcp</code>协议</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ffmpeg \\</span><br><span class=\"line\">-y \\</span><br><span class=\"line\">-v info \\  <span class=\"comment\"># 指定日志级别为info</span></span><br><span class=\"line\">-rtsp_transport tcp \\  <span class=\"comment\"># rtsp 使用tcp协议</span></span><br><span class=\"line\">-i <span class=\"string\">&quot;rtsp://ip:port/stream&quot;</span> \\</span><br><span class=\"line\">-f mp4 \\ <span class=\"comment\"># 指定视频文件格式为mp4</span></span><br><span class=\"line\">out.mp4</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、从视频文件中截取一帧\"><a href=\"#3、从视频文件中截取一帧\" class=\"headerlink\" title=\"3、从视频文件中截取一帧\"></a>3、从视频文件中截取一帧</h3><p>截取视频文件第一帧输出为<code>jpg</code>文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ffmpeg -y -i input.mp4 -vframes 1 -f mjpeg output.jpg</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>-vframes 1</code> 指定帧数，这里指定1帧</li>\n<li><code>-f</code> 输出图片格式，<code>-f mjpeg</code> 指定为<code>jpg</code> ; <code>-f image2</code> 指定输出格式为<code>png</code></li>\n</ul>\n<p>如果想从指定时间截取需要使用<code>-ss</code> 参数指定开始时间</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ffmpeg -y -ss 00:10:00 -i input.mp4 -vframes 1 -f mjpeg output.jpg</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>-ss</code> 指定开始时间，格式可以是：<code>hh:mm:ss.xxx</code>，也可以是秒</li>\n</ul>\n<p>如果需要持续截取多张图片，可以使用以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ffmpeg -y \\</span><br><span class=\"line\">-ss 00:00:10 \\  <span class=\"comment\"># 指定从视频的第10秒开始截取</span></span><br><span class=\"line\">-i input.mp4 \\</span><br><span class=\"line\">-vframes 10 \\  <span class=\"comment\"># 只取10帧</span></span><br><span class=\"line\">-t 10 \\  <span class=\"comment\"># 持续10秒</span></span><br><span class=\"line\">-f image2 \\  <span class=\"comment\"># 指定输出格式为png</span></span><br><span class=\"line\">output_%3d.png  <span class=\"comment\"># 文件格式为output_001.png</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>注意参数 <code>-ss</code> 的位置</strong></p>\n<p> <strong>在截取本地视频文件时，参数<code>-ss</code> 应该在输入<code>-i</code>参数之前</strong>。实际过程中多次将 <code>-ss</code> 放在<code>-i</code> 之后发现随着偏移时间的增大截取一帧的耗时越长，但是将<code>-ss</code>放在<code>-i</code>之前，就会发现截图时间是恒定和较低的。原因是前者每次都从视频文件的开始时间进行偏移，而后者直接定位当指定时间位置不用处理<code>-ss</code>之前的部分。</p>\n<h3 id=\"4、视频文件裁剪\"><a href=\"#4、视频文件裁剪\" class=\"headerlink\" title=\"4、视频文件裁剪\"></a>4、视频文件裁剪</h3><h3 id=\"5、Mp4转Mp3\"><a href=\"#5、Mp4转Mp3\" class=\"headerlink\" title=\"5、Mp4转Mp3\"></a>5、Mp4转Mp3</h3><h3 id=\"6、合并多个视频文件\"><a href=\"#6、合并多个视频文件\" class=\"headerlink\" title=\"6、合并多个视频文件\"></a>6、合并多个视频文件</h3><p>多个视频文件需要将视频文件名按照先后顺序保存到<code>input_list.txt</code>文件中，例如</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a.mp4</span><br><span class=\"line\">b.mp4</span><br><span class=\"line\">c.mp4</span><br></pre></td></tr></table></figure>\n\n<p>然后通过 <code>-f concat</code> 命令合并<code>input_list.txt</code>文件中的视频为<code>output.mp4</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ffmpeg  \\</span><br><span class=\"line\">-y -v info  \\</span><br><span class=\"line\">-f concat -safe 0  \\</span><br><span class=\"line\">-i input_list.txt  \\</span><br><span class=\"line\">-c copy  \\</span><br><span class=\"line\">-bsf:a aac_adtstoasc -movflags +faststart  \\</span><br><span class=\"line\">output.mp4</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这种方式是成功率很高，也是最好的</p>\n<h3 id=\"7、流文件处理\"><a href=\"#7、流文件处理\" class=\"headerlink\" title=\"7、流文件处理\"></a>7、流文件处理</h3><p>实际业务中处理过录制直播流按照指定时长切分成多个视频文件。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ffmpeg  \\</span><br><span class=\"line\">-y  \\</span><br><span class=\"line\">-v info  \\</span><br><span class=\"line\">-rtbufsize 1m \\</span><br><span class=\"line\">-i rtmp://host:port/stream \\</span><br><span class=\"line\">-movflags faststart+frag_keyframe  \\      # 使mp4支持渐进式下载</span><br><span class=\"line\">-c:v copy  \\                              # 原始编解码数据必须被拷贝</span><br><span class=\"line\">-c:a copy \\                               # 设定声音编码，降低CPU使用</span><br><span class=\"line\">-f segment \\                              # 输出流切片</span><br><span class=\"line\">-segment_format mp4 \\                     # 流输出格式</span><br><span class=\"line\">-strftime 1  \\                            # 设置切片名为生成切片的时间点</span><br><span class=\"line\">-segment_time 30   \\                      # 流切分时长30秒</span><br><span class=\"line\">-reset_timestamps 1  \\                    # 每个切片都重新初始化时间戳</span><br><span class=\"line\">out_file__%Y-%m-%d_%H-%M-%S.mp4           # 输出文件名</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8、输出到管道\"><a href=\"#8、输出到管道\" class=\"headerlink\" title=\"8、输出到管道\"></a>8、输出到管道</h3>","site":{"data":{}},"excerpt":"<ul>\n<li><a href=\"https://www.ruanyifeng.com/blog/2020/01/ffmpeg.html\">阮一峰——FFmpeg视频处理入门教程</a></li>\n</ul>\n<p>FFmpeg 是一个开放源代码的自由软件，可以运行音频和视频多种格式的录影、转换、流功能。这里结合自己的实际使用整理FFmpeg常用的命令和参数含义。</p>\n<h2 id=\"安装和使用格式\"><a href=\"#安装和使用格式\" class=\"headerlink\" title=\"安装和使用格式\"></a>安装和使用格式</h2><p>基于Ubuntu系统，只需要简单的apt命令就可以安装。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt update</span><br><span class=\"line\">sudo apt -y install ffmpeg</span><br></pre></td></tr></table></figure>\n\n<p>安装完成之后就可以使用FFmpeg，输入<code>ffmpeg</code> 就可以查看其版本和配置信息。ffmpeg有许多命令参数，可以分为五个部分：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ffmpeg &#123;1&#125; &#123;2&#125; -i &#123;3&#125; &#123;4&#125; &#123;5&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>1.全局参数，例如<code>-y</code>,<code>-v info</code>等等</li>\n<li>2.输入文件参数，例如<code>-c:v libx264</code>等等</li>\n<li>3.输入文件</li>\n<li>4.输出文件参数</li>\n<li>5.输出文件</li>\n</ul>\n<p>使用示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ffmpeg -y -v info -c:v libx264 -i input.mp4 -c:v libvpx-vp9 -c:a libvorbi output.webm </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"常用命令行参数\"><a href=\"#常用命令行参数\" class=\"headerlink\" title=\"常用命令行参数\"></a>常用命令行参数</h2><p>常用的命令行参数说明：</p>\n<ul>\n<li><code>-y</code> 不经过确认，输出时直接覆盖同名文件</li>\n<li><code>-v info</code> 指定日志级别，常用的有<code>info</code>、<code>error</code></li>\n<li><code>-i</code> 指定输入文件或流地址</li>\n<li><code>-c</code> 指定编码器，一般常用<code>-c copy</code> 表示直接复制不进行重新编码</li>\n<li><code>-c:v</code> 指定视频编码器</li>\n<li><code>-c:a</code> 指定音频解码器</li>\n<li><code>-an</code> 去除音频流</li>\n<li><code>-vn</code> 去除视频流</li>\n<li><code>-f</code> 强制使用格式输出，常用有<code>-f mp4</code>、<code>-f flv</code>、<code>-f segment</code> </li>\n<li><code>-r</code> 指定帧率，缺省25。例如<code>-r 15</code></li>\n</ul>\n<h2 id=\"使用示例\"><a href=\"#使用示例\" class=\"headerlink\" title=\"使用示例\"></a>使用示例</h2><h3 id=\"1、查看文件或流信息\"><a href=\"#1、查看文件或流信息\" class=\"headerlink\" title=\"1、查看文件或流信息\"></a>1、查看文件或流信息</h3><p>查看视频文件的元信息，比如编码格式和比特率或视频文件的持续时间和分辨率</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ffmpeg -i input.mp4</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、视频流转成本地视频文件\"><a href=\"#2、视频流转成本地视频文件\" class=\"headerlink\" title=\"2、视频流转成本地视频文件\"></a>2、视频流转成本地视频文件</h3><p>将直播流<code>rtsp</code>或<code>rtmp</code>录制成视频文件</p>","more":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ffmpeg -y -i rtmp://ip:port/stream -f mp4 out.mp4</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>-f</code> 可以指定参数为 <code>mp4</code>、<code>flv</code>等</li>\n<li>如果流格式为<code>rtsp</code> 可以使用参数<code>-f rstp</code> 指定输入流格式</li>\n<li>可以使用<code>-rtsp_transport tcp</code> 指定 <code>rtsp</code> 使用<code>tcp</code>协议</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ffmpeg \\</span><br><span class=\"line\">-y \\</span><br><span class=\"line\">-v info \\  <span class=\"comment\"># 指定日志级别为info</span></span><br><span class=\"line\">-rtsp_transport tcp \\  <span class=\"comment\"># rtsp 使用tcp协议</span></span><br><span class=\"line\">-i <span class=\"string\">&quot;rtsp://ip:port/stream&quot;</span> \\</span><br><span class=\"line\">-f mp4 \\ <span class=\"comment\"># 指定视频文件格式为mp4</span></span><br><span class=\"line\">out.mp4</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、从视频文件中截取一帧\"><a href=\"#3、从视频文件中截取一帧\" class=\"headerlink\" title=\"3、从视频文件中截取一帧\"></a>3、从视频文件中截取一帧</h3><p>截取视频文件第一帧输出为<code>jpg</code>文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ffmpeg -y -i input.mp4 -vframes 1 -f mjpeg output.jpg</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>-vframes 1</code> 指定帧数，这里指定1帧</li>\n<li><code>-f</code> 输出图片格式，<code>-f mjpeg</code> 指定为<code>jpg</code> ; <code>-f image2</code> 指定输出格式为<code>png</code></li>\n</ul>\n<p>如果想从指定时间截取需要使用<code>-ss</code> 参数指定开始时间</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ffmpeg -y -ss 00:10:00 -i input.mp4 -vframes 1 -f mjpeg output.jpg</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>-ss</code> 指定开始时间，格式可以是：<code>hh:mm:ss.xxx</code>，也可以是秒</li>\n</ul>\n<p>如果需要持续截取多张图片，可以使用以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ffmpeg -y \\</span><br><span class=\"line\">-ss 00:00:10 \\  <span class=\"comment\"># 指定从视频的第10秒开始截取</span></span><br><span class=\"line\">-i input.mp4 \\</span><br><span class=\"line\">-vframes 10 \\  <span class=\"comment\"># 只取10帧</span></span><br><span class=\"line\">-t 10 \\  <span class=\"comment\"># 持续10秒</span></span><br><span class=\"line\">-f image2 \\  <span class=\"comment\"># 指定输出格式为png</span></span><br><span class=\"line\">output_%3d.png  <span class=\"comment\"># 文件格式为output_001.png</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>注意参数 <code>-ss</code> 的位置</strong></p>\n<p> <strong>在截取本地视频文件时，参数<code>-ss</code> 应该在输入<code>-i</code>参数之前</strong>。实际过程中多次将 <code>-ss</code> 放在<code>-i</code> 之后发现随着偏移时间的增大截取一帧的耗时越长，但是将<code>-ss</code>放在<code>-i</code>之前，就会发现截图时间是恒定和较低的。原因是前者每次都从视频文件的开始时间进行偏移，而后者直接定位当指定时间位置不用处理<code>-ss</code>之前的部分。</p>\n<h3 id=\"4、视频文件裁剪\"><a href=\"#4、视频文件裁剪\" class=\"headerlink\" title=\"4、视频文件裁剪\"></a>4、视频文件裁剪</h3><h3 id=\"5、Mp4转Mp3\"><a href=\"#5、Mp4转Mp3\" class=\"headerlink\" title=\"5、Mp4转Mp3\"></a>5、Mp4转Mp3</h3><h3 id=\"6、合并多个视频文件\"><a href=\"#6、合并多个视频文件\" class=\"headerlink\" title=\"6、合并多个视频文件\"></a>6、合并多个视频文件</h3><p>多个视频文件需要将视频文件名按照先后顺序保存到<code>input_list.txt</code>文件中，例如</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a.mp4</span><br><span class=\"line\">b.mp4</span><br><span class=\"line\">c.mp4</span><br></pre></td></tr></table></figure>\n\n<p>然后通过 <code>-f concat</code> 命令合并<code>input_list.txt</code>文件中的视频为<code>output.mp4</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ffmpeg  \\</span><br><span class=\"line\">-y -v info  \\</span><br><span class=\"line\">-f concat -safe 0  \\</span><br><span class=\"line\">-i input_list.txt  \\</span><br><span class=\"line\">-c copy  \\</span><br><span class=\"line\">-bsf:a aac_adtstoasc -movflags +faststart  \\</span><br><span class=\"line\">output.mp4</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这种方式是成功率很高，也是最好的</p>\n<h3 id=\"7、流文件处理\"><a href=\"#7、流文件处理\" class=\"headerlink\" title=\"7、流文件处理\"></a>7、流文件处理</h3><p>实际业务中处理过录制直播流按照指定时长切分成多个视频文件。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ffmpeg  \\</span><br><span class=\"line\">-y  \\</span><br><span class=\"line\">-v info  \\</span><br><span class=\"line\">-rtbufsize 1m \\</span><br><span class=\"line\">-i rtmp://host:port/stream \\</span><br><span class=\"line\">-movflags faststart+frag_keyframe  \\      # 使mp4支持渐进式下载</span><br><span class=\"line\">-c:v copy  \\                              # 原始编解码数据必须被拷贝</span><br><span class=\"line\">-c:a copy \\                               # 设定声音编码，降低CPU使用</span><br><span class=\"line\">-f segment \\                              # 输出流切片</span><br><span class=\"line\">-segment_format mp4 \\                     # 流输出格式</span><br><span class=\"line\">-strftime 1  \\                            # 设置切片名为生成切片的时间点</span><br><span class=\"line\">-segment_time 30   \\                      # 流切分时长30秒</span><br><span class=\"line\">-reset_timestamps 1  \\                    # 每个切片都重新初始化时间戳</span><br><span class=\"line\">out_file__%Y-%m-%d_%H-%M-%S.mp4           # 输出文件名</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8、输出到管道\"><a href=\"#8、输出到管道\" class=\"headerlink\" title=\"8、输出到管道\"></a>8、输出到管道</h3>"},{"title":"Javascript DOM阅读笔记","date":"2017-07-23T16:00:00.000Z","_content":"\n>之前在w3school上学习过js相关基本的东西，而且在项目开发中大量接触js和jquery，所以在阅读时，只是用本文记录一些平时不常用或者比较重要的知识点。\n\n\n## 第二章\n\n### 操作符 `==`和`===`\n\n`===` 全等操作符，执行严格的比较，**不仅比较值，而且会比较变量的类型**\n\n```js\nvar a = false;\nvar b = \"\"\nif(a === b){\n    alert(\"a === b\");  // 不输出\n}\nif(a == b){\n    alert(\"a == b\");  // 输出\n}\n\n```\n\n<!--more-->\n\n### 变量的作用域\n\n用var关键字明确的为函数变量设定作用域。\n\n如果在某个函数中使用var，那个变量就将被视为一个 **局部**变量，它只存在于这个函数的上下文中；反之，如果没有var，那个变量将被视为一个 **全局** 变量，如果脚本里已经存在一个与之同名的全局变量，这个函数就会改变那个全局变量的值。\n\n```js\nfunction square(num){\n    total = num * num;\n    return total;\n}\nvar total = 50;\nvar number = square(20);\nalert(total);\n```\n\n### 对象\n\n对象就是由一些属性和方法组合在一起而构成的一个数据实体。\n\n\n## 第三章\n\n### 获取元素\n\n- **getElementById()** 返回 **一个** 给定Id属性元素节点对应的 **对象**\n- **getElementsByTagName()** 返回一个对象数组\n- **getElementsByClassName()**  返回一个对象数组\n\n\n### 获取和设置属性\n\n- **getAttribute()** 它只有一个参数，查询的属性的名字\n- **setAttribute()** 对属性节点值做出修改\n\n`objects.setAttribute(attribute, value)`\n\n\n## 第四章\n\n\n### 某给链接加onclick事件处理函数，并让这个处理函数所触发的JavaScript代码返回的值为true或false。\n\n这样一来，当这个链接被点击时，如果JavaScript代码返回的值是true，onclick事件处理函数就认为“这个链接被点击了”；反之，如果返回的是false，onclick事件处理函数就认为“这个链接没有被点击”\n\n    <a href=\"http://www.baidu.com\" onclick=\"return false;\">Click me</a>\n\n当点击这个链接时，因为onclick事件处理函数所触发的Javascript代码返回给他的值是false，所以这个链接的默认行为没有被触发\n\n    onclick = \"showH(this);return false;\"\n\n\n## 第五章\n\n### 最佳实践\n\n- 平稳退化：确保网页在没有javascript的情况下也能正常工作\n- 分离javascript：把网页的结构和内容与javascript脚本动作行为分开\n- 向后兼容：确保老版本的浏览器不会因为你的js脚本而死掉\n- 性能考虑： 确保脚本执行的性能最优\n\n在实际开发过程中，很难保证以上各点。\n\n### 压缩脚本\n\n精简后的代码虽然不容易看懂，但能大幅减少文件大小。多数情况下，你应该有两个版本，一个是工作副本，可以修改代码并添加注释；另一个是精简副本，用户放在站点上。通常为了与非精简版本区分开，最好在精简副本的文件名上加上min字样。\n\n代码压缩工具：\n[UglifyJS](https://github.com/mishoo/UglifyJS2)\n\n\n## 第七章\n\n### innerHTML 读、写给定元素里的HTML内容\n\n```html\n<div id=\"testdiv\">\n</div>\n```\n\n在上述div中插入HTML\n\n```javascript\nwindow.onload = function(){\n    var testdiv = document.getElementById(\"testdiv\");\n    testdiv.innerHTML = \"<p> inserted <em>this</em> content.</p>\";\n}\n```\n\n利用这个技术，无法区分“插入一段HTML内容”和“替换HTML内容”。testdiv元素里有没有HTML内容无关紧要：一旦使用了innerHTML属性，它的全部内容都将被替换。\n\n\n### DOM方法\n\n- **createElement()** \n- **appendChild()**\n- **createTextNode()** \n- **insertBefore()**\n\n### AJAX\n\nAjax技术的核心就是XMLHttpRequest对象。\n\n兼容所有浏览器的写法：\n\n```js\nfunction getHTTPObject(){\n    if(typeof XMLHttpRequest == \"undefined\"){\n        XMLHttpRequest = function(){\n            try { return new ActiveXobject(\"Msxml2.XMLHTTP.6.0\");}\n                catch(e) {}\n            try { return new ActiveXobject(\"Msxml2.XMLHTTP.3.0\");}\n                catch(e) {}\n            try { return new ActiveXobject(\"Msxml2.XMLHTTP\");}\n                catch(e) {}\n            return false;\n        }\n    }\n    return new XMLHttpRequest();\n}\n```\n\n#### open(method, url, async): 规定请求的类型、URL 以及是否异步处理请求。\n\n- method：请求的类型；GET 或 POST\n- url：文件在服务器上的位置\n- async：true（异步）或 false（同步）\n\n#### send(string): 将请求发送到服务器。\n\n- string：仅用于 POST 请求\n\n\n**异步请求有一个很容易被忽略的问题就是异步性，就是脚本在发送异步请求之后，仍会继续执行，不会等待相应！**\n\n**Ajax的同源策略**\n\n\n## 第九章\n\n### 三位一体的网页\n\n- 结构层：由HTML或XHTML之类的标记语言负责创建\n- 表示层：由CSS负责完成\n- 行为层：负责内容应该如何响应事件这一问题，这是js和DOM主宰的领域\n\n\n### style 属性\n\nstyles属性包含着元素的样式，查询这个属性将返回一个对象而不是一个简单的字符串。样式都存放在这个style对象的属性里：\n\n    element.style.property\n\n当你需要引用一个中间带减号的css属性时，DOM要求你用驼峰命名法。例如，css属性 **font-family** 变成DOM属性 **fontFamily**\n\n\nDOM style 属性不能用来检索在外部css文件中声明的样式，在外部样式表里声明的样式不会进入style对象，在文档的`<head>` 部分里声明的样式也是如此。\n\n\n## 第十章\n\n### `setTimeout()` 能够让某个函数在经过一段预定的时间之后才开始执行\n\n    setTimeout(\"function\", interval)\n\n\n### Math常用函数\n\n- `ceil(number)` 向上取整\n- `floor(number)` 向下取整\n- `round(number)` 将任意浮点数舍入为与之最相近的整数\n","source":"_posts/JavaScript DOM阅读笔记.md","raw":"---\ntitle: Javascript DOM阅读笔记\ndate: 2017-07-24\ntags: [阅读笔记, JavaScript]\n---\n\n>之前在w3school上学习过js相关基本的东西，而且在项目开发中大量接触js和jquery，所以在阅读时，只是用本文记录一些平时不常用或者比较重要的知识点。\n\n\n## 第二章\n\n### 操作符 `==`和`===`\n\n`===` 全等操作符，执行严格的比较，**不仅比较值，而且会比较变量的类型**\n\n```js\nvar a = false;\nvar b = \"\"\nif(a === b){\n    alert(\"a === b\");  // 不输出\n}\nif(a == b){\n    alert(\"a == b\");  // 输出\n}\n\n```\n\n<!--more-->\n\n### 变量的作用域\n\n用var关键字明确的为函数变量设定作用域。\n\n如果在某个函数中使用var，那个变量就将被视为一个 **局部**变量，它只存在于这个函数的上下文中；反之，如果没有var，那个变量将被视为一个 **全局** 变量，如果脚本里已经存在一个与之同名的全局变量，这个函数就会改变那个全局变量的值。\n\n```js\nfunction square(num){\n    total = num * num;\n    return total;\n}\nvar total = 50;\nvar number = square(20);\nalert(total);\n```\n\n### 对象\n\n对象就是由一些属性和方法组合在一起而构成的一个数据实体。\n\n\n## 第三章\n\n### 获取元素\n\n- **getElementById()** 返回 **一个** 给定Id属性元素节点对应的 **对象**\n- **getElementsByTagName()** 返回一个对象数组\n- **getElementsByClassName()**  返回一个对象数组\n\n\n### 获取和设置属性\n\n- **getAttribute()** 它只有一个参数，查询的属性的名字\n- **setAttribute()** 对属性节点值做出修改\n\n`objects.setAttribute(attribute, value)`\n\n\n## 第四章\n\n\n### 某给链接加onclick事件处理函数，并让这个处理函数所触发的JavaScript代码返回的值为true或false。\n\n这样一来，当这个链接被点击时，如果JavaScript代码返回的值是true，onclick事件处理函数就认为“这个链接被点击了”；反之，如果返回的是false，onclick事件处理函数就认为“这个链接没有被点击”\n\n    <a href=\"http://www.baidu.com\" onclick=\"return false;\">Click me</a>\n\n当点击这个链接时，因为onclick事件处理函数所触发的Javascript代码返回给他的值是false，所以这个链接的默认行为没有被触发\n\n    onclick = \"showH(this);return false;\"\n\n\n## 第五章\n\n### 最佳实践\n\n- 平稳退化：确保网页在没有javascript的情况下也能正常工作\n- 分离javascript：把网页的结构和内容与javascript脚本动作行为分开\n- 向后兼容：确保老版本的浏览器不会因为你的js脚本而死掉\n- 性能考虑： 确保脚本执行的性能最优\n\n在实际开发过程中，很难保证以上各点。\n\n### 压缩脚本\n\n精简后的代码虽然不容易看懂，但能大幅减少文件大小。多数情况下，你应该有两个版本，一个是工作副本，可以修改代码并添加注释；另一个是精简副本，用户放在站点上。通常为了与非精简版本区分开，最好在精简副本的文件名上加上min字样。\n\n代码压缩工具：\n[UglifyJS](https://github.com/mishoo/UglifyJS2)\n\n\n## 第七章\n\n### innerHTML 读、写给定元素里的HTML内容\n\n```html\n<div id=\"testdiv\">\n</div>\n```\n\n在上述div中插入HTML\n\n```javascript\nwindow.onload = function(){\n    var testdiv = document.getElementById(\"testdiv\");\n    testdiv.innerHTML = \"<p> inserted <em>this</em> content.</p>\";\n}\n```\n\n利用这个技术，无法区分“插入一段HTML内容”和“替换HTML内容”。testdiv元素里有没有HTML内容无关紧要：一旦使用了innerHTML属性，它的全部内容都将被替换。\n\n\n### DOM方法\n\n- **createElement()** \n- **appendChild()**\n- **createTextNode()** \n- **insertBefore()**\n\n### AJAX\n\nAjax技术的核心就是XMLHttpRequest对象。\n\n兼容所有浏览器的写法：\n\n```js\nfunction getHTTPObject(){\n    if(typeof XMLHttpRequest == \"undefined\"){\n        XMLHttpRequest = function(){\n            try { return new ActiveXobject(\"Msxml2.XMLHTTP.6.0\");}\n                catch(e) {}\n            try { return new ActiveXobject(\"Msxml2.XMLHTTP.3.0\");}\n                catch(e) {}\n            try { return new ActiveXobject(\"Msxml2.XMLHTTP\");}\n                catch(e) {}\n            return false;\n        }\n    }\n    return new XMLHttpRequest();\n}\n```\n\n#### open(method, url, async): 规定请求的类型、URL 以及是否异步处理请求。\n\n- method：请求的类型；GET 或 POST\n- url：文件在服务器上的位置\n- async：true（异步）或 false（同步）\n\n#### send(string): 将请求发送到服务器。\n\n- string：仅用于 POST 请求\n\n\n**异步请求有一个很容易被忽略的问题就是异步性，就是脚本在发送异步请求之后，仍会继续执行，不会等待相应！**\n\n**Ajax的同源策略**\n\n\n## 第九章\n\n### 三位一体的网页\n\n- 结构层：由HTML或XHTML之类的标记语言负责创建\n- 表示层：由CSS负责完成\n- 行为层：负责内容应该如何响应事件这一问题，这是js和DOM主宰的领域\n\n\n### style 属性\n\nstyles属性包含着元素的样式，查询这个属性将返回一个对象而不是一个简单的字符串。样式都存放在这个style对象的属性里：\n\n    element.style.property\n\n当你需要引用一个中间带减号的css属性时，DOM要求你用驼峰命名法。例如，css属性 **font-family** 变成DOM属性 **fontFamily**\n\n\nDOM style 属性不能用来检索在外部css文件中声明的样式，在外部样式表里声明的样式不会进入style对象，在文档的`<head>` 部分里声明的样式也是如此。\n\n\n## 第十章\n\n### `setTimeout()` 能够让某个函数在经过一段预定的时间之后才开始执行\n\n    setTimeout(\"function\", interval)\n\n\n### Math常用函数\n\n- `ceil(number)` 向上取整\n- `floor(number)` 向下取整\n- `round(number)` 将任意浮点数舍入为与之最相近的整数\n","slug":"JavaScript DOM阅读笔记","published":1,"updated":"2021-06-20T10:25:20.123Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluqa1hid000hrlog7ztedzm9","content":"<blockquote>\n<p>之前在w3school上学习过js相关基本的东西，而且在项目开发中大量接触js和jquery，所以在阅读时，只是用本文记录一些平时不常用或者比较重要的知识点。</p>\n</blockquote>\n<h2 id=\"第二章\"><a href=\"#第二章\" class=\"headerlink\" title=\"第二章\"></a>第二章</h2><h3 id=\"操作符-和\"><a href=\"#操作符-和\" class=\"headerlink\" title=\"操作符 ==和===\"></a>操作符 <code>==</code>和<code>===</code></h3><p><code>===</code> 全等操作符，执行严格的比较，<strong>不仅比较值，而且会比较变量的类型</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(a === b)&#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"string\">&quot;a === b&quot;</span>);  <span class=\"comment\">// 不输出</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(a == b)&#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"string\">&quot;a == b&quot;</span>);  <span class=\"comment\">// 输出</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h3 id=\"变量的作用域\"><a href=\"#变量的作用域\" class=\"headerlink\" title=\"变量的作用域\"></a>变量的作用域</h3><p>用var关键字明确的为函数变量设定作用域。</p>\n<p>如果在某个函数中使用var，那个变量就将被视为一个 <strong>局部</strong>变量，它只存在于这个函数的上下文中；反之，如果没有var，那个变量将被视为一个 <strong>全局</strong> 变量，如果脚本里已经存在一个与之同名的全局变量，这个函数就会改变那个全局变量的值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">square</span>(<span class=\"params\">num</span>)&#123;</span><br><span class=\"line\">    total = num * num;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> total;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> total = <span class=\"number\">50</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> number = <span class=\"title function_\">square</span>(<span class=\"number\">20</span>);</span><br><span class=\"line\"><span class=\"title function_\">alert</span>(total);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h3><p>对象就是由一些属性和方法组合在一起而构成的一个数据实体。</p>\n<h2 id=\"第三章\"><a href=\"#第三章\" class=\"headerlink\" title=\"第三章\"></a>第三章</h2><h3 id=\"获取元素\"><a href=\"#获取元素\" class=\"headerlink\" title=\"获取元素\"></a>获取元素</h3><ul>\n<li><strong>getElementById()</strong> 返回 <strong>一个</strong> 给定Id属性元素节点对应的 <strong>对象</strong></li>\n<li><strong>getElementsByTagName()</strong> 返回一个对象数组</li>\n<li><strong>getElementsByClassName()</strong>  返回一个对象数组</li>\n</ul>\n<h3 id=\"获取和设置属性\"><a href=\"#获取和设置属性\" class=\"headerlink\" title=\"获取和设置属性\"></a>获取和设置属性</h3><ul>\n<li><strong>getAttribute()</strong> 它只有一个参数，查询的属性的名字</li>\n<li><strong>setAttribute()</strong> 对属性节点值做出修改</li>\n</ul>\n<p><code>objects.setAttribute(attribute, value)</code></p>\n<h2 id=\"第四章\"><a href=\"#第四章\" class=\"headerlink\" title=\"第四章\"></a>第四章</h2><h3 id=\"某给链接加onclick事件处理函数，并让这个处理函数所触发的JavaScript代码返回的值为true或false。\"><a href=\"#某给链接加onclick事件处理函数，并让这个处理函数所触发的JavaScript代码返回的值为true或false。\" class=\"headerlink\" title=\"某给链接加onclick事件处理函数，并让这个处理函数所触发的JavaScript代码返回的值为true或false。\"></a>某给链接加onclick事件处理函数，并让这个处理函数所触发的JavaScript代码返回的值为true或false。</h3><p>这样一来，当这个链接被点击时，如果JavaScript代码返回的值是true，onclick事件处理函数就认为“这个链接被点击了”；反之，如果返回的是false，onclick事件处理函数就认为“这个链接没有被点击”</p>\n<pre><code>&lt;a href=&quot;http://www.baidu.com&quot; onclick=&quot;return false;&quot;&gt;Click me&lt;/a&gt;\n</code></pre>\n<p>当点击这个链接时，因为onclick事件处理函数所触发的Javascript代码返回给他的值是false，所以这个链接的默认行为没有被触发</p>\n<pre><code>onclick = &quot;showH(this);return false;&quot;\n</code></pre>\n<h2 id=\"第五章\"><a href=\"#第五章\" class=\"headerlink\" title=\"第五章\"></a>第五章</h2><h3 id=\"最佳实践\"><a href=\"#最佳实践\" class=\"headerlink\" title=\"最佳实践\"></a>最佳实践</h3><ul>\n<li>平稳退化：确保网页在没有javascript的情况下也能正常工作</li>\n<li>分离javascript：把网页的结构和内容与javascript脚本动作行为分开</li>\n<li>向后兼容：确保老版本的浏览器不会因为你的js脚本而死掉</li>\n<li>性能考虑： 确保脚本执行的性能最优</li>\n</ul>\n<p>在实际开发过程中，很难保证以上各点。</p>\n<h3 id=\"压缩脚本\"><a href=\"#压缩脚本\" class=\"headerlink\" title=\"压缩脚本\"></a>压缩脚本</h3><p>精简后的代码虽然不容易看懂，但能大幅减少文件大小。多数情况下，你应该有两个版本，一个是工作副本，可以修改代码并添加注释；另一个是精简副本，用户放在站点上。通常为了与非精简版本区分开，最好在精简副本的文件名上加上min字样。</p>\n<p>代码压缩工具：<br><a href=\"https://github.com/mishoo/UglifyJS2\">UglifyJS</a></p>\n<h2 id=\"第七章\"><a href=\"#第七章\" class=\"headerlink\" title=\"第七章\"></a>第七章</h2><h3 id=\"innerHTML-读、写给定元素里的HTML内容\"><a href=\"#innerHTML-读、写给定元素里的HTML内容\" class=\"headerlink\" title=\"innerHTML 读、写给定元素里的HTML内容\"></a>innerHTML 读、写给定元素里的HTML内容</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;testdiv&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在上述div中插入HTML</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"property\">onload</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> testdiv = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;testdiv&quot;</span>);</span><br><span class=\"line\">    testdiv.<span class=\"property\">innerHTML</span> = <span class=\"string\">&quot;&lt;p&gt; inserted &lt;em&gt;this&lt;/em&gt; content.&lt;/p&gt;&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>利用这个技术，无法区分“插入一段HTML内容”和“替换HTML内容”。testdiv元素里有没有HTML内容无关紧要：一旦使用了innerHTML属性，它的全部内容都将被替换。</p>\n<h3 id=\"DOM方法\"><a href=\"#DOM方法\" class=\"headerlink\" title=\"DOM方法\"></a>DOM方法</h3><ul>\n<li><strong>createElement()</strong> </li>\n<li><strong>appendChild()</strong></li>\n<li><strong>createTextNode()</strong> </li>\n<li><strong>insertBefore()</strong></li>\n</ul>\n<h3 id=\"AJAX\"><a href=\"#AJAX\" class=\"headerlink\" title=\"AJAX\"></a>AJAX</h3><p>Ajax技术的核心就是XMLHttpRequest对象。</p>\n<p>兼容所有浏览器的写法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getHTTPObject</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> <span class=\"title class_\">XMLHttpRequest</span> == <span class=\"string\">&quot;undefined&quot;</span>)&#123;</span><br><span class=\"line\">        <span class=\"title class_\">XMLHttpRequest</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123; <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ActiveXobject</span>(<span class=\"string\">&quot;Msxml2.XMLHTTP.6.0&quot;</span>);&#125;</span><br><span class=\"line\">                <span class=\"keyword\">catch</span>(e) &#123;&#125;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123; <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ActiveXobject</span>(<span class=\"string\">&quot;Msxml2.XMLHTTP.3.0&quot;</span>);&#125;</span><br><span class=\"line\">                <span class=\"keyword\">catch</span>(e) &#123;&#125;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123; <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ActiveXobject</span>(<span class=\"string\">&quot;Msxml2.XMLHTTP&quot;</span>);&#125;</span><br><span class=\"line\">                <span class=\"keyword\">catch</span>(e) &#123;&#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"open-method-url-async-规定请求的类型、URL-以及是否异步处理请求。\"><a href=\"#open-method-url-async-规定请求的类型、URL-以及是否异步处理请求。\" class=\"headerlink\" title=\"open(method, url, async): 规定请求的类型、URL 以及是否异步处理请求。\"></a>open(method, url, async): 规定请求的类型、URL 以及是否异步处理请求。</h4><ul>\n<li>method：请求的类型；GET 或 POST</li>\n<li>url：文件在服务器上的位置</li>\n<li>async：true（异步）或 false（同步）</li>\n</ul>\n<h4 id=\"send-string-将请求发送到服务器。\"><a href=\"#send-string-将请求发送到服务器。\" class=\"headerlink\" title=\"send(string): 将请求发送到服务器。\"></a>send(string): 将请求发送到服务器。</h4><ul>\n<li>string：仅用于 POST 请求</li>\n</ul>\n<p><strong>异步请求有一个很容易被忽略的问题就是异步性，就是脚本在发送异步请求之后，仍会继续执行，不会等待相应！</strong></p>\n<p><strong>Ajax的同源策略</strong></p>\n<h2 id=\"第九章\"><a href=\"#第九章\" class=\"headerlink\" title=\"第九章\"></a>第九章</h2><h3 id=\"三位一体的网页\"><a href=\"#三位一体的网页\" class=\"headerlink\" title=\"三位一体的网页\"></a>三位一体的网页</h3><ul>\n<li>结构层：由HTML或XHTML之类的标记语言负责创建</li>\n<li>表示层：由CSS负责完成</li>\n<li>行为层：负责内容应该如何响应事件这一问题，这是js和DOM主宰的领域</li>\n</ul>\n<h3 id=\"style-属性\"><a href=\"#style-属性\" class=\"headerlink\" title=\"style 属性\"></a>style 属性</h3><p>styles属性包含着元素的样式，查询这个属性将返回一个对象而不是一个简单的字符串。样式都存放在这个style对象的属性里：</p>\n<pre><code>element.style.property\n</code></pre>\n<p>当你需要引用一个中间带减号的css属性时，DOM要求你用驼峰命名法。例如，css属性 <strong>font-family</strong> 变成DOM属性 <strong>fontFamily</strong></p>\n<p>DOM style 属性不能用来检索在外部css文件中声明的样式，在外部样式表里声明的样式不会进入style对象，在文档的<code>&lt;head&gt;</code> 部分里声明的样式也是如此。</p>\n<h2 id=\"第十章\"><a href=\"#第十章\" class=\"headerlink\" title=\"第十章\"></a>第十章</h2><h3 id=\"setTimeout-能够让某个函数在经过一段预定的时间之后才开始执行\"><a href=\"#setTimeout-能够让某个函数在经过一段预定的时间之后才开始执行\" class=\"headerlink\" title=\"setTimeout() 能够让某个函数在经过一段预定的时间之后才开始执行\"></a><code>setTimeout()</code> 能够让某个函数在经过一段预定的时间之后才开始执行</h3><pre><code>setTimeout(&quot;function&quot;, interval)\n</code></pre>\n<h3 id=\"Math常用函数\"><a href=\"#Math常用函数\" class=\"headerlink\" title=\"Math常用函数\"></a>Math常用函数</h3><ul>\n<li><code>ceil(number)</code> 向上取整</li>\n<li><code>floor(number)</code> 向下取整</li>\n<li><code>round(number)</code> 将任意浮点数舍入为与之最相近的整数</li>\n</ul>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>之前在w3school上学习过js相关基本的东西，而且在项目开发中大量接触js和jquery，所以在阅读时，只是用本文记录一些平时不常用或者比较重要的知识点。</p>\n</blockquote>\n<h2 id=\"第二章\"><a href=\"#第二章\" class=\"headerlink\" title=\"第二章\"></a>第二章</h2><h3 id=\"操作符-和\"><a href=\"#操作符-和\" class=\"headerlink\" title=\"操作符 ==和===\"></a>操作符 <code>==</code>和<code>===</code></h3><p><code>===</code> 全等操作符，执行严格的比较，<strong>不仅比较值，而且会比较变量的类型</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(a === b)&#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"string\">&quot;a === b&quot;</span>);  <span class=\"comment\">// 不输出</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(a == b)&#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"string\">&quot;a == b&quot;</span>);  <span class=\"comment\">// 输出</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","more":"<h3 id=\"变量的作用域\"><a href=\"#变量的作用域\" class=\"headerlink\" title=\"变量的作用域\"></a>变量的作用域</h3><p>用var关键字明确的为函数变量设定作用域。</p>\n<p>如果在某个函数中使用var，那个变量就将被视为一个 <strong>局部</strong>变量，它只存在于这个函数的上下文中；反之，如果没有var，那个变量将被视为一个 <strong>全局</strong> 变量，如果脚本里已经存在一个与之同名的全局变量，这个函数就会改变那个全局变量的值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">square</span>(<span class=\"params\">num</span>)&#123;</span><br><span class=\"line\">    total = num * num;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> total;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> total = <span class=\"number\">50</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> number = <span class=\"title function_\">square</span>(<span class=\"number\">20</span>);</span><br><span class=\"line\"><span class=\"title function_\">alert</span>(total);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h3><p>对象就是由一些属性和方法组合在一起而构成的一个数据实体。</p>\n<h2 id=\"第三章\"><a href=\"#第三章\" class=\"headerlink\" title=\"第三章\"></a>第三章</h2><h3 id=\"获取元素\"><a href=\"#获取元素\" class=\"headerlink\" title=\"获取元素\"></a>获取元素</h3><ul>\n<li><strong>getElementById()</strong> 返回 <strong>一个</strong> 给定Id属性元素节点对应的 <strong>对象</strong></li>\n<li><strong>getElementsByTagName()</strong> 返回一个对象数组</li>\n<li><strong>getElementsByClassName()</strong>  返回一个对象数组</li>\n</ul>\n<h3 id=\"获取和设置属性\"><a href=\"#获取和设置属性\" class=\"headerlink\" title=\"获取和设置属性\"></a>获取和设置属性</h3><ul>\n<li><strong>getAttribute()</strong> 它只有一个参数，查询的属性的名字</li>\n<li><strong>setAttribute()</strong> 对属性节点值做出修改</li>\n</ul>\n<p><code>objects.setAttribute(attribute, value)</code></p>\n<h2 id=\"第四章\"><a href=\"#第四章\" class=\"headerlink\" title=\"第四章\"></a>第四章</h2><h3 id=\"某给链接加onclick事件处理函数，并让这个处理函数所触发的JavaScript代码返回的值为true或false。\"><a href=\"#某给链接加onclick事件处理函数，并让这个处理函数所触发的JavaScript代码返回的值为true或false。\" class=\"headerlink\" title=\"某给链接加onclick事件处理函数，并让这个处理函数所触发的JavaScript代码返回的值为true或false。\"></a>某给链接加onclick事件处理函数，并让这个处理函数所触发的JavaScript代码返回的值为true或false。</h3><p>这样一来，当这个链接被点击时，如果JavaScript代码返回的值是true，onclick事件处理函数就认为“这个链接被点击了”；反之，如果返回的是false，onclick事件处理函数就认为“这个链接没有被点击”</p>\n<pre><code>&lt;a href=&quot;http://www.baidu.com&quot; onclick=&quot;return false;&quot;&gt;Click me&lt;/a&gt;\n</code></pre>\n<p>当点击这个链接时，因为onclick事件处理函数所触发的Javascript代码返回给他的值是false，所以这个链接的默认行为没有被触发</p>\n<pre><code>onclick = &quot;showH(this);return false;&quot;\n</code></pre>\n<h2 id=\"第五章\"><a href=\"#第五章\" class=\"headerlink\" title=\"第五章\"></a>第五章</h2><h3 id=\"最佳实践\"><a href=\"#最佳实践\" class=\"headerlink\" title=\"最佳实践\"></a>最佳实践</h3><ul>\n<li>平稳退化：确保网页在没有javascript的情况下也能正常工作</li>\n<li>分离javascript：把网页的结构和内容与javascript脚本动作行为分开</li>\n<li>向后兼容：确保老版本的浏览器不会因为你的js脚本而死掉</li>\n<li>性能考虑： 确保脚本执行的性能最优</li>\n</ul>\n<p>在实际开发过程中，很难保证以上各点。</p>\n<h3 id=\"压缩脚本\"><a href=\"#压缩脚本\" class=\"headerlink\" title=\"压缩脚本\"></a>压缩脚本</h3><p>精简后的代码虽然不容易看懂，但能大幅减少文件大小。多数情况下，你应该有两个版本，一个是工作副本，可以修改代码并添加注释；另一个是精简副本，用户放在站点上。通常为了与非精简版本区分开，最好在精简副本的文件名上加上min字样。</p>\n<p>代码压缩工具：<br><a href=\"https://github.com/mishoo/UglifyJS2\">UglifyJS</a></p>\n<h2 id=\"第七章\"><a href=\"#第七章\" class=\"headerlink\" title=\"第七章\"></a>第七章</h2><h3 id=\"innerHTML-读、写给定元素里的HTML内容\"><a href=\"#innerHTML-读、写给定元素里的HTML内容\" class=\"headerlink\" title=\"innerHTML 读、写给定元素里的HTML内容\"></a>innerHTML 读、写给定元素里的HTML内容</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;testdiv&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在上述div中插入HTML</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"property\">onload</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> testdiv = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;testdiv&quot;</span>);</span><br><span class=\"line\">    testdiv.<span class=\"property\">innerHTML</span> = <span class=\"string\">&quot;&lt;p&gt; inserted &lt;em&gt;this&lt;/em&gt; content.&lt;/p&gt;&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>利用这个技术，无法区分“插入一段HTML内容”和“替换HTML内容”。testdiv元素里有没有HTML内容无关紧要：一旦使用了innerHTML属性，它的全部内容都将被替换。</p>\n<h3 id=\"DOM方法\"><a href=\"#DOM方法\" class=\"headerlink\" title=\"DOM方法\"></a>DOM方法</h3><ul>\n<li><strong>createElement()</strong> </li>\n<li><strong>appendChild()</strong></li>\n<li><strong>createTextNode()</strong> </li>\n<li><strong>insertBefore()</strong></li>\n</ul>\n<h3 id=\"AJAX\"><a href=\"#AJAX\" class=\"headerlink\" title=\"AJAX\"></a>AJAX</h3><p>Ajax技术的核心就是XMLHttpRequest对象。</p>\n<p>兼容所有浏览器的写法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getHTTPObject</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> <span class=\"title class_\">XMLHttpRequest</span> == <span class=\"string\">&quot;undefined&quot;</span>)&#123;</span><br><span class=\"line\">        <span class=\"title class_\">XMLHttpRequest</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123; <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ActiveXobject</span>(<span class=\"string\">&quot;Msxml2.XMLHTTP.6.0&quot;</span>);&#125;</span><br><span class=\"line\">                <span class=\"keyword\">catch</span>(e) &#123;&#125;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123; <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ActiveXobject</span>(<span class=\"string\">&quot;Msxml2.XMLHTTP.3.0&quot;</span>);&#125;</span><br><span class=\"line\">                <span class=\"keyword\">catch</span>(e) &#123;&#125;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123; <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ActiveXobject</span>(<span class=\"string\">&quot;Msxml2.XMLHTTP&quot;</span>);&#125;</span><br><span class=\"line\">                <span class=\"keyword\">catch</span>(e) &#123;&#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"open-method-url-async-规定请求的类型、URL-以及是否异步处理请求。\"><a href=\"#open-method-url-async-规定请求的类型、URL-以及是否异步处理请求。\" class=\"headerlink\" title=\"open(method, url, async): 规定请求的类型、URL 以及是否异步处理请求。\"></a>open(method, url, async): 规定请求的类型、URL 以及是否异步处理请求。</h4><ul>\n<li>method：请求的类型；GET 或 POST</li>\n<li>url：文件在服务器上的位置</li>\n<li>async：true（异步）或 false（同步）</li>\n</ul>\n<h4 id=\"send-string-将请求发送到服务器。\"><a href=\"#send-string-将请求发送到服务器。\" class=\"headerlink\" title=\"send(string): 将请求发送到服务器。\"></a>send(string): 将请求发送到服务器。</h4><ul>\n<li>string：仅用于 POST 请求</li>\n</ul>\n<p><strong>异步请求有一个很容易被忽略的问题就是异步性，就是脚本在发送异步请求之后，仍会继续执行，不会等待相应！</strong></p>\n<p><strong>Ajax的同源策略</strong></p>\n<h2 id=\"第九章\"><a href=\"#第九章\" class=\"headerlink\" title=\"第九章\"></a>第九章</h2><h3 id=\"三位一体的网页\"><a href=\"#三位一体的网页\" class=\"headerlink\" title=\"三位一体的网页\"></a>三位一体的网页</h3><ul>\n<li>结构层：由HTML或XHTML之类的标记语言负责创建</li>\n<li>表示层：由CSS负责完成</li>\n<li>行为层：负责内容应该如何响应事件这一问题，这是js和DOM主宰的领域</li>\n</ul>\n<h3 id=\"style-属性\"><a href=\"#style-属性\" class=\"headerlink\" title=\"style 属性\"></a>style 属性</h3><p>styles属性包含着元素的样式，查询这个属性将返回一个对象而不是一个简单的字符串。样式都存放在这个style对象的属性里：</p>\n<pre><code>element.style.property\n</code></pre>\n<p>当你需要引用一个中间带减号的css属性时，DOM要求你用驼峰命名法。例如，css属性 <strong>font-family</strong> 变成DOM属性 <strong>fontFamily</strong></p>\n<p>DOM style 属性不能用来检索在外部css文件中声明的样式，在外部样式表里声明的样式不会进入style对象，在文档的<code>&lt;head&gt;</code> 部分里声明的样式也是如此。</p>\n<h2 id=\"第十章\"><a href=\"#第十章\" class=\"headerlink\" title=\"第十章\"></a>第十章</h2><h3 id=\"setTimeout-能够让某个函数在经过一段预定的时间之后才开始执行\"><a href=\"#setTimeout-能够让某个函数在经过一段预定的时间之后才开始执行\" class=\"headerlink\" title=\"setTimeout() 能够让某个函数在经过一段预定的时间之后才开始执行\"></a><code>setTimeout()</code> 能够让某个函数在经过一段预定的时间之后才开始执行</h3><pre><code>setTimeout(&quot;function&quot;, interval)\n</code></pre>\n<h3 id=\"Math常用函数\"><a href=\"#Math常用函数\" class=\"headerlink\" title=\"Math常用函数\"></a>Math常用函数</h3><ul>\n<li><code>ceil(number)</code> 向上取整</li>\n<li><code>floor(number)</code> 向下取整</li>\n<li><code>round(number)</code> 将任意浮点数舍入为与之最相近的整数</li>\n</ul>"},{"title":"JetBrains全系列激活指南以及相关问题处理","date":"2022-10-31T16:00:00.000Z","_content":"\n本文为备份[https://www.macyy.cn/blogs/archives/703](https://www.macyy.cn/blogs/archives/703)，供个人学习使用。\n\n本激活教程目前支持AppCode，CLion，DataGrip，GoLand，IntelliJ IDEA，PhpStorm，PyCharm，Rider，RubyMine，WebStorm的2021版本，暂不支持2022版本，2022版本请在试用阶段，点击「Preferences…」打开软件的偏好设置，点击左侧导航的「Plugins」，在右侧的「Type / to see options」处输入「eval reset」,找到「IDE Eval Reset」点击「Install」,安装完成后点击「Restart IDE」即可。\n\n以下以IntelliJ IDEA为例演示，其他软件安装方法相同：\n\n1.先卸载Mac中IntelliJ IDEA的更高版本\n\n2.[JetBrains官网](https://links.jianshu.com/go?to=https%3A%2F%2Fwww.jetbrains.com%2F) 下载安装2021.1版本的IntelliJ IDEA，如果下载慢可以在MACYY下载。\n\n安装并打开（一定要先打开！否则修改之后会无法通过苹果签名认证！）\n\n3.下载fineagent.jar\n\n<!--more-->\n\nhttps://www.123pan.com/s/e9YKVv-lsvg3 提取码:AeKg\n\n解压，将该文件复制到 /Users/你的用户名/ 文件夹下\n[个人备份地址](https://pan.baidu.com/s/12r5gmtNjDrl__ydokUJ5QA) 提取码: 9mb9\n\n4.打开访达，点击左侧的 `应用程序` 找到 `IntelliJ IDEA`，在IntelliJ IDEA图标上右键，点击 `显示包内容`\n\n5.进入 `Contents` 目录，再进入 `bin` 目录，使用文本编辑器打开 `idea.vmoptions` 文件\n\n6.在最后面添加 `-javaagent:/Users/你的用户名/fineagent.jar`，记得修改一下你的用户名。\n\n7.运行 IntelliJ IDEA, 选择 `Activate IDEA`，再点击 `Activation Code`\n\n8.复制下面的的激活码粘贴到激活窗口的输入框中，点击 `Activate`。可以用到 2099 年！\n\n`\n5AYV1D1RE5-eyJsaWNlbnNlSWQiOiI1QVlWMUQxUkU1IiwibGljZW5zZWVOYW1lIjoiaHR0cHM6Ly93d3cuaml3ZWljaGVuZ3podS5jb20iLCJhc3NpZ25lZU5hbWUiOiIiLCJhc3NpZ25lZUVtYWlsIjoiIiwibGljZW5zZVJlc3RyaWN0aW9uIjoiIiwiY2hlY2tDb25jdXJyZW50VXNlIjpmYWxzZSwicHJvZHVjdHMiOlt7ImNvZGUiOiJJSSIsImZhbGxiYWNrRGF0ZSI6IjIwOTktMTItMzEiLCJwYWlkVXBUbyI6IjIwOTktMTItMzEifSx7ImNvZGUiOiJBQyIsImZhbGxiYWNrRGF0ZSI6IjIwOTktMTItMzEiLCJwYWlkVXBUbyI6IjIwOTktMTItMzEifSx7ImNvZGUiOiJEUE4iLCJmYWxsYmFja0RhdGUiOiIyMDk5LTEyLTMxIiwicGFpZFVwVG8iOiIyMDk5LTEyLTMxIn0seyJjb2RlIjoiUFMiLCJmYWxsYmFja0RhdGUiOiIyMDk5LTEyLTMxIiwicGFpZFVwVG8iOiIyMDk5LTEyLTMxIn0seyJjb2RlIjoiR08iLCJmYWxsYmFja0RhdGUiOiIyMDk5LTEyLTMxIiwicGFpZFVwVG8iOiIyMDk5LTEyLTMxIn0seyJjb2RlIjoiRE0iLCJmYWxsYmFja0RhdGUiOiIyMDk5LTEyLTMxIiwicGFpZFVwVG8iOiIyMDk5LTEyLTMxIn0seyJjb2RlIjoiQ0wiLCJmYWxsYmFja0RhdGUiOiIyMDk5LTEyLTMxIiwicGFpZFVwVG8iOiIyMDk5LTEyLTMxIn0seyJjb2RlIjoiUlMwIiwiZmFsbGJhY2tEYXRlIjoiMjA5OS0xMi0zMSIsInBhaWRVcFRvIjoiMjA5OS0xMi0zMSJ9LHsiY29kZSI6IlJDIiwiZmFsbGJhY2tEYXRlIjoiMjA5OS0xMi0zMSIsInBhaWRVcFRvIjoiMjA5OS0xMi0zMSJ9LHsiY29kZSI6IlJEIiwiZmFsbGJhY2tEYXRlIjoiMjA5OS0xMi0zMSIsInBhaWRVcFRvIjoiMjA5OS0xMi0zMSJ9LHsiY29kZSI6IlBDIiwiZmFsbGJhY2tEYXRlIjoiMjA5OS0xMi0zMSIsInBhaWRVcFRvIjoiMjA5OS0xMi0zMSJ9LHsiY29kZSI6IlJNIiwiZmFsbGJhY2tEYXRlIjoiMjA5OS0xMi0zMSIsInBhaWRVcFRvIjoiMjA5OS0xMi0zMSJ9LHsiY29kZSI6IldTIiwiZmFsbGJhY2tEYXRlIjoiMjA5OS0xMi0zMSIsInBhaWRVcFRvIjoiMjA5OS0xMi0zMSJ9LHsiY29kZSI6IkRCIiwiZmFsbGJhY2tEYXRlIjoiMjA5OS0xMi0zMSIsInBhaWRVcFRvIjoiMjA5OS0xMi0zMSJ9LHsiY29kZSI6IkRDIiwiZmFsbGJhY2tEYXRlIjoiMjA5OS0xMi0zMSIsInBhaWRVcFRvIjoiMjA5OS0xMi0zMSJ9LHsiY29kZSI6IlJTVSIsImZhbGxiYWNrRGF0ZSI6IjIwOTktMTItMzEiLCJwYWlkVXBUbyI6IjIwOTktMTItMzEifV0sImhhc2giOiIxMjc5Njg3Ny8wIiwiZ3JhY2VQZXJpb2REYXlzIjo3LCJhdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlLCJpc0F1dG9Qcm9sb25nYXRlZCI6ZmFsc2V9-HNPogO0kWkHCVMnsjmBXUqQt87UPHqdkYqZGveSJtu8hb2V2Yq7gHsHenp4UuEd3jwEwC+YrUIf7U5yDA/56F5Sdn0RLUHZX5DHeQbJPbmYCBsDRT7m8rnmMFOSZn3vwNatvv1cooZbcGOk3Wwxx6bF7XcgaIrmXRcmZMZgv2PZehr0WS1HxNKe3X4nbGP3MwiSbg4ypmxNDrljmgv+Si9QDDwNLDffqeO0Lce0FqEJuMWmvBS42S0aeIYF8IS5bp4+LFKLJ8T7tF40OxKYDurBb9+9c43GZBscM/eLB8Jos66jNGFwgebFUlvhzJKVHZtuc/N8zGeEnTq6K0T/B8w==-MIIDTjCCAjagAwIBAgIBDTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMCAXDTE4MTEwMTEyMjk0NloYDzIwOTkwODA5MDIyNjA3WjAfMR0wGwYDVQQDDBRwcm9kMnktZnJvbS0yMDIwMTAxOTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMK3eyr0+Oys/TwcQO+qYaXWGBmXcEP4fR0bHHzZd/4WNGltXhecM80OWthA38BQRYAJBCKz/dSkO2Kj1H2y+7KB5cIaOiJEyTESfTSgzQdot6laRBU8oxy9mmagI46M8zEEmplPybY4YJj4HOwZiBsMQEMxoTgMDLpuHX6uASoVhSj6koB55lOj4wEgsQBeAMWTAXmTl88ixE179J8aBUkBGpL8w/tZzl9BJXZNF15gPfkS58rw8cdPzXLS0Yym37A2/KKFhfHzJc5KhbaxqYzmkAfTMqPsIqCQ1lQUAqfiPn2gN2I1Z3/cQuEW27M55fXVr2DduQe5DWzYJs85L50CAwEAAaOBmTCBljAJBgNVHRMEAjAAMB0GA1UdDgQWBBQk2hEilvWFQcCTR+gxI0z0wIQC/zBIBgNVHSMEQTA/gBSjnrZIZ0ISNkG9beC5tKBSi5fxs6EcpBowGDEWMBQGA1UEAwwNSmV0UHJvZmlsZSBDQYIJANJssYOyg3nhMBMGA1UdJQQMMAoGCCsGAQUFBwMBMAsGA1UdDwQEAwIFoDANBgkqhkiG9w0BAQsFAAOCAQEAsCQBjO5wttco/Z5cj/o4GBrku8UtBBBVFq4xsBanshTHm4deVxcTvta4aScV0TPKcaLqGqWx8A9v8XXO8dBbCuyXvWZteZ/C2Covg1xXiM99lz7VxqpjVmLdKanZn5u0gQSiYJdcfF+TdbmEIeSOnN/kLXNq2hXdJQK2zk2J25UZqu5EibRtTbdOzw6ZcfwJ8uOntXfsmAhnNICP3Wf/4wR/mwB0Ka4S+JA3IbF5MUmUZ/fjUaFarnin70us+Vxf/sZUi7u67wilvwVV0NAqDpthHUV0NRc4q+yOr2Dt/uCHdy4XRXLJfAv/z9/xBwNZZALNz3EtQL6IeIWWJByl3g==\n`\n\n个人备份安装包：\n\n链接: https://pan.baidu.com/s/14exYf20lwF7Sb_w2_YOwyw 提取码: 1kjv","source":"_posts/JetBrains全系列激活指南以及相关问题处理.md","raw":"---\ntitle: JetBrains全系列激活指南以及相关问题处理\ndate: 2022-11-01\ntags: [MACOS]\n---\n\n本文为备份[https://www.macyy.cn/blogs/archives/703](https://www.macyy.cn/blogs/archives/703)，供个人学习使用。\n\n本激活教程目前支持AppCode，CLion，DataGrip，GoLand，IntelliJ IDEA，PhpStorm，PyCharm，Rider，RubyMine，WebStorm的2021版本，暂不支持2022版本，2022版本请在试用阶段，点击「Preferences…」打开软件的偏好设置，点击左侧导航的「Plugins」，在右侧的「Type / to see options」处输入「eval reset」,找到「IDE Eval Reset」点击「Install」,安装完成后点击「Restart IDE」即可。\n\n以下以IntelliJ IDEA为例演示，其他软件安装方法相同：\n\n1.先卸载Mac中IntelliJ IDEA的更高版本\n\n2.[JetBrains官网](https://links.jianshu.com/go?to=https%3A%2F%2Fwww.jetbrains.com%2F) 下载安装2021.1版本的IntelliJ IDEA，如果下载慢可以在MACYY下载。\n\n安装并打开（一定要先打开！否则修改之后会无法通过苹果签名认证！）\n\n3.下载fineagent.jar\n\n<!--more-->\n\nhttps://www.123pan.com/s/e9YKVv-lsvg3 提取码:AeKg\n\n解压，将该文件复制到 /Users/你的用户名/ 文件夹下\n[个人备份地址](https://pan.baidu.com/s/12r5gmtNjDrl__ydokUJ5QA) 提取码: 9mb9\n\n4.打开访达，点击左侧的 `应用程序` 找到 `IntelliJ IDEA`，在IntelliJ IDEA图标上右键，点击 `显示包内容`\n\n5.进入 `Contents` 目录，再进入 `bin` 目录，使用文本编辑器打开 `idea.vmoptions` 文件\n\n6.在最后面添加 `-javaagent:/Users/你的用户名/fineagent.jar`，记得修改一下你的用户名。\n\n7.运行 IntelliJ IDEA, 选择 `Activate IDEA`，再点击 `Activation Code`\n\n8.复制下面的的激活码粘贴到激活窗口的输入框中，点击 `Activate`。可以用到 2099 年！\n\n`\n5AYV1D1RE5-eyJsaWNlbnNlSWQiOiI1QVlWMUQxUkU1IiwibGljZW5zZWVOYW1lIjoiaHR0cHM6Ly93d3cuaml3ZWljaGVuZ3podS5jb20iLCJhc3NpZ25lZU5hbWUiOiIiLCJhc3NpZ25lZUVtYWlsIjoiIiwibGljZW5zZVJlc3RyaWN0aW9uIjoiIiwiY2hlY2tDb25jdXJyZW50VXNlIjpmYWxzZSwicHJvZHVjdHMiOlt7ImNvZGUiOiJJSSIsImZhbGxiYWNrRGF0ZSI6IjIwOTktMTItMzEiLCJwYWlkVXBUbyI6IjIwOTktMTItMzEifSx7ImNvZGUiOiJBQyIsImZhbGxiYWNrRGF0ZSI6IjIwOTktMTItMzEiLCJwYWlkVXBUbyI6IjIwOTktMTItMzEifSx7ImNvZGUiOiJEUE4iLCJmYWxsYmFja0RhdGUiOiIyMDk5LTEyLTMxIiwicGFpZFVwVG8iOiIyMDk5LTEyLTMxIn0seyJjb2RlIjoiUFMiLCJmYWxsYmFja0RhdGUiOiIyMDk5LTEyLTMxIiwicGFpZFVwVG8iOiIyMDk5LTEyLTMxIn0seyJjb2RlIjoiR08iLCJmYWxsYmFja0RhdGUiOiIyMDk5LTEyLTMxIiwicGFpZFVwVG8iOiIyMDk5LTEyLTMxIn0seyJjb2RlIjoiRE0iLCJmYWxsYmFja0RhdGUiOiIyMDk5LTEyLTMxIiwicGFpZFVwVG8iOiIyMDk5LTEyLTMxIn0seyJjb2RlIjoiQ0wiLCJmYWxsYmFja0RhdGUiOiIyMDk5LTEyLTMxIiwicGFpZFVwVG8iOiIyMDk5LTEyLTMxIn0seyJjb2RlIjoiUlMwIiwiZmFsbGJhY2tEYXRlIjoiMjA5OS0xMi0zMSIsInBhaWRVcFRvIjoiMjA5OS0xMi0zMSJ9LHsiY29kZSI6IlJDIiwiZmFsbGJhY2tEYXRlIjoiMjA5OS0xMi0zMSIsInBhaWRVcFRvIjoiMjA5OS0xMi0zMSJ9LHsiY29kZSI6IlJEIiwiZmFsbGJhY2tEYXRlIjoiMjA5OS0xMi0zMSIsInBhaWRVcFRvIjoiMjA5OS0xMi0zMSJ9LHsiY29kZSI6IlBDIiwiZmFsbGJhY2tEYXRlIjoiMjA5OS0xMi0zMSIsInBhaWRVcFRvIjoiMjA5OS0xMi0zMSJ9LHsiY29kZSI6IlJNIiwiZmFsbGJhY2tEYXRlIjoiMjA5OS0xMi0zMSIsInBhaWRVcFRvIjoiMjA5OS0xMi0zMSJ9LHsiY29kZSI6IldTIiwiZmFsbGJhY2tEYXRlIjoiMjA5OS0xMi0zMSIsInBhaWRVcFRvIjoiMjA5OS0xMi0zMSJ9LHsiY29kZSI6IkRCIiwiZmFsbGJhY2tEYXRlIjoiMjA5OS0xMi0zMSIsInBhaWRVcFRvIjoiMjA5OS0xMi0zMSJ9LHsiY29kZSI6IkRDIiwiZmFsbGJhY2tEYXRlIjoiMjA5OS0xMi0zMSIsInBhaWRVcFRvIjoiMjA5OS0xMi0zMSJ9LHsiY29kZSI6IlJTVSIsImZhbGxiYWNrRGF0ZSI6IjIwOTktMTItMzEiLCJwYWlkVXBUbyI6IjIwOTktMTItMzEifV0sImhhc2giOiIxMjc5Njg3Ny8wIiwiZ3JhY2VQZXJpb2REYXlzIjo3LCJhdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlLCJpc0F1dG9Qcm9sb25nYXRlZCI6ZmFsc2V9-HNPogO0kWkHCVMnsjmBXUqQt87UPHqdkYqZGveSJtu8hb2V2Yq7gHsHenp4UuEd3jwEwC+YrUIf7U5yDA/56F5Sdn0RLUHZX5DHeQbJPbmYCBsDRT7m8rnmMFOSZn3vwNatvv1cooZbcGOk3Wwxx6bF7XcgaIrmXRcmZMZgv2PZehr0WS1HxNKe3X4nbGP3MwiSbg4ypmxNDrljmgv+Si9QDDwNLDffqeO0Lce0FqEJuMWmvBS42S0aeIYF8IS5bp4+LFKLJ8T7tF40OxKYDurBb9+9c43GZBscM/eLB8Jos66jNGFwgebFUlvhzJKVHZtuc/N8zGeEnTq6K0T/B8w==-MIIDTjCCAjagAwIBAgIBDTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMCAXDTE4MTEwMTEyMjk0NloYDzIwOTkwODA5MDIyNjA3WjAfMR0wGwYDVQQDDBRwcm9kMnktZnJvbS0yMDIwMTAxOTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMK3eyr0+Oys/TwcQO+qYaXWGBmXcEP4fR0bHHzZd/4WNGltXhecM80OWthA38BQRYAJBCKz/dSkO2Kj1H2y+7KB5cIaOiJEyTESfTSgzQdot6laRBU8oxy9mmagI46M8zEEmplPybY4YJj4HOwZiBsMQEMxoTgMDLpuHX6uASoVhSj6koB55lOj4wEgsQBeAMWTAXmTl88ixE179J8aBUkBGpL8w/tZzl9BJXZNF15gPfkS58rw8cdPzXLS0Yym37A2/KKFhfHzJc5KhbaxqYzmkAfTMqPsIqCQ1lQUAqfiPn2gN2I1Z3/cQuEW27M55fXVr2DduQe5DWzYJs85L50CAwEAAaOBmTCBljAJBgNVHRMEAjAAMB0GA1UdDgQWBBQk2hEilvWFQcCTR+gxI0z0wIQC/zBIBgNVHSMEQTA/gBSjnrZIZ0ISNkG9beC5tKBSi5fxs6EcpBowGDEWMBQGA1UEAwwNSmV0UHJvZmlsZSBDQYIJANJssYOyg3nhMBMGA1UdJQQMMAoGCCsGAQUFBwMBMAsGA1UdDwQEAwIFoDANBgkqhkiG9w0BAQsFAAOCAQEAsCQBjO5wttco/Z5cj/o4GBrku8UtBBBVFq4xsBanshTHm4deVxcTvta4aScV0TPKcaLqGqWx8A9v8XXO8dBbCuyXvWZteZ/C2Covg1xXiM99lz7VxqpjVmLdKanZn5u0gQSiYJdcfF+TdbmEIeSOnN/kLXNq2hXdJQK2zk2J25UZqu5EibRtTbdOzw6ZcfwJ8uOntXfsmAhnNICP3Wf/4wR/mwB0Ka4S+JA3IbF5MUmUZ/fjUaFarnin70us+Vxf/sZUi7u67wilvwVV0NAqDpthHUV0NRc4q+yOr2Dt/uCHdy4XRXLJfAv/z9/xBwNZZALNz3EtQL6IeIWWJByl3g==\n`\n\n个人备份安装包：\n\n链接: https://pan.baidu.com/s/14exYf20lwF7Sb_w2_YOwyw 提取码: 1kjv","slug":"JetBrains全系列激活指南以及相关问题处理","published":1,"updated":"2022-11-01T10:18:33.265Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluqa1hie000jrlogead872kn","content":"<p>本文为备份<a href=\"https://www.macyy.cn/blogs/archives/703\">https://www.macyy.cn/blogs/archives/703</a>，供个人学习使用。</p>\n<p>本激活教程目前支持AppCode，CLion，DataGrip，GoLand，IntelliJ IDEA，PhpStorm，PyCharm，Rider，RubyMine，WebStorm的2021版本，暂不支持2022版本，2022版本请在试用阶段，点击「Preferences…」打开软件的偏好设置，点击左侧导航的「Plugins」，在右侧的「Type &#x2F; to see options」处输入「eval reset」,找到「IDE Eval Reset」点击「Install」,安装完成后点击「Restart IDE」即可。</p>\n<p>以下以IntelliJ IDEA为例演示，其他软件安装方法相同：</p>\n<p>1.先卸载Mac中IntelliJ IDEA的更高版本</p>\n<p>2.<a href=\"https://links.jianshu.com/go?to=https://www.jetbrains.com/\">JetBrains官网</a> 下载安装2021.1版本的IntelliJ IDEA，如果下载慢可以在MACYY下载。</p>\n<p>安装并打开（一定要先打开！否则修改之后会无法通过苹果签名认证！）</p>\n<p>3.下载fineagent.jar</p>\n<span id=\"more\"></span>\n\n<p><a href=\"https://www.123pan.com/s/e9YKVv-lsvg3\">https://www.123pan.com/s/e9YKVv-lsvg3</a> 提取码:AeKg</p>\n<p>解压，将该文件复制到 &#x2F;Users&#x2F;你的用户名&#x2F; 文件夹下<br><a href=\"https://pan.baidu.com/s/12r5gmtNjDrl__ydokUJ5QA\">个人备份地址</a> 提取码: 9mb9</p>\n<p>4.打开访达，点击左侧的 <code>应用程序</code> 找到 <code>IntelliJ IDEA</code>，在IntelliJ IDEA图标上右键，点击 <code>显示包内容</code></p>\n<p>5.进入 <code>Contents</code> 目录，再进入 <code>bin</code> 目录，使用文本编辑器打开 <code>idea.vmoptions</code> 文件</p>\n<p>6.在最后面添加 <code>-javaagent:/Users/你的用户名/fineagent.jar</code>，记得修改一下你的用户名。</p>\n<p>7.运行 IntelliJ IDEA, 选择 <code>Activate IDEA</code>，再点击 <code>Activation Code</code></p>\n<p>8.复制下面的的激活码粘贴到激活窗口的输入框中，点击 <code>Activate</code>。可以用到 2099 年！</p>\n<p><code>5AYV1D1RE5-eyJsaWNlbnNlSWQiOiI1QVlWMUQxUkU1IiwibGljZW5zZWVOYW1lIjoiaHR0cHM6Ly93d3cuaml3ZWljaGVuZ3podS5jb20iLCJhc3NpZ25lZU5hbWUiOiIiLCJhc3NpZ25lZUVtYWlsIjoiIiwibGljZW5zZVJlc3RyaWN0aW9uIjoiIiwiY2hlY2tDb25jdXJyZW50VXNlIjpmYWxzZSwicHJvZHVjdHMiOlt7ImNvZGUiOiJJSSIsImZhbGxiYWNrRGF0ZSI6IjIwOTktMTItMzEiLCJwYWlkVXBUbyI6IjIwOTktMTItMzEifSx7ImNvZGUiOiJBQyIsImZhbGxiYWNrRGF0ZSI6IjIwOTktMTItMzEiLCJwYWlkVXBUbyI6IjIwOTktMTItMzEifSx7ImNvZGUiOiJEUE4iLCJmYWxsYmFja0RhdGUiOiIyMDk5LTEyLTMxIiwicGFpZFVwVG8iOiIyMDk5LTEyLTMxIn0seyJjb2RlIjoiUFMiLCJmYWxsYmFja0RhdGUiOiIyMDk5LTEyLTMxIiwicGFpZFVwVG8iOiIyMDk5LTEyLTMxIn0seyJjb2RlIjoiR08iLCJmYWxsYmFja0RhdGUiOiIyMDk5LTEyLTMxIiwicGFpZFVwVG8iOiIyMDk5LTEyLTMxIn0seyJjb2RlIjoiRE0iLCJmYWxsYmFja0RhdGUiOiIyMDk5LTEyLTMxIiwicGFpZFVwVG8iOiIyMDk5LTEyLTMxIn0seyJjb2RlIjoiQ0wiLCJmYWxsYmFja0RhdGUiOiIyMDk5LTEyLTMxIiwicGFpZFVwVG8iOiIyMDk5LTEyLTMxIn0seyJjb2RlIjoiUlMwIiwiZmFsbGJhY2tEYXRlIjoiMjA5OS0xMi0zMSIsInBhaWRVcFRvIjoiMjA5OS0xMi0zMSJ9LHsiY29kZSI6IlJDIiwiZmFsbGJhY2tEYXRlIjoiMjA5OS0xMi0zMSIsInBhaWRVcFRvIjoiMjA5OS0xMi0zMSJ9LHsiY29kZSI6IlJEIiwiZmFsbGJhY2tEYXRlIjoiMjA5OS0xMi0zMSIsInBhaWRVcFRvIjoiMjA5OS0xMi0zMSJ9LHsiY29kZSI6IlBDIiwiZmFsbGJhY2tEYXRlIjoiMjA5OS0xMi0zMSIsInBhaWRVcFRvIjoiMjA5OS0xMi0zMSJ9LHsiY29kZSI6IlJNIiwiZmFsbGJhY2tEYXRlIjoiMjA5OS0xMi0zMSIsInBhaWRVcFRvIjoiMjA5OS0xMi0zMSJ9LHsiY29kZSI6IldTIiwiZmFsbGJhY2tEYXRlIjoiMjA5OS0xMi0zMSIsInBhaWRVcFRvIjoiMjA5OS0xMi0zMSJ9LHsiY29kZSI6IkRCIiwiZmFsbGJhY2tEYXRlIjoiMjA5OS0xMi0zMSIsInBhaWRVcFRvIjoiMjA5OS0xMi0zMSJ9LHsiY29kZSI6IkRDIiwiZmFsbGJhY2tEYXRlIjoiMjA5OS0xMi0zMSIsInBhaWRVcFRvIjoiMjA5OS0xMi0zMSJ9LHsiY29kZSI6IlJTVSIsImZhbGxiYWNrRGF0ZSI6IjIwOTktMTItMzEiLCJwYWlkVXBUbyI6IjIwOTktMTItMzEifV0sImhhc2giOiIxMjc5Njg3Ny8wIiwiZ3JhY2VQZXJpb2REYXlzIjo3LCJhdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlLCJpc0F1dG9Qcm9sb25nYXRlZCI6ZmFsc2V9-HNPogO0kWkHCVMnsjmBXUqQt87UPHqdkYqZGveSJtu8hb2V2Yq7gHsHenp4UuEd3jwEwC+YrUIf7U5yDA/56F5Sdn0RLUHZX5DHeQbJPbmYCBsDRT7m8rnmMFOSZn3vwNatvv1cooZbcGOk3Wwxx6bF7XcgaIrmXRcmZMZgv2PZehr0WS1HxNKe3X4nbGP3MwiSbg4ypmxNDrljmgv+Si9QDDwNLDffqeO0Lce0FqEJuMWmvBS42S0aeIYF8IS5bp4+LFKLJ8T7tF40OxKYDurBb9+9c43GZBscM/eLB8Jos66jNGFwgebFUlvhzJKVHZtuc/N8zGeEnTq6K0T/B8w==-MIIDTjCCAjagAwIBAgIBDTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMCAXDTE4MTEwMTEyMjk0NloYDzIwOTkwODA5MDIyNjA3WjAfMR0wGwYDVQQDDBRwcm9kMnktZnJvbS0yMDIwMTAxOTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMK3eyr0+Oys/TwcQO+qYaXWGBmXcEP4fR0bHHzZd/4WNGltXhecM80OWthA38BQRYAJBCKz/dSkO2Kj1H2y+7KB5cIaOiJEyTESfTSgzQdot6laRBU8oxy9mmagI46M8zEEmplPybY4YJj4HOwZiBsMQEMxoTgMDLpuHX6uASoVhSj6koB55lOj4wEgsQBeAMWTAXmTl88ixE179J8aBUkBGpL8w/tZzl9BJXZNF15gPfkS58rw8cdPzXLS0Yym37A2/KKFhfHzJc5KhbaxqYzmkAfTMqPsIqCQ1lQUAqfiPn2gN2I1Z3/cQuEW27M55fXVr2DduQe5DWzYJs85L50CAwEAAaOBmTCBljAJBgNVHRMEAjAAMB0GA1UdDgQWBBQk2hEilvWFQcCTR+gxI0z0wIQC/zBIBgNVHSMEQTA/gBSjnrZIZ0ISNkG9beC5tKBSi5fxs6EcpBowGDEWMBQGA1UEAwwNSmV0UHJvZmlsZSBDQYIJANJssYOyg3nhMBMGA1UdJQQMMAoGCCsGAQUFBwMBMAsGA1UdDwQEAwIFoDANBgkqhkiG9w0BAQsFAAOCAQEAsCQBjO5wttco/Z5cj/o4GBrku8UtBBBVFq4xsBanshTHm4deVxcTvta4aScV0TPKcaLqGqWx8A9v8XXO8dBbCuyXvWZteZ/C2Covg1xXiM99lz7VxqpjVmLdKanZn5u0gQSiYJdcfF+TdbmEIeSOnN/kLXNq2hXdJQK2zk2J25UZqu5EibRtTbdOzw6ZcfwJ8uOntXfsmAhnNICP3Wf/4wR/mwB0Ka4S+JA3IbF5MUmUZ/fjUaFarnin70us+Vxf/sZUi7u67wilvwVV0NAqDpthHUV0NRc4q+yOr2Dt/uCHdy4XRXLJfAv/z9/xBwNZZALNz3EtQL6IeIWWJByl3g==</code></p>\n<p>个人备份安装包：</p>\n<p>链接: <a href=\"https://pan.baidu.com/s/14exYf20lwF7Sb_w2_YOwyw\">https://pan.baidu.com/s/14exYf20lwF7Sb_w2_YOwyw</a> 提取码: 1kjv</p>\n","site":{"data":{}},"excerpt":"<p>本文为备份<a href=\"https://www.macyy.cn/blogs/archives/703\">https://www.macyy.cn/blogs/archives/703</a>，供个人学习使用。</p>\n<p>本激活教程目前支持AppCode，CLion，DataGrip，GoLand，IntelliJ IDEA，PhpStorm，PyCharm，Rider，RubyMine，WebStorm的2021版本，暂不支持2022版本，2022版本请在试用阶段，点击「Preferences…」打开软件的偏好设置，点击左侧导航的「Plugins」，在右侧的「Type &#x2F; to see options」处输入「eval reset」,找到「IDE Eval Reset」点击「Install」,安装完成后点击「Restart IDE」即可。</p>\n<p>以下以IntelliJ IDEA为例演示，其他软件安装方法相同：</p>\n<p>1.先卸载Mac中IntelliJ IDEA的更高版本</p>\n<p>2.<a href=\"https://links.jianshu.com/go?to=https://www.jetbrains.com/\">JetBrains官网</a> 下载安装2021.1版本的IntelliJ IDEA，如果下载慢可以在MACYY下载。</p>\n<p>安装并打开（一定要先打开！否则修改之后会无法通过苹果签名认证！）</p>\n<p>3.下载fineagent.jar</p>","more":"<p><a href=\"https://www.123pan.com/s/e9YKVv-lsvg3\">https://www.123pan.com/s/e9YKVv-lsvg3</a> 提取码:AeKg</p>\n<p>解压，将该文件复制到 &#x2F;Users&#x2F;你的用户名&#x2F; 文件夹下<br><a href=\"https://pan.baidu.com/s/12r5gmtNjDrl__ydokUJ5QA\">个人备份地址</a> 提取码: 9mb9</p>\n<p>4.打开访达，点击左侧的 <code>应用程序</code> 找到 <code>IntelliJ IDEA</code>，在IntelliJ IDEA图标上右键，点击 <code>显示包内容</code></p>\n<p>5.进入 <code>Contents</code> 目录，再进入 <code>bin</code> 目录，使用文本编辑器打开 <code>idea.vmoptions</code> 文件</p>\n<p>6.在最后面添加 <code>-javaagent:/Users/你的用户名/fineagent.jar</code>，记得修改一下你的用户名。</p>\n<p>7.运行 IntelliJ IDEA, 选择 <code>Activate IDEA</code>，再点击 <code>Activation Code</code></p>\n<p>8.复制下面的的激活码粘贴到激活窗口的输入框中，点击 <code>Activate</code>。可以用到 2099 年！</p>\n<p><code>5AYV1D1RE5-eyJsaWNlbnNlSWQiOiI1QVlWMUQxUkU1IiwibGljZW5zZWVOYW1lIjoiaHR0cHM6Ly93d3cuaml3ZWljaGVuZ3podS5jb20iLCJhc3NpZ25lZU5hbWUiOiIiLCJhc3NpZ25lZUVtYWlsIjoiIiwibGljZW5zZVJlc3RyaWN0aW9uIjoiIiwiY2hlY2tDb25jdXJyZW50VXNlIjpmYWxzZSwicHJvZHVjdHMiOlt7ImNvZGUiOiJJSSIsImZhbGxiYWNrRGF0ZSI6IjIwOTktMTItMzEiLCJwYWlkVXBUbyI6IjIwOTktMTItMzEifSx7ImNvZGUiOiJBQyIsImZhbGxiYWNrRGF0ZSI6IjIwOTktMTItMzEiLCJwYWlkVXBUbyI6IjIwOTktMTItMzEifSx7ImNvZGUiOiJEUE4iLCJmYWxsYmFja0RhdGUiOiIyMDk5LTEyLTMxIiwicGFpZFVwVG8iOiIyMDk5LTEyLTMxIn0seyJjb2RlIjoiUFMiLCJmYWxsYmFja0RhdGUiOiIyMDk5LTEyLTMxIiwicGFpZFVwVG8iOiIyMDk5LTEyLTMxIn0seyJjb2RlIjoiR08iLCJmYWxsYmFja0RhdGUiOiIyMDk5LTEyLTMxIiwicGFpZFVwVG8iOiIyMDk5LTEyLTMxIn0seyJjb2RlIjoiRE0iLCJmYWxsYmFja0RhdGUiOiIyMDk5LTEyLTMxIiwicGFpZFVwVG8iOiIyMDk5LTEyLTMxIn0seyJjb2RlIjoiQ0wiLCJmYWxsYmFja0RhdGUiOiIyMDk5LTEyLTMxIiwicGFpZFVwVG8iOiIyMDk5LTEyLTMxIn0seyJjb2RlIjoiUlMwIiwiZmFsbGJhY2tEYXRlIjoiMjA5OS0xMi0zMSIsInBhaWRVcFRvIjoiMjA5OS0xMi0zMSJ9LHsiY29kZSI6IlJDIiwiZmFsbGJhY2tEYXRlIjoiMjA5OS0xMi0zMSIsInBhaWRVcFRvIjoiMjA5OS0xMi0zMSJ9LHsiY29kZSI6IlJEIiwiZmFsbGJhY2tEYXRlIjoiMjA5OS0xMi0zMSIsInBhaWRVcFRvIjoiMjA5OS0xMi0zMSJ9LHsiY29kZSI6IlBDIiwiZmFsbGJhY2tEYXRlIjoiMjA5OS0xMi0zMSIsInBhaWRVcFRvIjoiMjA5OS0xMi0zMSJ9LHsiY29kZSI6IlJNIiwiZmFsbGJhY2tEYXRlIjoiMjA5OS0xMi0zMSIsInBhaWRVcFRvIjoiMjA5OS0xMi0zMSJ9LHsiY29kZSI6IldTIiwiZmFsbGJhY2tEYXRlIjoiMjA5OS0xMi0zMSIsInBhaWRVcFRvIjoiMjA5OS0xMi0zMSJ9LHsiY29kZSI6IkRCIiwiZmFsbGJhY2tEYXRlIjoiMjA5OS0xMi0zMSIsInBhaWRVcFRvIjoiMjA5OS0xMi0zMSJ9LHsiY29kZSI6IkRDIiwiZmFsbGJhY2tEYXRlIjoiMjA5OS0xMi0zMSIsInBhaWRVcFRvIjoiMjA5OS0xMi0zMSJ9LHsiY29kZSI6IlJTVSIsImZhbGxiYWNrRGF0ZSI6IjIwOTktMTItMzEiLCJwYWlkVXBUbyI6IjIwOTktMTItMzEifV0sImhhc2giOiIxMjc5Njg3Ny8wIiwiZ3JhY2VQZXJpb2REYXlzIjo3LCJhdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlLCJpc0F1dG9Qcm9sb25nYXRlZCI6ZmFsc2V9-HNPogO0kWkHCVMnsjmBXUqQt87UPHqdkYqZGveSJtu8hb2V2Yq7gHsHenp4UuEd3jwEwC+YrUIf7U5yDA/56F5Sdn0RLUHZX5DHeQbJPbmYCBsDRT7m8rnmMFOSZn3vwNatvv1cooZbcGOk3Wwxx6bF7XcgaIrmXRcmZMZgv2PZehr0WS1HxNKe3X4nbGP3MwiSbg4ypmxNDrljmgv+Si9QDDwNLDffqeO0Lce0FqEJuMWmvBS42S0aeIYF8IS5bp4+LFKLJ8T7tF40OxKYDurBb9+9c43GZBscM/eLB8Jos66jNGFwgebFUlvhzJKVHZtuc/N8zGeEnTq6K0T/B8w==-MIIDTjCCAjagAwIBAgIBDTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMCAXDTE4MTEwMTEyMjk0NloYDzIwOTkwODA5MDIyNjA3WjAfMR0wGwYDVQQDDBRwcm9kMnktZnJvbS0yMDIwMTAxOTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMK3eyr0+Oys/TwcQO+qYaXWGBmXcEP4fR0bHHzZd/4WNGltXhecM80OWthA38BQRYAJBCKz/dSkO2Kj1H2y+7KB5cIaOiJEyTESfTSgzQdot6laRBU8oxy9mmagI46M8zEEmplPybY4YJj4HOwZiBsMQEMxoTgMDLpuHX6uASoVhSj6koB55lOj4wEgsQBeAMWTAXmTl88ixE179J8aBUkBGpL8w/tZzl9BJXZNF15gPfkS58rw8cdPzXLS0Yym37A2/KKFhfHzJc5KhbaxqYzmkAfTMqPsIqCQ1lQUAqfiPn2gN2I1Z3/cQuEW27M55fXVr2DduQe5DWzYJs85L50CAwEAAaOBmTCBljAJBgNVHRMEAjAAMB0GA1UdDgQWBBQk2hEilvWFQcCTR+gxI0z0wIQC/zBIBgNVHSMEQTA/gBSjnrZIZ0ISNkG9beC5tKBSi5fxs6EcpBowGDEWMBQGA1UEAwwNSmV0UHJvZmlsZSBDQYIJANJssYOyg3nhMBMGA1UdJQQMMAoGCCsGAQUFBwMBMAsGA1UdDwQEAwIFoDANBgkqhkiG9w0BAQsFAAOCAQEAsCQBjO5wttco/Z5cj/o4GBrku8UtBBBVFq4xsBanshTHm4deVxcTvta4aScV0TPKcaLqGqWx8A9v8XXO8dBbCuyXvWZteZ/C2Covg1xXiM99lz7VxqpjVmLdKanZn5u0gQSiYJdcfF+TdbmEIeSOnN/kLXNq2hXdJQK2zk2J25UZqu5EibRtTbdOzw6ZcfwJ8uOntXfsmAhnNICP3Wf/4wR/mwB0Ka4S+JA3IbF5MUmUZ/fjUaFarnin70us+Vxf/sZUi7u67wilvwVV0NAqDpthHUV0NRc4q+yOr2Dt/uCHdy4XRXLJfAv/z9/xBwNZZALNz3EtQL6IeIWWJByl3g==</code></p>\n<p>个人备份安装包：</p>\n<p>链接: <a href=\"https://pan.baidu.com/s/14exYf20lwF7Sb_w2_YOwyw\">https://pan.baidu.com/s/14exYf20lwF7Sb_w2_YOwyw</a> 提取码: 1kjv</p>"},{"title":"Linux踢出其他正在SSH登陆用户","date":"2016-12-22T16:00:00.000Z","_content":"\n## 查看系统在线用户\n\n```\n[root@testdb ~]# w\n\n14:30:26 up 38 days, 21:22, 3 users, load average: 0.00, 0.01, 0.05\nUSER TTY FROM LOGIN@ IDLE JCPU PCPU WHAT\nroot pts/0 162.16.16.155 14:30 0.00s 0.07s 0.05s w\nroot pts/1 162.16.16.155 14:30 12.00s 0.01s 0.01s -bash\n```\n\n## 查看哪个属于此时自己的终端（我开了两个连接）\n\n```\n[root@testdb ~]# who am i\n\nroot pts/0 2013-12-31 14:30 (162.16.16.155)\n```\n\n## pkill掉自己不适用的终端\n\n    [root@testdb ~]# pkill -kill -t pts/1\n\n## 查看当前终端情况\n\n```\n[root@testdb ~]# w\n14:31:04 up 38 days, 21:23, 2 users, load average: 0.00, 0.01, 0.05\nUSER TTY FROM LOGIN@ IDLE JCPU PCPU WHAT\nroot pts/0 162.16.16.155 14:30 0.00s 0.04s 0.01s w\n[root@testdb ~]#\n```\n注意：\n\n如果最后查看还是没有干掉，建议加上-9 强制杀死。\n\n    [root@testdb ~]# pkill -9 -t pts/1\n\n\n","source":"_posts/Linux踢出其他正在SSH登陆用户.md","raw":"---\ntitle: Linux踢出其他正在SSH登陆用户\ndate: 2016-12-23\ntags: [Linux]\n---\n\n## 查看系统在线用户\n\n```\n[root@testdb ~]# w\n\n14:30:26 up 38 days, 21:22, 3 users, load average: 0.00, 0.01, 0.05\nUSER TTY FROM LOGIN@ IDLE JCPU PCPU WHAT\nroot pts/0 162.16.16.155 14:30 0.00s 0.07s 0.05s w\nroot pts/1 162.16.16.155 14:30 12.00s 0.01s 0.01s -bash\n```\n\n## 查看哪个属于此时自己的终端（我开了两个连接）\n\n```\n[root@testdb ~]# who am i\n\nroot pts/0 2013-12-31 14:30 (162.16.16.155)\n```\n\n## pkill掉自己不适用的终端\n\n    [root@testdb ~]# pkill -kill -t pts/1\n\n## 查看当前终端情况\n\n```\n[root@testdb ~]# w\n14:31:04 up 38 days, 21:23, 2 users, load average: 0.00, 0.01, 0.05\nUSER TTY FROM LOGIN@ IDLE JCPU PCPU WHAT\nroot pts/0 162.16.16.155 14:30 0.00s 0.04s 0.01s w\n[root@testdb ~]#\n```\n注意：\n\n如果最后查看还是没有干掉，建议加上-9 强制杀死。\n\n    [root@testdb ~]# pkill -9 -t pts/1\n\n\n","slug":"Linux踢出其他正在SSH登陆用户","published":1,"updated":"2021-06-20T10:25:20.123Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluqa1hif000lrlogcx3lfpac","content":"<h2 id=\"查看系统在线用户\"><a href=\"#查看系统在线用户\" class=\"headerlink\" title=\"查看系统在线用户\"></a>查看系统在线用户</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@testdb ~]# w</span><br><span class=\"line\"></span><br><span class=\"line\">14:30:26 up 38 days, 21:22, 3 users, load average: 0.00, 0.01, 0.05</span><br><span class=\"line\">USER TTY FROM LOGIN@ IDLE JCPU PCPU WHAT</span><br><span class=\"line\">root pts/0 162.16.16.155 14:30 0.00s 0.07s 0.05s w</span><br><span class=\"line\">root pts/1 162.16.16.155 14:30 12.00s 0.01s 0.01s -bash</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看哪个属于此时自己的终端（我开了两个连接）\"><a href=\"#查看哪个属于此时自己的终端（我开了两个连接）\" class=\"headerlink\" title=\"查看哪个属于此时自己的终端（我开了两个连接）\"></a>查看哪个属于此时自己的终端（我开了两个连接）</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@testdb ~]# who am i</span><br><span class=\"line\"></span><br><span class=\"line\">root pts/0 2013-12-31 14:30 (162.16.16.155)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"pkill掉自己不适用的终端\"><a href=\"#pkill掉自己不适用的终端\" class=\"headerlink\" title=\"pkill掉自己不适用的终端\"></a>pkill掉自己不适用的终端</h2><pre><code>[root@testdb ~]# pkill -kill -t pts/1\n</code></pre>\n<h2 id=\"查看当前终端情况\"><a href=\"#查看当前终端情况\" class=\"headerlink\" title=\"查看当前终端情况\"></a>查看当前终端情况</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@testdb ~]# w</span><br><span class=\"line\">14:31:04 up 38 days, 21:23, 2 users, load average: 0.00, 0.01, 0.05</span><br><span class=\"line\">USER TTY FROM LOGIN@ IDLE JCPU PCPU WHAT</span><br><span class=\"line\">root pts/0 162.16.16.155 14:30 0.00s 0.04s 0.01s w</span><br><span class=\"line\">[root@testdb ~]#</span><br></pre></td></tr></table></figure>\n<p>注意：</p>\n<p>如果最后查看还是没有干掉，建议加上-9 强制杀死。</p>\n<pre><code>[root@testdb ~]# pkill -9 -t pts/1\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"查看系统在线用户\"><a href=\"#查看系统在线用户\" class=\"headerlink\" title=\"查看系统在线用户\"></a>查看系统在线用户</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@testdb ~]# w</span><br><span class=\"line\"></span><br><span class=\"line\">14:30:26 up 38 days, 21:22, 3 users, load average: 0.00, 0.01, 0.05</span><br><span class=\"line\">USER TTY FROM LOGIN@ IDLE JCPU PCPU WHAT</span><br><span class=\"line\">root pts/0 162.16.16.155 14:30 0.00s 0.07s 0.05s w</span><br><span class=\"line\">root pts/1 162.16.16.155 14:30 12.00s 0.01s 0.01s -bash</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看哪个属于此时自己的终端（我开了两个连接）\"><a href=\"#查看哪个属于此时自己的终端（我开了两个连接）\" class=\"headerlink\" title=\"查看哪个属于此时自己的终端（我开了两个连接）\"></a>查看哪个属于此时自己的终端（我开了两个连接）</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@testdb ~]# who am i</span><br><span class=\"line\"></span><br><span class=\"line\">root pts/0 2013-12-31 14:30 (162.16.16.155)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"pkill掉自己不适用的终端\"><a href=\"#pkill掉自己不适用的终端\" class=\"headerlink\" title=\"pkill掉自己不适用的终端\"></a>pkill掉自己不适用的终端</h2><pre><code>[root@testdb ~]# pkill -kill -t pts/1\n</code></pre>\n<h2 id=\"查看当前终端情况\"><a href=\"#查看当前终端情况\" class=\"headerlink\" title=\"查看当前终端情况\"></a>查看当前终端情况</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@testdb ~]# w</span><br><span class=\"line\">14:31:04 up 38 days, 21:23, 2 users, load average: 0.00, 0.01, 0.05</span><br><span class=\"line\">USER TTY FROM LOGIN@ IDLE JCPU PCPU WHAT</span><br><span class=\"line\">root pts/0 162.16.16.155 14:30 0.00s 0.04s 0.01s w</span><br><span class=\"line\">[root@testdb ~]#</span><br></pre></td></tr></table></figure>\n<p>注意：</p>\n<p>如果最后查看还是没有干掉，建议加上-9 强制杀死。</p>\n<pre><code>[root@testdb ~]# pkill -9 -t pts/1\n</code></pre>\n"},{"title":"MongoDB使用时的一些笔记","date":"2018-03-13T09:09:00.000Z","_content":"\n首先保证mongodb正确安装，并启动服务[这篇文章](https://suadminwen.github.io/2018/01/25/mongodb%E7%9A%84windows%E6%9C%8D%E5%8A%A1%E5%AE%89%E8%A3%85/)讲解了windows下进行mongodb的安装和运行，启动mongo的命令行，打开一个命令行窗口，执行如下命令即可\n\n    mongo\n\n## 转到用到的数据库\n\n先用 mongo 命令行连接到一个 MongoDB 实例，转到 test 数据库。\n\n    use test\n\n<!--more-->\n\n## 范围查询\n\n- 大于操作(`$gt`)\n- 大于或等于(`$gte`)\n- 小于操作(`$lt`)\n- 小于或等于(`$lte`)\n- 逻辑AND(`,`或`$and`)\n- 逻辑OR(`$or`)\n\n```\ndb.users.find({\"grade\": {\"$gt\": \"12\"}})\ndb.users.find({\"$or\": [{\"name\": \"a\"}, {\"grade\": \"12\"}]})\ndb.users.find({\"$or\": [{\"name\": \"a\"}, {\"grade\": {\"$lt\":\"12\"}}]})\ndb.users.find({\"name\": \"a\", \"grade\": \"12\"})\ndb.users.find({\"$and\": [{\"name\": \"a\"},{\"grade\": \"12\"}]})\n```\n\n## 排序查询结果\n\n指定查询结果排序方式的就是在查询后追加一个 `sort()` 方法调用。传递给此方法一个文档，包含指定排序字段和排序类型。1表示升序，-1表示降序。\n\n```\ndb.users.find({\"grade\": {\"$gt\": \"12\"}}).sort({\"grade\": 1, \"name\": -1})\n```\n\n## 更新\n\n`update(<filter>, <update>, <options>)` 方法更新文档，`update()` 方法只更新一个文档。如果要更新多个文档，需要指定 `multi` 可选参数。\n\n`$set` 用来修改值。如果字段不存在，`$set` 会创建这个字段。\n\n```\ndb.users.update({\"name\": \"a\"}, {\"$set\": {\"grade\":\"1000\"}}, {multi: true})\n```\n\n## 替换\n\n要替换一个文档，只需要把一个新的文档传递给`update()`的第二个参数，并且不需要包含`_id`字段。如果包含`_id`字段，只保证跟原文档是同一个值。用于替换的文档可以跟原文档具有完全不同的字段。\n\n```\ndb.users.update({\"name\": \"a\"}, {\"name\": \"aa\", \"grade\": \"1200\"})\n```\n\n## 删除\n\n使用`remove()`方法从集合中删除文档。这个方法需要一个条件文档用来决定哪些文档将被删除。\n\n默认地，`remove()`方法将删除匹配指定条件的所有文档。使用`justOne`可选参数可以限制删除操作只删除一条。\n\n```\ndb.users.remove({\"name\": \"a\"}, {justOne: true})\n```\n\n删除所有文档：删除所有的操作仅仅是删除集合中的全部文档。集合本身和集合的索引并不会被删除。\n\n```\ndb.users.remove({})\n```\n\n删除一个集合:\n\n```\ndb.users.drop()\n```\n\n在MongoDB中，\"写\"操作是文档级别的原子操作。如果一个删除操作要删除集合中的多个文档，这个操作会和其他写操作交错。\n\n## Limit() 方法 和 Skip() 方法\n\n- `limit()`方法来读取指定数量的数据\n- `skip()`方法来跳过指定数量的数据，`skip()`方法同样接受一个数字参数作为跳过的记录条数。\n\n```\ndb.users.find().limit(2)\ndb.users.find().skip(2)\n```\n**当查询时同时使用`sort`,`skip`,`limit`，无论位置先后，最先执行顺序 `sort`再`skip`再`limit`。**\n**skip和limit方法只适合小数据量分页，如果是百万级效率就会非常低，因为`skip`方法是一条条数据数过去的**\n","source":"_posts/MongoDB使用时的一些笔记.md","raw":"---\ntitle: MongoDB使用时的一些笔记\ndate: 2018-3-13 17:09\ntags: [数据库, mongodb]\n---\n\n首先保证mongodb正确安装，并启动服务[这篇文章](https://suadminwen.github.io/2018/01/25/mongodb%E7%9A%84windows%E6%9C%8D%E5%8A%A1%E5%AE%89%E8%A3%85/)讲解了windows下进行mongodb的安装和运行，启动mongo的命令行，打开一个命令行窗口，执行如下命令即可\n\n    mongo\n\n## 转到用到的数据库\n\n先用 mongo 命令行连接到一个 MongoDB 实例，转到 test 数据库。\n\n    use test\n\n<!--more-->\n\n## 范围查询\n\n- 大于操作(`$gt`)\n- 大于或等于(`$gte`)\n- 小于操作(`$lt`)\n- 小于或等于(`$lte`)\n- 逻辑AND(`,`或`$and`)\n- 逻辑OR(`$or`)\n\n```\ndb.users.find({\"grade\": {\"$gt\": \"12\"}})\ndb.users.find({\"$or\": [{\"name\": \"a\"}, {\"grade\": \"12\"}]})\ndb.users.find({\"$or\": [{\"name\": \"a\"}, {\"grade\": {\"$lt\":\"12\"}}]})\ndb.users.find({\"name\": \"a\", \"grade\": \"12\"})\ndb.users.find({\"$and\": [{\"name\": \"a\"},{\"grade\": \"12\"}]})\n```\n\n## 排序查询结果\n\n指定查询结果排序方式的就是在查询后追加一个 `sort()` 方法调用。传递给此方法一个文档，包含指定排序字段和排序类型。1表示升序，-1表示降序。\n\n```\ndb.users.find({\"grade\": {\"$gt\": \"12\"}}).sort({\"grade\": 1, \"name\": -1})\n```\n\n## 更新\n\n`update(<filter>, <update>, <options>)` 方法更新文档，`update()` 方法只更新一个文档。如果要更新多个文档，需要指定 `multi` 可选参数。\n\n`$set` 用来修改值。如果字段不存在，`$set` 会创建这个字段。\n\n```\ndb.users.update({\"name\": \"a\"}, {\"$set\": {\"grade\":\"1000\"}}, {multi: true})\n```\n\n## 替换\n\n要替换一个文档，只需要把一个新的文档传递给`update()`的第二个参数，并且不需要包含`_id`字段。如果包含`_id`字段，只保证跟原文档是同一个值。用于替换的文档可以跟原文档具有完全不同的字段。\n\n```\ndb.users.update({\"name\": \"a\"}, {\"name\": \"aa\", \"grade\": \"1200\"})\n```\n\n## 删除\n\n使用`remove()`方法从集合中删除文档。这个方法需要一个条件文档用来决定哪些文档将被删除。\n\n默认地，`remove()`方法将删除匹配指定条件的所有文档。使用`justOne`可选参数可以限制删除操作只删除一条。\n\n```\ndb.users.remove({\"name\": \"a\"}, {justOne: true})\n```\n\n删除所有文档：删除所有的操作仅仅是删除集合中的全部文档。集合本身和集合的索引并不会被删除。\n\n```\ndb.users.remove({})\n```\n\n删除一个集合:\n\n```\ndb.users.drop()\n```\n\n在MongoDB中，\"写\"操作是文档级别的原子操作。如果一个删除操作要删除集合中的多个文档，这个操作会和其他写操作交错。\n\n## Limit() 方法 和 Skip() 方法\n\n- `limit()`方法来读取指定数量的数据\n- `skip()`方法来跳过指定数量的数据，`skip()`方法同样接受一个数字参数作为跳过的记录条数。\n\n```\ndb.users.find().limit(2)\ndb.users.find().skip(2)\n```\n**当查询时同时使用`sort`,`skip`,`limit`，无论位置先后，最先执行顺序 `sort`再`skip`再`limit`。**\n**skip和limit方法只适合小数据量分页，如果是百万级效率就会非常低，因为`skip`方法是一条条数据数过去的**\n","slug":"MongoDB使用时的一些笔记","published":1,"updated":"2021-06-20T10:25:20.123Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluqa1hig000orlogen872hav","content":"<p>首先保证mongodb正确安装，并启动服务<a href=\"https://suadminwen.github.io/2018/01/25/mongodb%E7%9A%84windows%E6%9C%8D%E5%8A%A1%E5%AE%89%E8%A3%85/\">这篇文章</a>讲解了windows下进行mongodb的安装和运行，启动mongo的命令行，打开一个命令行窗口，执行如下命令即可</p>\n<pre><code>mongo\n</code></pre>\n<h2 id=\"转到用到的数据库\"><a href=\"#转到用到的数据库\" class=\"headerlink\" title=\"转到用到的数据库\"></a>转到用到的数据库</h2><p>先用 mongo 命令行连接到一个 MongoDB 实例，转到 test 数据库。</p>\n<pre><code>use test\n</code></pre>\n<span id=\"more\"></span>\n\n<h2 id=\"范围查询\"><a href=\"#范围查询\" class=\"headerlink\" title=\"范围查询\"></a>范围查询</h2><ul>\n<li>大于操作(<code>$gt</code>)</li>\n<li>大于或等于(<code>$gte</code>)</li>\n<li>小于操作(<code>$lt</code>)</li>\n<li>小于或等于(<code>$lte</code>)</li>\n<li>逻辑AND(<code>,</code>或<code>$and</code>)</li>\n<li>逻辑OR(<code>$or</code>)</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.users.find(&#123;&quot;grade&quot;: &#123;&quot;$gt&quot;: &quot;12&quot;&#125;&#125;)</span><br><span class=\"line\">db.users.find(&#123;&quot;$or&quot;: [&#123;&quot;name&quot;: &quot;a&quot;&#125;, &#123;&quot;grade&quot;: &quot;12&quot;&#125;]&#125;)</span><br><span class=\"line\">db.users.find(&#123;&quot;$or&quot;: [&#123;&quot;name&quot;: &quot;a&quot;&#125;, &#123;&quot;grade&quot;: &#123;&quot;$lt&quot;:&quot;12&quot;&#125;&#125;]&#125;)</span><br><span class=\"line\">db.users.find(&#123;&quot;name&quot;: &quot;a&quot;, &quot;grade&quot;: &quot;12&quot;&#125;)</span><br><span class=\"line\">db.users.find(&#123;&quot;$and&quot;: [&#123;&quot;name&quot;: &quot;a&quot;&#125;,&#123;&quot;grade&quot;: &quot;12&quot;&#125;]&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"排序查询结果\"><a href=\"#排序查询结果\" class=\"headerlink\" title=\"排序查询结果\"></a>排序查询结果</h2><p>指定查询结果排序方式的就是在查询后追加一个 <code>sort()</code> 方法调用。传递给此方法一个文档，包含指定排序字段和排序类型。1表示升序，-1表示降序。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.users.find(&#123;&quot;grade&quot;: &#123;&quot;$gt&quot;: &quot;12&quot;&#125;&#125;).sort(&#123;&quot;grade&quot;: 1, &quot;name&quot;: -1&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"更新\"><a href=\"#更新\" class=\"headerlink\" title=\"更新\"></a>更新</h2><p><code>update(&lt;filter&gt;, &lt;update&gt;, &lt;options&gt;)</code> 方法更新文档，<code>update()</code> 方法只更新一个文档。如果要更新多个文档，需要指定 <code>multi</code> 可选参数。</p>\n<p><code>$set</code> 用来修改值。如果字段不存在，<code>$set</code> 会创建这个字段。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.users.update(&#123;&quot;name&quot;: &quot;a&quot;&#125;, &#123;&quot;$set&quot;: &#123;&quot;grade&quot;:&quot;1000&quot;&#125;&#125;, &#123;multi: true&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"替换\"><a href=\"#替换\" class=\"headerlink\" title=\"替换\"></a>替换</h2><p>要替换一个文档，只需要把一个新的文档传递给<code>update()</code>的第二个参数，并且不需要包含<code>_id</code>字段。如果包含<code>_id</code>字段，只保证跟原文档是同一个值。用于替换的文档可以跟原文档具有完全不同的字段。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.users.update(&#123;&quot;name&quot;: &quot;a&quot;&#125;, &#123;&quot;name&quot;: &quot;aa&quot;, &quot;grade&quot;: &quot;1200&quot;&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h2><p>使用<code>remove()</code>方法从集合中删除文档。这个方法需要一个条件文档用来决定哪些文档将被删除。</p>\n<p>默认地，<code>remove()</code>方法将删除匹配指定条件的所有文档。使用<code>justOne</code>可选参数可以限制删除操作只删除一条。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.users.remove(&#123;&quot;name&quot;: &quot;a&quot;&#125;, &#123;justOne: true&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>删除所有文档：删除所有的操作仅仅是删除集合中的全部文档。集合本身和集合的索引并不会被删除。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.users.remove(&#123;&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>删除一个集合:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.users.drop()</span><br></pre></td></tr></table></figure>\n\n<p>在MongoDB中，”写”操作是文档级别的原子操作。如果一个删除操作要删除集合中的多个文档，这个操作会和其他写操作交错。</p>\n<h2 id=\"Limit-方法-和-Skip-方法\"><a href=\"#Limit-方法-和-Skip-方法\" class=\"headerlink\" title=\"Limit() 方法 和 Skip() 方法\"></a>Limit() 方法 和 Skip() 方法</h2><ul>\n<li><code>limit()</code>方法来读取指定数量的数据</li>\n<li><code>skip()</code>方法来跳过指定数量的数据，<code>skip()</code>方法同样接受一个数字参数作为跳过的记录条数。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.users.find().limit(2)</span><br><span class=\"line\">db.users.find().skip(2)</span><br></pre></td></tr></table></figure>\n<p><strong>当查询时同时使用<code>sort</code>,<code>skip</code>,<code>limit</code>，无论位置先后，最先执行顺序 <code>sort</code>再<code>skip</code>再<code>limit</code>。</strong><br><strong>skip和limit方法只适合小数据量分页，如果是百万级效率就会非常低，因为<code>skip</code>方法是一条条数据数过去的</strong></p>\n","site":{"data":{}},"excerpt":"<p>首先保证mongodb正确安装，并启动服务<a href=\"https://suadminwen.github.io/2018/01/25/mongodb%E7%9A%84windows%E6%9C%8D%E5%8A%A1%E5%AE%89%E8%A3%85/\">这篇文章</a>讲解了windows下进行mongodb的安装和运行，启动mongo的命令行，打开一个命令行窗口，执行如下命令即可</p>\n<pre><code>mongo\n</code></pre>\n<h2 id=\"转到用到的数据库\"><a href=\"#转到用到的数据库\" class=\"headerlink\" title=\"转到用到的数据库\"></a>转到用到的数据库</h2><p>先用 mongo 命令行连接到一个 MongoDB 实例，转到 test 数据库。</p>\n<pre><code>use test\n</code></pre>","more":"<h2 id=\"范围查询\"><a href=\"#范围查询\" class=\"headerlink\" title=\"范围查询\"></a>范围查询</h2><ul>\n<li>大于操作(<code>$gt</code>)</li>\n<li>大于或等于(<code>$gte</code>)</li>\n<li>小于操作(<code>$lt</code>)</li>\n<li>小于或等于(<code>$lte</code>)</li>\n<li>逻辑AND(<code>,</code>或<code>$and</code>)</li>\n<li>逻辑OR(<code>$or</code>)</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.users.find(&#123;&quot;grade&quot;: &#123;&quot;$gt&quot;: &quot;12&quot;&#125;&#125;)</span><br><span class=\"line\">db.users.find(&#123;&quot;$or&quot;: [&#123;&quot;name&quot;: &quot;a&quot;&#125;, &#123;&quot;grade&quot;: &quot;12&quot;&#125;]&#125;)</span><br><span class=\"line\">db.users.find(&#123;&quot;$or&quot;: [&#123;&quot;name&quot;: &quot;a&quot;&#125;, &#123;&quot;grade&quot;: &#123;&quot;$lt&quot;:&quot;12&quot;&#125;&#125;]&#125;)</span><br><span class=\"line\">db.users.find(&#123;&quot;name&quot;: &quot;a&quot;, &quot;grade&quot;: &quot;12&quot;&#125;)</span><br><span class=\"line\">db.users.find(&#123;&quot;$and&quot;: [&#123;&quot;name&quot;: &quot;a&quot;&#125;,&#123;&quot;grade&quot;: &quot;12&quot;&#125;]&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"排序查询结果\"><a href=\"#排序查询结果\" class=\"headerlink\" title=\"排序查询结果\"></a>排序查询结果</h2><p>指定查询结果排序方式的就是在查询后追加一个 <code>sort()</code> 方法调用。传递给此方法一个文档，包含指定排序字段和排序类型。1表示升序，-1表示降序。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.users.find(&#123;&quot;grade&quot;: &#123;&quot;$gt&quot;: &quot;12&quot;&#125;&#125;).sort(&#123;&quot;grade&quot;: 1, &quot;name&quot;: -1&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"更新\"><a href=\"#更新\" class=\"headerlink\" title=\"更新\"></a>更新</h2><p><code>update(&lt;filter&gt;, &lt;update&gt;, &lt;options&gt;)</code> 方法更新文档，<code>update()</code> 方法只更新一个文档。如果要更新多个文档，需要指定 <code>multi</code> 可选参数。</p>\n<p><code>$set</code> 用来修改值。如果字段不存在，<code>$set</code> 会创建这个字段。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.users.update(&#123;&quot;name&quot;: &quot;a&quot;&#125;, &#123;&quot;$set&quot;: &#123;&quot;grade&quot;:&quot;1000&quot;&#125;&#125;, &#123;multi: true&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"替换\"><a href=\"#替换\" class=\"headerlink\" title=\"替换\"></a>替换</h2><p>要替换一个文档，只需要把一个新的文档传递给<code>update()</code>的第二个参数，并且不需要包含<code>_id</code>字段。如果包含<code>_id</code>字段，只保证跟原文档是同一个值。用于替换的文档可以跟原文档具有完全不同的字段。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.users.update(&#123;&quot;name&quot;: &quot;a&quot;&#125;, &#123;&quot;name&quot;: &quot;aa&quot;, &quot;grade&quot;: &quot;1200&quot;&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h2><p>使用<code>remove()</code>方法从集合中删除文档。这个方法需要一个条件文档用来决定哪些文档将被删除。</p>\n<p>默认地，<code>remove()</code>方法将删除匹配指定条件的所有文档。使用<code>justOne</code>可选参数可以限制删除操作只删除一条。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.users.remove(&#123;&quot;name&quot;: &quot;a&quot;&#125;, &#123;justOne: true&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>删除所有文档：删除所有的操作仅仅是删除集合中的全部文档。集合本身和集合的索引并不会被删除。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.users.remove(&#123;&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>删除一个集合:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.users.drop()</span><br></pre></td></tr></table></figure>\n\n<p>在MongoDB中，”写”操作是文档级别的原子操作。如果一个删除操作要删除集合中的多个文档，这个操作会和其他写操作交错。</p>\n<h2 id=\"Limit-方法-和-Skip-方法\"><a href=\"#Limit-方法-和-Skip-方法\" class=\"headerlink\" title=\"Limit() 方法 和 Skip() 方法\"></a>Limit() 方法 和 Skip() 方法</h2><ul>\n<li><code>limit()</code>方法来读取指定数量的数据</li>\n<li><code>skip()</code>方法来跳过指定数量的数据，<code>skip()</code>方法同样接受一个数字参数作为跳过的记录条数。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.users.find().limit(2)</span><br><span class=\"line\">db.users.find().skip(2)</span><br></pre></td></tr></table></figure>\n<p><strong>当查询时同时使用<code>sort</code>,<code>skip</code>,<code>limit</code>，无论位置先后，最先执行顺序 <code>sort</code>再<code>skip</code>再<code>limit</code>。</strong><br><strong>skip和limit方法只适合小数据量分页，如果是百万级效率就会非常低，因为<code>skip</code>方法是一条条数据数过去的</strong></p>"},{"title":"MySQL服务器配置远程数据库访问","date":"2016-10-17T16:00:00.000Z","_content":"\n## 安装Mysql，并配置远程访问\n\n### 更新源\n\n    sudo apt-get update\n\n\n### 安装mysql\n\n    sudo apt-get install mysql-server mysql-client\n\n软件包设置对话框\"中输入mysql中\"root\"用户的密码以及确认密码。\n\n注意：\n\n安装过程没有提示设置密码，那么完成之后，可以在`/etc/mysql/debian.cnf` 有着MySQL默认的用户名和用户密码， 用户名默认的不是root，而是debian-sys-maint\n\n密码会随即给一个很复杂的，这个时候，要进入MySQL的话，就是需要在终端把root更改为debian-sys-maint\n\n所安装的版本是5.7，所以password字段已经被删除，取而代之的是`authentication_string`字段，所以要更改密码：\n\n```\nmysql> use mysql;\n\nmysql> update user set authentication_string=PASSWORD(\"这里输入你要改的密码\") where User='root';  # 更改密码\nmysql> update user set plugin=\"mysql_native_password\";  # 如果没这一行可能也会报一个错误，因此需要运行这一行\n\nmysql> flush privileges;  # 更新所有操作权限\nmysql> quit;\n```\n\n<!--more-->\n\n### 判断mysql是否安装成功\n\n    sudo service mysql restart\n\n如果mysql启动成功，处于运行状态说明mysql安装成功。\n\n### 查看mysql版本\n\n    mysql --version\n\n### 登录mysql\n\n    mysql -u root -p\n\n输入mysql中\"root\"用户的密码\n\n说明：\n\n-P: 表示服务端口,有些时候Mysql提供服务的端口改成其他端口。建议是改成其他端口，比如13306\n\n### 创建远程登录用户\n\n    CREATE USER 'username'@'host' IDENTIFIED BY 'password';\n\n说明:username - 你将创建的用户名, host - 指定该用户在哪个主机上可以登陆,如果是本地用户可用localhost, 如果想让该用户可以从任意远程主机登陆,可以使用通配符%. password - 该用户的登陆密码,密码可以为空,如果为空则该用户可以不需要密码登陆服务器.\n\n\n例子:\n\n```\nCREATE USER 'dog'@'localhost' IDENTIFIED BY '123456';  \nCREATE USER 'pig'@'192.168.1.101_' IDENDIFIED BY '123456';  \nCREATE USER 'pig'@'%' IDENTIFIED BY '123456';  \nCREATE USER 'pig'@'%' IDENTIFIED BY '';  \nCREATE USER 'pig'@'%';\n```\n\n### 授权:\n\n    GRANT privileges ON databasename.tablename TO 'username'@'host'；\n\n说明: privileges - 用户的操作权限,如SELECT , INSERT , UPDATE 等(详细列表见该文最后面).如果要授予所的权限则使用ALL.;databasename - 数据库名,tablename-表名,如果要授予该用户对所有数据库和表的相应操作权限则可用*表示, 如*.*.\n\n\n例子：\n\n```\nGRANT SELECT, INSERT ON test.user TO 'pig'@'%';  \nGRANT ALL ON *.* TO 'pig'@'%';\n```\n\n注意:用以上命令授权的用户不能给其它用户授权,如果想让该用户可以授权,用以下命令:  \n\n    GRANT privileges ON databasename.tablename TO 'username'@'host' WITH GRANT OPTION;\n\n授权完成之后：\n\n    flush privileges;  # 更新所有操作权限\n\n### 修改监听ip\n\n~~ 在目录/etc/mysql下找到my.cnf，用vim编辑，找到my.cnf里面的 ~~\n注：mysql 5.5版本，修改`/etc/my.cnf`，mysql 5.7 修改 `/etc/mysql/mysql.conf.d/mysqld.cnf` 文件。\n\n    bind-address           = 127.0.0.1\n\n将其注释。\n\n### 重启数据库服务器\n\n\tsudo service mysql restart\n\n## MySQL的一些其他配置\n\n### mysql设置中文输入\n\nmysql 5.5版本，修改`/etc/my.cnf`，mysql 5.7 修改 `/etc/mysql/mysql.conf.d/mysqld.cnf` 文件。\n\n添加以下内容：\n\n```\n[client]\ndefault-character-set=utf8\n[mysqld]\ndefault-storage-engine=INNODB\ncharacter-set-server=utf8\ncollation-server=utf8_general_ci\n```\n\n重启mysql(`sudo service mysql restart`)\n\n进入mysql查看字符集(mysql>`show variables like 'character_set_%';`)\n\n### 忽略表名大小写\n\n在配置文件中添加以下内容：\n\n```\n[mysqld]\nlower_case_table_names=1 # 1是不区分，0是区分\n```\n\n重启mysql(`sudo service mysql restart`)\n\n### 说明\n\nmysql默认端口号为3306\n不建议使用root帐号做远程登录的帐号\n\n---\n\n## 安装postgresql，并配置远程用户访问\n\n### 更新源列表\n\n    sudo apt-get update\n\n### 安装postgresql\n\n    sudo apt-get install postgresql\n\n系统会提示安装所需磁盘空间，输入\"y\"，安装程序会自动完成。 安装完毕后，系统会创建一个数据库超级用户“postgres”, 密码为空。这个用户既是不可登录的操作系统用户，也是数据库用户。\n\n\n### 修改Linux用户postgres的密码\n\n    sudo passwd postgres\n\n### 修改数据库超级用户postgres的密码\n\n#### 1 切换到Linux下postgres用户\n\n    sudo su postgres\n\n#### 2 登录postgres数据库\n\n    psql postgres\n\n这样你就可以看到一下提示信息：\n\n```\npsql (8.4.4)\nType \"help\" for help.\n```\n\n并出现postgres的命令提示符号：\n\n    postgres=#\n\n#### `ALTER USER postgres with PASSWORD 'password';`, 键入`q`返回到Linux命令行。\n\n### 设置其它机器上对postgres的访问\n\n修改\n\n```\n/etc/postgresql/8.4/main/pg_hba.conf:\nhost all all 0.0.0.0/0 md5  #0.0.0.0\n```\n\n为地址段，0为多少二进制位\n例如：192.168.0.0/16代表192.168.0.1-192.168.255.254\n修改/etc/postgresql/8.4/main/postgresql.conf\n\n    listen_address = '*'\n\n### 重启数据库\n\n    sudo /etc/init.d/postgresql restart\n\n### 说明\n\npostgresql的默认端口号为5432\n\n\n注：配置完成之后，别忘了将服务器主机的防火墙关闭这些端口的防护\n","source":"_posts/MySQL服务器配置远程数据库访问.md","raw":"---\ntitle: MySQL服务器配置远程数据库访问\ndate: 2016-10-18\ntags: [数据库, Linux]\n---\n\n## 安装Mysql，并配置远程访问\n\n### 更新源\n\n    sudo apt-get update\n\n\n### 安装mysql\n\n    sudo apt-get install mysql-server mysql-client\n\n软件包设置对话框\"中输入mysql中\"root\"用户的密码以及确认密码。\n\n注意：\n\n安装过程没有提示设置密码，那么完成之后，可以在`/etc/mysql/debian.cnf` 有着MySQL默认的用户名和用户密码， 用户名默认的不是root，而是debian-sys-maint\n\n密码会随即给一个很复杂的，这个时候，要进入MySQL的话，就是需要在终端把root更改为debian-sys-maint\n\n所安装的版本是5.7，所以password字段已经被删除，取而代之的是`authentication_string`字段，所以要更改密码：\n\n```\nmysql> use mysql;\n\nmysql> update user set authentication_string=PASSWORD(\"这里输入你要改的密码\") where User='root';  # 更改密码\nmysql> update user set plugin=\"mysql_native_password\";  # 如果没这一行可能也会报一个错误，因此需要运行这一行\n\nmysql> flush privileges;  # 更新所有操作权限\nmysql> quit;\n```\n\n<!--more-->\n\n### 判断mysql是否安装成功\n\n    sudo service mysql restart\n\n如果mysql启动成功，处于运行状态说明mysql安装成功。\n\n### 查看mysql版本\n\n    mysql --version\n\n### 登录mysql\n\n    mysql -u root -p\n\n输入mysql中\"root\"用户的密码\n\n说明：\n\n-P: 表示服务端口,有些时候Mysql提供服务的端口改成其他端口。建议是改成其他端口，比如13306\n\n### 创建远程登录用户\n\n    CREATE USER 'username'@'host' IDENTIFIED BY 'password';\n\n说明:username - 你将创建的用户名, host - 指定该用户在哪个主机上可以登陆,如果是本地用户可用localhost, 如果想让该用户可以从任意远程主机登陆,可以使用通配符%. password - 该用户的登陆密码,密码可以为空,如果为空则该用户可以不需要密码登陆服务器.\n\n\n例子:\n\n```\nCREATE USER 'dog'@'localhost' IDENTIFIED BY '123456';  \nCREATE USER 'pig'@'192.168.1.101_' IDENDIFIED BY '123456';  \nCREATE USER 'pig'@'%' IDENTIFIED BY '123456';  \nCREATE USER 'pig'@'%' IDENTIFIED BY '';  \nCREATE USER 'pig'@'%';\n```\n\n### 授权:\n\n    GRANT privileges ON databasename.tablename TO 'username'@'host'；\n\n说明: privileges - 用户的操作权限,如SELECT , INSERT , UPDATE 等(详细列表见该文最后面).如果要授予所的权限则使用ALL.;databasename - 数据库名,tablename-表名,如果要授予该用户对所有数据库和表的相应操作权限则可用*表示, 如*.*.\n\n\n例子：\n\n```\nGRANT SELECT, INSERT ON test.user TO 'pig'@'%';  \nGRANT ALL ON *.* TO 'pig'@'%';\n```\n\n注意:用以上命令授权的用户不能给其它用户授权,如果想让该用户可以授权,用以下命令:  \n\n    GRANT privileges ON databasename.tablename TO 'username'@'host' WITH GRANT OPTION;\n\n授权完成之后：\n\n    flush privileges;  # 更新所有操作权限\n\n### 修改监听ip\n\n~~ 在目录/etc/mysql下找到my.cnf，用vim编辑，找到my.cnf里面的 ~~\n注：mysql 5.5版本，修改`/etc/my.cnf`，mysql 5.7 修改 `/etc/mysql/mysql.conf.d/mysqld.cnf` 文件。\n\n    bind-address           = 127.0.0.1\n\n将其注释。\n\n### 重启数据库服务器\n\n\tsudo service mysql restart\n\n## MySQL的一些其他配置\n\n### mysql设置中文输入\n\nmysql 5.5版本，修改`/etc/my.cnf`，mysql 5.7 修改 `/etc/mysql/mysql.conf.d/mysqld.cnf` 文件。\n\n添加以下内容：\n\n```\n[client]\ndefault-character-set=utf8\n[mysqld]\ndefault-storage-engine=INNODB\ncharacter-set-server=utf8\ncollation-server=utf8_general_ci\n```\n\n重启mysql(`sudo service mysql restart`)\n\n进入mysql查看字符集(mysql>`show variables like 'character_set_%';`)\n\n### 忽略表名大小写\n\n在配置文件中添加以下内容：\n\n```\n[mysqld]\nlower_case_table_names=1 # 1是不区分，0是区分\n```\n\n重启mysql(`sudo service mysql restart`)\n\n### 说明\n\nmysql默认端口号为3306\n不建议使用root帐号做远程登录的帐号\n\n---\n\n## 安装postgresql，并配置远程用户访问\n\n### 更新源列表\n\n    sudo apt-get update\n\n### 安装postgresql\n\n    sudo apt-get install postgresql\n\n系统会提示安装所需磁盘空间，输入\"y\"，安装程序会自动完成。 安装完毕后，系统会创建一个数据库超级用户“postgres”, 密码为空。这个用户既是不可登录的操作系统用户，也是数据库用户。\n\n\n### 修改Linux用户postgres的密码\n\n    sudo passwd postgres\n\n### 修改数据库超级用户postgres的密码\n\n#### 1 切换到Linux下postgres用户\n\n    sudo su postgres\n\n#### 2 登录postgres数据库\n\n    psql postgres\n\n这样你就可以看到一下提示信息：\n\n```\npsql (8.4.4)\nType \"help\" for help.\n```\n\n并出现postgres的命令提示符号：\n\n    postgres=#\n\n#### `ALTER USER postgres with PASSWORD 'password';`, 键入`q`返回到Linux命令行。\n\n### 设置其它机器上对postgres的访问\n\n修改\n\n```\n/etc/postgresql/8.4/main/pg_hba.conf:\nhost all all 0.0.0.0/0 md5  #0.0.0.0\n```\n\n为地址段，0为多少二进制位\n例如：192.168.0.0/16代表192.168.0.1-192.168.255.254\n修改/etc/postgresql/8.4/main/postgresql.conf\n\n    listen_address = '*'\n\n### 重启数据库\n\n    sudo /etc/init.d/postgresql restart\n\n### 说明\n\npostgresql的默认端口号为5432\n\n\n注：配置完成之后，别忘了将服务器主机的防火墙关闭这些端口的防护\n","slug":"MySQL服务器配置远程数据库访问","published":1,"updated":"2021-06-20T10:25:20.123Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluqa1hig000prlog1m6y8yxn","content":"<h2 id=\"安装Mysql，并配置远程访问\"><a href=\"#安装Mysql，并配置远程访问\" class=\"headerlink\" title=\"安装Mysql，并配置远程访问\"></a>安装Mysql，并配置远程访问</h2><h3 id=\"更新源\"><a href=\"#更新源\" class=\"headerlink\" title=\"更新源\"></a>更新源</h3><pre><code>sudo apt-get update\n</code></pre>\n<h3 id=\"安装mysql\"><a href=\"#安装mysql\" class=\"headerlink\" title=\"安装mysql\"></a>安装mysql</h3><pre><code>sudo apt-get install mysql-server mysql-client\n</code></pre>\n<p>软件包设置对话框”中输入mysql中”root”用户的密码以及确认密码。</p>\n<p>注意：</p>\n<p>安装过程没有提示设置密码，那么完成之后，可以在<code>/etc/mysql/debian.cnf</code> 有着MySQL默认的用户名和用户密码， 用户名默认的不是root，而是debian-sys-maint</p>\n<p>密码会随即给一个很复杂的，这个时候，要进入MySQL的话，就是需要在终端把root更改为debian-sys-maint</p>\n<p>所安装的版本是5.7，所以password字段已经被删除，取而代之的是<code>authentication_string</code>字段，所以要更改密码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; use mysql;</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; update user set authentication_string=PASSWORD(&quot;这里输入你要改的密码&quot;) where User=&#x27;root&#x27;;  # 更改密码</span><br><span class=\"line\">mysql&gt; update user set plugin=&quot;mysql_native_password&quot;;  # 如果没这一行可能也会报一个错误，因此需要运行这一行</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; flush privileges;  # 更新所有操作权限</span><br><span class=\"line\">mysql&gt; quit;</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h3 id=\"判断mysql是否安装成功\"><a href=\"#判断mysql是否安装成功\" class=\"headerlink\" title=\"判断mysql是否安装成功\"></a>判断mysql是否安装成功</h3><pre><code>sudo service mysql restart\n</code></pre>\n<p>如果mysql启动成功，处于运行状态说明mysql安装成功。</p>\n<h3 id=\"查看mysql版本\"><a href=\"#查看mysql版本\" class=\"headerlink\" title=\"查看mysql版本\"></a>查看mysql版本</h3><pre><code>mysql --version\n</code></pre>\n<h3 id=\"登录mysql\"><a href=\"#登录mysql\" class=\"headerlink\" title=\"登录mysql\"></a>登录mysql</h3><pre><code>mysql -u root -p\n</code></pre>\n<p>输入mysql中”root”用户的密码</p>\n<p>说明：</p>\n<p>-P: 表示服务端口,有些时候Mysql提供服务的端口改成其他端口。建议是改成其他端口，比如13306</p>\n<h3 id=\"创建远程登录用户\"><a href=\"#创建远程登录用户\" class=\"headerlink\" title=\"创建远程登录用户\"></a>创建远程登录用户</h3><pre><code>CREATE USER &#39;username&#39;@&#39;host&#39; IDENTIFIED BY &#39;password&#39;;\n</code></pre>\n<p>说明:username - 你将创建的用户名, host - 指定该用户在哪个主机上可以登陆,如果是本地用户可用localhost, 如果想让该用户可以从任意远程主机登陆,可以使用通配符%. password - 该用户的登陆密码,密码可以为空,如果为空则该用户可以不需要密码登陆服务器.</p>\n<p>例子:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE USER &#x27;dog&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;123456&#x27;;  </span><br><span class=\"line\">CREATE USER &#x27;pig&#x27;@&#x27;192.168.1.101_&#x27; IDENDIFIED BY &#x27;123456&#x27;;  </span><br><span class=\"line\">CREATE USER &#x27;pig&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;123456&#x27;;  </span><br><span class=\"line\">CREATE USER &#x27;pig&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;&#x27;;  </span><br><span class=\"line\">CREATE USER &#x27;pig&#x27;@&#x27;%&#x27;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"授权\"><a href=\"#授权\" class=\"headerlink\" title=\"授权:\"></a>授权:</h3><pre><code>GRANT privileges ON databasename.tablename TO &#39;username&#39;@&#39;host&#39;；\n</code></pre>\n<p>说明: privileges - 用户的操作权限,如SELECT , INSERT , UPDATE 等(详细列表见该文最后面).如果要授予所的权限则使用ALL.;databasename - 数据库名,tablename-表名,如果要授予该用户对所有数据库和表的相应操作权限则可用<em>表示, 如</em>.*.</p>\n<p>例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GRANT SELECT, INSERT ON test.user TO &#x27;pig&#x27;@&#x27;%&#x27;;  </span><br><span class=\"line\">GRANT ALL ON *.* TO &#x27;pig&#x27;@&#x27;%&#x27;;</span><br></pre></td></tr></table></figure>\n\n<p>注意:用以上命令授权的用户不能给其它用户授权,如果想让该用户可以授权,用以下命令:  </p>\n<pre><code>GRANT privileges ON databasename.tablename TO &#39;username&#39;@&#39;host&#39; WITH GRANT OPTION;\n</code></pre>\n<p>授权完成之后：</p>\n<pre><code>flush privileges;  # 更新所有操作权限\n</code></pre>\n<h3 id=\"修改监听ip\"><a href=\"#修改监听ip\" class=\"headerlink\" title=\"修改监听ip\"></a>修改监听ip</h3><p>~~ 在目录&#x2F;etc&#x2F;mysql下找到my.cnf，用vim编辑，找到my.cnf里面的 ~~<br>注：mysql 5.5版本，修改<code>/etc/my.cnf</code>，mysql 5.7 修改 <code>/etc/mysql/mysql.conf.d/mysqld.cnf</code> 文件。</p>\n<pre><code>bind-address           = 127.0.0.1\n</code></pre>\n<p>将其注释。</p>\n<h3 id=\"重启数据库服务器\"><a href=\"#重启数据库服务器\" class=\"headerlink\" title=\"重启数据库服务器\"></a>重启数据库服务器</h3><pre><code>sudo service mysql restart\n</code></pre>\n<h2 id=\"MySQL的一些其他配置\"><a href=\"#MySQL的一些其他配置\" class=\"headerlink\" title=\"MySQL的一些其他配置\"></a>MySQL的一些其他配置</h2><h3 id=\"mysql设置中文输入\"><a href=\"#mysql设置中文输入\" class=\"headerlink\" title=\"mysql设置中文输入\"></a>mysql设置中文输入</h3><p>mysql 5.5版本，修改<code>/etc/my.cnf</code>，mysql 5.7 修改 <code>/etc/mysql/mysql.conf.d/mysqld.cnf</code> 文件。</p>\n<p>添加以下内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[client]</span><br><span class=\"line\">default-character-set=utf8</span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">default-storage-engine=INNODB</span><br><span class=\"line\">character-set-server=utf8</span><br><span class=\"line\">collation-server=utf8_general_ci</span><br></pre></td></tr></table></figure>\n\n<p>重启mysql(<code>sudo service mysql restart</code>)</p>\n<p>进入mysql查看字符集(mysql&gt;<code>show variables like &#39;character_set_%&#39;;</code>)</p>\n<h3 id=\"忽略表名大小写\"><a href=\"#忽略表名大小写\" class=\"headerlink\" title=\"忽略表名大小写\"></a>忽略表名大小写</h3><p>在配置文件中添加以下内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\">lower_case_table_names=1 # 1是不区分，0是区分</span><br></pre></td></tr></table></figure>\n\n<p>重启mysql(<code>sudo service mysql restart</code>)</p>\n<h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><p>mysql默认端口号为3306<br>不建议使用root帐号做远程登录的帐号</p>\n<hr>\n<h2 id=\"安装postgresql，并配置远程用户访问\"><a href=\"#安装postgresql，并配置远程用户访问\" class=\"headerlink\" title=\"安装postgresql，并配置远程用户访问\"></a>安装postgresql，并配置远程用户访问</h2><h3 id=\"更新源列表\"><a href=\"#更新源列表\" class=\"headerlink\" title=\"更新源列表\"></a>更新源列表</h3><pre><code>sudo apt-get update\n</code></pre>\n<h3 id=\"安装postgresql\"><a href=\"#安装postgresql\" class=\"headerlink\" title=\"安装postgresql\"></a>安装postgresql</h3><pre><code>sudo apt-get install postgresql\n</code></pre>\n<p>系统会提示安装所需磁盘空间，输入”y”，安装程序会自动完成。 安装完毕后，系统会创建一个数据库超级用户“postgres”, 密码为空。这个用户既是不可登录的操作系统用户，也是数据库用户。</p>\n<h3 id=\"修改Linux用户postgres的密码\"><a href=\"#修改Linux用户postgres的密码\" class=\"headerlink\" title=\"修改Linux用户postgres的密码\"></a>修改Linux用户postgres的密码</h3><pre><code>sudo passwd postgres\n</code></pre>\n<h3 id=\"修改数据库超级用户postgres的密码\"><a href=\"#修改数据库超级用户postgres的密码\" class=\"headerlink\" title=\"修改数据库超级用户postgres的密码\"></a>修改数据库超级用户postgres的密码</h3><h4 id=\"1-切换到Linux下postgres用户\"><a href=\"#1-切换到Linux下postgres用户\" class=\"headerlink\" title=\"1 切换到Linux下postgres用户\"></a>1 切换到Linux下postgres用户</h4><pre><code>sudo su postgres\n</code></pre>\n<h4 id=\"2-登录postgres数据库\"><a href=\"#2-登录postgres数据库\" class=\"headerlink\" title=\"2 登录postgres数据库\"></a>2 登录postgres数据库</h4><pre><code>psql postgres\n</code></pre>\n<p>这样你就可以看到一下提示信息：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">psql (8.4.4)</span><br><span class=\"line\">Type &quot;help&quot; for help.</span><br></pre></td></tr></table></figure>\n\n<p>并出现postgres的命令提示符号：</p>\n<pre><code>postgres=#\n</code></pre>\n<h4 id=\"ALTER-USER-postgres-with-PASSWORD-39-password-39-键入q返回到Linux命令行。\"><a href=\"#ALTER-USER-postgres-with-PASSWORD-39-password-39-键入q返回到Linux命令行。\" class=\"headerlink\" title=\"ALTER USER postgres with PASSWORD &#39;password&#39;;, 键入q返回到Linux命令行。\"></a><code>ALTER USER postgres with PASSWORD &#39;password&#39;;</code>, 键入<code>q</code>返回到Linux命令行。</h4><h3 id=\"设置其它机器上对postgres的访问\"><a href=\"#设置其它机器上对postgres的访问\" class=\"headerlink\" title=\"设置其它机器上对postgres的访问\"></a>设置其它机器上对postgres的访问</h3><p>修改</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/postgresql/8.4/main/pg_hba.conf:</span><br><span class=\"line\">host all all 0.0.0.0/0 md5  #0.0.0.0</span><br></pre></td></tr></table></figure>\n\n<p>为地址段，0为多少二进制位<br>例如：192.168.0.0&#x2F;16代表192.168.0.1-192.168.255.254<br>修改&#x2F;etc&#x2F;postgresql&#x2F;8.4&#x2F;main&#x2F;postgresql.conf</p>\n<pre><code>listen_address = &#39;*&#39;\n</code></pre>\n<h3 id=\"重启数据库\"><a href=\"#重启数据库\" class=\"headerlink\" title=\"重启数据库\"></a>重启数据库</h3><pre><code>sudo /etc/init.d/postgresql restart\n</code></pre>\n<h3 id=\"说明-1\"><a href=\"#说明-1\" class=\"headerlink\" title=\"说明\"></a>说明</h3><p>postgresql的默认端口号为5432</p>\n<p>注：配置完成之后，别忘了将服务器主机的防火墙关闭这些端口的防护</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"安装Mysql，并配置远程访问\"><a href=\"#安装Mysql，并配置远程访问\" class=\"headerlink\" title=\"安装Mysql，并配置远程访问\"></a>安装Mysql，并配置远程访问</h2><h3 id=\"更新源\"><a href=\"#更新源\" class=\"headerlink\" title=\"更新源\"></a>更新源</h3><pre><code>sudo apt-get update\n</code></pre>\n<h3 id=\"安装mysql\"><a href=\"#安装mysql\" class=\"headerlink\" title=\"安装mysql\"></a>安装mysql</h3><pre><code>sudo apt-get install mysql-server mysql-client\n</code></pre>\n<p>软件包设置对话框”中输入mysql中”root”用户的密码以及确认密码。</p>\n<p>注意：</p>\n<p>安装过程没有提示设置密码，那么完成之后，可以在<code>/etc/mysql/debian.cnf</code> 有着MySQL默认的用户名和用户密码， 用户名默认的不是root，而是debian-sys-maint</p>\n<p>密码会随即给一个很复杂的，这个时候，要进入MySQL的话，就是需要在终端把root更改为debian-sys-maint</p>\n<p>所安装的版本是5.7，所以password字段已经被删除，取而代之的是<code>authentication_string</code>字段，所以要更改密码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; use mysql;</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; update user set authentication_string=PASSWORD(&quot;这里输入你要改的密码&quot;) where User=&#x27;root&#x27;;  # 更改密码</span><br><span class=\"line\">mysql&gt; update user set plugin=&quot;mysql_native_password&quot;;  # 如果没这一行可能也会报一个错误，因此需要运行这一行</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; flush privileges;  # 更新所有操作权限</span><br><span class=\"line\">mysql&gt; quit;</span><br></pre></td></tr></table></figure>","more":"<h3 id=\"判断mysql是否安装成功\"><a href=\"#判断mysql是否安装成功\" class=\"headerlink\" title=\"判断mysql是否安装成功\"></a>判断mysql是否安装成功</h3><pre><code>sudo service mysql restart\n</code></pre>\n<p>如果mysql启动成功，处于运行状态说明mysql安装成功。</p>\n<h3 id=\"查看mysql版本\"><a href=\"#查看mysql版本\" class=\"headerlink\" title=\"查看mysql版本\"></a>查看mysql版本</h3><pre><code>mysql --version\n</code></pre>\n<h3 id=\"登录mysql\"><a href=\"#登录mysql\" class=\"headerlink\" title=\"登录mysql\"></a>登录mysql</h3><pre><code>mysql -u root -p\n</code></pre>\n<p>输入mysql中”root”用户的密码</p>\n<p>说明：</p>\n<p>-P: 表示服务端口,有些时候Mysql提供服务的端口改成其他端口。建议是改成其他端口，比如13306</p>\n<h3 id=\"创建远程登录用户\"><a href=\"#创建远程登录用户\" class=\"headerlink\" title=\"创建远程登录用户\"></a>创建远程登录用户</h3><pre><code>CREATE USER &#39;username&#39;@&#39;host&#39; IDENTIFIED BY &#39;password&#39;;\n</code></pre>\n<p>说明:username - 你将创建的用户名, host - 指定该用户在哪个主机上可以登陆,如果是本地用户可用localhost, 如果想让该用户可以从任意远程主机登陆,可以使用通配符%. password - 该用户的登陆密码,密码可以为空,如果为空则该用户可以不需要密码登陆服务器.</p>\n<p>例子:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE USER &#x27;dog&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;123456&#x27;;  </span><br><span class=\"line\">CREATE USER &#x27;pig&#x27;@&#x27;192.168.1.101_&#x27; IDENDIFIED BY &#x27;123456&#x27;;  </span><br><span class=\"line\">CREATE USER &#x27;pig&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;123456&#x27;;  </span><br><span class=\"line\">CREATE USER &#x27;pig&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;&#x27;;  </span><br><span class=\"line\">CREATE USER &#x27;pig&#x27;@&#x27;%&#x27;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"授权\"><a href=\"#授权\" class=\"headerlink\" title=\"授权:\"></a>授权:</h3><pre><code>GRANT privileges ON databasename.tablename TO &#39;username&#39;@&#39;host&#39;；\n</code></pre>\n<p>说明: privileges - 用户的操作权限,如SELECT , INSERT , UPDATE 等(详细列表见该文最后面).如果要授予所的权限则使用ALL.;databasename - 数据库名,tablename-表名,如果要授予该用户对所有数据库和表的相应操作权限则可用<em>表示, 如</em>.*.</p>\n<p>例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GRANT SELECT, INSERT ON test.user TO &#x27;pig&#x27;@&#x27;%&#x27;;  </span><br><span class=\"line\">GRANT ALL ON *.* TO &#x27;pig&#x27;@&#x27;%&#x27;;</span><br></pre></td></tr></table></figure>\n\n<p>注意:用以上命令授权的用户不能给其它用户授权,如果想让该用户可以授权,用以下命令:  </p>\n<pre><code>GRANT privileges ON databasename.tablename TO &#39;username&#39;@&#39;host&#39; WITH GRANT OPTION;\n</code></pre>\n<p>授权完成之后：</p>\n<pre><code>flush privileges;  # 更新所有操作权限\n</code></pre>\n<h3 id=\"修改监听ip\"><a href=\"#修改监听ip\" class=\"headerlink\" title=\"修改监听ip\"></a>修改监听ip</h3><p>~~ 在目录&#x2F;etc&#x2F;mysql下找到my.cnf，用vim编辑，找到my.cnf里面的 ~~<br>注：mysql 5.5版本，修改<code>/etc/my.cnf</code>，mysql 5.7 修改 <code>/etc/mysql/mysql.conf.d/mysqld.cnf</code> 文件。</p>\n<pre><code>bind-address           = 127.0.0.1\n</code></pre>\n<p>将其注释。</p>\n<h3 id=\"重启数据库服务器\"><a href=\"#重启数据库服务器\" class=\"headerlink\" title=\"重启数据库服务器\"></a>重启数据库服务器</h3><pre><code>sudo service mysql restart\n</code></pre>\n<h2 id=\"MySQL的一些其他配置\"><a href=\"#MySQL的一些其他配置\" class=\"headerlink\" title=\"MySQL的一些其他配置\"></a>MySQL的一些其他配置</h2><h3 id=\"mysql设置中文输入\"><a href=\"#mysql设置中文输入\" class=\"headerlink\" title=\"mysql设置中文输入\"></a>mysql设置中文输入</h3><p>mysql 5.5版本，修改<code>/etc/my.cnf</code>，mysql 5.7 修改 <code>/etc/mysql/mysql.conf.d/mysqld.cnf</code> 文件。</p>\n<p>添加以下内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[client]</span><br><span class=\"line\">default-character-set=utf8</span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">default-storage-engine=INNODB</span><br><span class=\"line\">character-set-server=utf8</span><br><span class=\"line\">collation-server=utf8_general_ci</span><br></pre></td></tr></table></figure>\n\n<p>重启mysql(<code>sudo service mysql restart</code>)</p>\n<p>进入mysql查看字符集(mysql&gt;<code>show variables like &#39;character_set_%&#39;;</code>)</p>\n<h3 id=\"忽略表名大小写\"><a href=\"#忽略表名大小写\" class=\"headerlink\" title=\"忽略表名大小写\"></a>忽略表名大小写</h3><p>在配置文件中添加以下内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\">lower_case_table_names=1 # 1是不区分，0是区分</span><br></pre></td></tr></table></figure>\n\n<p>重启mysql(<code>sudo service mysql restart</code>)</p>\n<h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><p>mysql默认端口号为3306<br>不建议使用root帐号做远程登录的帐号</p>\n<hr>\n<h2 id=\"安装postgresql，并配置远程用户访问\"><a href=\"#安装postgresql，并配置远程用户访问\" class=\"headerlink\" title=\"安装postgresql，并配置远程用户访问\"></a>安装postgresql，并配置远程用户访问</h2><h3 id=\"更新源列表\"><a href=\"#更新源列表\" class=\"headerlink\" title=\"更新源列表\"></a>更新源列表</h3><pre><code>sudo apt-get update\n</code></pre>\n<h3 id=\"安装postgresql\"><a href=\"#安装postgresql\" class=\"headerlink\" title=\"安装postgresql\"></a>安装postgresql</h3><pre><code>sudo apt-get install postgresql\n</code></pre>\n<p>系统会提示安装所需磁盘空间，输入”y”，安装程序会自动完成。 安装完毕后，系统会创建一个数据库超级用户“postgres”, 密码为空。这个用户既是不可登录的操作系统用户，也是数据库用户。</p>\n<h3 id=\"修改Linux用户postgres的密码\"><a href=\"#修改Linux用户postgres的密码\" class=\"headerlink\" title=\"修改Linux用户postgres的密码\"></a>修改Linux用户postgres的密码</h3><pre><code>sudo passwd postgres\n</code></pre>\n<h3 id=\"修改数据库超级用户postgres的密码\"><a href=\"#修改数据库超级用户postgres的密码\" class=\"headerlink\" title=\"修改数据库超级用户postgres的密码\"></a>修改数据库超级用户postgres的密码</h3><h4 id=\"1-切换到Linux下postgres用户\"><a href=\"#1-切换到Linux下postgres用户\" class=\"headerlink\" title=\"1 切换到Linux下postgres用户\"></a>1 切换到Linux下postgres用户</h4><pre><code>sudo su postgres\n</code></pre>\n<h4 id=\"2-登录postgres数据库\"><a href=\"#2-登录postgres数据库\" class=\"headerlink\" title=\"2 登录postgres数据库\"></a>2 登录postgres数据库</h4><pre><code>psql postgres\n</code></pre>\n<p>这样你就可以看到一下提示信息：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">psql (8.4.4)</span><br><span class=\"line\">Type &quot;help&quot; for help.</span><br></pre></td></tr></table></figure>\n\n<p>并出现postgres的命令提示符号：</p>\n<pre><code>postgres=#\n</code></pre>\n<h4 id=\"ALTER-USER-postgres-with-PASSWORD-39-password-39-键入q返回到Linux命令行。\"><a href=\"#ALTER-USER-postgres-with-PASSWORD-39-password-39-键入q返回到Linux命令行。\" class=\"headerlink\" title=\"ALTER USER postgres with PASSWORD &#39;password&#39;;, 键入q返回到Linux命令行。\"></a><code>ALTER USER postgres with PASSWORD &#39;password&#39;;</code>, 键入<code>q</code>返回到Linux命令行。</h4><h3 id=\"设置其它机器上对postgres的访问\"><a href=\"#设置其它机器上对postgres的访问\" class=\"headerlink\" title=\"设置其它机器上对postgres的访问\"></a>设置其它机器上对postgres的访问</h3><p>修改</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/postgresql/8.4/main/pg_hba.conf:</span><br><span class=\"line\">host all all 0.0.0.0/0 md5  #0.0.0.0</span><br></pre></td></tr></table></figure>\n\n<p>为地址段，0为多少二进制位<br>例如：192.168.0.0&#x2F;16代表192.168.0.1-192.168.255.254<br>修改&#x2F;etc&#x2F;postgresql&#x2F;8.4&#x2F;main&#x2F;postgresql.conf</p>\n<pre><code>listen_address = &#39;*&#39;\n</code></pre>\n<h3 id=\"重启数据库\"><a href=\"#重启数据库\" class=\"headerlink\" title=\"重启数据库\"></a>重启数据库</h3><pre><code>sudo /etc/init.d/postgresql restart\n</code></pre>\n<h3 id=\"说明-1\"><a href=\"#说明-1\" class=\"headerlink\" title=\"说明\"></a>说明</h3><p>postgresql的默认端口号为5432</p>\n<p>注：配置完成之后，别忘了将服务器主机的防火墙关闭这些端口的防护</p>"},{"title":"Macos使用CapLock切换搜狗输入法","date":"2022-07-10T16:00:00.000Z","_content":"\n\n1、依赖软件：\n\n- Karabiner\n- 搜狗输入法\n\n\n2、实现步骤\n\n(1)停用搜狗输入法的英文输入模式（默认中文，不设置中英文切换快捷键）\n(2)用 Karabiner 改键 CapsLock 为 f18\n(3)系统偏好设置->键盘->快捷键->输入法 配置：\n\n- 选择上一个输入法 F18\n- 选择“输入法”菜单中的下一个输入法 ⌥F18  (同时按下 Option + CapsLock)\n\n\n3、进阶自动切换输入法\n\n- 依赖软件 KeyboardHolder\n","source":"_posts/Macos使用CapLock切换搜狗输入法.md","raw":"---\ntitle: Macos使用CapLock切换搜狗输入法\ndate: 2022-07-11\ntags: [MACOS]\n---\n\n\n1、依赖软件：\n\n- Karabiner\n- 搜狗输入法\n\n\n2、实现步骤\n\n(1)停用搜狗输入法的英文输入模式（默认中文，不设置中英文切换快捷键）\n(2)用 Karabiner 改键 CapsLock 为 f18\n(3)系统偏好设置->键盘->快捷键->输入法 配置：\n\n- 选择上一个输入法 F18\n- 选择“输入法”菜单中的下一个输入法 ⌥F18  (同时按下 Option + CapsLock)\n\n\n3、进阶自动切换输入法\n\n- 依赖软件 KeyboardHolder\n","slug":"Macos使用CapLock切换搜狗输入法","published":1,"updated":"2022-07-12T06:41:39.085Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluqa1hih000rrlog3n151epv","content":"<p>1、依赖软件：</p>\n<ul>\n<li>Karabiner</li>\n<li>搜狗输入法</li>\n</ul>\n<p>2、实现步骤</p>\n<p>(1)停用搜狗输入法的英文输入模式（默认中文，不设置中英文切换快捷键）<br>(2)用 Karabiner 改键 CapsLock 为 f18<br>(3)系统偏好设置-&gt;键盘-&gt;快捷键-&gt;输入法 配置：</p>\n<ul>\n<li>选择上一个输入法 F18</li>\n<li>选择“输入法”菜单中的下一个输入法 ⌥F18  (同时按下 Option + CapsLock)</li>\n</ul>\n<p>3、进阶自动切换输入法</p>\n<ul>\n<li>依赖软件 KeyboardHolder</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>1、依赖软件：</p>\n<ul>\n<li>Karabiner</li>\n<li>搜狗输入法</li>\n</ul>\n<p>2、实现步骤</p>\n<p>(1)停用搜狗输入法的英文输入模式（默认中文，不设置中英文切换快捷键）<br>(2)用 Karabiner 改键 CapsLock 为 f18<br>(3)系统偏好设置-&gt;键盘-&gt;快捷键-&gt;输入法 配置：</p>\n<ul>\n<li>选择上一个输入法 F18</li>\n<li>选择“输入法”菜单中的下一个输入法 ⌥F18  (同时按下 Option + CapsLock)</li>\n</ul>\n<p>3、进阶自动切换输入法</p>\n<ul>\n<li>依赖软件 KeyboardHolder</li>\n</ul>\n"},{"title":"Mysql主从复制搭建","date":"2024-04-06T16:00:00.000Z","_content":"\n\n1 备份源库\n\n```\n./bin/mysqldump -u root -pmysql --single-transaction -A -R -E --triggers --master-data=2 --flush-logs > full.sql\n```\n\n备份完成后，记录文件中 `CHANGE MASTER TO MASTER_LOG_FILE='mysql-bin.000002', MASTER_LOG_POS=154;`\n\n\n\n2 修改源和目标的mysql配置（service-id 主从不能相同）：\n\n\n\n```\n[mysqld]\n\nserver-id = 11\nlog-bin = mysql-bin\nbinlog_format = ROW\n```\n\n\n\n3 重启主从\n\n```\nservice mysqld restart\n```\n\n4 生产端创建复制用户\n\n```mysql\ncreate user repl@'%' identified by 'repl@admin!123';\ngrant REPLICATION SLAVE on *.* to 'repl'@'%';\nflush privileges;\n```\n\n5 目标端全局恢复\n\n6 目标端配置复制连接\n\nMySQL8.0默认使用caching_sha2_password身份验证插件需要指定get_master_public_key=1\n\n```mysql\nchange master to master_host='192.168.2.181',master_user='repl',master_password='repl@admin!123',master_port=3306,MASTER_LOG_FILE='mysql-bin.000002', MASTER_LOG_POS=154;\n```\n\n7 启动复制\n\n```\nstart slave\n```\n\n8 查看复制状态\n\n```\nshow slave status \\G\n```\n\n输出：\n\n\n\n```\n*************************** 1. row ***************************\n               Slave_IO_State: Waiting for master to send event\n                  Master_Host: 192.168.2.181\n                  Master_User: repl\n                  Master_Port: 3306\n                Connect_Retry: 60\n              Master_Log_File: mysql-bin.000002\n          Read_Master_Log_Pos: 154\n               Relay_Log_File: debian11-181-relay-bin.000002\n                Relay_Log_Pos: 320\n        Relay_Master_Log_File: mysql-bin.000002\n             Slave_IO_Running: Yes\n            Slave_SQL_Running: Yes\n            ...\n```\n\n则主从复制搭建完毕\n","source":"_posts/Mysql主从复制搭建.md","raw":"---\ntitle: Mysql主从复制搭建\ndate: 2024-04-07\ntags: [数据库, mysql]\n---\n\n\n1 备份源库\n\n```\n./bin/mysqldump -u root -pmysql --single-transaction -A -R -E --triggers --master-data=2 --flush-logs > full.sql\n```\n\n备份完成后，记录文件中 `CHANGE MASTER TO MASTER_LOG_FILE='mysql-bin.000002', MASTER_LOG_POS=154;`\n\n\n\n2 修改源和目标的mysql配置（service-id 主从不能相同）：\n\n\n\n```\n[mysqld]\n\nserver-id = 11\nlog-bin = mysql-bin\nbinlog_format = ROW\n```\n\n\n\n3 重启主从\n\n```\nservice mysqld restart\n```\n\n4 生产端创建复制用户\n\n```mysql\ncreate user repl@'%' identified by 'repl@admin!123';\ngrant REPLICATION SLAVE on *.* to 'repl'@'%';\nflush privileges;\n```\n\n5 目标端全局恢复\n\n6 目标端配置复制连接\n\nMySQL8.0默认使用caching_sha2_password身份验证插件需要指定get_master_public_key=1\n\n```mysql\nchange master to master_host='192.168.2.181',master_user='repl',master_password='repl@admin!123',master_port=3306,MASTER_LOG_FILE='mysql-bin.000002', MASTER_LOG_POS=154;\n```\n\n7 启动复制\n\n```\nstart slave\n```\n\n8 查看复制状态\n\n```\nshow slave status \\G\n```\n\n输出：\n\n\n\n```\n*************************** 1. row ***************************\n               Slave_IO_State: Waiting for master to send event\n                  Master_Host: 192.168.2.181\n                  Master_User: repl\n                  Master_Port: 3306\n                Connect_Retry: 60\n              Master_Log_File: mysql-bin.000002\n          Read_Master_Log_Pos: 154\n               Relay_Log_File: debian11-181-relay-bin.000002\n                Relay_Log_Pos: 320\n        Relay_Master_Log_File: mysql-bin.000002\n             Slave_IO_Running: Yes\n            Slave_SQL_Running: Yes\n            ...\n```\n\n则主从复制搭建完毕\n","slug":"Mysql主从复制搭建","published":1,"updated":"2024-04-07T07:55:37.612Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluqa1hii000trlog949c3uur","content":"<p>1 备份源库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./bin/mysqldump -u root -pmysql --single-transaction -A -R -E --triggers --master-data=2 --flush-logs &gt; full.sql</span><br></pre></td></tr></table></figure>\n\n<p>备份完成后，记录文件中 <code>CHANGE MASTER TO MASTER_LOG_FILE=&#39;mysql-bin.000002&#39;, MASTER_LOG_POS=154;</code></p>\n<p>2 修改源和目标的mysql配置（service-id 主从不能相同）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\"></span><br><span class=\"line\">server-id = 11</span><br><span class=\"line\">log-bin = mysql-bin</span><br><span class=\"line\">binlog_format = ROW</span><br></pre></td></tr></table></figure>\n\n\n\n<p>3 重启主从</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service mysqld restart</span><br></pre></td></tr></table></figure>\n\n<p>4 生产端创建复制用户</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create user repl@&#x27;%&#x27; identified by &#x27;repl@admin!123&#x27;;</span><br><span class=\"line\">grant REPLICATION SLAVE on *.* to &#x27;repl&#x27;@&#x27;%&#x27;;</span><br><span class=\"line\">flush privileges;</span><br></pre></td></tr></table></figure>\n\n<p>5 目标端全局恢复</p>\n<p>6 目标端配置复制连接</p>\n<p>MySQL8.0默认使用caching_sha2_password身份验证插件需要指定get_master_public_key&#x3D;1</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">change master to master_host=&#x27;192.168.2.181&#x27;,master_user=&#x27;repl&#x27;,master_password=&#x27;repl@admin!123&#x27;,master_port=3306,MASTER_LOG_FILE=&#x27;mysql-bin.000002&#x27;, MASTER_LOG_POS=154;</span><br></pre></td></tr></table></figure>\n\n<p>7 启动复制</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">start slave</span><br></pre></td></tr></table></figure>\n\n<p>8 查看复制状态</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show slave status \\G</span><br></pre></td></tr></table></figure>\n\n<p>输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*************************** 1. row ***************************</span><br><span class=\"line\">               Slave_IO_State: Waiting for master to send event</span><br><span class=\"line\">                  Master_Host: 192.168.2.181</span><br><span class=\"line\">                  Master_User: repl</span><br><span class=\"line\">                  Master_Port: 3306</span><br><span class=\"line\">                Connect_Retry: 60</span><br><span class=\"line\">              Master_Log_File: mysql-bin.000002</span><br><span class=\"line\">          Read_Master_Log_Pos: 154</span><br><span class=\"line\">               Relay_Log_File: debian11-181-relay-bin.000002</span><br><span class=\"line\">                Relay_Log_Pos: 320</span><br><span class=\"line\">        Relay_Master_Log_File: mysql-bin.000002</span><br><span class=\"line\">             Slave_IO_Running: Yes</span><br><span class=\"line\">            Slave_SQL_Running: Yes</span><br><span class=\"line\">            ...</span><br></pre></td></tr></table></figure>\n\n<p>则主从复制搭建完毕</p>\n","site":{"data":{}},"excerpt":"","more":"<p>1 备份源库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./bin/mysqldump -u root -pmysql --single-transaction -A -R -E --triggers --master-data=2 --flush-logs &gt; full.sql</span><br></pre></td></tr></table></figure>\n\n<p>备份完成后，记录文件中 <code>CHANGE MASTER TO MASTER_LOG_FILE=&#39;mysql-bin.000002&#39;, MASTER_LOG_POS=154;</code></p>\n<p>2 修改源和目标的mysql配置（service-id 主从不能相同）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\"></span><br><span class=\"line\">server-id = 11</span><br><span class=\"line\">log-bin = mysql-bin</span><br><span class=\"line\">binlog_format = ROW</span><br></pre></td></tr></table></figure>\n\n\n\n<p>3 重启主从</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service mysqld restart</span><br></pre></td></tr></table></figure>\n\n<p>4 生产端创建复制用户</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create user repl@&#x27;%&#x27; identified by &#x27;repl@admin!123&#x27;;</span><br><span class=\"line\">grant REPLICATION SLAVE on *.* to &#x27;repl&#x27;@&#x27;%&#x27;;</span><br><span class=\"line\">flush privileges;</span><br></pre></td></tr></table></figure>\n\n<p>5 目标端全局恢复</p>\n<p>6 目标端配置复制连接</p>\n<p>MySQL8.0默认使用caching_sha2_password身份验证插件需要指定get_master_public_key&#x3D;1</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">change master to master_host=&#x27;192.168.2.181&#x27;,master_user=&#x27;repl&#x27;,master_password=&#x27;repl@admin!123&#x27;,master_port=3306,MASTER_LOG_FILE=&#x27;mysql-bin.000002&#x27;, MASTER_LOG_POS=154;</span><br></pre></td></tr></table></figure>\n\n<p>7 启动复制</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">start slave</span><br></pre></td></tr></table></figure>\n\n<p>8 查看复制状态</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show slave status \\G</span><br></pre></td></tr></table></figure>\n\n<p>输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*************************** 1. row ***************************</span><br><span class=\"line\">               Slave_IO_State: Waiting for master to send event</span><br><span class=\"line\">                  Master_Host: 192.168.2.181</span><br><span class=\"line\">                  Master_User: repl</span><br><span class=\"line\">                  Master_Port: 3306</span><br><span class=\"line\">                Connect_Retry: 60</span><br><span class=\"line\">              Master_Log_File: mysql-bin.000002</span><br><span class=\"line\">          Read_Master_Log_Pos: 154</span><br><span class=\"line\">               Relay_Log_File: debian11-181-relay-bin.000002</span><br><span class=\"line\">                Relay_Log_Pos: 320</span><br><span class=\"line\">        Relay_Master_Log_File: mysql-bin.000002</span><br><span class=\"line\">             Slave_IO_Running: Yes</span><br><span class=\"line\">            Slave_SQL_Running: Yes</span><br><span class=\"line\">            ...</span><br></pre></td></tr></table></figure>\n\n<p>则主从复制搭建完毕</p>\n"},{"title":"Mysql数据库搭建","date":"2024-04-06T16:00:00.000Z","_content":"\n\n下载介质：https://downloads.mysql.com/archives/community/\n\n\n\n1 解压Mysql压缩包到/usr/local/mysql下：\n\n```\ntar -zxvf mysql_5.7.44_linux_x86_64.tar.gz -C /usr/local/\ncd /usr/local/\nmv mysql-5.7.44-linux-glibc2.12-x86_64 mysql\n```\n\n2 创建mysql用户组及其用户\n\nuseradd -g表示把mysql用户添加到mysql用户组中\n\n\n\n```\ngroupadd mysql\nuseradd -g mysql mysql\n```\n\n3 创建data目录和tmp目录\n\n```\nmkdir /usr/local/mysql/data\nmkdir /usr/local/mysql/tmp\n```\n\n4 初始化MySQL配置表\n\n```\ncd /usr/local/mysql\nbin/mysqld --initialize --user=mysql --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data  \n```\n\n初始化之后，会在最后一行看到root账号的初始密码。\n\n有可能报`bin/mysqld: error while loading shared libraries: libaio.so.1: cannot open shared object file: No such file or directory`错误。需要安装libaio\n\n```\n# centos\nyum install -y libaio numactl\n\n# debian\napt install libaio-dev\n```\n\n5 创建配置文件/etc/my.cnf\n\n创建配置文件，并写入以下内容：\n\n```\n[client]\nsocket = /usr/local/mysql/tmp/mysql.sock\n\n[mysqld]\nbasedir = /usr/local/mysql\ndatadir = /usr/local/mysql/data\nport = 3306\nsocket = /usr/local/mysql/tmp/mysql.sock\n\nsql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES\n```\n\n6 更改文件权限\n\n```\nchown -R mysql /usr/local/mysql/data\nchown -R mysql /usr/local/mysql/tmp\n```\n\n7 启动Mysql服务（这步可以不做）\n\n```\n./bin/mysqld --defaults-file=/etc/my.cnf --user=mysql --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data\n```\n\n输出，则表示Mysql服务配置成功：\n\n\n<!-- more -->\n\n\n```\n2024-04-03T08:53:44.133293Z 0 [Note] Skipping generation of RSA key pair as key files are present in data directory.\n2024-04-03T08:53:44.134295Z 0 [Note] Server hostname (bind-address): '*'; port: 3306\n2024-04-03T08:53:44.134347Z 0 [Note] IPv6 is available.\n2024-04-03T08:53:44.134355Z 0 [Note]   - '::' resolves to '::';\n2024-04-03T08:53:44.134380Z 0 [Note] Server socket created on IP: '::'.\n```\n\n8 建立软连接\n\n```\nln -s /usr/local/mysql/bin/mysql  /usr/local/bin\nln -s /usr/local/mysql/bin/mysqladmin  /usr/local/bin\nln -s /usr/local/mysql/bin/mysqld_safe  /usr/local/bin\n```\n\n9 mysqld服务加入开机自启动项\n\n把mysql下的support-files/mysql.server服务脚本放到系统服务，并设置运行权限\n\n```\ncp support-files/mysql.server /etc/init.d/mysqld\nchmod +x /etc/init.d/mysqld\n/etc/init.d/mysqld start\n```\n\n这样就可以使用`service mysqld start`启动服务。\n\n10 修改Mysql密码\n\n使用mysql连接数据库，密码为初始化MySQL配置时，输出的root初始密码：\n\n```\nmysql -u root -p\nmysql> alter user root@localhost identified by 'mysql';\n```\n\n说明：如果使用mysql命令报错：`mysql: error while loading shared libraries: libncurses.so.5: cannot open shared object file: No such file or directory` 则需要安装相关依赖：\n\n\n\n```bash\n# centos\n\nyum install -y ncurses-compat-libs\n\n# debian\napt install libncurses5\n```\n\n\n\n补充：\n\n如果在初始化 MySQL 数据库后忘记了 root 用户的密码，通过以下步骤重置：\n\n\n\n- 1 停止正在运行的 MySQL 服务: `service mysqld stop`\n- 2 安全模式启动 MySQL 服务: `./bin/mysqld_safe --skip-grant-tables --skip-networking &`\n- 3 不需要密码就能以 root 用户身份登录到 MySQL 了：`mysql -u root `\n- 4 不需要密码就能以 root 用户身份登录到 MySQL 了：\n\n```\nFLUSH PRIVILEGES;\nALTER USER 'root'@'localhost' IDENTIFIED BY 'mysql';\n```\n\n- 5 需要退出 MySQL 命令行，然后停止安全模式下的 MySQL 服务，再以正常模式启动 MySQL 服务:\n\n```\n# 需要输入新设置的密码，这里示例设置的是mysql\n./bin/mysqladmin -u root -p shutdown\n\n# 启动mysql服务\nservice mysqld start\n```\n","source":"_posts/Mysql数据库搭建.md","raw":"---\ntitle: Mysql数据库搭建\ndate: 2024-04-07\ntags: [数据库, mysql]\n---\n\n\n下载介质：https://downloads.mysql.com/archives/community/\n\n\n\n1 解压Mysql压缩包到/usr/local/mysql下：\n\n```\ntar -zxvf mysql_5.7.44_linux_x86_64.tar.gz -C /usr/local/\ncd /usr/local/\nmv mysql-5.7.44-linux-glibc2.12-x86_64 mysql\n```\n\n2 创建mysql用户组及其用户\n\nuseradd -g表示把mysql用户添加到mysql用户组中\n\n\n\n```\ngroupadd mysql\nuseradd -g mysql mysql\n```\n\n3 创建data目录和tmp目录\n\n```\nmkdir /usr/local/mysql/data\nmkdir /usr/local/mysql/tmp\n```\n\n4 初始化MySQL配置表\n\n```\ncd /usr/local/mysql\nbin/mysqld --initialize --user=mysql --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data  \n```\n\n初始化之后，会在最后一行看到root账号的初始密码。\n\n有可能报`bin/mysqld: error while loading shared libraries: libaio.so.1: cannot open shared object file: No such file or directory`错误。需要安装libaio\n\n```\n# centos\nyum install -y libaio numactl\n\n# debian\napt install libaio-dev\n```\n\n5 创建配置文件/etc/my.cnf\n\n创建配置文件，并写入以下内容：\n\n```\n[client]\nsocket = /usr/local/mysql/tmp/mysql.sock\n\n[mysqld]\nbasedir = /usr/local/mysql\ndatadir = /usr/local/mysql/data\nport = 3306\nsocket = /usr/local/mysql/tmp/mysql.sock\n\nsql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES\n```\n\n6 更改文件权限\n\n```\nchown -R mysql /usr/local/mysql/data\nchown -R mysql /usr/local/mysql/tmp\n```\n\n7 启动Mysql服务（这步可以不做）\n\n```\n./bin/mysqld --defaults-file=/etc/my.cnf --user=mysql --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data\n```\n\n输出，则表示Mysql服务配置成功：\n\n\n<!-- more -->\n\n\n```\n2024-04-03T08:53:44.133293Z 0 [Note] Skipping generation of RSA key pair as key files are present in data directory.\n2024-04-03T08:53:44.134295Z 0 [Note] Server hostname (bind-address): '*'; port: 3306\n2024-04-03T08:53:44.134347Z 0 [Note] IPv6 is available.\n2024-04-03T08:53:44.134355Z 0 [Note]   - '::' resolves to '::';\n2024-04-03T08:53:44.134380Z 0 [Note] Server socket created on IP: '::'.\n```\n\n8 建立软连接\n\n```\nln -s /usr/local/mysql/bin/mysql  /usr/local/bin\nln -s /usr/local/mysql/bin/mysqladmin  /usr/local/bin\nln -s /usr/local/mysql/bin/mysqld_safe  /usr/local/bin\n```\n\n9 mysqld服务加入开机自启动项\n\n把mysql下的support-files/mysql.server服务脚本放到系统服务，并设置运行权限\n\n```\ncp support-files/mysql.server /etc/init.d/mysqld\nchmod +x /etc/init.d/mysqld\n/etc/init.d/mysqld start\n```\n\n这样就可以使用`service mysqld start`启动服务。\n\n10 修改Mysql密码\n\n使用mysql连接数据库，密码为初始化MySQL配置时，输出的root初始密码：\n\n```\nmysql -u root -p\nmysql> alter user root@localhost identified by 'mysql';\n```\n\n说明：如果使用mysql命令报错：`mysql: error while loading shared libraries: libncurses.so.5: cannot open shared object file: No such file or directory` 则需要安装相关依赖：\n\n\n\n```bash\n# centos\n\nyum install -y ncurses-compat-libs\n\n# debian\napt install libncurses5\n```\n\n\n\n补充：\n\n如果在初始化 MySQL 数据库后忘记了 root 用户的密码，通过以下步骤重置：\n\n\n\n- 1 停止正在运行的 MySQL 服务: `service mysqld stop`\n- 2 安全模式启动 MySQL 服务: `./bin/mysqld_safe --skip-grant-tables --skip-networking &`\n- 3 不需要密码就能以 root 用户身份登录到 MySQL 了：`mysql -u root `\n- 4 不需要密码就能以 root 用户身份登录到 MySQL 了：\n\n```\nFLUSH PRIVILEGES;\nALTER USER 'root'@'localhost' IDENTIFIED BY 'mysql';\n```\n\n- 5 需要退出 MySQL 命令行，然后停止安全模式下的 MySQL 服务，再以正常模式启动 MySQL 服务:\n\n```\n# 需要输入新设置的密码，这里示例设置的是mysql\n./bin/mysqladmin -u root -p shutdown\n\n# 启动mysql服务\nservice mysqld start\n```\n","slug":"Mysql数据库搭建","published":1,"updated":"2024-04-07T07:58:25.469Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluqa1hii000wrlogf2sz70up","content":"<p>下载介质：<a href=\"https://downloads.mysql.com/archives/community/\">https://downloads.mysql.com/archives/community/</a></p>\n<p>1 解压Mysql压缩包到&#x2F;usr&#x2F;local&#x2F;mysql下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf mysql_5.7.44_linux_x86_64.tar.gz -C /usr/local/</span><br><span class=\"line\">cd /usr/local/</span><br><span class=\"line\">mv mysql-5.7.44-linux-glibc2.12-x86_64 mysql</span><br></pre></td></tr></table></figure>\n\n<p>2 创建mysql用户组及其用户</p>\n<p>useradd -g表示把mysql用户添加到mysql用户组中</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">groupadd mysql</span><br><span class=\"line\">useradd -g mysql mysql</span><br></pre></td></tr></table></figure>\n\n<p>3 创建data目录和tmp目录</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /usr/local/mysql/data</span><br><span class=\"line\">mkdir /usr/local/mysql/tmp</span><br></pre></td></tr></table></figure>\n\n<p>4 初始化MySQL配置表</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/local/mysql</span><br><span class=\"line\">bin/mysqld --initialize --user=mysql --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data  </span><br></pre></td></tr></table></figure>\n\n<p>初始化之后，会在最后一行看到root账号的初始密码。</p>\n<p>有可能报<code>bin/mysqld: error while loading shared libraries: libaio.so.1: cannot open shared object file: No such file or directory</code>错误。需要安装libaio</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># centos</span><br><span class=\"line\">yum install -y libaio numactl</span><br><span class=\"line\"></span><br><span class=\"line\"># debian</span><br><span class=\"line\">apt install libaio-dev</span><br></pre></td></tr></table></figure>\n\n<p>5 创建配置文件&#x2F;etc&#x2F;my.cnf</p>\n<p>创建配置文件，并写入以下内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[client]</span><br><span class=\"line\">socket = /usr/local/mysql/tmp/mysql.sock</span><br><span class=\"line\"></span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">basedir = /usr/local/mysql</span><br><span class=\"line\">datadir = /usr/local/mysql/data</span><br><span class=\"line\">port = 3306</span><br><span class=\"line\">socket = /usr/local/mysql/tmp/mysql.sock</span><br><span class=\"line\"></span><br><span class=\"line\">sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES</span><br></pre></td></tr></table></figure>\n\n<p>6 更改文件权限</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chown -R mysql /usr/local/mysql/data</span><br><span class=\"line\">chown -R mysql /usr/local/mysql/tmp</span><br></pre></td></tr></table></figure>\n\n<p>7 启动Mysql服务（这步可以不做）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./bin/mysqld --defaults-file=/etc/my.cnf --user=mysql --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data</span><br></pre></td></tr></table></figure>\n\n<p>输出，则表示Mysql服务配置成功：</p>\n<span id=\"more\"></span>\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2024-04-03T08:53:44.133293Z 0 [Note] Skipping generation of RSA key pair as key files are present in data directory.</span><br><span class=\"line\">2024-04-03T08:53:44.134295Z 0 [Note] Server hostname (bind-address): &#x27;*&#x27;; port: 3306</span><br><span class=\"line\">2024-04-03T08:53:44.134347Z 0 [Note] IPv6 is available.</span><br><span class=\"line\">2024-04-03T08:53:44.134355Z 0 [Note]   - &#x27;::&#x27; resolves to &#x27;::&#x27;;</span><br><span class=\"line\">2024-04-03T08:53:44.134380Z 0 [Note] Server socket created on IP: &#x27;::&#x27;.</span><br></pre></td></tr></table></figure>\n\n<p>8 建立软连接</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /usr/local/mysql/bin/mysql  /usr/local/bin</span><br><span class=\"line\">ln -s /usr/local/mysql/bin/mysqladmin  /usr/local/bin</span><br><span class=\"line\">ln -s /usr/local/mysql/bin/mysqld_safe  /usr/local/bin</span><br></pre></td></tr></table></figure>\n\n<p>9 mysqld服务加入开机自启动项</p>\n<p>把mysql下的support-files&#x2F;mysql.server服务脚本放到系统服务，并设置运行权限</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp support-files/mysql.server /etc/init.d/mysqld</span><br><span class=\"line\">chmod +x /etc/init.d/mysqld</span><br><span class=\"line\">/etc/init.d/mysqld start</span><br></pre></td></tr></table></figure>\n\n<p>这样就可以使用<code>service mysqld start</code>启动服务。</p>\n<p>10 修改Mysql密码</p>\n<p>使用mysql连接数据库，密码为初始化MySQL配置时，输出的root初始密码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -u root -p</span><br><span class=\"line\">mysql&gt; alter user root@localhost identified by &#x27;mysql&#x27;;</span><br></pre></td></tr></table></figure>\n\n<p>说明：如果使用mysql命令报错：<code>mysql: error while loading shared libraries: libncurses.so.5: cannot open shared object file: No such file or directory</code> 则需要安装相关依赖：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># centos</span></span><br><span class=\"line\"></span><br><span class=\"line\">yum install -y ncurses-compat-libs</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># debian</span></span><br><span class=\"line\">apt install libncurses5</span><br></pre></td></tr></table></figure>\n\n\n\n<p>补充：</p>\n<p>如果在初始化 MySQL 数据库后忘记了 root 用户的密码，通过以下步骤重置：</p>\n<ul>\n<li>1 停止正在运行的 MySQL 服务: <code>service mysqld stop</code></li>\n<li>2 安全模式启动 MySQL 服务: <code>./bin/mysqld_safe --skip-grant-tables --skip-networking &amp;</code></li>\n<li>3 不需要密码就能以 root 用户身份登录到 MySQL 了：<code>mysql -u root </code></li>\n<li>4 不需要密码就能以 root 用户身份登录到 MySQL 了：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FLUSH PRIVILEGES;</span><br><span class=\"line\">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;mysql&#x27;;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>5 需要退出 MySQL 命令行，然后停止安全模式下的 MySQL 服务，再以正常模式启动 MySQL 服务:</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 需要输入新设置的密码，这里示例设置的是mysql</span><br><span class=\"line\">./bin/mysqladmin -u root -p shutdown</span><br><span class=\"line\"></span><br><span class=\"line\"># 启动mysql服务</span><br><span class=\"line\">service mysqld start</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>下载介质：<a href=\"https://downloads.mysql.com/archives/community/\">https://downloads.mysql.com/archives/community/</a></p>\n<p>1 解压Mysql压缩包到&#x2F;usr&#x2F;local&#x2F;mysql下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf mysql_5.7.44_linux_x86_64.tar.gz -C /usr/local/</span><br><span class=\"line\">cd /usr/local/</span><br><span class=\"line\">mv mysql-5.7.44-linux-glibc2.12-x86_64 mysql</span><br></pre></td></tr></table></figure>\n\n<p>2 创建mysql用户组及其用户</p>\n<p>useradd -g表示把mysql用户添加到mysql用户组中</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">groupadd mysql</span><br><span class=\"line\">useradd -g mysql mysql</span><br></pre></td></tr></table></figure>\n\n<p>3 创建data目录和tmp目录</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /usr/local/mysql/data</span><br><span class=\"line\">mkdir /usr/local/mysql/tmp</span><br></pre></td></tr></table></figure>\n\n<p>4 初始化MySQL配置表</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/local/mysql</span><br><span class=\"line\">bin/mysqld --initialize --user=mysql --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data  </span><br></pre></td></tr></table></figure>\n\n<p>初始化之后，会在最后一行看到root账号的初始密码。</p>\n<p>有可能报<code>bin/mysqld: error while loading shared libraries: libaio.so.1: cannot open shared object file: No such file or directory</code>错误。需要安装libaio</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># centos</span><br><span class=\"line\">yum install -y libaio numactl</span><br><span class=\"line\"></span><br><span class=\"line\"># debian</span><br><span class=\"line\">apt install libaio-dev</span><br></pre></td></tr></table></figure>\n\n<p>5 创建配置文件&#x2F;etc&#x2F;my.cnf</p>\n<p>创建配置文件，并写入以下内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[client]</span><br><span class=\"line\">socket = /usr/local/mysql/tmp/mysql.sock</span><br><span class=\"line\"></span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">basedir = /usr/local/mysql</span><br><span class=\"line\">datadir = /usr/local/mysql/data</span><br><span class=\"line\">port = 3306</span><br><span class=\"line\">socket = /usr/local/mysql/tmp/mysql.sock</span><br><span class=\"line\"></span><br><span class=\"line\">sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES</span><br></pre></td></tr></table></figure>\n\n<p>6 更改文件权限</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chown -R mysql /usr/local/mysql/data</span><br><span class=\"line\">chown -R mysql /usr/local/mysql/tmp</span><br></pre></td></tr></table></figure>\n\n<p>7 启动Mysql服务（这步可以不做）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./bin/mysqld --defaults-file=/etc/my.cnf --user=mysql --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data</span><br></pre></td></tr></table></figure>\n\n<p>输出，则表示Mysql服务配置成功：</p>","more":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2024-04-03T08:53:44.133293Z 0 [Note] Skipping generation of RSA key pair as key files are present in data directory.</span><br><span class=\"line\">2024-04-03T08:53:44.134295Z 0 [Note] Server hostname (bind-address): &#x27;*&#x27;; port: 3306</span><br><span class=\"line\">2024-04-03T08:53:44.134347Z 0 [Note] IPv6 is available.</span><br><span class=\"line\">2024-04-03T08:53:44.134355Z 0 [Note]   - &#x27;::&#x27; resolves to &#x27;::&#x27;;</span><br><span class=\"line\">2024-04-03T08:53:44.134380Z 0 [Note] Server socket created on IP: &#x27;::&#x27;.</span><br></pre></td></tr></table></figure>\n\n<p>8 建立软连接</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /usr/local/mysql/bin/mysql  /usr/local/bin</span><br><span class=\"line\">ln -s /usr/local/mysql/bin/mysqladmin  /usr/local/bin</span><br><span class=\"line\">ln -s /usr/local/mysql/bin/mysqld_safe  /usr/local/bin</span><br></pre></td></tr></table></figure>\n\n<p>9 mysqld服务加入开机自启动项</p>\n<p>把mysql下的support-files&#x2F;mysql.server服务脚本放到系统服务，并设置运行权限</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp support-files/mysql.server /etc/init.d/mysqld</span><br><span class=\"line\">chmod +x /etc/init.d/mysqld</span><br><span class=\"line\">/etc/init.d/mysqld start</span><br></pre></td></tr></table></figure>\n\n<p>这样就可以使用<code>service mysqld start</code>启动服务。</p>\n<p>10 修改Mysql密码</p>\n<p>使用mysql连接数据库，密码为初始化MySQL配置时，输出的root初始密码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -u root -p</span><br><span class=\"line\">mysql&gt; alter user root@localhost identified by &#x27;mysql&#x27;;</span><br></pre></td></tr></table></figure>\n\n<p>说明：如果使用mysql命令报错：<code>mysql: error while loading shared libraries: libncurses.so.5: cannot open shared object file: No such file or directory</code> 则需要安装相关依赖：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># centos</span></span><br><span class=\"line\"></span><br><span class=\"line\">yum install -y ncurses-compat-libs</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># debian</span></span><br><span class=\"line\">apt install libncurses5</span><br></pre></td></tr></table></figure>\n\n\n\n<p>补充：</p>\n<p>如果在初始化 MySQL 数据库后忘记了 root 用户的密码，通过以下步骤重置：</p>\n<ul>\n<li>1 停止正在运行的 MySQL 服务: <code>service mysqld stop</code></li>\n<li>2 安全模式启动 MySQL 服务: <code>./bin/mysqld_safe --skip-grant-tables --skip-networking &amp;</code></li>\n<li>3 不需要密码就能以 root 用户身份登录到 MySQL 了：<code>mysql -u root </code></li>\n<li>4 不需要密码就能以 root 用户身份登录到 MySQL 了：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FLUSH PRIVILEGES;</span><br><span class=\"line\">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;mysql&#x27;;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>5 需要退出 MySQL 命令行，然后停止安全模式下的 MySQL 服务，再以正常模式启动 MySQL 服务:</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 需要输入新设置的密码，这里示例设置的是mysql</span><br><span class=\"line\">./bin/mysqladmin -u root -p shutdown</span><br><span class=\"line\"></span><br><span class=\"line\"># 启动mysql服务</span><br><span class=\"line\">service mysqld start</span><br></pre></td></tr></table></figure>"},{"title":"Nginx配置https","date":"2023-11-02T16:00:00.000Z","_content":"\n1、阿里云SSL证书申请\n\n（1）进入免费证书控制台: https://yundun.console.aliyun.com/?p=cas#/certExtend/free\n\n（2）点击证书申请，添加信息\n\n<img src=\"/blog-img/2f437332258223c84eb08b100008ac56.png\" width=\"583\" height=\"433\">\n\n(3) 提交审核通过后，在列表界面点击下载;上传证书到服务器，我的证书存放地址在/etc/nginx/cert/中\n\n2、在 /etc/nginx/sites-enabled/ 目录下创建 对应的域名配置，我这里配置的是gitea.conf，复制一下内容并修改对应的域名和证书名称；\n\n```nginx\nserver {\n    listen       443 ssl;\n\n    server_name gitea.wangzhiwen.top;\n\n    server_name_in_redirect off;\n    proxy_set_header Host $host:$server_port;\n    proxy_set_header X-Real-IP $remote_addr;\n    proxy_set_header REMOTE-HOST $remote_addr;\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\n    ssl_certificate /etc/nginx/cert/8682750_gitea.wangzhiwen.top.pem;\n    ssl_certificate_key /etc/nginx/cert/8682750_gitea.wangzhiwen.top.key;\n    ssl_session_timeout 5m;\n    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;\n    #表示使用的加密套件的类型。\n    ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3; #表示使用的TLS协议的类型，您需要自行评估是否配置TLSv1.1协议。\n    ssl_prefer_server_ciphers on;\n\n    location / {\n        proxy_pass http://localhost:3000;\n        proxy_redirect default;\n    }\n}\n\nserver {\n    listen       80;\n    server_name  gitea.wangzhiwen.top;\n    return 301 https://$server_name$request_uri;\n}\n```\n\n配置文件中有两个server，第一个为监听的443端口https服务，第二个为监听80端口，将http请求转发到https。\n\nnginx配置说明：\n\n- `listen` 监听的端口\n- `server_name` 监听的域名\n- `proxy_set_header` Nginx代理转发的header信息\n- `ssl_certificate` pem文件路径\n- `ssl_certificate_key` key文件路径\n- `location` 地址定向，数据缓存，应答控制，以及第三方模块的配置\n\n","source":"_posts/Nginx配置https.md","raw":"---\ntitle: Nginx配置https\ndate: 2023-11-03\ntags: [Linux, Nginx]\n---\n\n1、阿里云SSL证书申请\n\n（1）进入免费证书控制台: https://yundun.console.aliyun.com/?p=cas#/certExtend/free\n\n（2）点击证书申请，添加信息\n\n<img src=\"/blog-img/2f437332258223c84eb08b100008ac56.png\" width=\"583\" height=\"433\">\n\n(3) 提交审核通过后，在列表界面点击下载;上传证书到服务器，我的证书存放地址在/etc/nginx/cert/中\n\n2、在 /etc/nginx/sites-enabled/ 目录下创建 对应的域名配置，我这里配置的是gitea.conf，复制一下内容并修改对应的域名和证书名称；\n\n```nginx\nserver {\n    listen       443 ssl;\n\n    server_name gitea.wangzhiwen.top;\n\n    server_name_in_redirect off;\n    proxy_set_header Host $host:$server_port;\n    proxy_set_header X-Real-IP $remote_addr;\n    proxy_set_header REMOTE-HOST $remote_addr;\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\n    ssl_certificate /etc/nginx/cert/8682750_gitea.wangzhiwen.top.pem;\n    ssl_certificate_key /etc/nginx/cert/8682750_gitea.wangzhiwen.top.key;\n    ssl_session_timeout 5m;\n    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;\n    #表示使用的加密套件的类型。\n    ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3; #表示使用的TLS协议的类型，您需要自行评估是否配置TLSv1.1协议。\n    ssl_prefer_server_ciphers on;\n\n    location / {\n        proxy_pass http://localhost:3000;\n        proxy_redirect default;\n    }\n}\n\nserver {\n    listen       80;\n    server_name  gitea.wangzhiwen.top;\n    return 301 https://$server_name$request_uri;\n}\n```\n\n配置文件中有两个server，第一个为监听的443端口https服务，第二个为监听80端口，将http请求转发到https。\n\nnginx配置说明：\n\n- `listen` 监听的端口\n- `server_name` 监听的域名\n- `proxy_set_header` Nginx代理转发的header信息\n- `ssl_certificate` pem文件路径\n- `ssl_certificate_key` key文件路径\n- `location` 地址定向，数据缓存，应答控制，以及第三方模块的配置\n\n","slug":"Nginx配置https","published":1,"updated":"2023-11-03T09:30:54.186Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluqa1hij000yrlog8oyz9svr","content":"<p>1、阿里云SSL证书申请</p>\n<p>（1）进入免费证书控制台: <a href=\"https://yundun.console.aliyun.com/?p=cas#/certExtend/free\">https://yundun.console.aliyun.com/?p=cas#/certExtend/free</a></p>\n<p>（2）点击证书申请，添加信息</p>\n<img src=\"/blog-img/2f437332258223c84eb08b100008ac56.png\" width=\"583\" height=\"433\">\n\n<p>(3) 提交审核通过后，在列表界面点击下载;上传证书到服务器，我的证书存放地址在&#x2F;etc&#x2F;nginx&#x2F;cert&#x2F;中</p>\n<p>2、在 &#x2F;etc&#x2F;nginx&#x2F;sites-enabled&#x2F; 目录下创建 对应的域名配置，我这里配置的是gitea.conf，复制一下内容并修改对应的域名和证书名称；</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span>       <span class=\"number\">443</span> ssl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> gitea.wangzhiwen.top;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">server_name_in_redirect</span> <span class=\"literal\">off</span>;</span><br><span class=\"line\">    <span class=\"attribute\">proxy_set_header</span> Host <span class=\"variable\">$host</span>:<span class=\"variable\">$server_port</span>;</span><br><span class=\"line\">    <span class=\"attribute\">proxy_set_header</span> X-Real-IP <span class=\"variable\">$remote_addr</span>;</span><br><span class=\"line\">    <span class=\"attribute\">proxy_set_header</span> REMOTE-HOST <span class=\"variable\">$remote_addr</span>;</span><br><span class=\"line\">    <span class=\"attribute\">proxy_set_header</span> X-Forwarded-For <span class=\"variable\">$proxy_add_x_forwarded_for</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate</span> /etc/nginx/cert/8682750_gitea.wangzhiwen.top.pem;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate_key</span> /etc/nginx/cert/8682750_gitea.wangzhiwen.top.key;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_session_timeout</span> <span class=\"number\">5m</span>;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_ciphers</span> ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class=\"line\">    <span class=\"comment\">#表示使用的加密套件的类型。</span></span><br><span class=\"line\">    <span class=\"attribute\">ssl_protocols</span> TLSv1.<span class=\"number\">1</span> TLSv1.<span class=\"number\">2</span> TLSv1.<span class=\"number\">3</span>; <span class=\"comment\">#表示使用的TLS协议的类型，您需要自行评估是否配置TLSv1.1协议。</span></span><br><span class=\"line\">    <span class=\"attribute\">ssl_prefer_server_ciphers</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"section\">location</span> / &#123;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_pass</span> http://localhost:3000;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_redirect</span> default;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span>       <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span>  gitea.wangzhiwen.top;</span><br><span class=\"line\">    <span class=\"attribute\">return</span> <span class=\"number\">301</span> https://<span class=\"variable\">$server_name</span><span class=\"variable\">$request_uri</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>配置文件中有两个server，第一个为监听的443端口https服务，第二个为监听80端口，将http请求转发到https。</p>\n<p>nginx配置说明：</p>\n<ul>\n<li><code>listen</code> 监听的端口</li>\n<li><code>server_name</code> 监听的域名</li>\n<li><code>proxy_set_header</code> Nginx代理转发的header信息</li>\n<li><code>ssl_certificate</code> pem文件路径</li>\n<li><code>ssl_certificate_key</code> key文件路径</li>\n<li><code>location</code> 地址定向，数据缓存，应答控制，以及第三方模块的配置</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>1、阿里云SSL证书申请</p>\n<p>（1）进入免费证书控制台: <a href=\"https://yundun.console.aliyun.com/?p=cas#/certExtend/free\">https://yundun.console.aliyun.com/?p=cas#/certExtend/free</a></p>\n<p>（2）点击证书申请，添加信息</p>\n<img src=\"/blog-img/2f437332258223c84eb08b100008ac56.png\" width=\"583\" height=\"433\">\n\n<p>(3) 提交审核通过后，在列表界面点击下载;上传证书到服务器，我的证书存放地址在&#x2F;etc&#x2F;nginx&#x2F;cert&#x2F;中</p>\n<p>2、在 &#x2F;etc&#x2F;nginx&#x2F;sites-enabled&#x2F; 目录下创建 对应的域名配置，我这里配置的是gitea.conf，复制一下内容并修改对应的域名和证书名称；</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span>       <span class=\"number\">443</span> ssl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> gitea.wangzhiwen.top;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">server_name_in_redirect</span> <span class=\"literal\">off</span>;</span><br><span class=\"line\">    <span class=\"attribute\">proxy_set_header</span> Host <span class=\"variable\">$host</span>:<span class=\"variable\">$server_port</span>;</span><br><span class=\"line\">    <span class=\"attribute\">proxy_set_header</span> X-Real-IP <span class=\"variable\">$remote_addr</span>;</span><br><span class=\"line\">    <span class=\"attribute\">proxy_set_header</span> REMOTE-HOST <span class=\"variable\">$remote_addr</span>;</span><br><span class=\"line\">    <span class=\"attribute\">proxy_set_header</span> X-Forwarded-For <span class=\"variable\">$proxy_add_x_forwarded_for</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate</span> /etc/nginx/cert/8682750_gitea.wangzhiwen.top.pem;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate_key</span> /etc/nginx/cert/8682750_gitea.wangzhiwen.top.key;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_session_timeout</span> <span class=\"number\">5m</span>;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_ciphers</span> ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class=\"line\">    <span class=\"comment\">#表示使用的加密套件的类型。</span></span><br><span class=\"line\">    <span class=\"attribute\">ssl_protocols</span> TLSv1.<span class=\"number\">1</span> TLSv1.<span class=\"number\">2</span> TLSv1.<span class=\"number\">3</span>; <span class=\"comment\">#表示使用的TLS协议的类型，您需要自行评估是否配置TLSv1.1协议。</span></span><br><span class=\"line\">    <span class=\"attribute\">ssl_prefer_server_ciphers</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"section\">location</span> / &#123;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_pass</span> http://localhost:3000;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_redirect</span> default;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span>       <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span>  gitea.wangzhiwen.top;</span><br><span class=\"line\">    <span class=\"attribute\">return</span> <span class=\"number\">301</span> https://<span class=\"variable\">$server_name</span><span class=\"variable\">$request_uri</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>配置文件中有两个server，第一个为监听的443端口https服务，第二个为监听80端口，将http请求转发到https。</p>\n<p>nginx配置说明：</p>\n<ul>\n<li><code>listen</code> 监听的端口</li>\n<li><code>server_name</code> 监听的域名</li>\n<li><code>proxy_set_header</code> Nginx代理转发的header信息</li>\n<li><code>ssl_certificate</code> pem文件路径</li>\n<li><code>ssl_certificate_key</code> key文件路径</li>\n<li><code>location</code> 地址定向，数据缓存，应答控制，以及第三方模块的配置</li>\n</ul>\n"},{"title":"PG异步流复制搭建步骤","date":"2022-12-04T16:00:00.000Z","_content":"说明：\n- 测试主库IP: 10.211.55.4;\n- 备库IP: 10.211.55.5;\n- PG数据目录/pg/PG14.4/data/ye\n\n## 主库操作部分\n\n### 1、创建复制用户\n\n```\npostgres=# create user repl replication password 'Abcd321#';\nCREATE ROLE\n```\n\n### 2、修改主库 pg_hba.conf 白名单文件\n\n将用于流复制数据同步的 repl 用户，添加至 /pg/PG14.4/data/pg_hba.conf 文件中\n\n```\nshell> vi /pg/PG14.4/data/pg_hba.conf\nhost replication repl 10.211.55.5/32 md5\n```\n\nrepl 用户添加之后，及时手动进行生效\n\n```\nshell> pg_ctl reload\nserver signaled\n```\n\n### 3、修改参数文件\n\n<!--more-->\n\n修改主库参数文件，添加异步流复制配置相关参数，如下：\n\n```\nvi /pg/PG14.4/data/postgresql.conf\n# 这个一般安装服务器之后都会进行配置，检查下。设置为*就运行所有 ip，因为前面 pg_hba.conf 文件中做了对于 IP 的限制，所以这里就设置为*\nlisten_addresses = '*'\n# pg_wal 目录中的过去日志文件段的最小大小，备用服务器需要读取它们进行流式传输复制\nwal_keep_size = '1GB'\n# 这个设置了可以最多有几个流复制连接，默认 10\nmax_wal_senders = 32\n# 如果有错误的数据复制，是否向主进行反馈\nhot_standby_feedback = on\n```\n\n异步流复制参数设置完成后，需手动重启实例\n\n```\nshell> pg_ctl restart\n```\n\n**注意：其中只有 listen_address 参数设置需要重启生效，对于其他参数则可以选择` pg_ctl reload` 或者 `select pg_reload_conf();` 方式动态生效即可**\n\n### 4、从库测试连接\n\n```\nshell> psql -h 10.55.211.4 -p 5432 -U repl postgres\n```\n\n## 备库操作\n\n### 1、停止备库 PG 服务并清空 data 目录\n\n检查 PG 数据目录，并手动关闭 PG 实例，最后再清空$PGDATA（对于目标端非新环境等场景）\n\n```\nshell> su – postgres\nshell> cd /pg/PG14.4/data/\nshell> ls -l\nshell> pg_ctl -D /pg/PG14.4/data/ stop\nshell> pg_ctl -D /pg/PG14.4/data/ status\nshell> rm -rf /pg/PG14.4/data/*\n```\n\n### 2、备库远程拷贝主库数据目录\n\n```\nshell> pg_basebackup -h 10.211.55.4 -U repl -D /pg/PG14.4/data/ -X stream -P -R\nPassword: \n33064/33064 kB (100%), 1/1 tablespace\n```\n\n在/pg/PG14.4/data/ 下，会比主库多出一个 backup_label 文件，该文件记录了备份开始时 WAL 日志位置 ，如下：\n\n```\nshell> more /pg/PG14.4/data/backup_label\nSTART WAL LOCATION: 0/2000028 (file 000000010000000000000002)\nCHECKPOINT LOCATION: 0/2000060\nBACKUP METHOD: streamed\nBACKUP FROM: primary\nSTART TIME: 2022-12-05 22:48:40 HKT\nLABEL: pg_basebackup base backup\nSTART TIMELINE: 1\n```\n\n3、配置 postgresql.auto.conf\n\n注意：如果 pg_basebackup 时添加了-R 选项，则可跳过此步，否则必须配置此步骤。\n以下为没有添加-R 选项的配置方法，如下：\n\n```\nshell> vi /pg/PG14.4/data/postgresql.auto.conf\nprimary_conninfo = 'host=10.211.55.4 port=5432 user=repl password=Abcd321#'\nrecovery_target_timeline = 'latest'\n#recovery_min_apply_delay=5ms #应用延迟，有特殊需求可以设置\n```\n\n手动创建 standby.signal 文件\n\n```\nshell> touch /pg/PG14.4/data/standby.signal\n```\n\n### 4、启动备库实例\n\n```\nshell> pg_ctl -D /pg/PG14.4/data/ start\n```\n\n## 验证主备关系\n\n### 1、检查主库与备库角色\n\n在主库执行角色检查，如下：\n```\nshell> pg_controldata | grep 'Database cluster state'\nDatabase cluster state: in production\n```\n\n在备库执行角色检查，如下：\n```\nshell> pg_controldata | grep 'Database cluster state'\nDatabase cluster state: in archive recovery\n```\n\n### 2、在主库上检查同步情况\n\n```\npostgres=# \\x\nExpanded display is on.\npostgres=# select pid,usename,application_name,client_addr,state,sync_state from pg_stat_replication;\n-[ RECORD 1 ]----+------------\npid              | 8470\nusename          | repl\napplication_name | 14/main\nclient_addr      | 10.211.55.4\nstate            | streaming\nsync_state       | async\n```\n\n### 3、在备库检查同步情况\n\n```\npostgres=# \\x\nExpanded display is on.\npostgres=# select * from pg_stat_wal_receiver;\n-[ RECORD 1 ]---------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\npid                   | 94119\nstatus                | streaming\nreceive_start_lsn     | 0/4000000\nreceive_start_tli     | 1\nwritten_lsn           | 0/5000148\nflushed_lsn           | 0/5000148\nreceived_tli          | 1\nlast_msg_send_time    | 2022-12-05 23:50:29.927646+08\nlast_msg_receipt_time | 2022-12-05 23:50:29.755814+08\nlatest_end_lsn        | 0/5000148\nlatest_end_time       | 2022-12-05 23:33:28.264379+08\nslot_name             |\nsender_host           | 10.211.55.5\nsender_port           | 5432\nconninfo              | user=repl password=******** channel_binding=prefer dbname=replication host=10.211.55.5 port=5432 fallback_application_name=14/main sslmode=prefer sslcompression=0 sslsni=1 ssl_min_protocol_version=TLSv1.2 gssencmode=prefer krbsrvname=postgres target_session_attrs=any\n```\n\n","source":"_posts/PG异步流复制搭建步骤.md","raw":"---\ntitle: PG异步流复制搭建步骤\ndate: 2022-12-05\ntags: [数据库, PG]\n\n---\n说明：\n- 测试主库IP: 10.211.55.4;\n- 备库IP: 10.211.55.5;\n- PG数据目录/pg/PG14.4/data/ye\n\n## 主库操作部分\n\n### 1、创建复制用户\n\n```\npostgres=# create user repl replication password 'Abcd321#';\nCREATE ROLE\n```\n\n### 2、修改主库 pg_hba.conf 白名单文件\n\n将用于流复制数据同步的 repl 用户，添加至 /pg/PG14.4/data/pg_hba.conf 文件中\n\n```\nshell> vi /pg/PG14.4/data/pg_hba.conf\nhost replication repl 10.211.55.5/32 md5\n```\n\nrepl 用户添加之后，及时手动进行生效\n\n```\nshell> pg_ctl reload\nserver signaled\n```\n\n### 3、修改参数文件\n\n<!--more-->\n\n修改主库参数文件，添加异步流复制配置相关参数，如下：\n\n```\nvi /pg/PG14.4/data/postgresql.conf\n# 这个一般安装服务器之后都会进行配置，检查下。设置为*就运行所有 ip，因为前面 pg_hba.conf 文件中做了对于 IP 的限制，所以这里就设置为*\nlisten_addresses = '*'\n# pg_wal 目录中的过去日志文件段的最小大小，备用服务器需要读取它们进行流式传输复制\nwal_keep_size = '1GB'\n# 这个设置了可以最多有几个流复制连接，默认 10\nmax_wal_senders = 32\n# 如果有错误的数据复制，是否向主进行反馈\nhot_standby_feedback = on\n```\n\n异步流复制参数设置完成后，需手动重启实例\n\n```\nshell> pg_ctl restart\n```\n\n**注意：其中只有 listen_address 参数设置需要重启生效，对于其他参数则可以选择` pg_ctl reload` 或者 `select pg_reload_conf();` 方式动态生效即可**\n\n### 4、从库测试连接\n\n```\nshell> psql -h 10.55.211.4 -p 5432 -U repl postgres\n```\n\n## 备库操作\n\n### 1、停止备库 PG 服务并清空 data 目录\n\n检查 PG 数据目录，并手动关闭 PG 实例，最后再清空$PGDATA（对于目标端非新环境等场景）\n\n```\nshell> su – postgres\nshell> cd /pg/PG14.4/data/\nshell> ls -l\nshell> pg_ctl -D /pg/PG14.4/data/ stop\nshell> pg_ctl -D /pg/PG14.4/data/ status\nshell> rm -rf /pg/PG14.4/data/*\n```\n\n### 2、备库远程拷贝主库数据目录\n\n```\nshell> pg_basebackup -h 10.211.55.4 -U repl -D /pg/PG14.4/data/ -X stream -P -R\nPassword: \n33064/33064 kB (100%), 1/1 tablespace\n```\n\n在/pg/PG14.4/data/ 下，会比主库多出一个 backup_label 文件，该文件记录了备份开始时 WAL 日志位置 ，如下：\n\n```\nshell> more /pg/PG14.4/data/backup_label\nSTART WAL LOCATION: 0/2000028 (file 000000010000000000000002)\nCHECKPOINT LOCATION: 0/2000060\nBACKUP METHOD: streamed\nBACKUP FROM: primary\nSTART TIME: 2022-12-05 22:48:40 HKT\nLABEL: pg_basebackup base backup\nSTART TIMELINE: 1\n```\n\n3、配置 postgresql.auto.conf\n\n注意：如果 pg_basebackup 时添加了-R 选项，则可跳过此步，否则必须配置此步骤。\n以下为没有添加-R 选项的配置方法，如下：\n\n```\nshell> vi /pg/PG14.4/data/postgresql.auto.conf\nprimary_conninfo = 'host=10.211.55.4 port=5432 user=repl password=Abcd321#'\nrecovery_target_timeline = 'latest'\n#recovery_min_apply_delay=5ms #应用延迟，有特殊需求可以设置\n```\n\n手动创建 standby.signal 文件\n\n```\nshell> touch /pg/PG14.4/data/standby.signal\n```\n\n### 4、启动备库实例\n\n```\nshell> pg_ctl -D /pg/PG14.4/data/ start\n```\n\n## 验证主备关系\n\n### 1、检查主库与备库角色\n\n在主库执行角色检查，如下：\n```\nshell> pg_controldata | grep 'Database cluster state'\nDatabase cluster state: in production\n```\n\n在备库执行角色检查，如下：\n```\nshell> pg_controldata | grep 'Database cluster state'\nDatabase cluster state: in archive recovery\n```\n\n### 2、在主库上检查同步情况\n\n```\npostgres=# \\x\nExpanded display is on.\npostgres=# select pid,usename,application_name,client_addr,state,sync_state from pg_stat_replication;\n-[ RECORD 1 ]----+------------\npid              | 8470\nusename          | repl\napplication_name | 14/main\nclient_addr      | 10.211.55.4\nstate            | streaming\nsync_state       | async\n```\n\n### 3、在备库检查同步情况\n\n```\npostgres=# \\x\nExpanded display is on.\npostgres=# select * from pg_stat_wal_receiver;\n-[ RECORD 1 ]---------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\npid                   | 94119\nstatus                | streaming\nreceive_start_lsn     | 0/4000000\nreceive_start_tli     | 1\nwritten_lsn           | 0/5000148\nflushed_lsn           | 0/5000148\nreceived_tli          | 1\nlast_msg_send_time    | 2022-12-05 23:50:29.927646+08\nlast_msg_receipt_time | 2022-12-05 23:50:29.755814+08\nlatest_end_lsn        | 0/5000148\nlatest_end_time       | 2022-12-05 23:33:28.264379+08\nslot_name             |\nsender_host           | 10.211.55.5\nsender_port           | 5432\nconninfo              | user=repl password=******** channel_binding=prefer dbname=replication host=10.211.55.5 port=5432 fallback_application_name=14/main sslmode=prefer sslcompression=0 sslsni=1 ssl_min_protocol_version=TLSv1.2 gssencmode=prefer krbsrvname=postgres target_session_attrs=any\n```\n\n","slug":"PG异步流复制搭建步骤","published":1,"updated":"2022-12-08T02:08:20.527Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluqa1hik0011rlogccsjbfua","content":"<p>说明：</p>\n<ul>\n<li>测试主库IP: 10.211.55.4;</li>\n<li>备库IP: 10.211.55.5;</li>\n<li>PG数据目录&#x2F;pg&#x2F;PG14.4&#x2F;data&#x2F;ye</li>\n</ul>\n<h2 id=\"主库操作部分\"><a href=\"#主库操作部分\" class=\"headerlink\" title=\"主库操作部分\"></a>主库操作部分</h2><h3 id=\"1、创建复制用户\"><a href=\"#1、创建复制用户\" class=\"headerlink\" title=\"1、创建复制用户\"></a>1、创建复制用户</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">postgres=# create user repl replication password &#x27;Abcd321#&#x27;;</span><br><span class=\"line\">CREATE ROLE</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、修改主库-pg-hba-conf-白名单文件\"><a href=\"#2、修改主库-pg-hba-conf-白名单文件\" class=\"headerlink\" title=\"2、修改主库 pg_hba.conf 白名单文件\"></a>2、修改主库 pg_hba.conf 白名单文件</h3><p>将用于流复制数据同步的 repl 用户，添加至 &#x2F;pg&#x2F;PG14.4&#x2F;data&#x2F;pg_hba.conf 文件中</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt; vi /pg/PG14.4/data/pg_hba.conf</span><br><span class=\"line\">host replication repl 10.211.55.5/32 md5</span><br></pre></td></tr></table></figure>\n\n<p>repl 用户添加之后，及时手动进行生效</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt; pg_ctl reload</span><br><span class=\"line\">server signaled</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、修改参数文件\"><a href=\"#3、修改参数文件\" class=\"headerlink\" title=\"3、修改参数文件\"></a>3、修改参数文件</h3><span id=\"more\"></span>\n\n<p>修改主库参数文件，添加异步流复制配置相关参数，如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /pg/PG14.4/data/postgresql.conf</span><br><span class=\"line\"># 这个一般安装服务器之后都会进行配置，检查下。设置为*就运行所有 ip，因为前面 pg_hba.conf 文件中做了对于 IP 的限制，所以这里就设置为*</span><br><span class=\"line\">listen_addresses = &#x27;*&#x27;</span><br><span class=\"line\"># pg_wal 目录中的过去日志文件段的最小大小，备用服务器需要读取它们进行流式传输复制</span><br><span class=\"line\">wal_keep_size = &#x27;1GB&#x27;</span><br><span class=\"line\"># 这个设置了可以最多有几个流复制连接，默认 10</span><br><span class=\"line\">max_wal_senders = 32</span><br><span class=\"line\"># 如果有错误的数据复制，是否向主进行反馈</span><br><span class=\"line\">hot_standby_feedback = on</span><br></pre></td></tr></table></figure>\n\n<p>异步流复制参数设置完成后，需手动重启实例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt; pg_ctl restart</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意：其中只有 listen_address 参数设置需要重启生效，对于其他参数则可以选择<code> pg_ctl reload</code> 或者 <code>select pg_reload_conf();</code> 方式动态生效即可</strong></p>\n<h3 id=\"4、从库测试连接\"><a href=\"#4、从库测试连接\" class=\"headerlink\" title=\"4、从库测试连接\"></a>4、从库测试连接</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt; psql -h 10.55.211.4 -p 5432 -U repl postgres</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"备库操作\"><a href=\"#备库操作\" class=\"headerlink\" title=\"备库操作\"></a>备库操作</h2><h3 id=\"1、停止备库-PG-服务并清空-data-目录\"><a href=\"#1、停止备库-PG-服务并清空-data-目录\" class=\"headerlink\" title=\"1、停止备库 PG 服务并清空 data 目录\"></a>1、停止备库 PG 服务并清空 data 目录</h3><p>检查 PG 数据目录，并手动关闭 PG 实例，最后再清空$PGDATA（对于目标端非新环境等场景）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt; su – postgres</span><br><span class=\"line\">shell&gt; cd /pg/PG14.4/data/</span><br><span class=\"line\">shell&gt; ls -l</span><br><span class=\"line\">shell&gt; pg_ctl -D /pg/PG14.4/data/ stop</span><br><span class=\"line\">shell&gt; pg_ctl -D /pg/PG14.4/data/ status</span><br><span class=\"line\">shell&gt; rm -rf /pg/PG14.4/data/*</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、备库远程拷贝主库数据目录\"><a href=\"#2、备库远程拷贝主库数据目录\" class=\"headerlink\" title=\"2、备库远程拷贝主库数据目录\"></a>2、备库远程拷贝主库数据目录</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt; pg_basebackup -h 10.211.55.4 -U repl -D /pg/PG14.4/data/ -X stream -P -R</span><br><span class=\"line\">Password: </span><br><span class=\"line\">33064/33064 kB (100%), 1/1 tablespace</span><br></pre></td></tr></table></figure>\n\n<p>在&#x2F;pg&#x2F;PG14.4&#x2F;data&#x2F; 下，会比主库多出一个 backup_label 文件，该文件记录了备份开始时 WAL 日志位置 ，如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt; more /pg/PG14.4/data/backup_label</span><br><span class=\"line\">START WAL LOCATION: 0/2000028 (file 000000010000000000000002)</span><br><span class=\"line\">CHECKPOINT LOCATION: 0/2000060</span><br><span class=\"line\">BACKUP METHOD: streamed</span><br><span class=\"line\">BACKUP FROM: primary</span><br><span class=\"line\">START TIME: 2022-12-05 22:48:40 HKT</span><br><span class=\"line\">LABEL: pg_basebackup base backup</span><br><span class=\"line\">START TIMELINE: 1</span><br></pre></td></tr></table></figure>\n\n<p>3、配置 postgresql.auto.conf</p>\n<p>注意：如果 pg_basebackup 时添加了-R 选项，则可跳过此步，否则必须配置此步骤。<br>以下为没有添加-R 选项的配置方法，如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt; vi /pg/PG14.4/data/postgresql.auto.conf</span><br><span class=\"line\">primary_conninfo = &#x27;host=10.211.55.4 port=5432 user=repl password=Abcd321#&#x27;</span><br><span class=\"line\">recovery_target_timeline = &#x27;latest&#x27;</span><br><span class=\"line\">#recovery_min_apply_delay=5ms #应用延迟，有特殊需求可以设置</span><br></pre></td></tr></table></figure>\n\n<p>手动创建 standby.signal 文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt; touch /pg/PG14.4/data/standby.signal</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、启动备库实例\"><a href=\"#4、启动备库实例\" class=\"headerlink\" title=\"4、启动备库实例\"></a>4、启动备库实例</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt; pg_ctl -D /pg/PG14.4/data/ start</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"验证主备关系\"><a href=\"#验证主备关系\" class=\"headerlink\" title=\"验证主备关系\"></a>验证主备关系</h2><h3 id=\"1、检查主库与备库角色\"><a href=\"#1、检查主库与备库角色\" class=\"headerlink\" title=\"1、检查主库与备库角色\"></a>1、检查主库与备库角色</h3><p>在主库执行角色检查，如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt; pg_controldata | grep &#x27;Database cluster state&#x27;</span><br><span class=\"line\">Database cluster state: in production</span><br></pre></td></tr></table></figure>\n\n<p>在备库执行角色检查，如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt; pg_controldata | grep &#x27;Database cluster state&#x27;</span><br><span class=\"line\">Database cluster state: in archive recovery</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、在主库上检查同步情况\"><a href=\"#2、在主库上检查同步情况\" class=\"headerlink\" title=\"2、在主库上检查同步情况\"></a>2、在主库上检查同步情况</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">postgres=# \\x</span><br><span class=\"line\">Expanded display is on.</span><br><span class=\"line\">postgres=# select pid,usename,application_name,client_addr,state,sync_state from pg_stat_replication;</span><br><span class=\"line\">-[ RECORD 1 ]----+------------</span><br><span class=\"line\">pid              | 8470</span><br><span class=\"line\">usename          | repl</span><br><span class=\"line\">application_name | 14/main</span><br><span class=\"line\">client_addr      | 10.211.55.4</span><br><span class=\"line\">state            | streaming</span><br><span class=\"line\">sync_state       | async</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、在备库检查同步情况\"><a href=\"#3、在备库检查同步情况\" class=\"headerlink\" title=\"3、在备库检查同步情况\"></a>3、在备库检查同步情况</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">postgres=# \\x</span><br><span class=\"line\">Expanded display is on.</span><br><span class=\"line\">postgres=# select * from pg_stat_wal_receiver;</span><br><span class=\"line\">-[ RECORD 1 ]---------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class=\"line\">pid                   | 94119</span><br><span class=\"line\">status                | streaming</span><br><span class=\"line\">receive_start_lsn     | 0/4000000</span><br><span class=\"line\">receive_start_tli     | 1</span><br><span class=\"line\">written_lsn           | 0/5000148</span><br><span class=\"line\">flushed_lsn           | 0/5000148</span><br><span class=\"line\">received_tli          | 1</span><br><span class=\"line\">last_msg_send_time    | 2022-12-05 23:50:29.927646+08</span><br><span class=\"line\">last_msg_receipt_time | 2022-12-05 23:50:29.755814+08</span><br><span class=\"line\">latest_end_lsn        | 0/5000148</span><br><span class=\"line\">latest_end_time       | 2022-12-05 23:33:28.264379+08</span><br><span class=\"line\">slot_name             |</span><br><span class=\"line\">sender_host           | 10.211.55.5</span><br><span class=\"line\">sender_port           | 5432</span><br><span class=\"line\">conninfo              | user=repl password=******** channel_binding=prefer dbname=replication host=10.211.55.5 port=5432 fallback_application_name=14/main sslmode=prefer sslcompression=0 sslsni=1 ssl_min_protocol_version=TLSv1.2 gssencmode=prefer krbsrvname=postgres target_session_attrs=any</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>说明：</p>\n<ul>\n<li>测试主库IP: 10.211.55.4;</li>\n<li>备库IP: 10.211.55.5;</li>\n<li>PG数据目录&#x2F;pg&#x2F;PG14.4&#x2F;data&#x2F;ye</li>\n</ul>\n<h2 id=\"主库操作部分\"><a href=\"#主库操作部分\" class=\"headerlink\" title=\"主库操作部分\"></a>主库操作部分</h2><h3 id=\"1、创建复制用户\"><a href=\"#1、创建复制用户\" class=\"headerlink\" title=\"1、创建复制用户\"></a>1、创建复制用户</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">postgres=# create user repl replication password &#x27;Abcd321#&#x27;;</span><br><span class=\"line\">CREATE ROLE</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、修改主库-pg-hba-conf-白名单文件\"><a href=\"#2、修改主库-pg-hba-conf-白名单文件\" class=\"headerlink\" title=\"2、修改主库 pg_hba.conf 白名单文件\"></a>2、修改主库 pg_hba.conf 白名单文件</h3><p>将用于流复制数据同步的 repl 用户，添加至 &#x2F;pg&#x2F;PG14.4&#x2F;data&#x2F;pg_hba.conf 文件中</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt; vi /pg/PG14.4/data/pg_hba.conf</span><br><span class=\"line\">host replication repl 10.211.55.5/32 md5</span><br></pre></td></tr></table></figure>\n\n<p>repl 用户添加之后，及时手动进行生效</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt; pg_ctl reload</span><br><span class=\"line\">server signaled</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、修改参数文件\"><a href=\"#3、修改参数文件\" class=\"headerlink\" title=\"3、修改参数文件\"></a>3、修改参数文件</h3>","more":"<p>修改主库参数文件，添加异步流复制配置相关参数，如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /pg/PG14.4/data/postgresql.conf</span><br><span class=\"line\"># 这个一般安装服务器之后都会进行配置，检查下。设置为*就运行所有 ip，因为前面 pg_hba.conf 文件中做了对于 IP 的限制，所以这里就设置为*</span><br><span class=\"line\">listen_addresses = &#x27;*&#x27;</span><br><span class=\"line\"># pg_wal 目录中的过去日志文件段的最小大小，备用服务器需要读取它们进行流式传输复制</span><br><span class=\"line\">wal_keep_size = &#x27;1GB&#x27;</span><br><span class=\"line\"># 这个设置了可以最多有几个流复制连接，默认 10</span><br><span class=\"line\">max_wal_senders = 32</span><br><span class=\"line\"># 如果有错误的数据复制，是否向主进行反馈</span><br><span class=\"line\">hot_standby_feedback = on</span><br></pre></td></tr></table></figure>\n\n<p>异步流复制参数设置完成后，需手动重启实例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt; pg_ctl restart</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意：其中只有 listen_address 参数设置需要重启生效，对于其他参数则可以选择<code> pg_ctl reload</code> 或者 <code>select pg_reload_conf();</code> 方式动态生效即可</strong></p>\n<h3 id=\"4、从库测试连接\"><a href=\"#4、从库测试连接\" class=\"headerlink\" title=\"4、从库测试连接\"></a>4、从库测试连接</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt; psql -h 10.55.211.4 -p 5432 -U repl postgres</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"备库操作\"><a href=\"#备库操作\" class=\"headerlink\" title=\"备库操作\"></a>备库操作</h2><h3 id=\"1、停止备库-PG-服务并清空-data-目录\"><a href=\"#1、停止备库-PG-服务并清空-data-目录\" class=\"headerlink\" title=\"1、停止备库 PG 服务并清空 data 目录\"></a>1、停止备库 PG 服务并清空 data 目录</h3><p>检查 PG 数据目录，并手动关闭 PG 实例，最后再清空$PGDATA（对于目标端非新环境等场景）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt; su – postgres</span><br><span class=\"line\">shell&gt; cd /pg/PG14.4/data/</span><br><span class=\"line\">shell&gt; ls -l</span><br><span class=\"line\">shell&gt; pg_ctl -D /pg/PG14.4/data/ stop</span><br><span class=\"line\">shell&gt; pg_ctl -D /pg/PG14.4/data/ status</span><br><span class=\"line\">shell&gt; rm -rf /pg/PG14.4/data/*</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、备库远程拷贝主库数据目录\"><a href=\"#2、备库远程拷贝主库数据目录\" class=\"headerlink\" title=\"2、备库远程拷贝主库数据目录\"></a>2、备库远程拷贝主库数据目录</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt; pg_basebackup -h 10.211.55.4 -U repl -D /pg/PG14.4/data/ -X stream -P -R</span><br><span class=\"line\">Password: </span><br><span class=\"line\">33064/33064 kB (100%), 1/1 tablespace</span><br></pre></td></tr></table></figure>\n\n<p>在&#x2F;pg&#x2F;PG14.4&#x2F;data&#x2F; 下，会比主库多出一个 backup_label 文件，该文件记录了备份开始时 WAL 日志位置 ，如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt; more /pg/PG14.4/data/backup_label</span><br><span class=\"line\">START WAL LOCATION: 0/2000028 (file 000000010000000000000002)</span><br><span class=\"line\">CHECKPOINT LOCATION: 0/2000060</span><br><span class=\"line\">BACKUP METHOD: streamed</span><br><span class=\"line\">BACKUP FROM: primary</span><br><span class=\"line\">START TIME: 2022-12-05 22:48:40 HKT</span><br><span class=\"line\">LABEL: pg_basebackup base backup</span><br><span class=\"line\">START TIMELINE: 1</span><br></pre></td></tr></table></figure>\n\n<p>3、配置 postgresql.auto.conf</p>\n<p>注意：如果 pg_basebackup 时添加了-R 选项，则可跳过此步，否则必须配置此步骤。<br>以下为没有添加-R 选项的配置方法，如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt; vi /pg/PG14.4/data/postgresql.auto.conf</span><br><span class=\"line\">primary_conninfo = &#x27;host=10.211.55.4 port=5432 user=repl password=Abcd321#&#x27;</span><br><span class=\"line\">recovery_target_timeline = &#x27;latest&#x27;</span><br><span class=\"line\">#recovery_min_apply_delay=5ms #应用延迟，有特殊需求可以设置</span><br></pre></td></tr></table></figure>\n\n<p>手动创建 standby.signal 文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt; touch /pg/PG14.4/data/standby.signal</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、启动备库实例\"><a href=\"#4、启动备库实例\" class=\"headerlink\" title=\"4、启动备库实例\"></a>4、启动备库实例</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt; pg_ctl -D /pg/PG14.4/data/ start</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"验证主备关系\"><a href=\"#验证主备关系\" class=\"headerlink\" title=\"验证主备关系\"></a>验证主备关系</h2><h3 id=\"1、检查主库与备库角色\"><a href=\"#1、检查主库与备库角色\" class=\"headerlink\" title=\"1、检查主库与备库角色\"></a>1、检查主库与备库角色</h3><p>在主库执行角色检查，如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt; pg_controldata | grep &#x27;Database cluster state&#x27;</span><br><span class=\"line\">Database cluster state: in production</span><br></pre></td></tr></table></figure>\n\n<p>在备库执行角色检查，如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt; pg_controldata | grep &#x27;Database cluster state&#x27;</span><br><span class=\"line\">Database cluster state: in archive recovery</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、在主库上检查同步情况\"><a href=\"#2、在主库上检查同步情况\" class=\"headerlink\" title=\"2、在主库上检查同步情况\"></a>2、在主库上检查同步情况</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">postgres=# \\x</span><br><span class=\"line\">Expanded display is on.</span><br><span class=\"line\">postgres=# select pid,usename,application_name,client_addr,state,sync_state from pg_stat_replication;</span><br><span class=\"line\">-[ RECORD 1 ]----+------------</span><br><span class=\"line\">pid              | 8470</span><br><span class=\"line\">usename          | repl</span><br><span class=\"line\">application_name | 14/main</span><br><span class=\"line\">client_addr      | 10.211.55.4</span><br><span class=\"line\">state            | streaming</span><br><span class=\"line\">sync_state       | async</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、在备库检查同步情况\"><a href=\"#3、在备库检查同步情况\" class=\"headerlink\" title=\"3、在备库检查同步情况\"></a>3、在备库检查同步情况</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">postgres=# \\x</span><br><span class=\"line\">Expanded display is on.</span><br><span class=\"line\">postgres=# select * from pg_stat_wal_receiver;</span><br><span class=\"line\">-[ RECORD 1 ]---------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class=\"line\">pid                   | 94119</span><br><span class=\"line\">status                | streaming</span><br><span class=\"line\">receive_start_lsn     | 0/4000000</span><br><span class=\"line\">receive_start_tli     | 1</span><br><span class=\"line\">written_lsn           | 0/5000148</span><br><span class=\"line\">flushed_lsn           | 0/5000148</span><br><span class=\"line\">received_tli          | 1</span><br><span class=\"line\">last_msg_send_time    | 2022-12-05 23:50:29.927646+08</span><br><span class=\"line\">last_msg_receipt_time | 2022-12-05 23:50:29.755814+08</span><br><span class=\"line\">latest_end_lsn        | 0/5000148</span><br><span class=\"line\">latest_end_time       | 2022-12-05 23:33:28.264379+08</span><br><span class=\"line\">slot_name             |</span><br><span class=\"line\">sender_host           | 10.211.55.5</span><br><span class=\"line\">sender_port           | 5432</span><br><span class=\"line\">conninfo              | user=repl password=******** channel_binding=prefer dbname=replication host=10.211.55.5 port=5432 fallback_application_name=14/main sslmode=prefer sslcompression=0 sslsni=1 ssl_min_protocol_version=TLSv1.2 gssencmode=prefer krbsrvname=postgres target_session_attrs=any</span><br></pre></td></tr></table></figure>"},{"title":"Pycharm在使用ideavim时，进入normal模式时，输入法自动切换到英文状态","date":"2022-10-10T16:00:00.000Z","_content":"\n如果您已经是IdeaVim的用户,那么直接在插件中心搜索IdeaVimExtension进行安装.或者到IdeaVimExtension插件主页进行下载安装.IdeaVimExtension是依赖IdeaVim的,需要事先安装IdeaVim\n\n1. 确保你的操作系统已经开启了英文输入法\n    * Windows需要开启en_US输入法\n    * macOS需要开启ABC或en_US输入法\n    * Linux 不支持\n\n2. 安装重启IDEA后,打开任意代码编辑器在normal模式下输入如下两个命令来激活IdeaVimExtension插件\n    * `:set keep-english-in-normal `: 在normal模式保持英文状态\n    * `:set keep-english-in-normal-and-restore-in-insert` : 在normal模式保持英文状态,并在回到insert时恢复输入法到原来的状态.例如,编写一段中文注释,用中文输入法写了一段文字,进入normal模式移动光标到下一行,再回到插入模式继续使用中文编辑.\n\n3. 上面两个命令在每次IDEA重启后都需要重新输入,也可以通过在用户目录下添加` .ideavimrc`文件,将命令添加到该文件中,这样在IDEA重启时可以自动执行该文件中的指令.\n","source":"_posts/Pycharm在使用ideavim时，进入normal模式时，输入法自动切换到英文状态.md","raw":"---\ntitle: Pycharm在使用ideavim时，进入normal模式时，输入法自动切换到英文状态\ndate: 2022-10-11\ntags: [Python, VIM, MACOS]\n---\n\n如果您已经是IdeaVim的用户,那么直接在插件中心搜索IdeaVimExtension进行安装.或者到IdeaVimExtension插件主页进行下载安装.IdeaVimExtension是依赖IdeaVim的,需要事先安装IdeaVim\n\n1. 确保你的操作系统已经开启了英文输入法\n    * Windows需要开启en_US输入法\n    * macOS需要开启ABC或en_US输入法\n    * Linux 不支持\n\n2. 安装重启IDEA后,打开任意代码编辑器在normal模式下输入如下两个命令来激活IdeaVimExtension插件\n    * `:set keep-english-in-normal `: 在normal模式保持英文状态\n    * `:set keep-english-in-normal-and-restore-in-insert` : 在normal模式保持英文状态,并在回到insert时恢复输入法到原来的状态.例如,编写一段中文注释,用中文输入法写了一段文字,进入normal模式移动光标到下一行,再回到插入模式继续使用中文编辑.\n\n3. 上面两个命令在每次IDEA重启后都需要重新输入,也可以通过在用户目录下添加` .ideavimrc`文件,将命令添加到该文件中,这样在IDEA重启时可以自动执行该文件中的指令.\n","slug":"Pycharm在使用ideavim时，进入normal模式时，输入法自动切换到英文状态","published":1,"updated":"2022-11-01T16:41:38.096Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluqa1hik0013rlog42jmfylv","content":"<p>如果您已经是IdeaVim的用户,那么直接在插件中心搜索IdeaVimExtension进行安装.或者到IdeaVimExtension插件主页进行下载安装.IdeaVimExtension是依赖IdeaVim的,需要事先安装IdeaVim</p>\n<ol>\n<li><p>确保你的操作系统已经开启了英文输入法</p>\n<ul>\n<li>Windows需要开启en_US输入法</li>\n<li>macOS需要开启ABC或en_US输入法</li>\n<li>Linux 不支持</li>\n</ul>\n</li>\n<li><p>安装重启IDEA后,打开任意代码编辑器在normal模式下输入如下两个命令来激活IdeaVimExtension插件</p>\n<ul>\n<li><code>:set keep-english-in-normal </code>: 在normal模式保持英文状态</li>\n<li><code>:set keep-english-in-normal-and-restore-in-insert</code> : 在normal模式保持英文状态,并在回到insert时恢复输入法到原来的状态.例如,编写一段中文注释,用中文输入法写了一段文字,进入normal模式移动光标到下一行,再回到插入模式继续使用中文编辑.</li>\n</ul>\n</li>\n<li><p>上面两个命令在每次IDEA重启后都需要重新输入,也可以通过在用户目录下添加<code> .ideavimrc</code>文件,将命令添加到该文件中,这样在IDEA重启时可以自动执行该文件中的指令.</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>如果您已经是IdeaVim的用户,那么直接在插件中心搜索IdeaVimExtension进行安装.或者到IdeaVimExtension插件主页进行下载安装.IdeaVimExtension是依赖IdeaVim的,需要事先安装IdeaVim</p>\n<ol>\n<li><p>确保你的操作系统已经开启了英文输入法</p>\n<ul>\n<li>Windows需要开启en_US输入法</li>\n<li>macOS需要开启ABC或en_US输入法</li>\n<li>Linux 不支持</li>\n</ul>\n</li>\n<li><p>安装重启IDEA后,打开任意代码编辑器在normal模式下输入如下两个命令来激活IdeaVimExtension插件</p>\n<ul>\n<li><code>:set keep-english-in-normal </code>: 在normal模式保持英文状态</li>\n<li><code>:set keep-english-in-normal-and-restore-in-insert</code> : 在normal模式保持英文状态,并在回到insert时恢复输入法到原来的状态.例如,编写一段中文注释,用中文输入法写了一段文字,进入normal模式移动光标到下一行,再回到插入模式继续使用中文编辑.</li>\n</ul>\n</li>\n<li><p>上面两个命令在每次IDEA重启后都需要重新输入,也可以通过在用户目录下添加<code> .ideavimrc</code>文件,将命令添加到该文件中,这样在IDEA重启时可以自动执行该文件中的指令.</p>\n</li>\n</ol>\n"},{"title":"Python双向队列collections.deque","date":"2020-01-04T16:00:00.000Z","_content":"\ndeque队列是由栈或者queue队列生成的，支持线程安全（也就是说你可以**同时从deque集合的左边和右边进行操作而不会有影响**），从两端都可以高效的添加(append)和弹出(pop)元素，两个方向的大概开销都是 O(1) 复杂度。\n\n在创建时，可以指定最大长度`collections.deque(maxlen=x)` ，如果 *maxlen* 没有指定或者是 `None` ，deques 可以增长到任意长度。否则，deque就限定到指定最大长度，当deque满了，有新项加入时，同样数量的项就从另一端弹出。\n\n```python\nIn [1]: import collections\nIn [2]: d = collections.deque(maxlen=3)\nIn [3]: d.append(1)\nIn [4]: d.append(2)\nIn [5]: d.append(3)\nIn [6]: d\nOut[6]: deque([1, 2, 3])\nIn [7]: d.pop()\nOut[7]: 3\nIn [8]: d\nOut[8]: deque([1, 2])\n```\n\n双向队列(deque)对象支持以下方法:\n\n- `append(x)` 添加 *x* 到右端\n- `appendleft(x)` 添加x到左端\n- `pop()` 移去并且返回最右侧的元素，如果没有元素的话，就抛出 `IndexError` 索引错误。\n- `popleft()` 移去并且返回最左侧的元素，如果没有元素的话，就抛出 `IndexError` 索引错误。\n- `clear()` 移除所有元素，使其长度为0\n- `remove(x)` 移去找到的第一个 *value*。 如果没有，抛出`ValueError`\n- `copy()` 创建一份浅拷贝\n- `count()` 计算等于 *x* 的元素个数\n- `extend(iterable)` 将iterable中的元素添加到deque的右侧\n- `extendleft(iterable)` 将iterable中的元素添加到deque的左侧，在结果中iterable中的顺序将被反过来添加。\n- `index(x[, start[, stop]])` 返回第一个匹配的第 *x* 个元素（从 *start* 开始计算，在 *stop* 之前），如果没找到的话，抛出`ValueError`\n- `insert(i, x)` 在i位置插入x，如果插入会导致deque超出长度 *maxlen* 的话，就抛出 `IndexError` 索引错误\n- `reverse()` 将deque逆序排列。返回 `None` 。\n- `rotate(n=1)` 向右循环移动 *n* 步。 如果 *n* 是负数，就向左循环。如果deque不是空的，向右循环移动一步就等价于 `d.appendleft(d.pop())` ， 向左循环一步就等价于 `d.append(d.popleft())` 。\n\n除了以上的方法，deque还支持迭代、成员测试、下标引用(d[-1])等等：\n\n```\nIn [1]: import collections\nIn [2]: d = collections.deque(maxlen=3)\nIn [3]: d.append(1)\nIn [4]: d.append(2)\nIn [5]: d.append(3)\nIn [6]: 2 in d\nOut[6]: True\nIn [7]: d[-1]\nOut[7]: 3\nIn [8]: d[1]\nOut[8]: 2\nIn [9]: len(d)\nOut[9]: 3\nIn [10]: if d:  # 判断队列d是否为空\n    ...:     print(d.pop())\n3\nIn [12]: d\nOut[12]: deque([1, 2])\nIn [13]: d.extend([4, 5, 6])\nIn [14]: d\nOut[14]: deque([4, 5, 6])\n\nIn [15]: d = collections.deque('abcdef')  # 重新赋值\nIn [16]: d\nOut[16]: deque(['a', 'b', 'c', 'd', 'e', 'f'])\n```\n\n参考：\n\n- [collections --- 容器数据类型](https://docs.python.org/zh-cn/3.7/library/collections.html#deque-objects)","source":"_posts/Python双向队列collections.deque.md","raw":"---\ntitle: Python双向队列collections.deque\ndate: 2020-01-05\ntags: [Python, 数据结构]\n---\n\ndeque队列是由栈或者queue队列生成的，支持线程安全（也就是说你可以**同时从deque集合的左边和右边进行操作而不会有影响**），从两端都可以高效的添加(append)和弹出(pop)元素，两个方向的大概开销都是 O(1) 复杂度。\n\n在创建时，可以指定最大长度`collections.deque(maxlen=x)` ，如果 *maxlen* 没有指定或者是 `None` ，deques 可以增长到任意长度。否则，deque就限定到指定最大长度，当deque满了，有新项加入时，同样数量的项就从另一端弹出。\n\n```python\nIn [1]: import collections\nIn [2]: d = collections.deque(maxlen=3)\nIn [3]: d.append(1)\nIn [4]: d.append(2)\nIn [5]: d.append(3)\nIn [6]: d\nOut[6]: deque([1, 2, 3])\nIn [7]: d.pop()\nOut[7]: 3\nIn [8]: d\nOut[8]: deque([1, 2])\n```\n\n双向队列(deque)对象支持以下方法:\n\n- `append(x)` 添加 *x* 到右端\n- `appendleft(x)` 添加x到左端\n- `pop()` 移去并且返回最右侧的元素，如果没有元素的话，就抛出 `IndexError` 索引错误。\n- `popleft()` 移去并且返回最左侧的元素，如果没有元素的话，就抛出 `IndexError` 索引错误。\n- `clear()` 移除所有元素，使其长度为0\n- `remove(x)` 移去找到的第一个 *value*。 如果没有，抛出`ValueError`\n- `copy()` 创建一份浅拷贝\n- `count()` 计算等于 *x* 的元素个数\n- `extend(iterable)` 将iterable中的元素添加到deque的右侧\n- `extendleft(iterable)` 将iterable中的元素添加到deque的左侧，在结果中iterable中的顺序将被反过来添加。\n- `index(x[, start[, stop]])` 返回第一个匹配的第 *x* 个元素（从 *start* 开始计算，在 *stop* 之前），如果没找到的话，抛出`ValueError`\n- `insert(i, x)` 在i位置插入x，如果插入会导致deque超出长度 *maxlen* 的话，就抛出 `IndexError` 索引错误\n- `reverse()` 将deque逆序排列。返回 `None` 。\n- `rotate(n=1)` 向右循环移动 *n* 步。 如果 *n* 是负数，就向左循环。如果deque不是空的，向右循环移动一步就等价于 `d.appendleft(d.pop())` ， 向左循环一步就等价于 `d.append(d.popleft())` 。\n\n除了以上的方法，deque还支持迭代、成员测试、下标引用(d[-1])等等：\n\n```\nIn [1]: import collections\nIn [2]: d = collections.deque(maxlen=3)\nIn [3]: d.append(1)\nIn [4]: d.append(2)\nIn [5]: d.append(3)\nIn [6]: 2 in d\nOut[6]: True\nIn [7]: d[-1]\nOut[7]: 3\nIn [8]: d[1]\nOut[8]: 2\nIn [9]: len(d)\nOut[9]: 3\nIn [10]: if d:  # 判断队列d是否为空\n    ...:     print(d.pop())\n3\nIn [12]: d\nOut[12]: deque([1, 2])\nIn [13]: d.extend([4, 5, 6])\nIn [14]: d\nOut[14]: deque([4, 5, 6])\n\nIn [15]: d = collections.deque('abcdef')  # 重新赋值\nIn [16]: d\nOut[16]: deque(['a', 'b', 'c', 'd', 'e', 'f'])\n```\n\n参考：\n\n- [collections --- 容器数据类型](https://docs.python.org/zh-cn/3.7/library/collections.html#deque-objects)","slug":"Python双向队列collections.deque","published":1,"updated":"2021-06-20T10:25:20.123Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluqa1hil0016rlog3tuz2cii","content":"<p>deque队列是由栈或者queue队列生成的，支持线程安全（也就是说你可以<strong>同时从deque集合的左边和右边进行操作而不会有影响</strong>），从两端都可以高效的添加(append)和弹出(pop)元素，两个方向的大概开销都是 O(1) 复杂度。</p>\n<p>在创建时，可以指定最大长度<code>collections.deque(maxlen=x)</code> ，如果 <em>maxlen</em> 没有指定或者是 <code>None</code> ，deques 可以增长到任意长度。否则，deque就限定到指定最大长度，当deque满了，有新项加入时，同样数量的项就从另一端弹出。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">1</span>]: <span class=\"keyword\">import</span> collections</span><br><span class=\"line\">In [<span class=\"number\">2</span>]: d = collections.deque(maxlen=<span class=\"number\">3</span>)</span><br><span class=\"line\">In [<span class=\"number\">3</span>]: d.append(<span class=\"number\">1</span>)</span><br><span class=\"line\">In [<span class=\"number\">4</span>]: d.append(<span class=\"number\">2</span>)</span><br><span class=\"line\">In [<span class=\"number\">5</span>]: d.append(<span class=\"number\">3</span>)</span><br><span class=\"line\">In [<span class=\"number\">6</span>]: d</span><br><span class=\"line\">Out[<span class=\"number\">6</span>]: deque([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])</span><br><span class=\"line\">In [<span class=\"number\">7</span>]: d.pop()</span><br><span class=\"line\">Out[<span class=\"number\">7</span>]: <span class=\"number\">3</span></span><br><span class=\"line\">In [<span class=\"number\">8</span>]: d</span><br><span class=\"line\">Out[<span class=\"number\">8</span>]: deque([<span class=\"number\">1</span>, <span class=\"number\">2</span>])</span><br></pre></td></tr></table></figure>\n\n<p>双向队列(deque)对象支持以下方法:</p>\n<ul>\n<li><code>append(x)</code> 添加 <em>x</em> 到右端</li>\n<li><code>appendleft(x)</code> 添加x到左端</li>\n<li><code>pop()</code> 移去并且返回最右侧的元素，如果没有元素的话，就抛出 <code>IndexError</code> 索引错误。</li>\n<li><code>popleft()</code> 移去并且返回最左侧的元素，如果没有元素的话，就抛出 <code>IndexError</code> 索引错误。</li>\n<li><code>clear()</code> 移除所有元素，使其长度为0</li>\n<li><code>remove(x)</code> 移去找到的第一个 <em>value</em>。 如果没有，抛出<code>ValueError</code></li>\n<li><code>copy()</code> 创建一份浅拷贝</li>\n<li><code>count()</code> 计算等于 <em>x</em> 的元素个数</li>\n<li><code>extend(iterable)</code> 将iterable中的元素添加到deque的右侧</li>\n<li><code>extendleft(iterable)</code> 将iterable中的元素添加到deque的左侧，在结果中iterable中的顺序将被反过来添加。</li>\n<li><code>index(x[, start[, stop]])</code> 返回第一个匹配的第 <em>x</em> 个元素（从 <em>start</em> 开始计算，在 <em>stop</em> 之前），如果没找到的话，抛出<code>ValueError</code></li>\n<li><code>insert(i, x)</code> 在i位置插入x，如果插入会导致deque超出长度 <em>maxlen</em> 的话，就抛出 <code>IndexError</code> 索引错误</li>\n<li><code>reverse()</code> 将deque逆序排列。返回 <code>None</code> 。</li>\n<li><code>rotate(n=1)</code> 向右循环移动 <em>n</em> 步。 如果 <em>n</em> 是负数，就向左循环。如果deque不是空的，向右循环移动一步就等价于 <code>d.appendleft(d.pop())</code> ， 向左循环一步就等价于 <code>d.append(d.popleft())</code> 。</li>\n</ul>\n<p>除了以上的方法，deque还支持迭代、成员测试、下标引用(d[-1])等等：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [1]: import collections</span><br><span class=\"line\">In [2]: d = collections.deque(maxlen=3)</span><br><span class=\"line\">In [3]: d.append(1)</span><br><span class=\"line\">In [4]: d.append(2)</span><br><span class=\"line\">In [5]: d.append(3)</span><br><span class=\"line\">In [6]: 2 in d</span><br><span class=\"line\">Out[6]: True</span><br><span class=\"line\">In [7]: d[-1]</span><br><span class=\"line\">Out[7]: 3</span><br><span class=\"line\">In [8]: d[1]</span><br><span class=\"line\">Out[8]: 2</span><br><span class=\"line\">In [9]: len(d)</span><br><span class=\"line\">Out[9]: 3</span><br><span class=\"line\">In [10]: if d:  # 判断队列d是否为空</span><br><span class=\"line\">    ...:     print(d.pop())</span><br><span class=\"line\">3</span><br><span class=\"line\">In [12]: d</span><br><span class=\"line\">Out[12]: deque([1, 2])</span><br><span class=\"line\">In [13]: d.extend([4, 5, 6])</span><br><span class=\"line\">In [14]: d</span><br><span class=\"line\">Out[14]: deque([4, 5, 6])</span><br><span class=\"line\"></span><br><span class=\"line\">In [15]: d = collections.deque(&#x27;abcdef&#x27;)  # 重新赋值</span><br><span class=\"line\">In [16]: d</span><br><span class=\"line\">Out[16]: deque([&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;, &#x27;f&#x27;])</span><br></pre></td></tr></table></figure>\n\n<p>参考：</p>\n<ul>\n<li><a href=\"https://docs.python.org/zh-cn/3.7/library/collections.html#deque-objects\">collections — 容器数据类型</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>deque队列是由栈或者queue队列生成的，支持线程安全（也就是说你可以<strong>同时从deque集合的左边和右边进行操作而不会有影响</strong>），从两端都可以高效的添加(append)和弹出(pop)元素，两个方向的大概开销都是 O(1) 复杂度。</p>\n<p>在创建时，可以指定最大长度<code>collections.deque(maxlen=x)</code> ，如果 <em>maxlen</em> 没有指定或者是 <code>None</code> ，deques 可以增长到任意长度。否则，deque就限定到指定最大长度，当deque满了，有新项加入时，同样数量的项就从另一端弹出。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">1</span>]: <span class=\"keyword\">import</span> collections</span><br><span class=\"line\">In [<span class=\"number\">2</span>]: d = collections.deque(maxlen=<span class=\"number\">3</span>)</span><br><span class=\"line\">In [<span class=\"number\">3</span>]: d.append(<span class=\"number\">1</span>)</span><br><span class=\"line\">In [<span class=\"number\">4</span>]: d.append(<span class=\"number\">2</span>)</span><br><span class=\"line\">In [<span class=\"number\">5</span>]: d.append(<span class=\"number\">3</span>)</span><br><span class=\"line\">In [<span class=\"number\">6</span>]: d</span><br><span class=\"line\">Out[<span class=\"number\">6</span>]: deque([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])</span><br><span class=\"line\">In [<span class=\"number\">7</span>]: d.pop()</span><br><span class=\"line\">Out[<span class=\"number\">7</span>]: <span class=\"number\">3</span></span><br><span class=\"line\">In [<span class=\"number\">8</span>]: d</span><br><span class=\"line\">Out[<span class=\"number\">8</span>]: deque([<span class=\"number\">1</span>, <span class=\"number\">2</span>])</span><br></pre></td></tr></table></figure>\n\n<p>双向队列(deque)对象支持以下方法:</p>\n<ul>\n<li><code>append(x)</code> 添加 <em>x</em> 到右端</li>\n<li><code>appendleft(x)</code> 添加x到左端</li>\n<li><code>pop()</code> 移去并且返回最右侧的元素，如果没有元素的话，就抛出 <code>IndexError</code> 索引错误。</li>\n<li><code>popleft()</code> 移去并且返回最左侧的元素，如果没有元素的话，就抛出 <code>IndexError</code> 索引错误。</li>\n<li><code>clear()</code> 移除所有元素，使其长度为0</li>\n<li><code>remove(x)</code> 移去找到的第一个 <em>value</em>。 如果没有，抛出<code>ValueError</code></li>\n<li><code>copy()</code> 创建一份浅拷贝</li>\n<li><code>count()</code> 计算等于 <em>x</em> 的元素个数</li>\n<li><code>extend(iterable)</code> 将iterable中的元素添加到deque的右侧</li>\n<li><code>extendleft(iterable)</code> 将iterable中的元素添加到deque的左侧，在结果中iterable中的顺序将被反过来添加。</li>\n<li><code>index(x[, start[, stop]])</code> 返回第一个匹配的第 <em>x</em> 个元素（从 <em>start</em> 开始计算，在 <em>stop</em> 之前），如果没找到的话，抛出<code>ValueError</code></li>\n<li><code>insert(i, x)</code> 在i位置插入x，如果插入会导致deque超出长度 <em>maxlen</em> 的话，就抛出 <code>IndexError</code> 索引错误</li>\n<li><code>reverse()</code> 将deque逆序排列。返回 <code>None</code> 。</li>\n<li><code>rotate(n=1)</code> 向右循环移动 <em>n</em> 步。 如果 <em>n</em> 是负数，就向左循环。如果deque不是空的，向右循环移动一步就等价于 <code>d.appendleft(d.pop())</code> ， 向左循环一步就等价于 <code>d.append(d.popleft())</code> 。</li>\n</ul>\n<p>除了以上的方法，deque还支持迭代、成员测试、下标引用(d[-1])等等：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [1]: import collections</span><br><span class=\"line\">In [2]: d = collections.deque(maxlen=3)</span><br><span class=\"line\">In [3]: d.append(1)</span><br><span class=\"line\">In [4]: d.append(2)</span><br><span class=\"line\">In [5]: d.append(3)</span><br><span class=\"line\">In [6]: 2 in d</span><br><span class=\"line\">Out[6]: True</span><br><span class=\"line\">In [7]: d[-1]</span><br><span class=\"line\">Out[7]: 3</span><br><span class=\"line\">In [8]: d[1]</span><br><span class=\"line\">Out[8]: 2</span><br><span class=\"line\">In [9]: len(d)</span><br><span class=\"line\">Out[9]: 3</span><br><span class=\"line\">In [10]: if d:  # 判断队列d是否为空</span><br><span class=\"line\">    ...:     print(d.pop())</span><br><span class=\"line\">3</span><br><span class=\"line\">In [12]: d</span><br><span class=\"line\">Out[12]: deque([1, 2])</span><br><span class=\"line\">In [13]: d.extend([4, 5, 6])</span><br><span class=\"line\">In [14]: d</span><br><span class=\"line\">Out[14]: deque([4, 5, 6])</span><br><span class=\"line\"></span><br><span class=\"line\">In [15]: d = collections.deque(&#x27;abcdef&#x27;)  # 重新赋值</span><br><span class=\"line\">In [16]: d</span><br><span class=\"line\">Out[16]: deque([&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;, &#x27;f&#x27;])</span><br></pre></td></tr></table></figure>\n\n<p>参考：</p>\n<ul>\n<li><a href=\"https://docs.python.org/zh-cn/3.7/library/collections.html#deque-objects\">collections — 容器数据类型</a></li>\n</ul>\n"},{"title":"Python实现给excel表格设置密码","date":"2019-04-25T16:00:00.000Z","_content":"\n入职新公司，同事让帮忙写一个Python脚本，实现每天定时获取生产环境的数据生成excel表格，推送到指定邮箱。想了想，不难实现，就答应下来了。但是等写完了才被通知到，邮件携带的excel表格，要设置指定密码，进行保护，顿时懵逼，貌似Python暂时不能实现吧？然后各种资料源码查看，然后确定了确实不能实现，先通知同事一声，说Python实现不了设置密码的功能，然后就只能放弃了。\n\n但是哥不是那种容易放弃的人！旁边坐的朱同学说，我看看Java能否实现。果不其然，Java才是万能的！(拍一下各位Java看官大佬们的马屁)。\n\n于是，才有了这个文章，以下简单整理一下实现的过程，虽然都是从网上参考过来的，但是这个功能点是能够实现的，再次记录分享一下，以供下次参考。准确的说，本文应该是“实战Python通过调用Java的第三方jar包完成对excel表格的密码设置”。下面开始正文。\n\n## 环境搭建\n\nPython的环境和JDK的环境就不用说了，我这里使用的是Python3.6和JDK8。重点是以下的一个Python库和一个Java的jar包。\n\n<!--more-->\n\n### Python的JPype库\n\nJPype是一个能够让 Python 代码方便地调用 Java 代码的工具，从而克服了 Python 在某些领域（如服务器端编程）中的不足。JPype的实际运行环境仍然是python runtime，只是在运行期间启动了一个嵌入的jvm。\n\n#### 安装\n\n通过pip进行安装：\n\n```shell\npip install jpype\n```\n\nUbuntu系统还可以通过apt进行安装\n\n```shell\nsudo apt install python-jpype\n```\n\n#### 使用\n\nJPype 提供的 `startJVM() `函数的作用是启动 JAVA 虚拟机，所以在后续的任何 JAVA 代码被调用前，必须先调用此方法启动 JAVA 虚拟机。`get_default_jvm_path`方法可以获取当前系统中JVM的所在路径。\n\n```\nimport jpype\njpype.startJVM(jpype.get_default_jvm_path(), *args)\n```\n\n**第三方包的引用**\n\n很多时候，在 Python 项目中需要调用第三方的 Java 扩展包，这也是 JPype 的一个重要用途。\n\n- 通过在 JVM 启动参数增加：`-Djava.class.path = ext_classpath`，实现在 Python 代码中调用已有的 Java 扩展包。\n- 通过在 JVM 启动参数增加： `-Djava.ext.dirs = ext_dirs `, 实现在Python 代码中引入 Java 扩展包的其他依赖包。\n\n**关闭JVM**\n\n当使用完 JVM 后，可以通过` jpype.shutdownJVM()` 来关闭 JVM，该函数没有输入参数。\n\n当 Python 程序退出时，JVM 也会自动关闭。\n\n> 注：jpype本身无法多次启动和关闭JVM，在使用是，可以不关闭JVM，在需要启动的地方时进行JVM是否已经启动的判断:\n>\n> ```python\n> if not jpype.isJVMStarted(): \n>      jpype.startJVM()\n> ```\n\n#### 示例\n\n这里演示一个最简单的Java示例：\n\n```python\nimport jpype\nif not jpype.isJVMStarted(): \n     jpype.startJVM(jpype.get_default_jvm_path())\n     System = jpype.JClass('java.lang.System')\n     System.out.println('hello word!')\n```\n\n### Java 的jecell.jar\n\n对Java并不是很熟悉，刚刚简单的过了一便基本的语法，更别提对jar包的理解了，简单从网上搜索大概了解jecell是处理excel的jar，可以生成报表，带图片，动态的，还可以在客户不安装OFFICE的情况下使用。可以实现对excel设置密码和去除密码。\n\n可以在这里下载：[链接: https://pan.baidu.com/s/1XllVYN6CkRpB1R16HS_78Q 提取码: 27xw](https://pan.baidu.com/s/1XllVYN6CkRpB1R16HS_78Q)\n\n下面简单的示例：\n\n```java\nimport java.io.IOException;\nimport com.jxcell.CellException;\nimport com.jxcell.View;\n\n/**\n * excel加密、解密 代码\n */\npublic class EncryptDecryptUtil {\n\n    /**\n     * 读取excel，并进行加密\n     * \n     * @param url excel文件路径 例：\"./aaa.xls\"\n     * @param pwd 加密密码\n     */\n    public static void encrypt(String url, String pwd) {\n        View m_view = new View();\n        try {\n            // read excel\n            m_view.read(url);\n            // set the workbook open password\n            m_view.write(url, pwd);\n        } catch (CellException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * excel 解密\n     */\n    public static void decrypt(String url, String pwd) {\n        View m_view = new View();\n        try {\n            // read the encrypted excel file\n            m_view.read(url, pwd);\n            // write without password protected\n            m_view.write(url);\n        } catch (Exception e) {\n            System.out.println(e.getMessage());\n        }\n    }\n\n    public static void main(String args[]) {\n        // 下面1与2 两个方法请分开执行，可以看到效果\n        //\n        // 1. 把./aaa.xls 添加打开密码123\n        EncryptDecryptUtil.encrypt(\"./aaa.xls\", \"123\");\n        // 2. 把./aaa.xls 密码123 去除\n        // EncryptDecryptUtil.decrypt(\"./aaa.xls\", \"123\");\n\n    }\n}\n\n```\n\n## 实现\n\n经过上面的简单介绍，开始进入主题，先丢代码为敬：`encrypt_xls.py`\n\n```python\nimport jpype\nimport os\n\nproject_dir = os.path.dirname(os.path.abspath(__file__))\n\njvm_path = jpype.get_default_jvm_path()\n# 这里根据实际的jxcell.jar路径进行配置,我这里的放的位置是本文件同级目录的lib/jxcell.jar\njxcell_path = os.path.join(project_dir, 'lib/jxcell.jar')\n\n\ndef encrypt(url, passwd):\n    jpype.startJVM(jvm_path, '-ea', '-Djava.class.path=' + jxcell_path)\n    view = jpype.JClass('com.jxcell.View')\n    m_view = view()\n    m_view.write(url, passwd)\n    return url\n\n\nif __name__ == '__main__':\n    # 在当前目录下创建一个test.xls表格，随便输入一些数据，供测试\n    encrypt('./test.xls', '123')\n```\n\n当前文件有必要说明一下：\n\n- src/\n  - lib/jxcell.jar\n  - encrypt_xls.py\n  - test.xls\n\n运行文件之后，打开test.xls文件会发现已经加密成功。\n\n![文档已加密](https://i.loli.net/2019/04/27/5cc332e6cdc29.png)\n\n\n本文参考：\n\n- [使用 Python 的 JPype 模块调用 Jar 包](<https://testerhome.com/topics/12394>)\n- [[java代码实现对excel加密、解密](https://www.cnblogs.com/haha12/p/4335076.html)](<https://www.cnblogs.com/haha12/p/4335076.html>)\n","source":"_posts/Python实现给excel表格设置密码.md","raw":"---\ntitle: Python实现给excel表格设置密码\ndate: 2019-04-26\ntags: [python, java]\n---\n\n入职新公司，同事让帮忙写一个Python脚本，实现每天定时获取生产环境的数据生成excel表格，推送到指定邮箱。想了想，不难实现，就答应下来了。但是等写完了才被通知到，邮件携带的excel表格，要设置指定密码，进行保护，顿时懵逼，貌似Python暂时不能实现吧？然后各种资料源码查看，然后确定了确实不能实现，先通知同事一声，说Python实现不了设置密码的功能，然后就只能放弃了。\n\n但是哥不是那种容易放弃的人！旁边坐的朱同学说，我看看Java能否实现。果不其然，Java才是万能的！(拍一下各位Java看官大佬们的马屁)。\n\n于是，才有了这个文章，以下简单整理一下实现的过程，虽然都是从网上参考过来的，但是这个功能点是能够实现的，再次记录分享一下，以供下次参考。准确的说，本文应该是“实战Python通过调用Java的第三方jar包完成对excel表格的密码设置”。下面开始正文。\n\n## 环境搭建\n\nPython的环境和JDK的环境就不用说了，我这里使用的是Python3.6和JDK8。重点是以下的一个Python库和一个Java的jar包。\n\n<!--more-->\n\n### Python的JPype库\n\nJPype是一个能够让 Python 代码方便地调用 Java 代码的工具，从而克服了 Python 在某些领域（如服务器端编程）中的不足。JPype的实际运行环境仍然是python runtime，只是在运行期间启动了一个嵌入的jvm。\n\n#### 安装\n\n通过pip进行安装：\n\n```shell\npip install jpype\n```\n\nUbuntu系统还可以通过apt进行安装\n\n```shell\nsudo apt install python-jpype\n```\n\n#### 使用\n\nJPype 提供的 `startJVM() `函数的作用是启动 JAVA 虚拟机，所以在后续的任何 JAVA 代码被调用前，必须先调用此方法启动 JAVA 虚拟机。`get_default_jvm_path`方法可以获取当前系统中JVM的所在路径。\n\n```\nimport jpype\njpype.startJVM(jpype.get_default_jvm_path(), *args)\n```\n\n**第三方包的引用**\n\n很多时候，在 Python 项目中需要调用第三方的 Java 扩展包，这也是 JPype 的一个重要用途。\n\n- 通过在 JVM 启动参数增加：`-Djava.class.path = ext_classpath`，实现在 Python 代码中调用已有的 Java 扩展包。\n- 通过在 JVM 启动参数增加： `-Djava.ext.dirs = ext_dirs `, 实现在Python 代码中引入 Java 扩展包的其他依赖包。\n\n**关闭JVM**\n\n当使用完 JVM 后，可以通过` jpype.shutdownJVM()` 来关闭 JVM，该函数没有输入参数。\n\n当 Python 程序退出时，JVM 也会自动关闭。\n\n> 注：jpype本身无法多次启动和关闭JVM，在使用是，可以不关闭JVM，在需要启动的地方时进行JVM是否已经启动的判断:\n>\n> ```python\n> if not jpype.isJVMStarted(): \n>      jpype.startJVM()\n> ```\n\n#### 示例\n\n这里演示一个最简单的Java示例：\n\n```python\nimport jpype\nif not jpype.isJVMStarted(): \n     jpype.startJVM(jpype.get_default_jvm_path())\n     System = jpype.JClass('java.lang.System')\n     System.out.println('hello word!')\n```\n\n### Java 的jecell.jar\n\n对Java并不是很熟悉，刚刚简单的过了一便基本的语法，更别提对jar包的理解了，简单从网上搜索大概了解jecell是处理excel的jar，可以生成报表，带图片，动态的，还可以在客户不安装OFFICE的情况下使用。可以实现对excel设置密码和去除密码。\n\n可以在这里下载：[链接: https://pan.baidu.com/s/1XllVYN6CkRpB1R16HS_78Q 提取码: 27xw](https://pan.baidu.com/s/1XllVYN6CkRpB1R16HS_78Q)\n\n下面简单的示例：\n\n```java\nimport java.io.IOException;\nimport com.jxcell.CellException;\nimport com.jxcell.View;\n\n/**\n * excel加密、解密 代码\n */\npublic class EncryptDecryptUtil {\n\n    /**\n     * 读取excel，并进行加密\n     * \n     * @param url excel文件路径 例：\"./aaa.xls\"\n     * @param pwd 加密密码\n     */\n    public static void encrypt(String url, String pwd) {\n        View m_view = new View();\n        try {\n            // read excel\n            m_view.read(url);\n            // set the workbook open password\n            m_view.write(url, pwd);\n        } catch (CellException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * excel 解密\n     */\n    public static void decrypt(String url, String pwd) {\n        View m_view = new View();\n        try {\n            // read the encrypted excel file\n            m_view.read(url, pwd);\n            // write without password protected\n            m_view.write(url);\n        } catch (Exception e) {\n            System.out.println(e.getMessage());\n        }\n    }\n\n    public static void main(String args[]) {\n        // 下面1与2 两个方法请分开执行，可以看到效果\n        //\n        // 1. 把./aaa.xls 添加打开密码123\n        EncryptDecryptUtil.encrypt(\"./aaa.xls\", \"123\");\n        // 2. 把./aaa.xls 密码123 去除\n        // EncryptDecryptUtil.decrypt(\"./aaa.xls\", \"123\");\n\n    }\n}\n\n```\n\n## 实现\n\n经过上面的简单介绍，开始进入主题，先丢代码为敬：`encrypt_xls.py`\n\n```python\nimport jpype\nimport os\n\nproject_dir = os.path.dirname(os.path.abspath(__file__))\n\njvm_path = jpype.get_default_jvm_path()\n# 这里根据实际的jxcell.jar路径进行配置,我这里的放的位置是本文件同级目录的lib/jxcell.jar\njxcell_path = os.path.join(project_dir, 'lib/jxcell.jar')\n\n\ndef encrypt(url, passwd):\n    jpype.startJVM(jvm_path, '-ea', '-Djava.class.path=' + jxcell_path)\n    view = jpype.JClass('com.jxcell.View')\n    m_view = view()\n    m_view.write(url, passwd)\n    return url\n\n\nif __name__ == '__main__':\n    # 在当前目录下创建一个test.xls表格，随便输入一些数据，供测试\n    encrypt('./test.xls', '123')\n```\n\n当前文件有必要说明一下：\n\n- src/\n  - lib/jxcell.jar\n  - encrypt_xls.py\n  - test.xls\n\n运行文件之后，打开test.xls文件会发现已经加密成功。\n\n![文档已加密](https://i.loli.net/2019/04/27/5cc332e6cdc29.png)\n\n\n本文参考：\n\n- [使用 Python 的 JPype 模块调用 Jar 包](<https://testerhome.com/topics/12394>)\n- [[java代码实现对excel加密、解密](https://www.cnblogs.com/haha12/p/4335076.html)](<https://www.cnblogs.com/haha12/p/4335076.html>)\n","slug":"Python实现给excel表格设置密码","published":1,"updated":"2021-06-20T10:25:20.123Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluqa1him0017rlog20fhe043","content":"<p>入职新公司，同事让帮忙写一个Python脚本，实现每天定时获取生产环境的数据生成excel表格，推送到指定邮箱。想了想，不难实现，就答应下来了。但是等写完了才被通知到，邮件携带的excel表格，要设置指定密码，进行保护，顿时懵逼，貌似Python暂时不能实现吧？然后各种资料源码查看，然后确定了确实不能实现，先通知同事一声，说Python实现不了设置密码的功能，然后就只能放弃了。</p>\n<p>但是哥不是那种容易放弃的人！旁边坐的朱同学说，我看看Java能否实现。果不其然，Java才是万能的！(拍一下各位Java看官大佬们的马屁)。</p>\n<p>于是，才有了这个文章，以下简单整理一下实现的过程，虽然都是从网上参考过来的，但是这个功能点是能够实现的，再次记录分享一下，以供下次参考。准确的说，本文应该是“实战Python通过调用Java的第三方jar包完成对excel表格的密码设置”。下面开始正文。</p>\n<h2 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h2><p>Python的环境和JDK的环境就不用说了，我这里使用的是Python3.6和JDK8。重点是以下的一个Python库和一个Java的jar包。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"Python的JPype库\"><a href=\"#Python的JPype库\" class=\"headerlink\" title=\"Python的JPype库\"></a>Python的JPype库</h3><p>JPype是一个能够让 Python 代码方便地调用 Java 代码的工具，从而克服了 Python 在某些领域（如服务器端编程）中的不足。JPype的实际运行环境仍然是python runtime，只是在运行期间启动了一个嵌入的jvm。</p>\n<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><p>通过pip进行安装：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install jpype</span><br></pre></td></tr></table></figure>\n\n<p>Ubuntu系统还可以通过apt进行安装</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install python-jpype</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h4><p>JPype 提供的 <code>startJVM() </code>函数的作用是启动 JAVA 虚拟机，所以在后续的任何 JAVA 代码被调用前，必须先调用此方法启动 JAVA 虚拟机。<code>get_default_jvm_path</code>方法可以获取当前系统中JVM的所在路径。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import jpype</span><br><span class=\"line\">jpype.startJVM(jpype.get_default_jvm_path(), *args)</span><br></pre></td></tr></table></figure>\n\n<p><strong>第三方包的引用</strong></p>\n<p>很多时候，在 Python 项目中需要调用第三方的 Java 扩展包，这也是 JPype 的一个重要用途。</p>\n<ul>\n<li>通过在 JVM 启动参数增加：<code>-Djava.class.path = ext_classpath</code>，实现在 Python 代码中调用已有的 Java 扩展包。</li>\n<li>通过在 JVM 启动参数增加： <code>-Djava.ext.dirs = ext_dirs </code>, 实现在Python 代码中引入 Java 扩展包的其他依赖包。</li>\n</ul>\n<p><strong>关闭JVM</strong></p>\n<p>当使用完 JVM 后，可以通过<code> jpype.shutdownJVM()</code> 来关闭 JVM，该函数没有输入参数。</p>\n<p>当 Python 程序退出时，JVM 也会自动关闭。</p>\n<blockquote>\n<p>注：jpype本身无法多次启动和关闭JVM，在使用是，可以不关闭JVM，在需要启动的地方时进行JVM是否已经启动的判断:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> jpype.isJVMStarted(): </span><br><span class=\"line\">     jpype.startJVM()</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h4 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h4><p>这里演示一个最简单的Java示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> jpype</span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> jpype.isJVMStarted(): </span><br><span class=\"line\">     jpype.startJVM(jpype.get_default_jvm_path())</span><br><span class=\"line\">     System = jpype.JClass(<span class=\"string\">&#x27;java.lang.System&#x27;</span>)</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&#x27;hello word!&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Java-的jecell-jar\"><a href=\"#Java-的jecell-jar\" class=\"headerlink\" title=\"Java 的jecell.jar\"></a>Java 的jecell.jar</h3><p>对Java并不是很熟悉，刚刚简单的过了一便基本的语法，更别提对jar包的理解了，简单从网上搜索大概了解jecell是处理excel的jar，可以生成报表，带图片，动态的，还可以在客户不安装OFFICE的情况下使用。可以实现对excel设置密码和去除密码。</p>\n<p>可以在这里下载：<a href=\"https://pan.baidu.com/s/1XllVYN6CkRpB1R16HS_78Q\">链接: https://pan.baidu.com/s/1XllVYN6CkRpB1R16HS_78Q 提取码: 27xw</a></p>\n<p>下面简单的示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.jxcell.CellException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.jxcell.View;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * excel加密、解密 代码</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">EncryptDecryptUtil</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 读取excel，并进行加密</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> url excel文件路径 例：&quot;./aaa.xls&quot;</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> pwd 加密密码</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">encrypt</span><span class=\"params\">(String url, String pwd)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">View</span> <span class=\"variable\">m_view</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">View</span>();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// read excel</span></span><br><span class=\"line\">            m_view.read(url);</span><br><span class=\"line\">            <span class=\"comment\">// set the workbook open password</span></span><br><span class=\"line\">            m_view.write(url, pwd);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (CellException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * excel 解密</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">decrypt</span><span class=\"params\">(String url, String pwd)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">View</span> <span class=\"variable\">m_view</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">View</span>();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// read the encrypted excel file</span></span><br><span class=\"line\">            m_view.read(url, pwd);</span><br><span class=\"line\">            <span class=\"comment\">// write without password protected</span></span><br><span class=\"line\">            m_view.write(url);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            System.out.println(e.getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 下面1与2 两个方法请分开执行，可以看到效果</span></span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\">        <span class=\"comment\">// 1. 把./aaa.xls 添加打开密码123</span></span><br><span class=\"line\">        EncryptDecryptUtil.encrypt(<span class=\"string\">&quot;./aaa.xls&quot;</span>, <span class=\"string\">&quot;123&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 2. 把./aaa.xls 密码123 去除</span></span><br><span class=\"line\">        <span class=\"comment\">// EncryptDecryptUtil.decrypt(&quot;./aaa.xls&quot;, &quot;123&quot;);</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>经过上面的简单介绍，开始进入主题，先丢代码为敬：<code>encrypt_xls.py</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> jpype</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\">project_dir = os.path.dirname(os.path.abspath(__file__))</span><br><span class=\"line\"></span><br><span class=\"line\">jvm_path = jpype.get_default_jvm_path()</span><br><span class=\"line\"><span class=\"comment\"># 这里根据实际的jxcell.jar路径进行配置,我这里的放的位置是本文件同级目录的lib/jxcell.jar</span></span><br><span class=\"line\">jxcell_path = os.path.join(project_dir, <span class=\"string\">&#x27;lib/jxcell.jar&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">encrypt</span>(<span class=\"params\">url, passwd</span>):</span><br><span class=\"line\">    jpype.startJVM(jvm_path, <span class=\"string\">&#x27;-ea&#x27;</span>, <span class=\"string\">&#x27;-Djava.class.path=&#x27;</span> + jxcell_path)</span><br><span class=\"line\">    view = jpype.JClass(<span class=\"string\">&#x27;com.jxcell.View&#x27;</span>)</span><br><span class=\"line\">    m_view = view()</span><br><span class=\"line\">    m_view.write(url, passwd)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> url</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 在当前目录下创建一个test.xls表格，随便输入一些数据，供测试</span></span><br><span class=\"line\">    encrypt(<span class=\"string\">&#x27;./test.xls&#x27;</span>, <span class=\"string\">&#x27;123&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>当前文件有必要说明一下：</p>\n<ul>\n<li>src&#x2F;<ul>\n<li>lib&#x2F;jxcell.jar</li>\n<li>encrypt_xls.py</li>\n<li>test.xls</li>\n</ul>\n</li>\n</ul>\n<p>运行文件之后，打开test.xls文件会发现已经加密成功。</p>\n<p><img src=\"https://i.loli.net/2019/04/27/5cc332e6cdc29.png\" alt=\"文档已加密\"></p>\n<p>本文参考：</p>\n<ul>\n<li><a href=\"https://testerhome.com/topics/12394\">使用 Python 的 JPype 模块调用 Jar 包</a></li>\n<li><a href=\"https://www.cnblogs.com/haha12/p/4335076.html\"><a href=\"https://www.cnblogs.com/haha12/p/4335076.html\">java代码实现对excel加密、解密</a></a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>入职新公司，同事让帮忙写一个Python脚本，实现每天定时获取生产环境的数据生成excel表格，推送到指定邮箱。想了想，不难实现，就答应下来了。但是等写完了才被通知到，邮件携带的excel表格，要设置指定密码，进行保护，顿时懵逼，貌似Python暂时不能实现吧？然后各种资料源码查看，然后确定了确实不能实现，先通知同事一声，说Python实现不了设置密码的功能，然后就只能放弃了。</p>\n<p>但是哥不是那种容易放弃的人！旁边坐的朱同学说，我看看Java能否实现。果不其然，Java才是万能的！(拍一下各位Java看官大佬们的马屁)。</p>\n<p>于是，才有了这个文章，以下简单整理一下实现的过程，虽然都是从网上参考过来的，但是这个功能点是能够实现的，再次记录分享一下，以供下次参考。准确的说，本文应该是“实战Python通过调用Java的第三方jar包完成对excel表格的密码设置”。下面开始正文。</p>\n<h2 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h2><p>Python的环境和JDK的环境就不用说了，我这里使用的是Python3.6和JDK8。重点是以下的一个Python库和一个Java的jar包。</p>","more":"<h3 id=\"Python的JPype库\"><a href=\"#Python的JPype库\" class=\"headerlink\" title=\"Python的JPype库\"></a>Python的JPype库</h3><p>JPype是一个能够让 Python 代码方便地调用 Java 代码的工具，从而克服了 Python 在某些领域（如服务器端编程）中的不足。JPype的实际运行环境仍然是python runtime，只是在运行期间启动了一个嵌入的jvm。</p>\n<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><p>通过pip进行安装：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install jpype</span><br></pre></td></tr></table></figure>\n\n<p>Ubuntu系统还可以通过apt进行安装</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install python-jpype</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h4><p>JPype 提供的 <code>startJVM() </code>函数的作用是启动 JAVA 虚拟机，所以在后续的任何 JAVA 代码被调用前，必须先调用此方法启动 JAVA 虚拟机。<code>get_default_jvm_path</code>方法可以获取当前系统中JVM的所在路径。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import jpype</span><br><span class=\"line\">jpype.startJVM(jpype.get_default_jvm_path(), *args)</span><br></pre></td></tr></table></figure>\n\n<p><strong>第三方包的引用</strong></p>\n<p>很多时候，在 Python 项目中需要调用第三方的 Java 扩展包，这也是 JPype 的一个重要用途。</p>\n<ul>\n<li>通过在 JVM 启动参数增加：<code>-Djava.class.path = ext_classpath</code>，实现在 Python 代码中调用已有的 Java 扩展包。</li>\n<li>通过在 JVM 启动参数增加： <code>-Djava.ext.dirs = ext_dirs </code>, 实现在Python 代码中引入 Java 扩展包的其他依赖包。</li>\n</ul>\n<p><strong>关闭JVM</strong></p>\n<p>当使用完 JVM 后，可以通过<code> jpype.shutdownJVM()</code> 来关闭 JVM，该函数没有输入参数。</p>\n<p>当 Python 程序退出时，JVM 也会自动关闭。</p>\n<blockquote>\n<p>注：jpype本身无法多次启动和关闭JVM，在使用是，可以不关闭JVM，在需要启动的地方时进行JVM是否已经启动的判断:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> jpype.isJVMStarted(): </span><br><span class=\"line\">     jpype.startJVM()</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h4 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h4><p>这里演示一个最简单的Java示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> jpype</span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> jpype.isJVMStarted(): </span><br><span class=\"line\">     jpype.startJVM(jpype.get_default_jvm_path())</span><br><span class=\"line\">     System = jpype.JClass(<span class=\"string\">&#x27;java.lang.System&#x27;</span>)</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&#x27;hello word!&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Java-的jecell-jar\"><a href=\"#Java-的jecell-jar\" class=\"headerlink\" title=\"Java 的jecell.jar\"></a>Java 的jecell.jar</h3><p>对Java并不是很熟悉，刚刚简单的过了一便基本的语法，更别提对jar包的理解了，简单从网上搜索大概了解jecell是处理excel的jar，可以生成报表，带图片，动态的，还可以在客户不安装OFFICE的情况下使用。可以实现对excel设置密码和去除密码。</p>\n<p>可以在这里下载：<a href=\"https://pan.baidu.com/s/1XllVYN6CkRpB1R16HS_78Q\">链接: https://pan.baidu.com/s/1XllVYN6CkRpB1R16HS_78Q 提取码: 27xw</a></p>\n<p>下面简单的示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.jxcell.CellException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.jxcell.View;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * excel加密、解密 代码</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">EncryptDecryptUtil</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 读取excel，并进行加密</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> url excel文件路径 例：&quot;./aaa.xls&quot;</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> pwd 加密密码</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">encrypt</span><span class=\"params\">(String url, String pwd)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">View</span> <span class=\"variable\">m_view</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">View</span>();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// read excel</span></span><br><span class=\"line\">            m_view.read(url);</span><br><span class=\"line\">            <span class=\"comment\">// set the workbook open password</span></span><br><span class=\"line\">            m_view.write(url, pwd);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (CellException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * excel 解密</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">decrypt</span><span class=\"params\">(String url, String pwd)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">View</span> <span class=\"variable\">m_view</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">View</span>();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// read the encrypted excel file</span></span><br><span class=\"line\">            m_view.read(url, pwd);</span><br><span class=\"line\">            <span class=\"comment\">// write without password protected</span></span><br><span class=\"line\">            m_view.write(url);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            System.out.println(e.getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 下面1与2 两个方法请分开执行，可以看到效果</span></span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\">        <span class=\"comment\">// 1. 把./aaa.xls 添加打开密码123</span></span><br><span class=\"line\">        EncryptDecryptUtil.encrypt(<span class=\"string\">&quot;./aaa.xls&quot;</span>, <span class=\"string\">&quot;123&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 2. 把./aaa.xls 密码123 去除</span></span><br><span class=\"line\">        <span class=\"comment\">// EncryptDecryptUtil.decrypt(&quot;./aaa.xls&quot;, &quot;123&quot;);</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>经过上面的简单介绍，开始进入主题，先丢代码为敬：<code>encrypt_xls.py</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> jpype</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\">project_dir = os.path.dirname(os.path.abspath(__file__))</span><br><span class=\"line\"></span><br><span class=\"line\">jvm_path = jpype.get_default_jvm_path()</span><br><span class=\"line\"><span class=\"comment\"># 这里根据实际的jxcell.jar路径进行配置,我这里的放的位置是本文件同级目录的lib/jxcell.jar</span></span><br><span class=\"line\">jxcell_path = os.path.join(project_dir, <span class=\"string\">&#x27;lib/jxcell.jar&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">encrypt</span>(<span class=\"params\">url, passwd</span>):</span><br><span class=\"line\">    jpype.startJVM(jvm_path, <span class=\"string\">&#x27;-ea&#x27;</span>, <span class=\"string\">&#x27;-Djava.class.path=&#x27;</span> + jxcell_path)</span><br><span class=\"line\">    view = jpype.JClass(<span class=\"string\">&#x27;com.jxcell.View&#x27;</span>)</span><br><span class=\"line\">    m_view = view()</span><br><span class=\"line\">    m_view.write(url, passwd)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> url</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 在当前目录下创建一个test.xls表格，随便输入一些数据，供测试</span></span><br><span class=\"line\">    encrypt(<span class=\"string\">&#x27;./test.xls&#x27;</span>, <span class=\"string\">&#x27;123&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>当前文件有必要说明一下：</p>\n<ul>\n<li>src&#x2F;<ul>\n<li>lib&#x2F;jxcell.jar</li>\n<li>encrypt_xls.py</li>\n<li>test.xls</li>\n</ul>\n</li>\n</ul>\n<p>运行文件之后，打开test.xls文件会发现已经加密成功。</p>\n<p><img src=\"https://i.loli.net/2019/04/27/5cc332e6cdc29.png\" alt=\"文档已加密\"></p>\n<p>本文参考：</p>\n<ul>\n<li><a href=\"https://testerhome.com/topics/12394\">使用 Python 的 JPype 模块调用 Jar 包</a></li>\n<li><a href=\"https://www.cnblogs.com/haha12/p/4335076.html\"><a href=\"https://www.cnblogs.com/haha12/p/4335076.html\">java代码实现对excel加密、解密</a></a></li>\n</ul>"},{"title":"Python开发人员犯下的10个最常见的错误","date":"2018-12-20T16:00:00.000Z","_content":"\n## 1 滥用表达式作为函数参数的默认值\n\npython允许通过为函数提供默认值来指定函数参数的，但是当默认值是可变的时，就会产生一些问题：\n\n```python\ndef foo(bar=[]):\n\tbar.append('baz')\n\treturn bar\n```\n\n上面的代码中，期望的是 `foo()` 重复调用（即不指定bar参数）将始终返回 `'baz'` ，因此假设每次 `foo()` 调用 `bar` 被设置为 `[]`。\n\n但是，让我们来看看执行次操作时实际发生的情况：\n\n```shell\n>>> foo()\n['baz']\n>>> foo()\n['baz', 'baz']\n```\n\n咦，为什么每次调用都会默认值附加 `'baz'` 到现有的列表中，而不是每次都创建一个新列表？\n\n答案就是： **函数参数的默认值仅在定义函数时计算一次**。因此 `bar` 仅在 `foo()` 首次定义时将参数初始化为其默认值，但随后调用 `foo()` (即未指定`bar`参数)，将继续使用 `bar` 最初初始化的相同列表。\n\n仅供参考，一个常见的解决方法如下：\n\n```\ndef foo(bar=None):\n\tif not bar:\n\t    bar = []\n\tbar.append('baz')\n\treturn bar\n```\n\n<!--more-->\n\n## 2 错误的使用类变量\n\n请考虑一下示例：\n\n```python\n>>> class A(object):\n...     x = 1\n... \n>>> class B(A):\n...     pass\n... \n>>> class C(A):\n...     pass\n... \n>>> print(A.x, B.x, C.x)\n1 1 1\n```\n\n以上的输出是没有问题的，请继续往下看：\n\n```python\n>>> B.x = 2\n>>> print(A.x, B.x, C.x)\n1 2 1\n```\n\n输出还是如预期的那样，那接下来：\n\n```\n>>> A.x = 3\n>>> print(A.x, B.x, C.x)\n```\n\n可以思考一下上面输出的结果：\n\n`3 2 3`\n\n这是什么情况？我们只改变了A.x，为什么C.x也改变了呢？\n\n\n在python中，类变量在内部作为字典处理，并遵循通常成为方法解析顺序(MRO)的方法，因此在上面的代码中，由于在`C`中找不到`x`属性，因此将在其基类中查找它。换句话数，`C`没有自己的`x`属性，因此引用C.x实际上值得是A.x。\n\n\n## 3 错误的为异常块指定参数\n\n假如你用一下代码：\n\n```python\n# 这段代码是python 2.7版本的\n>>> try:\n...     l = [\"a\", \"b\"]\n...     int(l[2])\n... except (ValueError, IndexError):  # To catch both exceptions, right?\n...     pass\n...\nTraceback (most recent call last):\n  File \"<stdin>\", line 3, in <module>\nIndexError: list index out of range\n```\n\n这里的问题是except语句没有采用这种方式指定的异常列表，相反，在python2.x中，语法 `except Exception, e` 用于将异常绑定到指定的可选的第二个参数(本例中e)，以用于进一步检查。结果在上面的代码中，IndexError异常没有被`except`语句捕获，相反，异常最终被绑定到一个名为`IndexError`的参数。\n\n在`except`语句中，捕获多个异常的正确方法是将第一个参数指定为包含要捕获所有异常的元祖，此外为了获得最大的可移植性，请使用`as`关键字，因为Python2和Python3都支持该语法。\n\n```python\n>>> try:\n...     l = ['a', 'b']\n...     int(l[2])\n... except (ValueError, IndexError) as e:\n...     pass\n... \n>>> \n```\n\n## 4 误解Python范围规范\n\nPython范围解析是基于所谓的LEGB规则。在Python的工作方式中有一些细微之处，让我们看看常见的更高级的Python编程问题：\n\n```\n>>> x = 10\n>>> def foo():\n...     x += 1\n...     print(x)\n...\n>>> foo()\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"<stdin>\", line 2, in foo\nUnboundLocalError: local variable 'x' referenced before assignment\n```\n\n上述问题出现的原因是：当你对作用域中的变量进行赋值时，Python会自动将变量视为该作用域的本地变量，并在任何外部作用域中隐藏任何类似命名的变量。\n\n但在使用列表时，有一个特殊的现象，请看以下代码示例：\n\n```python\n>>> lst = [1, 2, 3]\n>>> def foo1():\n...     lst.append(5)\n...\n>>> foo1()\n>>> lst\n[1, 2, 3, 5]\n>>> lst = [1, 2, 3]\n>>> def foo2():\n...     lst += [5]\n...\n>>> foo2()\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"<stdin>\", line 2, in foo2\nUnboundLocalError: local variable 'lst' referenced before assignment\n```\n\n咦？为什么foo1良好的运行，但是foo2却报错了？？\n\n答案和前面示例问题相同，但无疑更微妙一些。`foo1`不是分配值到lst，而foo2却是。记住`lst += [5]`实际是`lst = lst + [5]`的简写，我们看到foo2正在分配一个值给lst，因此Python推测它是本地范围内。但是我们要分配的值lst是lst自身，因此是未定义。\n\n\n## 5 在迭代时修改列表\n\n以下代码的问题是相当明显的：\n\n```\n>>> odd = lambda x: bool(x % 2)\n>>> numbers = [n for n in range(10)]\n>>> for i in range(len(numbers)):\n...     if odd(numbers[i]):\n...         del numbers[i]\n...\nTraceback (most recent call last):\n  File \"<stdin>\", line 2, in <module>\nIndexError: list index out of range\n```\n\n在迭代时，从列表或数组中删除项是Python常见的问题。幸运的是Python结合许多优雅的编程范例，如果使用得当可以简化代码。另外一个好处是更简单的代码不太可能被意外删除列表项而导致迭代问题。它完美的工作：\n\n```\n>>> odd = lambda x : bool(x % 2)\n>>> numbers = [n for n in range(10)]\n>>> numbers[:] = [n for n in numbers if not odd(n)]  # ahh, the beauty of it all\n>>> numbers\n[0, 2, 4, 6, 8]\n```\n\n## 6 混淆Python如何绑定闭包中的变量\n\n参考以下示例：\n\n```python\n>>> def create_multipliers():\n...     return [lambda x: i * x for i in range(5)]\n...\n>>> for multiplier in create_multipliers():\n...     print(multiplier(2))\n...\n```\n\n你可能期望以下输出：\n\n0\n2\n4\n6\n8\n\n但是你得到的是：\n\n8\n8\n8\n8\n8\n\n这是因为Python调用内部函数时，闭包中使用的变量值是**后期绑定**行为导致的。所以上面的代码中，每当调用任何返回的函数时，在调用i它时，在周围的作用域中查找值，那是循环已经完成，因此i已经分配了它的最终值4。\n\n这个常见问题的解决是有点像黑客的做法：\n\n```python\n>>> def create_multipliers():\n...     return [lambda x, i=i : i * x for i in range(5)]\n...\n>>> for multiplier in create_multipliers():\n...     print(multiplier(2))\n...\n0\n2\n4\n6\n8\n>>>\n```\n\n这里利用了默认参数来生成匿名函数，以实现所需的行为，有些人称之为优雅，有些人会认为微免，有些人会讨厌它。但是作为Python的开发人员，无论如何都要理解它。\n\n\n## 7 创建循环引用\n\n假设你有两个文件，`a.py` 和`b.py` 而且每个文件都导入另一个文件，如下所示：\n\n在`a.py`中：\n\n```python\nimport b\n\ndef f():\n\treturn b.x\n\nprint(f())\n```\n\n在`b.py`中：\n\n```python\nimport a\n\nx = 1\n\ndef g():\n\tprint(a.f())\n```\n\n首先让我们尝试导入`a.py`\n\n```\n>>> import a\n1\n```\n\n到此，没有出现异常，也许这个会给你带来惊喜，毕竟，我们这里有一个循环导入的问题，大概应该是一个问题，不应该？答案是，仅仅存在循环导入本身并不是Python的一个问题。如果已导入的模块，Python足够聪明，不会尝试重新导入它。但是根据每个模块尝试访问另一个模块中定义的函数或变量，你可能会遇到一些问题。\n\n所以回到例子中，当我们导入`a.py`，它导入`b.py`有没有问题？因为`b.py` 不需要从`a.py`中导入任何变量，这是因为唯一调用的`a.f()`还是在调用`g()`时被调用，所以此时`a.py`或`b.py`中没有任何内容调用`g()`，所以一切看起来是美好的。\n\n\n如果我们尝试导入`b.py`，看看会发生什么？(前提是没有先导入`a.py`)\n\n```\n>>> import b\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/home/wen/b.py\", line 1, in <module>\n    import a\n  File \"/home/wen/a.py\", line 8, in <module>\n    print(f())\n  File \"/home/wen/a.py\", line 5, in f\n    return b.x\nAttributeError: module 'b' has no attribute 'x'\n>>>\n```\n\n这就出现问题了。 在导入`b.py`中，他会尝试导入`a.py`,而后者又会调用`f()`尝试访问的内容`b.x`，但`b.x`尚未定义，因此出现`AttributeError`问题。\n\n这里提供一个简单的方案处理这个问题，只需要修改`b.py`，在`g()`中导入`a.py`：\n\n```python\nx = 1\ndef g():\n\timport a\n\tprint(a.f())\n```\n\n当我们导入它时，一切都会变得美好：\n\n```python\n>>> import b\n>>> b.g()\n1\n1\n```\n\n## 8 名称与Python标准库模块冲突\n\nPython的优点之一是它提供了“开箱即用”的丰富的库模块。但是如果你没有意识的避开它，那么在发成自定义模块与Python标准库模块冲突的几率会增大很多。\n\n## 9 未能解决Python2和Python3之间的差异\n\n考虑一下文件 `foo.py`\n\n```python\nimport sys\n\ndef bar(i):\n    if i == 1:\n        raise KeyError(1)\n    if i == 2:\n        raise ValueError(2)\n\ndef bad():\n    e = None\n    try:\n        bar(int(sys.argv[1]))\n    except KeyError as e:\n        print('key error')\n    except ValueError as e:\n        print('value error')\n    print(e)\n\nbad()\n```\n\n在Python2上，正常运行：\n\n```python\n$ python foo.py 1\nkey error\n1\n$ python foo.py 2\nvalue error\n2\n```\n\n但是在Python3上：\n\n```python\n$ python3 foo.py 1\nkey error\nTraceback (most recent call last):\n  File \"foo.py\", line 19, in <module>\n    bad()\n  File \"foo.py\", line 17, in bad\n    print(e)\nUnboundLocalError: local variable 'e' referenced before assignment\n```\n\n\n“问题”是，在Python 3中，异常对象超出except块的范围是不可访问的。（原因是，否则，它会在内存中保持堆栈帧的引用循环，直到垃圾收集器运行并从内存中清除引用。\n\n避免此问题的一种方法是在块的范围之外维护对异常对象的引用，以except使其保持可访问状态。这是使用此技术的上一个示例的一个版本，从而产生兼容Python 2和Python 3的代码：\n\n```python\nimport sys\n\ndef bar(i):\n    if i == 1:\n        raise KeyError(1)\n    if i == 2:\n        raise ValueError(2)\n\ndef good():\n    exception = None\n    try:\n        bar(int(sys.argv[1]))\n    except KeyError as e:\n        exception = e\n        print('key error')\n    except ValueError as e:\n        exception = e\n        print('value error')\n    print(exception)\n\ngood()\n```\n\n在Python3上运行：\n\n```python\n$ python3 foo.py 1\nkey error\n1\n$ python3 foo.py 2\nvalue error\n2\n```\n\n## 10 滥用`__del__`方法\n\n假设你在一个名为的文件中有这个`mod.py`：\n\n```\nimport foo\n\nclass Bar(object):\n\n\t...\n\n\tdef __del__(self):\n\t\tfoo.cleanup(slef.myhandle())\n```\n\n然后你试着这样做 `another_mod.py`:\n\n```\nimport mod\nmybar = mod.Bar()\n```\n\n你会得到一个丑陋的`AttributeError`。\n\n当解释器关闭时，模块的全局变量都被设置为None。因此，在上面的示例中，在`__del__`调用的位置，名称`foo`已设置为`None`。\n\n解决方案是使用`atexit.register()`。这样，当您的程序完成执行时（正常退出时），您的注册处理程序将在解释器关闭之前启动:\n\n```\nimport foo\nimport atexit\n\ndef cleanup(handle):\n    foo.cleanup(handle)\n\n\nclass Bar(object):\n    def __init__(self):\n        ...\n        atexit.register(cleanup, self.myhandle)\n```\n\n此实现提供了一种干净可靠的方法，可在正常程序终止时调用任何所需的清理功能。显然，foo.cleanup要决定如何处理绑定到名称的对象self.myhandle，但是你明白了。\n\n\n[原文](https://www.toptal.com/python/top-10-mistakes-that-python-programmers-make)\n","source":"_posts/Python开发人员犯下的10个最常见的错误.md","raw":"---\ntitle: Python开发人员犯下的10个最常见的错误\ndate: 2018-12-21\ntags: [python]\n---\n\n## 1 滥用表达式作为函数参数的默认值\n\npython允许通过为函数提供默认值来指定函数参数的，但是当默认值是可变的时，就会产生一些问题：\n\n```python\ndef foo(bar=[]):\n\tbar.append('baz')\n\treturn bar\n```\n\n上面的代码中，期望的是 `foo()` 重复调用（即不指定bar参数）将始终返回 `'baz'` ，因此假设每次 `foo()` 调用 `bar` 被设置为 `[]`。\n\n但是，让我们来看看执行次操作时实际发生的情况：\n\n```shell\n>>> foo()\n['baz']\n>>> foo()\n['baz', 'baz']\n```\n\n咦，为什么每次调用都会默认值附加 `'baz'` 到现有的列表中，而不是每次都创建一个新列表？\n\n答案就是： **函数参数的默认值仅在定义函数时计算一次**。因此 `bar` 仅在 `foo()` 首次定义时将参数初始化为其默认值，但随后调用 `foo()` (即未指定`bar`参数)，将继续使用 `bar` 最初初始化的相同列表。\n\n仅供参考，一个常见的解决方法如下：\n\n```\ndef foo(bar=None):\n\tif not bar:\n\t    bar = []\n\tbar.append('baz')\n\treturn bar\n```\n\n<!--more-->\n\n## 2 错误的使用类变量\n\n请考虑一下示例：\n\n```python\n>>> class A(object):\n...     x = 1\n... \n>>> class B(A):\n...     pass\n... \n>>> class C(A):\n...     pass\n... \n>>> print(A.x, B.x, C.x)\n1 1 1\n```\n\n以上的输出是没有问题的，请继续往下看：\n\n```python\n>>> B.x = 2\n>>> print(A.x, B.x, C.x)\n1 2 1\n```\n\n输出还是如预期的那样，那接下来：\n\n```\n>>> A.x = 3\n>>> print(A.x, B.x, C.x)\n```\n\n可以思考一下上面输出的结果：\n\n`3 2 3`\n\n这是什么情况？我们只改变了A.x，为什么C.x也改变了呢？\n\n\n在python中，类变量在内部作为字典处理，并遵循通常成为方法解析顺序(MRO)的方法，因此在上面的代码中，由于在`C`中找不到`x`属性，因此将在其基类中查找它。换句话数，`C`没有自己的`x`属性，因此引用C.x实际上值得是A.x。\n\n\n## 3 错误的为异常块指定参数\n\n假如你用一下代码：\n\n```python\n# 这段代码是python 2.7版本的\n>>> try:\n...     l = [\"a\", \"b\"]\n...     int(l[2])\n... except (ValueError, IndexError):  # To catch both exceptions, right?\n...     pass\n...\nTraceback (most recent call last):\n  File \"<stdin>\", line 3, in <module>\nIndexError: list index out of range\n```\n\n这里的问题是except语句没有采用这种方式指定的异常列表，相反，在python2.x中，语法 `except Exception, e` 用于将异常绑定到指定的可选的第二个参数(本例中e)，以用于进一步检查。结果在上面的代码中，IndexError异常没有被`except`语句捕获，相反，异常最终被绑定到一个名为`IndexError`的参数。\n\n在`except`语句中，捕获多个异常的正确方法是将第一个参数指定为包含要捕获所有异常的元祖，此外为了获得最大的可移植性，请使用`as`关键字，因为Python2和Python3都支持该语法。\n\n```python\n>>> try:\n...     l = ['a', 'b']\n...     int(l[2])\n... except (ValueError, IndexError) as e:\n...     pass\n... \n>>> \n```\n\n## 4 误解Python范围规范\n\nPython范围解析是基于所谓的LEGB规则。在Python的工作方式中有一些细微之处，让我们看看常见的更高级的Python编程问题：\n\n```\n>>> x = 10\n>>> def foo():\n...     x += 1\n...     print(x)\n...\n>>> foo()\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"<stdin>\", line 2, in foo\nUnboundLocalError: local variable 'x' referenced before assignment\n```\n\n上述问题出现的原因是：当你对作用域中的变量进行赋值时，Python会自动将变量视为该作用域的本地变量，并在任何外部作用域中隐藏任何类似命名的变量。\n\n但在使用列表时，有一个特殊的现象，请看以下代码示例：\n\n```python\n>>> lst = [1, 2, 3]\n>>> def foo1():\n...     lst.append(5)\n...\n>>> foo1()\n>>> lst\n[1, 2, 3, 5]\n>>> lst = [1, 2, 3]\n>>> def foo2():\n...     lst += [5]\n...\n>>> foo2()\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"<stdin>\", line 2, in foo2\nUnboundLocalError: local variable 'lst' referenced before assignment\n```\n\n咦？为什么foo1良好的运行，但是foo2却报错了？？\n\n答案和前面示例问题相同，但无疑更微妙一些。`foo1`不是分配值到lst，而foo2却是。记住`lst += [5]`实际是`lst = lst + [5]`的简写，我们看到foo2正在分配一个值给lst，因此Python推测它是本地范围内。但是我们要分配的值lst是lst自身，因此是未定义。\n\n\n## 5 在迭代时修改列表\n\n以下代码的问题是相当明显的：\n\n```\n>>> odd = lambda x: bool(x % 2)\n>>> numbers = [n for n in range(10)]\n>>> for i in range(len(numbers)):\n...     if odd(numbers[i]):\n...         del numbers[i]\n...\nTraceback (most recent call last):\n  File \"<stdin>\", line 2, in <module>\nIndexError: list index out of range\n```\n\n在迭代时，从列表或数组中删除项是Python常见的问题。幸运的是Python结合许多优雅的编程范例，如果使用得当可以简化代码。另外一个好处是更简单的代码不太可能被意外删除列表项而导致迭代问题。它完美的工作：\n\n```\n>>> odd = lambda x : bool(x % 2)\n>>> numbers = [n for n in range(10)]\n>>> numbers[:] = [n for n in numbers if not odd(n)]  # ahh, the beauty of it all\n>>> numbers\n[0, 2, 4, 6, 8]\n```\n\n## 6 混淆Python如何绑定闭包中的变量\n\n参考以下示例：\n\n```python\n>>> def create_multipliers():\n...     return [lambda x: i * x for i in range(5)]\n...\n>>> for multiplier in create_multipliers():\n...     print(multiplier(2))\n...\n```\n\n你可能期望以下输出：\n\n0\n2\n4\n6\n8\n\n但是你得到的是：\n\n8\n8\n8\n8\n8\n\n这是因为Python调用内部函数时，闭包中使用的变量值是**后期绑定**行为导致的。所以上面的代码中，每当调用任何返回的函数时，在调用i它时，在周围的作用域中查找值，那是循环已经完成，因此i已经分配了它的最终值4。\n\n这个常见问题的解决是有点像黑客的做法：\n\n```python\n>>> def create_multipliers():\n...     return [lambda x, i=i : i * x for i in range(5)]\n...\n>>> for multiplier in create_multipliers():\n...     print(multiplier(2))\n...\n0\n2\n4\n6\n8\n>>>\n```\n\n这里利用了默认参数来生成匿名函数，以实现所需的行为，有些人称之为优雅，有些人会认为微免，有些人会讨厌它。但是作为Python的开发人员，无论如何都要理解它。\n\n\n## 7 创建循环引用\n\n假设你有两个文件，`a.py` 和`b.py` 而且每个文件都导入另一个文件，如下所示：\n\n在`a.py`中：\n\n```python\nimport b\n\ndef f():\n\treturn b.x\n\nprint(f())\n```\n\n在`b.py`中：\n\n```python\nimport a\n\nx = 1\n\ndef g():\n\tprint(a.f())\n```\n\n首先让我们尝试导入`a.py`\n\n```\n>>> import a\n1\n```\n\n到此，没有出现异常，也许这个会给你带来惊喜，毕竟，我们这里有一个循环导入的问题，大概应该是一个问题，不应该？答案是，仅仅存在循环导入本身并不是Python的一个问题。如果已导入的模块，Python足够聪明，不会尝试重新导入它。但是根据每个模块尝试访问另一个模块中定义的函数或变量，你可能会遇到一些问题。\n\n所以回到例子中，当我们导入`a.py`，它导入`b.py`有没有问题？因为`b.py` 不需要从`a.py`中导入任何变量，这是因为唯一调用的`a.f()`还是在调用`g()`时被调用，所以此时`a.py`或`b.py`中没有任何内容调用`g()`，所以一切看起来是美好的。\n\n\n如果我们尝试导入`b.py`，看看会发生什么？(前提是没有先导入`a.py`)\n\n```\n>>> import b\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/home/wen/b.py\", line 1, in <module>\n    import a\n  File \"/home/wen/a.py\", line 8, in <module>\n    print(f())\n  File \"/home/wen/a.py\", line 5, in f\n    return b.x\nAttributeError: module 'b' has no attribute 'x'\n>>>\n```\n\n这就出现问题了。 在导入`b.py`中，他会尝试导入`a.py`,而后者又会调用`f()`尝试访问的内容`b.x`，但`b.x`尚未定义，因此出现`AttributeError`问题。\n\n这里提供一个简单的方案处理这个问题，只需要修改`b.py`，在`g()`中导入`a.py`：\n\n```python\nx = 1\ndef g():\n\timport a\n\tprint(a.f())\n```\n\n当我们导入它时，一切都会变得美好：\n\n```python\n>>> import b\n>>> b.g()\n1\n1\n```\n\n## 8 名称与Python标准库模块冲突\n\nPython的优点之一是它提供了“开箱即用”的丰富的库模块。但是如果你没有意识的避开它，那么在发成自定义模块与Python标准库模块冲突的几率会增大很多。\n\n## 9 未能解决Python2和Python3之间的差异\n\n考虑一下文件 `foo.py`\n\n```python\nimport sys\n\ndef bar(i):\n    if i == 1:\n        raise KeyError(1)\n    if i == 2:\n        raise ValueError(2)\n\ndef bad():\n    e = None\n    try:\n        bar(int(sys.argv[1]))\n    except KeyError as e:\n        print('key error')\n    except ValueError as e:\n        print('value error')\n    print(e)\n\nbad()\n```\n\n在Python2上，正常运行：\n\n```python\n$ python foo.py 1\nkey error\n1\n$ python foo.py 2\nvalue error\n2\n```\n\n但是在Python3上：\n\n```python\n$ python3 foo.py 1\nkey error\nTraceback (most recent call last):\n  File \"foo.py\", line 19, in <module>\n    bad()\n  File \"foo.py\", line 17, in bad\n    print(e)\nUnboundLocalError: local variable 'e' referenced before assignment\n```\n\n\n“问题”是，在Python 3中，异常对象超出except块的范围是不可访问的。（原因是，否则，它会在内存中保持堆栈帧的引用循环，直到垃圾收集器运行并从内存中清除引用。\n\n避免此问题的一种方法是在块的范围之外维护对异常对象的引用，以except使其保持可访问状态。这是使用此技术的上一个示例的一个版本，从而产生兼容Python 2和Python 3的代码：\n\n```python\nimport sys\n\ndef bar(i):\n    if i == 1:\n        raise KeyError(1)\n    if i == 2:\n        raise ValueError(2)\n\ndef good():\n    exception = None\n    try:\n        bar(int(sys.argv[1]))\n    except KeyError as e:\n        exception = e\n        print('key error')\n    except ValueError as e:\n        exception = e\n        print('value error')\n    print(exception)\n\ngood()\n```\n\n在Python3上运行：\n\n```python\n$ python3 foo.py 1\nkey error\n1\n$ python3 foo.py 2\nvalue error\n2\n```\n\n## 10 滥用`__del__`方法\n\n假设你在一个名为的文件中有这个`mod.py`：\n\n```\nimport foo\n\nclass Bar(object):\n\n\t...\n\n\tdef __del__(self):\n\t\tfoo.cleanup(slef.myhandle())\n```\n\n然后你试着这样做 `another_mod.py`:\n\n```\nimport mod\nmybar = mod.Bar()\n```\n\n你会得到一个丑陋的`AttributeError`。\n\n当解释器关闭时，模块的全局变量都被设置为None。因此，在上面的示例中，在`__del__`调用的位置，名称`foo`已设置为`None`。\n\n解决方案是使用`atexit.register()`。这样，当您的程序完成执行时（正常退出时），您的注册处理程序将在解释器关闭之前启动:\n\n```\nimport foo\nimport atexit\n\ndef cleanup(handle):\n    foo.cleanup(handle)\n\n\nclass Bar(object):\n    def __init__(self):\n        ...\n        atexit.register(cleanup, self.myhandle)\n```\n\n此实现提供了一种干净可靠的方法，可在正常程序终止时调用任何所需的清理功能。显然，foo.cleanup要决定如何处理绑定到名称的对象self.myhandle，但是你明白了。\n\n\n[原文](https://www.toptal.com/python/top-10-mistakes-that-python-programmers-make)\n","slug":"Python开发人员犯下的10个最常见的错误","published":1,"updated":"2021-06-20T10:25:20.124Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluqa1him0019rloghtzx0k22","content":"<h2 id=\"1-滥用表达式作为函数参数的默认值\"><a href=\"#1-滥用表达式作为函数参数的默认值\" class=\"headerlink\" title=\"1 滥用表达式作为函数参数的默认值\"></a>1 滥用表达式作为函数参数的默认值</h2><p>python允许通过为函数提供默认值来指定函数参数的，但是当默认值是可变的时，就会产生一些问题：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">foo</span>(<span class=\"params\">bar=[]</span>):</span><br><span class=\"line\">\tbar.append(<span class=\"string\">&#x27;baz&#x27;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> bar</span><br></pre></td></tr></table></figure>\n\n<p>上面的代码中，期望的是 <code>foo()</code> 重复调用（即不指定bar参数）将始终返回 <code>&#39;baz&#39;</code> ，因此假设每次 <code>foo()</code> 调用 <code>bar</code> 被设置为 <code>[]</code>。</p>\n<p>但是，让我们来看看执行次操作时实际发生的情况：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt;</span><span class=\"language-bash\">&gt;&gt; foo()</span></span><br><span class=\"line\">[&#x27;baz&#x27;]</span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;</span><span class=\"language-bash\">&gt;&gt; foo()</span></span><br><span class=\"line\">[&#x27;baz&#x27;, &#x27;baz&#x27;]</span><br></pre></td></tr></table></figure>\n\n<p>咦，为什么每次调用都会默认值附加 <code>&#39;baz&#39;</code> 到现有的列表中，而不是每次都创建一个新列表？</p>\n<p>答案就是： <strong>函数参数的默认值仅在定义函数时计算一次</strong>。因此 <code>bar</code> 仅在 <code>foo()</code> 首次定义时将参数初始化为其默认值，但随后调用 <code>foo()</code> (即未指定<code>bar</code>参数)，将继续使用 <code>bar</code> 最初初始化的相同列表。</p>\n<p>仅供参考，一个常见的解决方法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def foo(bar=None):</span><br><span class=\"line\">\tif not bar:</span><br><span class=\"line\">\t    bar = []</span><br><span class=\"line\">\tbar.append(&#x27;baz&#x27;)</span><br><span class=\"line\">\treturn bar</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"2-错误的使用类变量\"><a href=\"#2-错误的使用类变量\" class=\"headerlink\" title=\"2 错误的使用类变量\"></a>2 错误的使用类变量</h2><p>请考虑一下示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">class</span> <span class=\"title class_\">A</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\"><span class=\"meta\">... </span>    x = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"meta\">... </span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">class</span> <span class=\"title class_\">B</span>(<span class=\"title class_ inherited__\">A</span>):</span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">pass</span></span><br><span class=\"line\"><span class=\"meta\">... </span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">class</span> <span class=\"title class_\">C</span>(<span class=\"title class_ inherited__\">A</span>):</span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">pass</span></span><br><span class=\"line\"><span class=\"meta\">... </span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(A.x, B.x, C.x)</span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">1</span> <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>以上的输出是没有问题的，请继续往下看：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>B.x = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(A.x, B.x, C.x)</span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>输出还是如预期的那样，那接下来：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; A.x = 3</span><br><span class=\"line\">&gt;&gt;&gt; print(A.x, B.x, C.x)</span><br></pre></td></tr></table></figure>\n\n<p>可以思考一下上面输出的结果：</p>\n<p><code>3 2 3</code></p>\n<p>这是什么情况？我们只改变了A.x，为什么C.x也改变了呢？</p>\n<p>在python中，类变量在内部作为字典处理，并遵循通常成为方法解析顺序(MRO)的方法，因此在上面的代码中，由于在<code>C</code>中找不到<code>x</code>属性，因此将在其基类中查找它。换句话数，<code>C</code>没有自己的<code>x</code>属性，因此引用C.x实际上值得是A.x。</p>\n<h2 id=\"3-错误的为异常块指定参数\"><a href=\"#3-错误的为异常块指定参数\" class=\"headerlink\" title=\"3 错误的为异常块指定参数\"></a>3 错误的为异常块指定参数</h2><p>假如你用一下代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 这段代码是python 2.7版本的</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">try</span>:</span><br><span class=\"line\"><span class=\"meta\">... </span>    l = [<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>]</span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"built_in\">int</span>(l[<span class=\"number\">2</span>])</span><br><span class=\"line\"><span class=\"meta\">... </span><span class=\"keyword\">except</span> (ValueError, IndexError):  <span class=\"comment\"># To catch both exceptions, right?</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">pass</span></span><br><span class=\"line\">...</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">&quot;&lt;stdin&gt;&quot;</span>, line <span class=\"number\">3</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">IndexError: <span class=\"built_in\">list</span> index out of <span class=\"built_in\">range</span></span><br></pre></td></tr></table></figure>\n\n<p>这里的问题是except语句没有采用这种方式指定的异常列表，相反，在python2.x中，语法 <code>except Exception, e</code> 用于将异常绑定到指定的可选的第二个参数(本例中e)，以用于进一步检查。结果在上面的代码中，IndexError异常没有被<code>except</code>语句捕获，相反，异常最终被绑定到一个名为<code>IndexError</code>的参数。</p>\n<p>在<code>except</code>语句中，捕获多个异常的正确方法是将第一个参数指定为包含要捕获所有异常的元祖，此外为了获得最大的可移植性，请使用<code>as</code>关键字，因为Python2和Python3都支持该语法。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">try</span>:</span><br><span class=\"line\"><span class=\"meta\">... </span>    l = [<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>]</span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"built_in\">int</span>(l[<span class=\"number\">2</span>])</span><br><span class=\"line\"><span class=\"meta\">... </span><span class=\"keyword\">except</span> (ValueError, IndexError) <span class=\"keyword\">as</span> e:</span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">pass</span></span><br><span class=\"line\"><span class=\"meta\">... </span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-误解Python范围规范\"><a href=\"#4-误解Python范围规范\" class=\"headerlink\" title=\"4 误解Python范围规范\"></a>4 误解Python范围规范</h2><p>Python范围解析是基于所谓的LEGB规则。在Python的工作方式中有一些细微之处，让我们看看常见的更高级的Python编程问题：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; x = 10</span><br><span class=\"line\">&gt;&gt;&gt; def foo():</span><br><span class=\"line\">...     x += 1</span><br><span class=\"line\">...     print(x)</span><br><span class=\"line\">...</span><br><span class=\"line\">&gt;&gt;&gt; foo()</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class=\"line\">  File &quot;&lt;stdin&gt;&quot;, line 2, in foo</span><br><span class=\"line\">UnboundLocalError: local variable &#x27;x&#x27; referenced before assignment</span><br></pre></td></tr></table></figure>\n\n<p>上述问题出现的原因是：当你对作用域中的变量进行赋值时，Python会自动将变量视为该作用域的本地变量，并在任何外部作用域中隐藏任何类似命名的变量。</p>\n<p>但在使用列表时，有一个特殊的现象，请看以下代码示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>lst = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">def</span> <span class=\"title function_\">foo1</span>():</span><br><span class=\"line\"><span class=\"meta\">... </span>    lst.append(<span class=\"number\">5</span>)</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>foo1()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>lst</span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>lst = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">def</span> <span class=\"title function_\">foo2</span>():</span><br><span class=\"line\"><span class=\"meta\">... </span>    lst += [<span class=\"number\">5</span>]</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>foo2()</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">&quot;&lt;stdin&gt;&quot;</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">  File <span class=\"string\">&quot;&lt;stdin&gt;&quot;</span>, line <span class=\"number\">2</span>, <span class=\"keyword\">in</span> foo2</span><br><span class=\"line\">UnboundLocalError: local variable <span class=\"string\">&#x27;lst&#x27;</span> referenced before assignment</span><br></pre></td></tr></table></figure>\n\n<p>咦？为什么foo1良好的运行，但是foo2却报错了？？</p>\n<p>答案和前面示例问题相同，但无疑更微妙一些。<code>foo1</code>不是分配值到lst，而foo2却是。记住<code>lst += [5]</code>实际是<code>lst = lst + [5]</code>的简写，我们看到foo2正在分配一个值给lst，因此Python推测它是本地范围内。但是我们要分配的值lst是lst自身，因此是未定义。</p>\n<h2 id=\"5-在迭代时修改列表\"><a href=\"#5-在迭代时修改列表\" class=\"headerlink\" title=\"5 在迭代时修改列表\"></a>5 在迭代时修改列表</h2><p>以下代码的问题是相当明显的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; odd = lambda x: bool(x % 2)</span><br><span class=\"line\">&gt;&gt;&gt; numbers = [n for n in range(10)]</span><br><span class=\"line\">&gt;&gt;&gt; for i in range(len(numbers)):</span><br><span class=\"line\">...     if odd(numbers[i]):</span><br><span class=\"line\">...         del numbers[i]</span><br><span class=\"line\">...</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File &quot;&lt;stdin&gt;&quot;, line 2, in &lt;module&gt;</span><br><span class=\"line\">IndexError: list index out of range</span><br></pre></td></tr></table></figure>\n\n<p>在迭代时，从列表或数组中删除项是Python常见的问题。幸运的是Python结合许多优雅的编程范例，如果使用得当可以简化代码。另外一个好处是更简单的代码不太可能被意外删除列表项而导致迭代问题。它完美的工作：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; odd = lambda x : bool(x % 2)</span><br><span class=\"line\">&gt;&gt;&gt; numbers = [n for n in range(10)]</span><br><span class=\"line\">&gt;&gt;&gt; numbers[:] = [n for n in numbers if not odd(n)]  # ahh, the beauty of it all</span><br><span class=\"line\">&gt;&gt;&gt; numbers</span><br><span class=\"line\">[0, 2, 4, 6, 8]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-混淆Python如何绑定闭包中的变量\"><a href=\"#6-混淆Python如何绑定闭包中的变量\" class=\"headerlink\" title=\"6 混淆Python如何绑定闭包中的变量\"></a>6 混淆Python如何绑定闭包中的变量</h2><p>参考以下示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">def</span> <span class=\"title function_\">create_multipliers</span>():</span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">return</span> [<span class=\"keyword\">lambda</span> x: i * x <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">5</span>)]</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">for</span> multiplier <span class=\"keyword\">in</span> create_multipliers():</span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"built_in\">print</span>(multiplier(<span class=\"number\">2</span>))</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>你可能期望以下输出：</p>\n<p>0<br>2<br>4<br>6<br>8</p>\n<p>但是你得到的是：</p>\n<p>8<br>8<br>8<br>8<br>8</p>\n<p>这是因为Python调用内部函数时，闭包中使用的变量值是<strong>后期绑定</strong>行为导致的。所以上面的代码中，每当调用任何返回的函数时，在调用i它时，在周围的作用域中查找值，那是循环已经完成，因此i已经分配了它的最终值4。</p>\n<p>这个常见问题的解决是有点像黑客的做法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">def</span> <span class=\"title function_\">create_multipliers</span>():</span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">return</span> [<span class=\"keyword\">lambda</span> x, i=i : i * x <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">5</span>)]</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">for</span> multiplier <span class=\"keyword\">in</span> create_multipliers():</span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"built_in\">print</span>(multiplier(<span class=\"number\">2</span>))</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"number\">8</span></span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>\n\n<p>这里利用了默认参数来生成匿名函数，以实现所需的行为，有些人称之为优雅，有些人会认为微免，有些人会讨厌它。但是作为Python的开发人员，无论如何都要理解它。</p>\n<h2 id=\"7-创建循环引用\"><a href=\"#7-创建循环引用\" class=\"headerlink\" title=\"7 创建循环引用\"></a>7 创建循环引用</h2><p>假设你有两个文件，<code>a.py</code> 和<code>b.py</code> 而且每个文件都导入另一个文件，如下所示：</p>\n<p>在<code>a.py</code>中：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> b</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">f</span>():</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> b.x</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(f())</span><br></pre></td></tr></table></figure>\n\n<p>在<code>b.py</code>中：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> a</span><br><span class=\"line\"></span><br><span class=\"line\">x = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">g</span>():</span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(a.f())</span><br></pre></td></tr></table></figure>\n\n<p>首先让我们尝试导入<code>a.py</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; import a</span><br><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<p>到此，没有出现异常，也许这个会给你带来惊喜，毕竟，我们这里有一个循环导入的问题，大概应该是一个问题，不应该？答案是，仅仅存在循环导入本身并不是Python的一个问题。如果已导入的模块，Python足够聪明，不会尝试重新导入它。但是根据每个模块尝试访问另一个模块中定义的函数或变量，你可能会遇到一些问题。</p>\n<p>所以回到例子中，当我们导入<code>a.py</code>，它导入<code>b.py</code>有没有问题？因为<code>b.py</code> 不需要从<code>a.py</code>中导入任何变量，这是因为唯一调用的<code>a.f()</code>还是在调用<code>g()</code>时被调用，所以此时<code>a.py</code>或<code>b.py</code>中没有任何内容调用<code>g()</code>，所以一切看起来是美好的。</p>\n<p>如果我们尝试导入<code>b.py</code>，看看会发生什么？(前提是没有先导入<code>a.py</code>)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; import b</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class=\"line\">  File &quot;/home/wen/b.py&quot;, line 1, in &lt;module&gt;</span><br><span class=\"line\">    import a</span><br><span class=\"line\">  File &quot;/home/wen/a.py&quot;, line 8, in &lt;module&gt;</span><br><span class=\"line\">    print(f())</span><br><span class=\"line\">  File &quot;/home/wen/a.py&quot;, line 5, in f</span><br><span class=\"line\">    return b.x</span><br><span class=\"line\">AttributeError: module &#x27;b&#x27; has no attribute &#x27;x&#x27;</span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>\n\n<p>这就出现问题了。 在导入<code>b.py</code>中，他会尝试导入<code>a.py</code>,而后者又会调用<code>f()</code>尝试访问的内容<code>b.x</code>，但<code>b.x</code>尚未定义，因此出现<code>AttributeError</code>问题。</p>\n<p>这里提供一个简单的方案处理这个问题，只需要修改<code>b.py</code>，在<code>g()</code>中导入<code>a.py</code>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">g</span>():</span><br><span class=\"line\">\t<span class=\"keyword\">import</span> a</span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(a.f())</span><br></pre></td></tr></table></figure>\n\n<p>当我们导入它时，一切都会变得美好：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> b</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b.g()</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"8-名称与Python标准库模块冲突\"><a href=\"#8-名称与Python标准库模块冲突\" class=\"headerlink\" title=\"8 名称与Python标准库模块冲突\"></a>8 名称与Python标准库模块冲突</h2><p>Python的优点之一是它提供了“开箱即用”的丰富的库模块。但是如果你没有意识的避开它，那么在发成自定义模块与Python标准库模块冲突的几率会增大很多。</p>\n<h2 id=\"9-未能解决Python2和Python3之间的差异\"><a href=\"#9-未能解决Python2和Python3之间的差异\" class=\"headerlink\" title=\"9 未能解决Python2和Python3之间的差异\"></a>9 未能解决Python2和Python3之间的差异</h2><p>考虑一下文件 <code>foo.py</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">bar</span>(<span class=\"params\">i</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> i == <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">raise</span> KeyError(<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> i == <span class=\"number\">2</span>:</span><br><span class=\"line\">        <span class=\"keyword\">raise</span> ValueError(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">bad</span>():</span><br><span class=\"line\">    e = <span class=\"literal\">None</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        bar(<span class=\"built_in\">int</span>(sys.argv[<span class=\"number\">1</span>]))</span><br><span class=\"line\">    <span class=\"keyword\">except</span> KeyError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;key error&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> ValueError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;value error&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(e)</span><br><span class=\"line\"></span><br><span class=\"line\">bad()</span><br></pre></td></tr></table></figure>\n\n<p>在Python2上，正常运行：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python foo.py <span class=\"number\">1</span></span><br><span class=\"line\">key error</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\">$ python foo.py <span class=\"number\">2</span></span><br><span class=\"line\">value error</span><br><span class=\"line\"><span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n\n<p>但是在Python3上：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python3 foo.py <span class=\"number\">1</span></span><br><span class=\"line\">key error</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">&quot;foo.py&quot;</span>, line <span class=\"number\">19</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">    bad()</span><br><span class=\"line\">  File <span class=\"string\">&quot;foo.py&quot;</span>, line <span class=\"number\">17</span>, <span class=\"keyword\">in</span> bad</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(e)</span><br><span class=\"line\">UnboundLocalError: local variable <span class=\"string\">&#x27;e&#x27;</span> referenced before assignment</span><br></pre></td></tr></table></figure>\n\n\n<p>“问题”是，在Python 3中，异常对象超出except块的范围是不可访问的。（原因是，否则，它会在内存中保持堆栈帧的引用循环，直到垃圾收集器运行并从内存中清除引用。</p>\n<p>避免此问题的一种方法是在块的范围之外维护对异常对象的引用，以except使其保持可访问状态。这是使用此技术的上一个示例的一个版本，从而产生兼容Python 2和Python 3的代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">bar</span>(<span class=\"params\">i</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> i == <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">raise</span> KeyError(<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> i == <span class=\"number\">2</span>:</span><br><span class=\"line\">        <span class=\"keyword\">raise</span> ValueError(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">good</span>():</span><br><span class=\"line\">    exception = <span class=\"literal\">None</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        bar(<span class=\"built_in\">int</span>(sys.argv[<span class=\"number\">1</span>]))</span><br><span class=\"line\">    <span class=\"keyword\">except</span> KeyError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        exception = e</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;key error&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> ValueError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        exception = e</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;value error&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(exception)</span><br><span class=\"line\"></span><br><span class=\"line\">good()</span><br></pre></td></tr></table></figure>\n\n<p>在Python3上运行：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python3 foo.py <span class=\"number\">1</span></span><br><span class=\"line\">key error</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\">$ python3 foo.py <span class=\"number\">2</span></span><br><span class=\"line\">value error</span><br><span class=\"line\"><span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"10-滥用-del-方法\"><a href=\"#10-滥用-del-方法\" class=\"headerlink\" title=\"10 滥用__del__方法\"></a>10 滥用<code>__del__</code>方法</h2><p>假设你在一个名为的文件中有这个<code>mod.py</code>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import foo</span><br><span class=\"line\"></span><br><span class=\"line\">class Bar(object):</span><br><span class=\"line\"></span><br><span class=\"line\">\t...</span><br><span class=\"line\"></span><br><span class=\"line\">\tdef __del__(self):</span><br><span class=\"line\">\t\tfoo.cleanup(slef.myhandle())</span><br></pre></td></tr></table></figure>\n\n<p>然后你试着这样做 <code>another_mod.py</code>:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import mod</span><br><span class=\"line\">mybar = mod.Bar()</span><br></pre></td></tr></table></figure>\n\n<p>你会得到一个丑陋的<code>AttributeError</code>。</p>\n<p>当解释器关闭时，模块的全局变量都被设置为None。因此，在上面的示例中，在<code>__del__</code>调用的位置，名称<code>foo</code>已设置为<code>None</code>。</p>\n<p>解决方案是使用<code>atexit.register()</code>。这样，当您的程序完成执行时（正常退出时），您的注册处理程序将在解释器关闭之前启动:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import foo</span><br><span class=\"line\">import atexit</span><br><span class=\"line\"></span><br><span class=\"line\">def cleanup(handle):</span><br><span class=\"line\">    foo.cleanup(handle)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class Bar(object):</span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        atexit.register(cleanup, self.myhandle)</span><br></pre></td></tr></table></figure>\n\n<p>此实现提供了一种干净可靠的方法，可在正常程序终止时调用任何所需的清理功能。显然，foo.cleanup要决定如何处理绑定到名称的对象self.myhandle，但是你明白了。</p>\n<p><a href=\"https://www.toptal.com/python/top-10-mistakes-that-python-programmers-make\">原文</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"1-滥用表达式作为函数参数的默认值\"><a href=\"#1-滥用表达式作为函数参数的默认值\" class=\"headerlink\" title=\"1 滥用表达式作为函数参数的默认值\"></a>1 滥用表达式作为函数参数的默认值</h2><p>python允许通过为函数提供默认值来指定函数参数的，但是当默认值是可变的时，就会产生一些问题：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">foo</span>(<span class=\"params\">bar=[]</span>):</span><br><span class=\"line\">\tbar.append(<span class=\"string\">&#x27;baz&#x27;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> bar</span><br></pre></td></tr></table></figure>\n\n<p>上面的代码中，期望的是 <code>foo()</code> 重复调用（即不指定bar参数）将始终返回 <code>&#39;baz&#39;</code> ，因此假设每次 <code>foo()</code> 调用 <code>bar</code> 被设置为 <code>[]</code>。</p>\n<p>但是，让我们来看看执行次操作时实际发生的情况：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt;</span><span class=\"language-bash\">&gt;&gt; foo()</span></span><br><span class=\"line\">[&#x27;baz&#x27;]</span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;</span><span class=\"language-bash\">&gt;&gt; foo()</span></span><br><span class=\"line\">[&#x27;baz&#x27;, &#x27;baz&#x27;]</span><br></pre></td></tr></table></figure>\n\n<p>咦，为什么每次调用都会默认值附加 <code>&#39;baz&#39;</code> 到现有的列表中，而不是每次都创建一个新列表？</p>\n<p>答案就是： <strong>函数参数的默认值仅在定义函数时计算一次</strong>。因此 <code>bar</code> 仅在 <code>foo()</code> 首次定义时将参数初始化为其默认值，但随后调用 <code>foo()</code> (即未指定<code>bar</code>参数)，将继续使用 <code>bar</code> 最初初始化的相同列表。</p>\n<p>仅供参考，一个常见的解决方法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def foo(bar=None):</span><br><span class=\"line\">\tif not bar:</span><br><span class=\"line\">\t    bar = []</span><br><span class=\"line\">\tbar.append(&#x27;baz&#x27;)</span><br><span class=\"line\">\treturn bar</span><br></pre></td></tr></table></figure>","more":"<h2 id=\"2-错误的使用类变量\"><a href=\"#2-错误的使用类变量\" class=\"headerlink\" title=\"2 错误的使用类变量\"></a>2 错误的使用类变量</h2><p>请考虑一下示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">class</span> <span class=\"title class_\">A</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\"><span class=\"meta\">... </span>    x = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"meta\">... </span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">class</span> <span class=\"title class_\">B</span>(<span class=\"title class_ inherited__\">A</span>):</span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">pass</span></span><br><span class=\"line\"><span class=\"meta\">... </span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">class</span> <span class=\"title class_\">C</span>(<span class=\"title class_ inherited__\">A</span>):</span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">pass</span></span><br><span class=\"line\"><span class=\"meta\">... </span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(A.x, B.x, C.x)</span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">1</span> <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>以上的输出是没有问题的，请继续往下看：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>B.x = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(A.x, B.x, C.x)</span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>输出还是如预期的那样，那接下来：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; A.x = 3</span><br><span class=\"line\">&gt;&gt;&gt; print(A.x, B.x, C.x)</span><br></pre></td></tr></table></figure>\n\n<p>可以思考一下上面输出的结果：</p>\n<p><code>3 2 3</code></p>\n<p>这是什么情况？我们只改变了A.x，为什么C.x也改变了呢？</p>\n<p>在python中，类变量在内部作为字典处理，并遵循通常成为方法解析顺序(MRO)的方法，因此在上面的代码中，由于在<code>C</code>中找不到<code>x</code>属性，因此将在其基类中查找它。换句话数，<code>C</code>没有自己的<code>x</code>属性，因此引用C.x实际上值得是A.x。</p>\n<h2 id=\"3-错误的为异常块指定参数\"><a href=\"#3-错误的为异常块指定参数\" class=\"headerlink\" title=\"3 错误的为异常块指定参数\"></a>3 错误的为异常块指定参数</h2><p>假如你用一下代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 这段代码是python 2.7版本的</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">try</span>:</span><br><span class=\"line\"><span class=\"meta\">... </span>    l = [<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>]</span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"built_in\">int</span>(l[<span class=\"number\">2</span>])</span><br><span class=\"line\"><span class=\"meta\">... </span><span class=\"keyword\">except</span> (ValueError, IndexError):  <span class=\"comment\"># To catch both exceptions, right?</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">pass</span></span><br><span class=\"line\">...</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">&quot;&lt;stdin&gt;&quot;</span>, line <span class=\"number\">3</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">IndexError: <span class=\"built_in\">list</span> index out of <span class=\"built_in\">range</span></span><br></pre></td></tr></table></figure>\n\n<p>这里的问题是except语句没有采用这种方式指定的异常列表，相反，在python2.x中，语法 <code>except Exception, e</code> 用于将异常绑定到指定的可选的第二个参数(本例中e)，以用于进一步检查。结果在上面的代码中，IndexError异常没有被<code>except</code>语句捕获，相反，异常最终被绑定到一个名为<code>IndexError</code>的参数。</p>\n<p>在<code>except</code>语句中，捕获多个异常的正确方法是将第一个参数指定为包含要捕获所有异常的元祖，此外为了获得最大的可移植性，请使用<code>as</code>关键字，因为Python2和Python3都支持该语法。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">try</span>:</span><br><span class=\"line\"><span class=\"meta\">... </span>    l = [<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>]</span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"built_in\">int</span>(l[<span class=\"number\">2</span>])</span><br><span class=\"line\"><span class=\"meta\">... </span><span class=\"keyword\">except</span> (ValueError, IndexError) <span class=\"keyword\">as</span> e:</span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">pass</span></span><br><span class=\"line\"><span class=\"meta\">... </span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-误解Python范围规范\"><a href=\"#4-误解Python范围规范\" class=\"headerlink\" title=\"4 误解Python范围规范\"></a>4 误解Python范围规范</h2><p>Python范围解析是基于所谓的LEGB规则。在Python的工作方式中有一些细微之处，让我们看看常见的更高级的Python编程问题：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; x = 10</span><br><span class=\"line\">&gt;&gt;&gt; def foo():</span><br><span class=\"line\">...     x += 1</span><br><span class=\"line\">...     print(x)</span><br><span class=\"line\">...</span><br><span class=\"line\">&gt;&gt;&gt; foo()</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class=\"line\">  File &quot;&lt;stdin&gt;&quot;, line 2, in foo</span><br><span class=\"line\">UnboundLocalError: local variable &#x27;x&#x27; referenced before assignment</span><br></pre></td></tr></table></figure>\n\n<p>上述问题出现的原因是：当你对作用域中的变量进行赋值时，Python会自动将变量视为该作用域的本地变量，并在任何外部作用域中隐藏任何类似命名的变量。</p>\n<p>但在使用列表时，有一个特殊的现象，请看以下代码示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>lst = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">def</span> <span class=\"title function_\">foo1</span>():</span><br><span class=\"line\"><span class=\"meta\">... </span>    lst.append(<span class=\"number\">5</span>)</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>foo1()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>lst</span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>lst = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">def</span> <span class=\"title function_\">foo2</span>():</span><br><span class=\"line\"><span class=\"meta\">... </span>    lst += [<span class=\"number\">5</span>]</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>foo2()</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">&quot;&lt;stdin&gt;&quot;</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">  File <span class=\"string\">&quot;&lt;stdin&gt;&quot;</span>, line <span class=\"number\">2</span>, <span class=\"keyword\">in</span> foo2</span><br><span class=\"line\">UnboundLocalError: local variable <span class=\"string\">&#x27;lst&#x27;</span> referenced before assignment</span><br></pre></td></tr></table></figure>\n\n<p>咦？为什么foo1良好的运行，但是foo2却报错了？？</p>\n<p>答案和前面示例问题相同，但无疑更微妙一些。<code>foo1</code>不是分配值到lst，而foo2却是。记住<code>lst += [5]</code>实际是<code>lst = lst + [5]</code>的简写，我们看到foo2正在分配一个值给lst，因此Python推测它是本地范围内。但是我们要分配的值lst是lst自身，因此是未定义。</p>\n<h2 id=\"5-在迭代时修改列表\"><a href=\"#5-在迭代时修改列表\" class=\"headerlink\" title=\"5 在迭代时修改列表\"></a>5 在迭代时修改列表</h2><p>以下代码的问题是相当明显的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; odd = lambda x: bool(x % 2)</span><br><span class=\"line\">&gt;&gt;&gt; numbers = [n for n in range(10)]</span><br><span class=\"line\">&gt;&gt;&gt; for i in range(len(numbers)):</span><br><span class=\"line\">...     if odd(numbers[i]):</span><br><span class=\"line\">...         del numbers[i]</span><br><span class=\"line\">...</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File &quot;&lt;stdin&gt;&quot;, line 2, in &lt;module&gt;</span><br><span class=\"line\">IndexError: list index out of range</span><br></pre></td></tr></table></figure>\n\n<p>在迭代时，从列表或数组中删除项是Python常见的问题。幸运的是Python结合许多优雅的编程范例，如果使用得当可以简化代码。另外一个好处是更简单的代码不太可能被意外删除列表项而导致迭代问题。它完美的工作：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; odd = lambda x : bool(x % 2)</span><br><span class=\"line\">&gt;&gt;&gt; numbers = [n for n in range(10)]</span><br><span class=\"line\">&gt;&gt;&gt; numbers[:] = [n for n in numbers if not odd(n)]  # ahh, the beauty of it all</span><br><span class=\"line\">&gt;&gt;&gt; numbers</span><br><span class=\"line\">[0, 2, 4, 6, 8]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-混淆Python如何绑定闭包中的变量\"><a href=\"#6-混淆Python如何绑定闭包中的变量\" class=\"headerlink\" title=\"6 混淆Python如何绑定闭包中的变量\"></a>6 混淆Python如何绑定闭包中的变量</h2><p>参考以下示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">def</span> <span class=\"title function_\">create_multipliers</span>():</span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">return</span> [<span class=\"keyword\">lambda</span> x: i * x <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">5</span>)]</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">for</span> multiplier <span class=\"keyword\">in</span> create_multipliers():</span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"built_in\">print</span>(multiplier(<span class=\"number\">2</span>))</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>你可能期望以下输出：</p>\n<p>0<br>2<br>4<br>6<br>8</p>\n<p>但是你得到的是：</p>\n<p>8<br>8<br>8<br>8<br>8</p>\n<p>这是因为Python调用内部函数时，闭包中使用的变量值是<strong>后期绑定</strong>行为导致的。所以上面的代码中，每当调用任何返回的函数时，在调用i它时，在周围的作用域中查找值，那是循环已经完成，因此i已经分配了它的最终值4。</p>\n<p>这个常见问题的解决是有点像黑客的做法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">def</span> <span class=\"title function_\">create_multipliers</span>():</span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">return</span> [<span class=\"keyword\">lambda</span> x, i=i : i * x <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">5</span>)]</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">for</span> multiplier <span class=\"keyword\">in</span> create_multipliers():</span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"built_in\">print</span>(multiplier(<span class=\"number\">2</span>))</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"number\">8</span></span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>\n\n<p>这里利用了默认参数来生成匿名函数，以实现所需的行为，有些人称之为优雅，有些人会认为微免，有些人会讨厌它。但是作为Python的开发人员，无论如何都要理解它。</p>\n<h2 id=\"7-创建循环引用\"><a href=\"#7-创建循环引用\" class=\"headerlink\" title=\"7 创建循环引用\"></a>7 创建循环引用</h2><p>假设你有两个文件，<code>a.py</code> 和<code>b.py</code> 而且每个文件都导入另一个文件，如下所示：</p>\n<p>在<code>a.py</code>中：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> b</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">f</span>():</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> b.x</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(f())</span><br></pre></td></tr></table></figure>\n\n<p>在<code>b.py</code>中：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> a</span><br><span class=\"line\"></span><br><span class=\"line\">x = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">g</span>():</span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(a.f())</span><br></pre></td></tr></table></figure>\n\n<p>首先让我们尝试导入<code>a.py</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; import a</span><br><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<p>到此，没有出现异常，也许这个会给你带来惊喜，毕竟，我们这里有一个循环导入的问题，大概应该是一个问题，不应该？答案是，仅仅存在循环导入本身并不是Python的一个问题。如果已导入的模块，Python足够聪明，不会尝试重新导入它。但是根据每个模块尝试访问另一个模块中定义的函数或变量，你可能会遇到一些问题。</p>\n<p>所以回到例子中，当我们导入<code>a.py</code>，它导入<code>b.py</code>有没有问题？因为<code>b.py</code> 不需要从<code>a.py</code>中导入任何变量，这是因为唯一调用的<code>a.f()</code>还是在调用<code>g()</code>时被调用，所以此时<code>a.py</code>或<code>b.py</code>中没有任何内容调用<code>g()</code>，所以一切看起来是美好的。</p>\n<p>如果我们尝试导入<code>b.py</code>，看看会发生什么？(前提是没有先导入<code>a.py</code>)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; import b</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class=\"line\">  File &quot;/home/wen/b.py&quot;, line 1, in &lt;module&gt;</span><br><span class=\"line\">    import a</span><br><span class=\"line\">  File &quot;/home/wen/a.py&quot;, line 8, in &lt;module&gt;</span><br><span class=\"line\">    print(f())</span><br><span class=\"line\">  File &quot;/home/wen/a.py&quot;, line 5, in f</span><br><span class=\"line\">    return b.x</span><br><span class=\"line\">AttributeError: module &#x27;b&#x27; has no attribute &#x27;x&#x27;</span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>\n\n<p>这就出现问题了。 在导入<code>b.py</code>中，他会尝试导入<code>a.py</code>,而后者又会调用<code>f()</code>尝试访问的内容<code>b.x</code>，但<code>b.x</code>尚未定义，因此出现<code>AttributeError</code>问题。</p>\n<p>这里提供一个简单的方案处理这个问题，只需要修改<code>b.py</code>，在<code>g()</code>中导入<code>a.py</code>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">g</span>():</span><br><span class=\"line\">\t<span class=\"keyword\">import</span> a</span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(a.f())</span><br></pre></td></tr></table></figure>\n\n<p>当我们导入它时，一切都会变得美好：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> b</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b.g()</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"8-名称与Python标准库模块冲突\"><a href=\"#8-名称与Python标准库模块冲突\" class=\"headerlink\" title=\"8 名称与Python标准库模块冲突\"></a>8 名称与Python标准库模块冲突</h2><p>Python的优点之一是它提供了“开箱即用”的丰富的库模块。但是如果你没有意识的避开它，那么在发成自定义模块与Python标准库模块冲突的几率会增大很多。</p>\n<h2 id=\"9-未能解决Python2和Python3之间的差异\"><a href=\"#9-未能解决Python2和Python3之间的差异\" class=\"headerlink\" title=\"9 未能解决Python2和Python3之间的差异\"></a>9 未能解决Python2和Python3之间的差异</h2><p>考虑一下文件 <code>foo.py</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">bar</span>(<span class=\"params\">i</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> i == <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">raise</span> KeyError(<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> i == <span class=\"number\">2</span>:</span><br><span class=\"line\">        <span class=\"keyword\">raise</span> ValueError(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">bad</span>():</span><br><span class=\"line\">    e = <span class=\"literal\">None</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        bar(<span class=\"built_in\">int</span>(sys.argv[<span class=\"number\">1</span>]))</span><br><span class=\"line\">    <span class=\"keyword\">except</span> KeyError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;key error&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> ValueError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;value error&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(e)</span><br><span class=\"line\"></span><br><span class=\"line\">bad()</span><br></pre></td></tr></table></figure>\n\n<p>在Python2上，正常运行：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python foo.py <span class=\"number\">1</span></span><br><span class=\"line\">key error</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\">$ python foo.py <span class=\"number\">2</span></span><br><span class=\"line\">value error</span><br><span class=\"line\"><span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n\n<p>但是在Python3上：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python3 foo.py <span class=\"number\">1</span></span><br><span class=\"line\">key error</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">&quot;foo.py&quot;</span>, line <span class=\"number\">19</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">    bad()</span><br><span class=\"line\">  File <span class=\"string\">&quot;foo.py&quot;</span>, line <span class=\"number\">17</span>, <span class=\"keyword\">in</span> bad</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(e)</span><br><span class=\"line\">UnboundLocalError: local variable <span class=\"string\">&#x27;e&#x27;</span> referenced before assignment</span><br></pre></td></tr></table></figure>\n\n\n<p>“问题”是，在Python 3中，异常对象超出except块的范围是不可访问的。（原因是，否则，它会在内存中保持堆栈帧的引用循环，直到垃圾收集器运行并从内存中清除引用。</p>\n<p>避免此问题的一种方法是在块的范围之外维护对异常对象的引用，以except使其保持可访问状态。这是使用此技术的上一个示例的一个版本，从而产生兼容Python 2和Python 3的代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">bar</span>(<span class=\"params\">i</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> i == <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">raise</span> KeyError(<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> i == <span class=\"number\">2</span>:</span><br><span class=\"line\">        <span class=\"keyword\">raise</span> ValueError(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">good</span>():</span><br><span class=\"line\">    exception = <span class=\"literal\">None</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        bar(<span class=\"built_in\">int</span>(sys.argv[<span class=\"number\">1</span>]))</span><br><span class=\"line\">    <span class=\"keyword\">except</span> KeyError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        exception = e</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;key error&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> ValueError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        exception = e</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;value error&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(exception)</span><br><span class=\"line\"></span><br><span class=\"line\">good()</span><br></pre></td></tr></table></figure>\n\n<p>在Python3上运行：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python3 foo.py <span class=\"number\">1</span></span><br><span class=\"line\">key error</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\">$ python3 foo.py <span class=\"number\">2</span></span><br><span class=\"line\">value error</span><br><span class=\"line\"><span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"10-滥用-del-方法\"><a href=\"#10-滥用-del-方法\" class=\"headerlink\" title=\"10 滥用__del__方法\"></a>10 滥用<code>__del__</code>方法</h2><p>假设你在一个名为的文件中有这个<code>mod.py</code>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import foo</span><br><span class=\"line\"></span><br><span class=\"line\">class Bar(object):</span><br><span class=\"line\"></span><br><span class=\"line\">\t...</span><br><span class=\"line\"></span><br><span class=\"line\">\tdef __del__(self):</span><br><span class=\"line\">\t\tfoo.cleanup(slef.myhandle())</span><br></pre></td></tr></table></figure>\n\n<p>然后你试着这样做 <code>another_mod.py</code>:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import mod</span><br><span class=\"line\">mybar = mod.Bar()</span><br></pre></td></tr></table></figure>\n\n<p>你会得到一个丑陋的<code>AttributeError</code>。</p>\n<p>当解释器关闭时，模块的全局变量都被设置为None。因此，在上面的示例中，在<code>__del__</code>调用的位置，名称<code>foo</code>已设置为<code>None</code>。</p>\n<p>解决方案是使用<code>atexit.register()</code>。这样，当您的程序完成执行时（正常退出时），您的注册处理程序将在解释器关闭之前启动:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import foo</span><br><span class=\"line\">import atexit</span><br><span class=\"line\"></span><br><span class=\"line\">def cleanup(handle):</span><br><span class=\"line\">    foo.cleanup(handle)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class Bar(object):</span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        atexit.register(cleanup, self.myhandle)</span><br></pre></td></tr></table></figure>\n\n<p>此实现提供了一种干净可靠的方法，可在正常程序终止时调用任何所需的清理功能。显然，foo.cleanup要决定如何处理绑定到名称的对象self.myhandle，但是你明白了。</p>\n<p><a href=\"https://www.toptal.com/python/top-10-mistakes-that-python-programmers-make\">原文</a></p>"},{"title":"Python有用的数据结构","date":"2019-03-05T16:00:00.000Z","_content":"\n要改善应用程序的性能，最有效之一是使用更合适的算法和数据结构。Python 标准库提供了大量的现成的算法和数据结构，我们可以在直接使用它们。\n\n## 列表和双端队列\n\nPython 列表是有序的元素集合，在 Python 中使用大小可调整的数组来实现的。数组是一种基本数据结构，由一系列连续的内存单元组成，其中每个内存单元都包含指向一个 Python 对象的引用。\n\n<!--more-->\n\n在访问、修改和附加元素方面，列表表现的非常出色。在列表开头或中间添加或删除元素的操作，可能在效率方面存在问题。在列表开头插入或删除元素时，后续所有元素都需要移动一个位置，因此所需要的时间为O（N）。\n\n在有些情况下，必须高效的执行集合开头和末尾插入或删除元素的操作，Python 通过`collections.deque`类提供一种具有这样特征的数据结构。deque指的是双端队列，在 Python 中，是以双向链表的方式实现的。所以`depue`提供了`pop`、`append`、`popleft`和`appendleft`，它们的运行时间都是O(1)，正是因为如此，付出的代价也是挺高的：**访问双端队列中间的元素所需的时间为O(N)**。例如下表所示：\n\n|代码|N=1000(us)|N=2000(us)|N=3000|时间|\n|-|-|-|-|-|\n|duque[0]|0.37|0.41|0.45|O(1)|\n|duque[N - 1]|0.37|0.42|0.45|O(1)|\n|duque[int(N / 2)]|1.14|1.71|2.48|O(N)|\n\n在列表中查找元素的索引可以通过list.index来完成的。为提高列表查找速度，一种简单的方法就是确保底层元素是有序的，并使用模块bisect来执行二分查找。\n\n对于有序列表，函数bisect.bisect可以确定将元素插入到什么位置，同时可确保插入后列表依然是有序的。这个函数使用二分查找算法，运行时间为O(log(N))。\n\n\n```python\nimport bisect\ncollection = [1, 2, 4, 5, 6]\nbisect.bisect(collection, 3)\n# 结果是 2\n```\n\n如果要插入的值已经包含在列表中，函数`bisect.bisect`将返回这个值后面的位置，因此可以使用`bisect.bisect_left`以下面的方式返回正确的索引：\n\n```python\ndef index_bisect(a, x):\n\ti = bisect.bisect_left(a, x)\n\tif i != len(a) and a[i] == x:\n\t\treturn i\n\traise ValueError\n```\n\n该方法与`list.index`作用类似，但是运行时间几乎不受输入规模的影响，适合用来搜索**规模非常大而有序**的的集合。\n\n\n## 字典\n\n字典是以散列映射的方式实现的，在插入、删除和访问元素方面都是非常杰出的，这些操作的时间复杂度都是O(1)。\n\n> 在Python3.5以及之前的版本中，字段是无序集合，但从3.6起字典能够保留元素的插入顺序。\n\n下面演示几种使用字典高效的计算列表中独特元素的个数：\n\n- 最基本的操作:\n\n```python\ndef counter_dict(items):\n\tcounter = {}\n\tfor item in items:\n\t\tif item not in counter:\n\t\t\tcounter[item] = 1\n\t\telse:\n\t\t\tcounter[item] += 1\n\treturn counter\n```\n\n- 使用`collections.defaultdict` 生成一个字典，并给每个新键自动指定一个默认值：\n\n```python\nfrom collections import defaultdict\n\n\ndef counter_defaultdict(items):\n\tcounter = defaultdict(int)  # 每个新键都被自动指定零值\n\tfor item in items:\n\t\tcounter[item] += 1\n\treturn counter\n\n```\n\n- 使用`collections.Counter`类：\n\n```python\nfrom collections import Counter\ncounter = Counter(items)\n```\n\n在速度方面，这些计数方式的时间复杂度都相同，但使用`Counter`实现的效率最高。\n\n## 集合\n\n集合是一个无序的元素集合，且其中的每个元素都必须是独一无二的。集合的主要用途是检查集合中是否包含特定的元素，集合的操作包含并集、差集和交集。\n\n在Python中，集与字典一样，也是使用基于散列的算法实现的，因此其加法、删除、和成员资格测试(检查集合中是否包含特定的元素)等操作的时间复杂度都是O(1),即不受集合规模的影响。\n\n集合中元素都是独一无二的，因此其一种显而易见的用途就是用于删除集合中重复的元素，为此只需将集合传递给构造函数`set`即可：\n\n```python\nx = list(range(1000)) + list(range(500))\nx_unique = set(x)\n# 集合x_unique将只包含x中不同的元素。\n```\n\n删除重复元素的时间复杂度为O(N)。\n\n\n## 堆\n\n\n堆是一种设计用于快速查找并提取集合中最大值或最小值的数据结构，其典型用途就是优先级处理一系列任务。堆的元素插入和最大值提取操作的时间复杂度都为O(log(N))。\n\n在Python中，堆是通过堆列表执行模块heapq中的函数来创建的。\n\n\n```\nimport heapq\ncollection = [10, 3, 3, 4, 4, 5, 6]\nheapq.heapify(collection)\n```\n\n可使用`heapq.heappush`和`heapq.heappop`进行插入和提取操作。`heapq.heappop`提取集合中最小值：\n\n```\nheapq.heappop(collection)  # 返回3\n```\n\n同理要压入整数1可使用heapq.heappush:\n\n```python\nheapq.heapush(collection, 1)\n```\n\n## 字典树\n\n字典树也成前缀树，这种数据结构可能不那么流行，但是很有用，在列表查找与前缀匹配的字符串方面，速度是极快的，因此非常适合用来实现输入时查找和自动补全功能。\n\nPython标准库中不提供字典树的实现，可以通过PyPI找到很多高效的实现。推荐一个单文件的：`patricia-trie`。\n\n\n参考：\n\n- 《Python高性能(第2版)》第二章\n","source":"_posts/Python有用的数据结构.md","raw":"---\ntitle: Python有用的数据结构\ndate: 2019-03-06\ntags: [python, 数据结构, 阅读笔记]\n---\n\n要改善应用程序的性能，最有效之一是使用更合适的算法和数据结构。Python 标准库提供了大量的现成的算法和数据结构，我们可以在直接使用它们。\n\n## 列表和双端队列\n\nPython 列表是有序的元素集合，在 Python 中使用大小可调整的数组来实现的。数组是一种基本数据结构，由一系列连续的内存单元组成，其中每个内存单元都包含指向一个 Python 对象的引用。\n\n<!--more-->\n\n在访问、修改和附加元素方面，列表表现的非常出色。在列表开头或中间添加或删除元素的操作，可能在效率方面存在问题。在列表开头插入或删除元素时，后续所有元素都需要移动一个位置，因此所需要的时间为O（N）。\n\n在有些情况下，必须高效的执行集合开头和末尾插入或删除元素的操作，Python 通过`collections.deque`类提供一种具有这样特征的数据结构。deque指的是双端队列，在 Python 中，是以双向链表的方式实现的。所以`depue`提供了`pop`、`append`、`popleft`和`appendleft`，它们的运行时间都是O(1)，正是因为如此，付出的代价也是挺高的：**访问双端队列中间的元素所需的时间为O(N)**。例如下表所示：\n\n|代码|N=1000(us)|N=2000(us)|N=3000|时间|\n|-|-|-|-|-|\n|duque[0]|0.37|0.41|0.45|O(1)|\n|duque[N - 1]|0.37|0.42|0.45|O(1)|\n|duque[int(N / 2)]|1.14|1.71|2.48|O(N)|\n\n在列表中查找元素的索引可以通过list.index来完成的。为提高列表查找速度，一种简单的方法就是确保底层元素是有序的，并使用模块bisect来执行二分查找。\n\n对于有序列表，函数bisect.bisect可以确定将元素插入到什么位置，同时可确保插入后列表依然是有序的。这个函数使用二分查找算法，运行时间为O(log(N))。\n\n\n```python\nimport bisect\ncollection = [1, 2, 4, 5, 6]\nbisect.bisect(collection, 3)\n# 结果是 2\n```\n\n如果要插入的值已经包含在列表中，函数`bisect.bisect`将返回这个值后面的位置，因此可以使用`bisect.bisect_left`以下面的方式返回正确的索引：\n\n```python\ndef index_bisect(a, x):\n\ti = bisect.bisect_left(a, x)\n\tif i != len(a) and a[i] == x:\n\t\treturn i\n\traise ValueError\n```\n\n该方法与`list.index`作用类似，但是运行时间几乎不受输入规模的影响，适合用来搜索**规模非常大而有序**的的集合。\n\n\n## 字典\n\n字典是以散列映射的方式实现的，在插入、删除和访问元素方面都是非常杰出的，这些操作的时间复杂度都是O(1)。\n\n> 在Python3.5以及之前的版本中，字段是无序集合，但从3.6起字典能够保留元素的插入顺序。\n\n下面演示几种使用字典高效的计算列表中独特元素的个数：\n\n- 最基本的操作:\n\n```python\ndef counter_dict(items):\n\tcounter = {}\n\tfor item in items:\n\t\tif item not in counter:\n\t\t\tcounter[item] = 1\n\t\telse:\n\t\t\tcounter[item] += 1\n\treturn counter\n```\n\n- 使用`collections.defaultdict` 生成一个字典，并给每个新键自动指定一个默认值：\n\n```python\nfrom collections import defaultdict\n\n\ndef counter_defaultdict(items):\n\tcounter = defaultdict(int)  # 每个新键都被自动指定零值\n\tfor item in items:\n\t\tcounter[item] += 1\n\treturn counter\n\n```\n\n- 使用`collections.Counter`类：\n\n```python\nfrom collections import Counter\ncounter = Counter(items)\n```\n\n在速度方面，这些计数方式的时间复杂度都相同，但使用`Counter`实现的效率最高。\n\n## 集合\n\n集合是一个无序的元素集合，且其中的每个元素都必须是独一无二的。集合的主要用途是检查集合中是否包含特定的元素，集合的操作包含并集、差集和交集。\n\n在Python中，集与字典一样，也是使用基于散列的算法实现的，因此其加法、删除、和成员资格测试(检查集合中是否包含特定的元素)等操作的时间复杂度都是O(1),即不受集合规模的影响。\n\n集合中元素都是独一无二的，因此其一种显而易见的用途就是用于删除集合中重复的元素，为此只需将集合传递给构造函数`set`即可：\n\n```python\nx = list(range(1000)) + list(range(500))\nx_unique = set(x)\n# 集合x_unique将只包含x中不同的元素。\n```\n\n删除重复元素的时间复杂度为O(N)。\n\n\n## 堆\n\n\n堆是一种设计用于快速查找并提取集合中最大值或最小值的数据结构，其典型用途就是优先级处理一系列任务。堆的元素插入和最大值提取操作的时间复杂度都为O(log(N))。\n\n在Python中，堆是通过堆列表执行模块heapq中的函数来创建的。\n\n\n```\nimport heapq\ncollection = [10, 3, 3, 4, 4, 5, 6]\nheapq.heapify(collection)\n```\n\n可使用`heapq.heappush`和`heapq.heappop`进行插入和提取操作。`heapq.heappop`提取集合中最小值：\n\n```\nheapq.heappop(collection)  # 返回3\n```\n\n同理要压入整数1可使用heapq.heappush:\n\n```python\nheapq.heapush(collection, 1)\n```\n\n## 字典树\n\n字典树也成前缀树，这种数据结构可能不那么流行，但是很有用，在列表查找与前缀匹配的字符串方面，速度是极快的，因此非常适合用来实现输入时查找和自动补全功能。\n\nPython标准库中不提供字典树的实现，可以通过PyPI找到很多高效的实现。推荐一个单文件的：`patricia-trie`。\n\n\n参考：\n\n- 《Python高性能(第2版)》第二章\n","slug":"Python有用的数据结构","published":1,"updated":"2021-06-20T10:25:20.124Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluqa1hin001brlog075oacfz","content":"<p>要改善应用程序的性能，最有效之一是使用更合适的算法和数据结构。Python 标准库提供了大量的现成的算法和数据结构，我们可以在直接使用它们。</p>\n<h2 id=\"列表和双端队列\"><a href=\"#列表和双端队列\" class=\"headerlink\" title=\"列表和双端队列\"></a>列表和双端队列</h2><p>Python 列表是有序的元素集合，在 Python 中使用大小可调整的数组来实现的。数组是一种基本数据结构，由一系列连续的内存单元组成，其中每个内存单元都包含指向一个 Python 对象的引用。</p>\n<span id=\"more\"></span>\n\n<p>在访问、修改和附加元素方面，列表表现的非常出色。在列表开头或中间添加或删除元素的操作，可能在效率方面存在问题。在列表开头插入或删除元素时，后续所有元素都需要移动一个位置，因此所需要的时间为O（N）。</p>\n<p>在有些情况下，必须高效的执行集合开头和末尾插入或删除元素的操作，Python 通过<code>collections.deque</code>类提供一种具有这样特征的数据结构。deque指的是双端队列，在 Python 中，是以双向链表的方式实现的。所以<code>depue</code>提供了<code>pop</code>、<code>append</code>、<code>popleft</code>和<code>appendleft</code>，它们的运行时间都是O(1)，正是因为如此，付出的代价也是挺高的：**访问双端队列中间的元素所需的时间为O(N)**。例如下表所示：</p>\n<table>\n<thead>\n<tr>\n<th>代码</th>\n<th>N&#x3D;1000(us)</th>\n<th>N&#x3D;2000(us)</th>\n<th>N&#x3D;3000</th>\n<th>时间</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>duque[0]</td>\n<td>0.37</td>\n<td>0.41</td>\n<td>0.45</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>duque[N - 1]</td>\n<td>0.37</td>\n<td>0.42</td>\n<td>0.45</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>duque[int(N &#x2F; 2)]</td>\n<td>1.14</td>\n<td>1.71</td>\n<td>2.48</td>\n<td>O(N)</td>\n</tr>\n</tbody></table>\n<p>在列表中查找元素的索引可以通过list.index来完成的。为提高列表查找速度，一种简单的方法就是确保底层元素是有序的，并使用模块bisect来执行二分查找。</p>\n<p>对于有序列表，函数bisect.bisect可以确定将元素插入到什么位置，同时可确保插入后列表依然是有序的。这个函数使用二分查找算法，运行时间为O(log(N))。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> bisect</span><br><span class=\"line\">collection = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]</span><br><span class=\"line\">bisect.bisect(collection, <span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"comment\"># 结果是 2</span></span><br></pre></td></tr></table></figure>\n\n<p>如果要插入的值已经包含在列表中，函数<code>bisect.bisect</code>将返回这个值后面的位置，因此可以使用<code>bisect.bisect_left</code>以下面的方式返回正确的索引：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">index_bisect</span>(<span class=\"params\">a, x</span>):</span><br><span class=\"line\">\ti = bisect.bisect_left(a, x)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> i != <span class=\"built_in\">len</span>(a) <span class=\"keyword\">and</span> a[i] == x:</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> i</span><br><span class=\"line\">\t<span class=\"keyword\">raise</span> ValueError</span><br></pre></td></tr></table></figure>\n\n<p>该方法与<code>list.index</code>作用类似，但是运行时间几乎不受输入规模的影响，适合用来搜索<strong>规模非常大而有序</strong>的的集合。</p>\n<h2 id=\"字典\"><a href=\"#字典\" class=\"headerlink\" title=\"字典\"></a>字典</h2><p>字典是以散列映射的方式实现的，在插入、删除和访问元素方面都是非常杰出的，这些操作的时间复杂度都是O(1)。</p>\n<blockquote>\n<p>在Python3.5以及之前的版本中，字段是无序集合，但从3.6起字典能够保留元素的插入顺序。</p>\n</blockquote>\n<p>下面演示几种使用字典高效的计算列表中独特元素的个数：</p>\n<ul>\n<li>最基本的操作:</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">counter_dict</span>(<span class=\"params\">items</span>):</span><br><span class=\"line\">\tcounter = &#123;&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> items:</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> item <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> counter:</span><br><span class=\"line\">\t\t\tcounter[item] = <span class=\"number\">1</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\t\tcounter[item] += <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> counter</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用<code>collections.defaultdict</code> 生成一个字典，并给每个新键自动指定一个默认值：</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> defaultdict</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">counter_defaultdict</span>(<span class=\"params\">items</span>):</span><br><span class=\"line\">\tcounter = defaultdict(<span class=\"built_in\">int</span>)  <span class=\"comment\"># 每个新键都被自动指定零值</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> items:</span><br><span class=\"line\">\t\tcounter[item] += <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> counter</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用<code>collections.Counter</code>类：</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> Counter</span><br><span class=\"line\">counter = Counter(items)</span><br></pre></td></tr></table></figure>\n\n<p>在速度方面，这些计数方式的时间复杂度都相同，但使用<code>Counter</code>实现的效率最高。</p>\n<h2 id=\"集合\"><a href=\"#集合\" class=\"headerlink\" title=\"集合\"></a>集合</h2><p>集合是一个无序的元素集合，且其中的每个元素都必须是独一无二的。集合的主要用途是检查集合中是否包含特定的元素，集合的操作包含并集、差集和交集。</p>\n<p>在Python中，集与字典一样，也是使用基于散列的算法实现的，因此其加法、删除、和成员资格测试(检查集合中是否包含特定的元素)等操作的时间复杂度都是O(1),即不受集合规模的影响。</p>\n<p>集合中元素都是独一无二的，因此其一种显而易见的用途就是用于删除集合中重复的元素，为此只需将集合传递给构造函数<code>set</code>即可：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = <span class=\"built_in\">list</span>(<span class=\"built_in\">range</span>(<span class=\"number\">1000</span>)) + <span class=\"built_in\">list</span>(<span class=\"built_in\">range</span>(<span class=\"number\">500</span>))</span><br><span class=\"line\">x_unique = <span class=\"built_in\">set</span>(x)</span><br><span class=\"line\"><span class=\"comment\"># 集合x_unique将只包含x中不同的元素。</span></span><br></pre></td></tr></table></figure>\n\n<p>删除重复元素的时间复杂度为O(N)。</p>\n<h2 id=\"堆\"><a href=\"#堆\" class=\"headerlink\" title=\"堆\"></a>堆</h2><p>堆是一种设计用于快速查找并提取集合中最大值或最小值的数据结构，其典型用途就是优先级处理一系列任务。堆的元素插入和最大值提取操作的时间复杂度都为O(log(N))。</p>\n<p>在Python中，堆是通过堆列表执行模块heapq中的函数来创建的。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import heapq</span><br><span class=\"line\">collection = [10, 3, 3, 4, 4, 5, 6]</span><br><span class=\"line\">heapq.heapify(collection)</span><br></pre></td></tr></table></figure>\n\n<p>可使用<code>heapq.heappush</code>和<code>heapq.heappop</code>进行插入和提取操作。<code>heapq.heappop</code>提取集合中最小值：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">heapq.heappop(collection)  # 返回3</span><br></pre></td></tr></table></figure>\n\n<p>同理要压入整数1可使用heapq.heappush:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">heapq.heapush(collection, <span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"字典树\"><a href=\"#字典树\" class=\"headerlink\" title=\"字典树\"></a>字典树</h2><p>字典树也成前缀树，这种数据结构可能不那么流行，但是很有用，在列表查找与前缀匹配的字符串方面，速度是极快的，因此非常适合用来实现输入时查找和自动补全功能。</p>\n<p>Python标准库中不提供字典树的实现，可以通过PyPI找到很多高效的实现。推荐一个单文件的：<code>patricia-trie</code>。</p>\n<p>参考：</p>\n<ul>\n<li>《Python高性能(第2版)》第二章</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>要改善应用程序的性能，最有效之一是使用更合适的算法和数据结构。Python 标准库提供了大量的现成的算法和数据结构，我们可以在直接使用它们。</p>\n<h2 id=\"列表和双端队列\"><a href=\"#列表和双端队列\" class=\"headerlink\" title=\"列表和双端队列\"></a>列表和双端队列</h2><p>Python 列表是有序的元素集合，在 Python 中使用大小可调整的数组来实现的。数组是一种基本数据结构，由一系列连续的内存单元组成，其中每个内存单元都包含指向一个 Python 对象的引用。</p>","more":"<p>在访问、修改和附加元素方面，列表表现的非常出色。在列表开头或中间添加或删除元素的操作，可能在效率方面存在问题。在列表开头插入或删除元素时，后续所有元素都需要移动一个位置，因此所需要的时间为O（N）。</p>\n<p>在有些情况下，必须高效的执行集合开头和末尾插入或删除元素的操作，Python 通过<code>collections.deque</code>类提供一种具有这样特征的数据结构。deque指的是双端队列，在 Python 中，是以双向链表的方式实现的。所以<code>depue</code>提供了<code>pop</code>、<code>append</code>、<code>popleft</code>和<code>appendleft</code>，它们的运行时间都是O(1)，正是因为如此，付出的代价也是挺高的：**访问双端队列中间的元素所需的时间为O(N)**。例如下表所示：</p>\n<table>\n<thead>\n<tr>\n<th>代码</th>\n<th>N&#x3D;1000(us)</th>\n<th>N&#x3D;2000(us)</th>\n<th>N&#x3D;3000</th>\n<th>时间</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>duque[0]</td>\n<td>0.37</td>\n<td>0.41</td>\n<td>0.45</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>duque[N - 1]</td>\n<td>0.37</td>\n<td>0.42</td>\n<td>0.45</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>duque[int(N &#x2F; 2)]</td>\n<td>1.14</td>\n<td>1.71</td>\n<td>2.48</td>\n<td>O(N)</td>\n</tr>\n</tbody></table>\n<p>在列表中查找元素的索引可以通过list.index来完成的。为提高列表查找速度，一种简单的方法就是确保底层元素是有序的，并使用模块bisect来执行二分查找。</p>\n<p>对于有序列表，函数bisect.bisect可以确定将元素插入到什么位置，同时可确保插入后列表依然是有序的。这个函数使用二分查找算法，运行时间为O(log(N))。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> bisect</span><br><span class=\"line\">collection = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]</span><br><span class=\"line\">bisect.bisect(collection, <span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"comment\"># 结果是 2</span></span><br></pre></td></tr></table></figure>\n\n<p>如果要插入的值已经包含在列表中，函数<code>bisect.bisect</code>将返回这个值后面的位置，因此可以使用<code>bisect.bisect_left</code>以下面的方式返回正确的索引：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">index_bisect</span>(<span class=\"params\">a, x</span>):</span><br><span class=\"line\">\ti = bisect.bisect_left(a, x)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> i != <span class=\"built_in\">len</span>(a) <span class=\"keyword\">and</span> a[i] == x:</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> i</span><br><span class=\"line\">\t<span class=\"keyword\">raise</span> ValueError</span><br></pre></td></tr></table></figure>\n\n<p>该方法与<code>list.index</code>作用类似，但是运行时间几乎不受输入规模的影响，适合用来搜索<strong>规模非常大而有序</strong>的的集合。</p>\n<h2 id=\"字典\"><a href=\"#字典\" class=\"headerlink\" title=\"字典\"></a>字典</h2><p>字典是以散列映射的方式实现的，在插入、删除和访问元素方面都是非常杰出的，这些操作的时间复杂度都是O(1)。</p>\n<blockquote>\n<p>在Python3.5以及之前的版本中，字段是无序集合，但从3.6起字典能够保留元素的插入顺序。</p>\n</blockquote>\n<p>下面演示几种使用字典高效的计算列表中独特元素的个数：</p>\n<ul>\n<li>最基本的操作:</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">counter_dict</span>(<span class=\"params\">items</span>):</span><br><span class=\"line\">\tcounter = &#123;&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> items:</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> item <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> counter:</span><br><span class=\"line\">\t\t\tcounter[item] = <span class=\"number\">1</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\t\tcounter[item] += <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> counter</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用<code>collections.defaultdict</code> 生成一个字典，并给每个新键自动指定一个默认值：</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> defaultdict</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">counter_defaultdict</span>(<span class=\"params\">items</span>):</span><br><span class=\"line\">\tcounter = defaultdict(<span class=\"built_in\">int</span>)  <span class=\"comment\"># 每个新键都被自动指定零值</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> items:</span><br><span class=\"line\">\t\tcounter[item] += <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> counter</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用<code>collections.Counter</code>类：</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> Counter</span><br><span class=\"line\">counter = Counter(items)</span><br></pre></td></tr></table></figure>\n\n<p>在速度方面，这些计数方式的时间复杂度都相同，但使用<code>Counter</code>实现的效率最高。</p>\n<h2 id=\"集合\"><a href=\"#集合\" class=\"headerlink\" title=\"集合\"></a>集合</h2><p>集合是一个无序的元素集合，且其中的每个元素都必须是独一无二的。集合的主要用途是检查集合中是否包含特定的元素，集合的操作包含并集、差集和交集。</p>\n<p>在Python中，集与字典一样，也是使用基于散列的算法实现的，因此其加法、删除、和成员资格测试(检查集合中是否包含特定的元素)等操作的时间复杂度都是O(1),即不受集合规模的影响。</p>\n<p>集合中元素都是独一无二的，因此其一种显而易见的用途就是用于删除集合中重复的元素，为此只需将集合传递给构造函数<code>set</code>即可：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = <span class=\"built_in\">list</span>(<span class=\"built_in\">range</span>(<span class=\"number\">1000</span>)) + <span class=\"built_in\">list</span>(<span class=\"built_in\">range</span>(<span class=\"number\">500</span>))</span><br><span class=\"line\">x_unique = <span class=\"built_in\">set</span>(x)</span><br><span class=\"line\"><span class=\"comment\"># 集合x_unique将只包含x中不同的元素。</span></span><br></pre></td></tr></table></figure>\n\n<p>删除重复元素的时间复杂度为O(N)。</p>\n<h2 id=\"堆\"><a href=\"#堆\" class=\"headerlink\" title=\"堆\"></a>堆</h2><p>堆是一种设计用于快速查找并提取集合中最大值或最小值的数据结构，其典型用途就是优先级处理一系列任务。堆的元素插入和最大值提取操作的时间复杂度都为O(log(N))。</p>\n<p>在Python中，堆是通过堆列表执行模块heapq中的函数来创建的。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import heapq</span><br><span class=\"line\">collection = [10, 3, 3, 4, 4, 5, 6]</span><br><span class=\"line\">heapq.heapify(collection)</span><br></pre></td></tr></table></figure>\n\n<p>可使用<code>heapq.heappush</code>和<code>heapq.heappop</code>进行插入和提取操作。<code>heapq.heappop</code>提取集合中最小值：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">heapq.heappop(collection)  # 返回3</span><br></pre></td></tr></table></figure>\n\n<p>同理要压入整数1可使用heapq.heappush:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">heapq.heapush(collection, <span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"字典树\"><a href=\"#字典树\" class=\"headerlink\" title=\"字典树\"></a>字典树</h2><p>字典树也成前缀树，这种数据结构可能不那么流行，但是很有用，在列表查找与前缀匹配的字符串方面，速度是极快的，因此非常适合用来实现输入时查找和自动补全功能。</p>\n<p>Python标准库中不提供字典树的实现，可以通过PyPI找到很多高效的实现。推荐一个单文件的：<code>patricia-trie</code>。</p>\n<p>参考：</p>\n<ul>\n<li>《Python高性能(第2版)》第二章</li>\n</ul>"},{"title":"Python缓存函数执行结果lru_cache的使用","date":"2023-12-18T16:00:00.000Z","_content":"\n一个强大而有用的工具是 `functools` 模块中的 `lru_cache` 装饰器。\n`lru_cache` 是 \"Least Recently Used（最近最少使用）\" 的缩写，是 Python 中用于缓存函数结果的装饰器。它的作用是在函数调用时缓存参数和结果，以便在后续相同参数的调用中直接返回缓存的结果，而不重新执行函数体。\n\n## 基本用法\n\n`lru_cache` 的主要优势之一是避免在相同参数下的重复计算。\n\n```\nfrom functools import lru_cache\n\n@lru_cache(maxsize=None)\ndef fibonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\n# 第一次调用，计算 fibonacci(10)\nresult1 = fibonacci(10)\n\n# 第二次调用，直接从缓存返回结果\nresult2 = fibonacci(10)\n\nprint(result1, result2)  # 输出: 55 55\n```\n\n第一次调用 `fibonacci(10)` 会计算结果并将其缓存起来。第二次调用相同的参数时，直接从缓存返回结果，而不重新计算。\n\n## 对象方法中的应用\n\n`lru_cache` 不仅仅可以用于普通函数，还可以用于类的方法。如果方法的结果仅取决于其参数，并且不依赖于对象的状态，那么可以使用 `lru_cache` 提高性能。\n\n```\nfrom functools import lru_cache\n\nclass MyClass:\n    def __init__(self, name):\n        self.name = name\n\n    @lru_cache(maxsize=None)\n    def get_data(self, value):\n        print(f\"Loading data for {self.name} with value {value}\")\n        return value + 10\n\n# 创建两个实例\nobj1 = MyClass(\"Instance 1\")\nobj2 = MyClass(\"Instance 2\")\n\n# 对于 obj1，第一次调用 get_data 时会加载数据\nprint(obj1.get_data(5))  # 输出: Loading data for Instance 1 with value 5\n# 对于 obj1，第二次调用相同的参数，直接从缓存返回\nprint(obj1.get_data(5))  # 输出: 15 (从缓存返回)\n\n# 对于 obj2，第一次调用 get_data 时会加载数据\nprint(obj2.get_data(5))  # 输出: Loading data for Instance 2 with value 5\n# 对于 obj2，第二次调用相同的参数，直接从缓存返回\nprint(obj2.get_data(5))  # 输出: 15 (从缓存返回)\n```\n\n注意的是 **如果使用 @staticmethod 装饰器装饰的方法，那么 lru_cache 缓存会是共享的，不同实例之间的缓存是相同的。这是因为静态方法没有实例作为第一个参数，它是在类级别上调用的，因此只有一个缓存。**\n\n```\nfrom functools import lru_cache\n\nclass MyClass:\n    @staticmethod\n    @lru_cache(maxsize=None)\n    def static_method(value):\n        print(f\"Loading data for value {value}\")\n        return value + 10\n\n# 对于静态方法，缓存是共享的\n# 第一次调用 static_method 时会加载数据\nprint(MyClass.static_method(5))  # 输出: Loading data for value 5\n# 第二次调用相同的参数，直接从缓存返回\nprint(MyClass.static_method(5))  # 输出: 15 (从缓存返回)\n```\n\n对于静态方法而言，它是在类级别上调用的，而不是在实例级别上。即使实例化后调用，也会共享相同的缓存：\n\n```\nmy_class1 = MyClass()\nprint(my_class1.static_method(5))  # 第一次调用，输出: Loading data for value 5\nprint(my_class1.static_method(5))  # 第二次调用，输出: 15 (从缓存返回)\n\nmy_class2 = MyClass()\nprint(my_class2.static_method(5))  # 通过另一个实例调用，输出: 15 (从缓存返回)\n```\n","source":"_posts/Python缓存函数执行结果lru_cache的使用.md","raw":"---\ntitle: Python缓存函数执行结果lru_cache的使用\ndate: 2023-12-19\ntags: [Python]\n---\n\n一个强大而有用的工具是 `functools` 模块中的 `lru_cache` 装饰器。\n`lru_cache` 是 \"Least Recently Used（最近最少使用）\" 的缩写，是 Python 中用于缓存函数结果的装饰器。它的作用是在函数调用时缓存参数和结果，以便在后续相同参数的调用中直接返回缓存的结果，而不重新执行函数体。\n\n## 基本用法\n\n`lru_cache` 的主要优势之一是避免在相同参数下的重复计算。\n\n```\nfrom functools import lru_cache\n\n@lru_cache(maxsize=None)\ndef fibonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\n# 第一次调用，计算 fibonacci(10)\nresult1 = fibonacci(10)\n\n# 第二次调用，直接从缓存返回结果\nresult2 = fibonacci(10)\n\nprint(result1, result2)  # 输出: 55 55\n```\n\n第一次调用 `fibonacci(10)` 会计算结果并将其缓存起来。第二次调用相同的参数时，直接从缓存返回结果，而不重新计算。\n\n## 对象方法中的应用\n\n`lru_cache` 不仅仅可以用于普通函数，还可以用于类的方法。如果方法的结果仅取决于其参数，并且不依赖于对象的状态，那么可以使用 `lru_cache` 提高性能。\n\n```\nfrom functools import lru_cache\n\nclass MyClass:\n    def __init__(self, name):\n        self.name = name\n\n    @lru_cache(maxsize=None)\n    def get_data(self, value):\n        print(f\"Loading data for {self.name} with value {value}\")\n        return value + 10\n\n# 创建两个实例\nobj1 = MyClass(\"Instance 1\")\nobj2 = MyClass(\"Instance 2\")\n\n# 对于 obj1，第一次调用 get_data 时会加载数据\nprint(obj1.get_data(5))  # 输出: Loading data for Instance 1 with value 5\n# 对于 obj1，第二次调用相同的参数，直接从缓存返回\nprint(obj1.get_data(5))  # 输出: 15 (从缓存返回)\n\n# 对于 obj2，第一次调用 get_data 时会加载数据\nprint(obj2.get_data(5))  # 输出: Loading data for Instance 2 with value 5\n# 对于 obj2，第二次调用相同的参数，直接从缓存返回\nprint(obj2.get_data(5))  # 输出: 15 (从缓存返回)\n```\n\n注意的是 **如果使用 @staticmethod 装饰器装饰的方法，那么 lru_cache 缓存会是共享的，不同实例之间的缓存是相同的。这是因为静态方法没有实例作为第一个参数，它是在类级别上调用的，因此只有一个缓存。**\n\n```\nfrom functools import lru_cache\n\nclass MyClass:\n    @staticmethod\n    @lru_cache(maxsize=None)\n    def static_method(value):\n        print(f\"Loading data for value {value}\")\n        return value + 10\n\n# 对于静态方法，缓存是共享的\n# 第一次调用 static_method 时会加载数据\nprint(MyClass.static_method(5))  # 输出: Loading data for value 5\n# 第二次调用相同的参数，直接从缓存返回\nprint(MyClass.static_method(5))  # 输出: 15 (从缓存返回)\n```\n\n对于静态方法而言，它是在类级别上调用的，而不是在实例级别上。即使实例化后调用，也会共享相同的缓存：\n\n```\nmy_class1 = MyClass()\nprint(my_class1.static_method(5))  # 第一次调用，输出: Loading data for value 5\nprint(my_class1.static_method(5))  # 第二次调用，输出: 15 (从缓存返回)\n\nmy_class2 = MyClass()\nprint(my_class2.static_method(5))  # 通过另一个实例调用，输出: 15 (从缓存返回)\n```\n","slug":"Python缓存函数执行结果lru_cache的使用","published":1,"updated":"2023-12-19T10:19:10.599Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluqa1hin001drlog178xa85l","content":"<p>一个强大而有用的工具是 <code>functools</code> 模块中的 <code>lru_cache</code> 装饰器。<br><code>lru_cache</code> 是 “Least Recently Used（最近最少使用）” 的缩写，是 Python 中用于缓存函数结果的装饰器。它的作用是在函数调用时缓存参数和结果，以便在后续相同参数的调用中直接返回缓存的结果，而不重新执行函数体。</p>\n<h2 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h2><p><code>lru_cache</code> 的主要优势之一是避免在相同参数下的重复计算。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from functools import lru_cache</span><br><span class=\"line\"></span><br><span class=\"line\">@lru_cache(maxsize=None)</span><br><span class=\"line\">def fibonacci(n):</span><br><span class=\"line\">    if n &lt;= 1:</span><br><span class=\"line\">        return n</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        return fibonacci(n-1) + fibonacci(n-2)</span><br><span class=\"line\"></span><br><span class=\"line\"># 第一次调用，计算 fibonacci(10)</span><br><span class=\"line\">result1 = fibonacci(10)</span><br><span class=\"line\"></span><br><span class=\"line\"># 第二次调用，直接从缓存返回结果</span><br><span class=\"line\">result2 = fibonacci(10)</span><br><span class=\"line\"></span><br><span class=\"line\">print(result1, result2)  # 输出: 55 55</span><br></pre></td></tr></table></figure>\n\n<p>第一次调用 <code>fibonacci(10)</code> 会计算结果并将其缓存起来。第二次调用相同的参数时，直接从缓存返回结果，而不重新计算。</p>\n<h2 id=\"对象方法中的应用\"><a href=\"#对象方法中的应用\" class=\"headerlink\" title=\"对象方法中的应用\"></a>对象方法中的应用</h2><p><code>lru_cache</code> 不仅仅可以用于普通函数，还可以用于类的方法。如果方法的结果仅取决于其参数，并且不依赖于对象的状态，那么可以使用 <code>lru_cache</code> 提高性能。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from functools import lru_cache</span><br><span class=\"line\"></span><br><span class=\"line\">class MyClass:</span><br><span class=\"line\">    def __init__(self, name):</span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\"></span><br><span class=\"line\">    @lru_cache(maxsize=None)</span><br><span class=\"line\">    def get_data(self, value):</span><br><span class=\"line\">        print(f&quot;Loading data for &#123;self.name&#125; with value &#123;value&#125;&quot;)</span><br><span class=\"line\">        return value + 10</span><br><span class=\"line\"></span><br><span class=\"line\"># 创建两个实例</span><br><span class=\"line\">obj1 = MyClass(&quot;Instance 1&quot;)</span><br><span class=\"line\">obj2 = MyClass(&quot;Instance 2&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\"># 对于 obj1，第一次调用 get_data 时会加载数据</span><br><span class=\"line\">print(obj1.get_data(5))  # 输出: Loading data for Instance 1 with value 5</span><br><span class=\"line\"># 对于 obj1，第二次调用相同的参数，直接从缓存返回</span><br><span class=\"line\">print(obj1.get_data(5))  # 输出: 15 (从缓存返回)</span><br><span class=\"line\"></span><br><span class=\"line\"># 对于 obj2，第一次调用 get_data 时会加载数据</span><br><span class=\"line\">print(obj2.get_data(5))  # 输出: Loading data for Instance 2 with value 5</span><br><span class=\"line\"># 对于 obj2，第二次调用相同的参数，直接从缓存返回</span><br><span class=\"line\">print(obj2.get_data(5))  # 输出: 15 (从缓存返回)</span><br></pre></td></tr></table></figure>\n\n<p>注意的是 <strong>如果使用 @staticmethod 装饰器装饰的方法，那么 lru_cache 缓存会是共享的，不同实例之间的缓存是相同的。这是因为静态方法没有实例作为第一个参数，它是在类级别上调用的，因此只有一个缓存。</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from functools import lru_cache</span><br><span class=\"line\"></span><br><span class=\"line\">class MyClass:</span><br><span class=\"line\">    @staticmethod</span><br><span class=\"line\">    @lru_cache(maxsize=None)</span><br><span class=\"line\">    def static_method(value):</span><br><span class=\"line\">        print(f&quot;Loading data for value &#123;value&#125;&quot;)</span><br><span class=\"line\">        return value + 10</span><br><span class=\"line\"></span><br><span class=\"line\"># 对于静态方法，缓存是共享的</span><br><span class=\"line\"># 第一次调用 static_method 时会加载数据</span><br><span class=\"line\">print(MyClass.static_method(5))  # 输出: Loading data for value 5</span><br><span class=\"line\"># 第二次调用相同的参数，直接从缓存返回</span><br><span class=\"line\">print(MyClass.static_method(5))  # 输出: 15 (从缓存返回)</span><br></pre></td></tr></table></figure>\n\n<p>对于静态方法而言，它是在类级别上调用的，而不是在实例级别上。即使实例化后调用，也会共享相同的缓存：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my_class1 = MyClass()</span><br><span class=\"line\">print(my_class1.static_method(5))  # 第一次调用，输出: Loading data for value 5</span><br><span class=\"line\">print(my_class1.static_method(5))  # 第二次调用，输出: 15 (从缓存返回)</span><br><span class=\"line\"></span><br><span class=\"line\">my_class2 = MyClass()</span><br><span class=\"line\">print(my_class2.static_method(5))  # 通过另一个实例调用，输出: 15 (从缓存返回)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>一个强大而有用的工具是 <code>functools</code> 模块中的 <code>lru_cache</code> 装饰器。<br><code>lru_cache</code> 是 “Least Recently Used（最近最少使用）” 的缩写，是 Python 中用于缓存函数结果的装饰器。它的作用是在函数调用时缓存参数和结果，以便在后续相同参数的调用中直接返回缓存的结果，而不重新执行函数体。</p>\n<h2 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h2><p><code>lru_cache</code> 的主要优势之一是避免在相同参数下的重复计算。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from functools import lru_cache</span><br><span class=\"line\"></span><br><span class=\"line\">@lru_cache(maxsize=None)</span><br><span class=\"line\">def fibonacci(n):</span><br><span class=\"line\">    if n &lt;= 1:</span><br><span class=\"line\">        return n</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        return fibonacci(n-1) + fibonacci(n-2)</span><br><span class=\"line\"></span><br><span class=\"line\"># 第一次调用，计算 fibonacci(10)</span><br><span class=\"line\">result1 = fibonacci(10)</span><br><span class=\"line\"></span><br><span class=\"line\"># 第二次调用，直接从缓存返回结果</span><br><span class=\"line\">result2 = fibonacci(10)</span><br><span class=\"line\"></span><br><span class=\"line\">print(result1, result2)  # 输出: 55 55</span><br></pre></td></tr></table></figure>\n\n<p>第一次调用 <code>fibonacci(10)</code> 会计算结果并将其缓存起来。第二次调用相同的参数时，直接从缓存返回结果，而不重新计算。</p>\n<h2 id=\"对象方法中的应用\"><a href=\"#对象方法中的应用\" class=\"headerlink\" title=\"对象方法中的应用\"></a>对象方法中的应用</h2><p><code>lru_cache</code> 不仅仅可以用于普通函数，还可以用于类的方法。如果方法的结果仅取决于其参数，并且不依赖于对象的状态，那么可以使用 <code>lru_cache</code> 提高性能。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from functools import lru_cache</span><br><span class=\"line\"></span><br><span class=\"line\">class MyClass:</span><br><span class=\"line\">    def __init__(self, name):</span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\"></span><br><span class=\"line\">    @lru_cache(maxsize=None)</span><br><span class=\"line\">    def get_data(self, value):</span><br><span class=\"line\">        print(f&quot;Loading data for &#123;self.name&#125; with value &#123;value&#125;&quot;)</span><br><span class=\"line\">        return value + 10</span><br><span class=\"line\"></span><br><span class=\"line\"># 创建两个实例</span><br><span class=\"line\">obj1 = MyClass(&quot;Instance 1&quot;)</span><br><span class=\"line\">obj2 = MyClass(&quot;Instance 2&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\"># 对于 obj1，第一次调用 get_data 时会加载数据</span><br><span class=\"line\">print(obj1.get_data(5))  # 输出: Loading data for Instance 1 with value 5</span><br><span class=\"line\"># 对于 obj1，第二次调用相同的参数，直接从缓存返回</span><br><span class=\"line\">print(obj1.get_data(5))  # 输出: 15 (从缓存返回)</span><br><span class=\"line\"></span><br><span class=\"line\"># 对于 obj2，第一次调用 get_data 时会加载数据</span><br><span class=\"line\">print(obj2.get_data(5))  # 输出: Loading data for Instance 2 with value 5</span><br><span class=\"line\"># 对于 obj2，第二次调用相同的参数，直接从缓存返回</span><br><span class=\"line\">print(obj2.get_data(5))  # 输出: 15 (从缓存返回)</span><br></pre></td></tr></table></figure>\n\n<p>注意的是 <strong>如果使用 @staticmethod 装饰器装饰的方法，那么 lru_cache 缓存会是共享的，不同实例之间的缓存是相同的。这是因为静态方法没有实例作为第一个参数，它是在类级别上调用的，因此只有一个缓存。</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from functools import lru_cache</span><br><span class=\"line\"></span><br><span class=\"line\">class MyClass:</span><br><span class=\"line\">    @staticmethod</span><br><span class=\"line\">    @lru_cache(maxsize=None)</span><br><span class=\"line\">    def static_method(value):</span><br><span class=\"line\">        print(f&quot;Loading data for value &#123;value&#125;&quot;)</span><br><span class=\"line\">        return value + 10</span><br><span class=\"line\"></span><br><span class=\"line\"># 对于静态方法，缓存是共享的</span><br><span class=\"line\"># 第一次调用 static_method 时会加载数据</span><br><span class=\"line\">print(MyClass.static_method(5))  # 输出: Loading data for value 5</span><br><span class=\"line\"># 第二次调用相同的参数，直接从缓存返回</span><br><span class=\"line\">print(MyClass.static_method(5))  # 输出: 15 (从缓存返回)</span><br></pre></td></tr></table></figure>\n\n<p>对于静态方法而言，它是在类级别上调用的，而不是在实例级别上。即使实例化后调用，也会共享相同的缓存：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my_class1 = MyClass()</span><br><span class=\"line\">print(my_class1.static_method(5))  # 第一次调用，输出: Loading data for value 5</span><br><span class=\"line\">print(my_class1.static_method(5))  # 第二次调用，输出: 15 (从缓存返回)</span><br><span class=\"line\"></span><br><span class=\"line\">my_class2 = MyClass()</span><br><span class=\"line\">print(my_class2.static_method(5))  # 通过另一个实例调用，输出: 15 (从缓存返回)</span><br></pre></td></tr></table></figure>\n"},{"title":"Python调试器pdb","date":"2021-03-30T16:00:00.000Z","_content":"\n- [10分钟教程掌握Python调试器pdb](https://zhuanlan.zhihu.com/p/37294138)\n\n\n## 使用方式\n\n- `$ python -m pdb test.py` **非侵入式方法**，不用额外修改源代码，在命令行下直接运行就能调试\n\n- `import pdb;pdb.set_trace()`**侵入式方法**，需要在被调试的代码中添加一行代码然后再正常运行代码\n\n  当你在命令行看到下面这个提示符时，说明已经正确打开了`pdb`\n\n  ```bash\n  (Pdb)\n  ```\n\n## 常用命令\n\n### 查看源码\n\n- `l` 查看当前位置前后11行源代码（多次会翻页），当前位置在代码中会用`-->`这个符号标出来\n- `ll` 查看当前函数或框架的所有源代码\n\n### 添加断点\n\n- `b` 查看断点设置\n- `b lineno` 断点添加到哪一行\n- `b filename:lineno` 断点添加到哪个文件的哪一行\n- `b functionname` 在函数执行的第一行设置断点\n\n### 添加临时断点，执行一次后时自动删除\n\n- `tbreak` 查看临时断点\n- `tbreak lineno`\n- `tbreak filename:lineno`\n- `tbreak functionname`\n\n### 清除断点\n\n- `cl` 清除所有断点\n- `cl filename:lineno`\n- `cl bpnumber [bpnumber ...]` 清除指定序号断点\n\n### 打印变量\n\n- `p expression`  也可以是表达式\n- `pp expression` 打印好看的\n\n### 逐行调试\n\n- `s` 执行下一行可以进入函数体\n- `n` 执行下一行不会进入函数体\n- `r` 执行下一行，如果在函数中，会直接执行到函数返回处\n\n### 非逐行调试\n\n- `c` 持续执行下去，直到遇到一个断点\n- `unt lineno` 持续执行直到运行到指定行（或遇到断点）\n- `j lineno` 直接跳转到指定行（注意，被跳过的代码不执行）\n\n### 其他\n\n- `a` 在函数中时打印函数的参数和参数的值\n- `! expression` 在pdb中执行语句，注意语句中不能出现空格\n- `whatis expression` 打印表达式的类型，常用来打印变量值\n- `interact` 启动交互式解释器\n- `q` 退出pdb","source":"_posts/Python调试器pdb.md","raw":"---\ntitle: Python调试器pdb\ndate: 2021-03-31\ntags: [Python, 调试]\n---\n\n- [10分钟教程掌握Python调试器pdb](https://zhuanlan.zhihu.com/p/37294138)\n\n\n## 使用方式\n\n- `$ python -m pdb test.py` **非侵入式方法**，不用额外修改源代码，在命令行下直接运行就能调试\n\n- `import pdb;pdb.set_trace()`**侵入式方法**，需要在被调试的代码中添加一行代码然后再正常运行代码\n\n  当你在命令行看到下面这个提示符时，说明已经正确打开了`pdb`\n\n  ```bash\n  (Pdb)\n  ```\n\n## 常用命令\n\n### 查看源码\n\n- `l` 查看当前位置前后11行源代码（多次会翻页），当前位置在代码中会用`-->`这个符号标出来\n- `ll` 查看当前函数或框架的所有源代码\n\n### 添加断点\n\n- `b` 查看断点设置\n- `b lineno` 断点添加到哪一行\n- `b filename:lineno` 断点添加到哪个文件的哪一行\n- `b functionname` 在函数执行的第一行设置断点\n\n### 添加临时断点，执行一次后时自动删除\n\n- `tbreak` 查看临时断点\n- `tbreak lineno`\n- `tbreak filename:lineno`\n- `tbreak functionname`\n\n### 清除断点\n\n- `cl` 清除所有断点\n- `cl filename:lineno`\n- `cl bpnumber [bpnumber ...]` 清除指定序号断点\n\n### 打印变量\n\n- `p expression`  也可以是表达式\n- `pp expression` 打印好看的\n\n### 逐行调试\n\n- `s` 执行下一行可以进入函数体\n- `n` 执行下一行不会进入函数体\n- `r` 执行下一行，如果在函数中，会直接执行到函数返回处\n\n### 非逐行调试\n\n- `c` 持续执行下去，直到遇到一个断点\n- `unt lineno` 持续执行直到运行到指定行（或遇到断点）\n- `j lineno` 直接跳转到指定行（注意，被跳过的代码不执行）\n\n### 其他\n\n- `a` 在函数中时打印函数的参数和参数的值\n- `! expression` 在pdb中执行语句，注意语句中不能出现空格\n- `whatis expression` 打印表达式的类型，常用来打印变量值\n- `interact` 启动交互式解释器\n- `q` 退出pdb","slug":"Python调试器pdb","published":1,"updated":"2021-06-20T10:25:20.124Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluqa1hio001frlog7m9hgmua","content":"<ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/37294138\">10分钟教程掌握Python调试器pdb</a></li>\n</ul>\n<h2 id=\"使用方式\"><a href=\"#使用方式\" class=\"headerlink\" title=\"使用方式\"></a>使用方式</h2><ul>\n<li><p><code>$ python -m pdb test.py</code> <strong>非侵入式方法</strong>，不用额外修改源代码，在命令行下直接运行就能调试</p>\n</li>\n<li><p><code>import pdb;pdb.set_trace()</code><strong>侵入式方法</strong>，需要在被调试的代码中添加一行代码然后再正常运行代码</p>\n<p>当你在命令行看到下面这个提示符时，说明已经正确打开了<code>pdb</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(Pdb)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><h3 id=\"查看源码\"><a href=\"#查看源码\" class=\"headerlink\" title=\"查看源码\"></a>查看源码</h3><ul>\n<li><code>l</code> 查看当前位置前后11行源代码（多次会翻页），当前位置在代码中会用<code>--&gt;</code>这个符号标出来</li>\n<li><code>ll</code> 查看当前函数或框架的所有源代码</li>\n</ul>\n<h3 id=\"添加断点\"><a href=\"#添加断点\" class=\"headerlink\" title=\"添加断点\"></a>添加断点</h3><ul>\n<li><code>b</code> 查看断点设置</li>\n<li><code>b lineno</code> 断点添加到哪一行</li>\n<li><code>b filename:lineno</code> 断点添加到哪个文件的哪一行</li>\n<li><code>b functionname</code> 在函数执行的第一行设置断点</li>\n</ul>\n<h3 id=\"添加临时断点，执行一次后时自动删除\"><a href=\"#添加临时断点，执行一次后时自动删除\" class=\"headerlink\" title=\"添加临时断点，执行一次后时自动删除\"></a>添加临时断点，执行一次后时自动删除</h3><ul>\n<li><code>tbreak</code> 查看临时断点</li>\n<li><code>tbreak lineno</code></li>\n<li><code>tbreak filename:lineno</code></li>\n<li><code>tbreak functionname</code></li>\n</ul>\n<h3 id=\"清除断点\"><a href=\"#清除断点\" class=\"headerlink\" title=\"清除断点\"></a>清除断点</h3><ul>\n<li><code>cl</code> 清除所有断点</li>\n<li><code>cl filename:lineno</code></li>\n<li><code>cl bpnumber [bpnumber ...]</code> 清除指定序号断点</li>\n</ul>\n<h3 id=\"打印变量\"><a href=\"#打印变量\" class=\"headerlink\" title=\"打印变量\"></a>打印变量</h3><ul>\n<li><code>p expression</code>  也可以是表达式</li>\n<li><code>pp expression</code> 打印好看的</li>\n</ul>\n<h3 id=\"逐行调试\"><a href=\"#逐行调试\" class=\"headerlink\" title=\"逐行调试\"></a>逐行调试</h3><ul>\n<li><code>s</code> 执行下一行可以进入函数体</li>\n<li><code>n</code> 执行下一行不会进入函数体</li>\n<li><code>r</code> 执行下一行，如果在函数中，会直接执行到函数返回处</li>\n</ul>\n<h3 id=\"非逐行调试\"><a href=\"#非逐行调试\" class=\"headerlink\" title=\"非逐行调试\"></a>非逐行调试</h3><ul>\n<li><code>c</code> 持续执行下去，直到遇到一个断点</li>\n<li><code>unt lineno</code> 持续执行直到运行到指定行（或遇到断点）</li>\n<li><code>j lineno</code> 直接跳转到指定行（注意，被跳过的代码不执行）</li>\n</ul>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><ul>\n<li><code>a</code> 在函数中时打印函数的参数和参数的值</li>\n<li><code>! expression</code> 在pdb中执行语句，注意语句中不能出现空格</li>\n<li><code>whatis expression</code> 打印表达式的类型，常用来打印变量值</li>\n<li><code>interact</code> 启动交互式解释器</li>\n<li><code>q</code> 退出pdb</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/37294138\">10分钟教程掌握Python调试器pdb</a></li>\n</ul>\n<h2 id=\"使用方式\"><a href=\"#使用方式\" class=\"headerlink\" title=\"使用方式\"></a>使用方式</h2><ul>\n<li><p><code>$ python -m pdb test.py</code> <strong>非侵入式方法</strong>，不用额外修改源代码，在命令行下直接运行就能调试</p>\n</li>\n<li><p><code>import pdb;pdb.set_trace()</code><strong>侵入式方法</strong>，需要在被调试的代码中添加一行代码然后再正常运行代码</p>\n<p>当你在命令行看到下面这个提示符时，说明已经正确打开了<code>pdb</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(Pdb)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><h3 id=\"查看源码\"><a href=\"#查看源码\" class=\"headerlink\" title=\"查看源码\"></a>查看源码</h3><ul>\n<li><code>l</code> 查看当前位置前后11行源代码（多次会翻页），当前位置在代码中会用<code>--&gt;</code>这个符号标出来</li>\n<li><code>ll</code> 查看当前函数或框架的所有源代码</li>\n</ul>\n<h3 id=\"添加断点\"><a href=\"#添加断点\" class=\"headerlink\" title=\"添加断点\"></a>添加断点</h3><ul>\n<li><code>b</code> 查看断点设置</li>\n<li><code>b lineno</code> 断点添加到哪一行</li>\n<li><code>b filename:lineno</code> 断点添加到哪个文件的哪一行</li>\n<li><code>b functionname</code> 在函数执行的第一行设置断点</li>\n</ul>\n<h3 id=\"添加临时断点，执行一次后时自动删除\"><a href=\"#添加临时断点，执行一次后时自动删除\" class=\"headerlink\" title=\"添加临时断点，执行一次后时自动删除\"></a>添加临时断点，执行一次后时自动删除</h3><ul>\n<li><code>tbreak</code> 查看临时断点</li>\n<li><code>tbreak lineno</code></li>\n<li><code>tbreak filename:lineno</code></li>\n<li><code>tbreak functionname</code></li>\n</ul>\n<h3 id=\"清除断点\"><a href=\"#清除断点\" class=\"headerlink\" title=\"清除断点\"></a>清除断点</h3><ul>\n<li><code>cl</code> 清除所有断点</li>\n<li><code>cl filename:lineno</code></li>\n<li><code>cl bpnumber [bpnumber ...]</code> 清除指定序号断点</li>\n</ul>\n<h3 id=\"打印变量\"><a href=\"#打印变量\" class=\"headerlink\" title=\"打印变量\"></a>打印变量</h3><ul>\n<li><code>p expression</code>  也可以是表达式</li>\n<li><code>pp expression</code> 打印好看的</li>\n</ul>\n<h3 id=\"逐行调试\"><a href=\"#逐行调试\" class=\"headerlink\" title=\"逐行调试\"></a>逐行调试</h3><ul>\n<li><code>s</code> 执行下一行可以进入函数体</li>\n<li><code>n</code> 执行下一行不会进入函数体</li>\n<li><code>r</code> 执行下一行，如果在函数中，会直接执行到函数返回处</li>\n</ul>\n<h3 id=\"非逐行调试\"><a href=\"#非逐行调试\" class=\"headerlink\" title=\"非逐行调试\"></a>非逐行调试</h3><ul>\n<li><code>c</code> 持续执行下去，直到遇到一个断点</li>\n<li><code>unt lineno</code> 持续执行直到运行到指定行（或遇到断点）</li>\n<li><code>j lineno</code> 直接跳转到指定行（注意，被跳过的代码不执行）</li>\n</ul>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><ul>\n<li><code>a</code> 在函数中时打印函数的参数和参数的值</li>\n<li><code>! expression</code> 在pdb中执行语句，注意语句中不能出现空格</li>\n<li><code>whatis expression</code> 打印表达式的类型，常用来打印变量值</li>\n<li><code>interact</code> 启动交互式解释器</li>\n<li><code>q</code> 退出pdb</li>\n</ul>\n"},{"title":"Python踩坑：List的‘+’和‘append’","date":"2019-09-04T16:00:00.000Z","_content":"\n\n```python\nIn [2]: d = [1, 2, 1, 3, 2, 4]\n   ...: print(id(d))\n   ...: for i, v in enumerate(d):\n   ...:     print(i, v)\n   ...:     if v > 2:\n   ...:         d = d[:i] + [1] + d[i:]\n   ...:     print(id(d))\n   ...:\n```\n\n```python\n\ndef func(data):\n    print(data)\n    print(id(data))\n    # data.append('23')  # append 和 += 都不会创建新对象，\n    # data += ['23']\n    data = data + ['23']  # 这种写法，左边的data已经是一个新建的局部变量对象了,\n    print(id(data))\n    print(data)\n\n\nif __name__ == '__main__':\n\n    data = [12, 45, 89]\n    func(data)\n    print(data)\n    print(id(data))\n\n```\n","source":"_posts/Python踩坑：List的‘+’和‘append’.md","raw":"---\ntitle: Python踩坑：List的‘+’和‘append’\ndate: 2019-09-05\ntags: [Python]\n---\n\n\n```python\nIn [2]: d = [1, 2, 1, 3, 2, 4]\n   ...: print(id(d))\n   ...: for i, v in enumerate(d):\n   ...:     print(i, v)\n   ...:     if v > 2:\n   ...:         d = d[:i] + [1] + d[i:]\n   ...:     print(id(d))\n   ...:\n```\n\n```python\n\ndef func(data):\n    print(data)\n    print(id(data))\n    # data.append('23')  # append 和 += 都不会创建新对象，\n    # data += ['23']\n    data = data + ['23']  # 这种写法，左边的data已经是一个新建的局部变量对象了,\n    print(id(data))\n    print(data)\n\n\nif __name__ == '__main__':\n\n    data = [12, 45, 89]\n    func(data)\n    print(data)\n    print(id(data))\n\n```\n","slug":"Python踩坑：List的‘+’和‘append’","published":1,"updated":"2021-06-20T10:25:20.124Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluqa1hio001hrlog7yx24ivc","content":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">2</span>]: d = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\">   ...: <span class=\"built_in\">print</span>(<span class=\"built_in\">id</span>(d))</span><br><span class=\"line\">   ...: <span class=\"keyword\">for</span> i, v <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(d):</span><br><span class=\"line\">   ...:     <span class=\"built_in\">print</span>(i, v)</span><br><span class=\"line\">   ...:     <span class=\"keyword\">if</span> v &gt; <span class=\"number\">2</span>:</span><br><span class=\"line\">   ...:         d = d[:i] + [<span class=\"number\">1</span>] + d[i:]</span><br><span class=\"line\">   ...:     <span class=\"built_in\">print</span>(<span class=\"built_in\">id</span>(d))</span><br><span class=\"line\">   ...:</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">func</span>(<span class=\"params\">data</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(data)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">id</span>(data))</span><br><span class=\"line\">    <span class=\"comment\"># data.append(&#x27;23&#x27;)  # append 和 += 都不会创建新对象，</span></span><br><span class=\"line\">    <span class=\"comment\"># data += [&#x27;23&#x27;]</span></span><br><span class=\"line\">    data = data + [<span class=\"string\">&#x27;23&#x27;</span>]  <span class=\"comment\"># 这种写法，左边的data已经是一个新建的局部变量对象了,</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">id</span>(data))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(data)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    data = [<span class=\"number\">12</span>, <span class=\"number\">45</span>, <span class=\"number\">89</span>]</span><br><span class=\"line\">    func(data)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(data)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">id</span>(data))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">2</span>]: d = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\">   ...: <span class=\"built_in\">print</span>(<span class=\"built_in\">id</span>(d))</span><br><span class=\"line\">   ...: <span class=\"keyword\">for</span> i, v <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(d):</span><br><span class=\"line\">   ...:     <span class=\"built_in\">print</span>(i, v)</span><br><span class=\"line\">   ...:     <span class=\"keyword\">if</span> v &gt; <span class=\"number\">2</span>:</span><br><span class=\"line\">   ...:         d = d[:i] + [<span class=\"number\">1</span>] + d[i:]</span><br><span class=\"line\">   ...:     <span class=\"built_in\">print</span>(<span class=\"built_in\">id</span>(d))</span><br><span class=\"line\">   ...:</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">func</span>(<span class=\"params\">data</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(data)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">id</span>(data))</span><br><span class=\"line\">    <span class=\"comment\"># data.append(&#x27;23&#x27;)  # append 和 += 都不会创建新对象，</span></span><br><span class=\"line\">    <span class=\"comment\"># data += [&#x27;23&#x27;]</span></span><br><span class=\"line\">    data = data + [<span class=\"string\">&#x27;23&#x27;</span>]  <span class=\"comment\"># 这种写法，左边的data已经是一个新建的局部变量对象了,</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">id</span>(data))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(data)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    data = [<span class=\"number\">12</span>, <span class=\"number\">45</span>, <span class=\"number\">89</span>]</span><br><span class=\"line\">    func(data)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(data)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">id</span>(data))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"title":"Python踩坑：列表中使用乘号复制多个空列表的问题","date":"2019-08-26T16:00:00.000Z","_content":"\n如下代码：\n\n```python\n>>> a = [[]] * 3\n>>> b = []\n>>> for i in range(3):\n...    b.append([])\n>>> a == b\nTrue\n>>> a\n[[], [], []]\n>>> b\n[[], [], []]\n```\n\n从上面结果看，`[[]] * 3`确实是创建了一个 `[[], [], []]`的空列表，但是我们在赋值的时候就会出现以下出乎意料的情况：\n\n```python\n>>> a[0].append(1)\n>>> b[0].append(1)\n>>> a == b\nFalse\n>>> a\n[[1], [1], [1]]\n>>> b\n[[1], [], []]\n```\n\n探究其原因是因为使用乘号`*`复制时，只是复制了索引，即复制的n个索引都指向同一个物理地址，所以在操作其中任何一个时，都会同时修改其他内容。同理列表中多个空字典也是同样的问题。\n\n优雅的解决这个问题(借助列表推导式)：\n\n```\n>>> a  = [[] for i in range(3)]\n>>> a\n[[], [], []]\n>>> a[0].append(1)\n>>> a\n[[1], [], []]\n```\n\n","source":"_posts/Python踩坑：列表中使用乘号复制多个空列表的问题.md","raw":"---\ntitle: Python踩坑：列表中使用乘号复制多个空列表的问题\ndate: 2019-08-27\ntags: [Python]\n---\n\n如下代码：\n\n```python\n>>> a = [[]] * 3\n>>> b = []\n>>> for i in range(3):\n...    b.append([])\n>>> a == b\nTrue\n>>> a\n[[], [], []]\n>>> b\n[[], [], []]\n```\n\n从上面结果看，`[[]] * 3`确实是创建了一个 `[[], [], []]`的空列表，但是我们在赋值的时候就会出现以下出乎意料的情况：\n\n```python\n>>> a[0].append(1)\n>>> b[0].append(1)\n>>> a == b\nFalse\n>>> a\n[[1], [1], [1]]\n>>> b\n[[1], [], []]\n```\n\n探究其原因是因为使用乘号`*`复制时，只是复制了索引，即复制的n个索引都指向同一个物理地址，所以在操作其中任何一个时，都会同时修改其他内容。同理列表中多个空字典也是同样的问题。\n\n优雅的解决这个问题(借助列表推导式)：\n\n```\n>>> a  = [[] for i in range(3)]\n>>> a\n[[], [], []]\n>>> a[0].append(1)\n>>> a\n[[1], [], []]\n```\n\n","slug":"Python踩坑：列表中使用乘号复制多个空列表的问题","published":1,"updated":"2021-06-20T10:25:20.124Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluqa1hip001jrlog7y883tut","content":"<p>如下代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = [[]] * <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = []</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">3</span>):</span><br><span class=\"line\"><span class=\"meta\">... </span>   b.append([])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a == b</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</span><br><span class=\"line\">[[], [], []]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b</span><br><span class=\"line\">[[], [], []]</span><br></pre></td></tr></table></figure>\n\n<p>从上面结果看，<code>[[]] * 3</code>确实是创建了一个 <code>[[], [], []]</code>的空列表，但是我们在赋值的时候就会出现以下出乎意料的情况：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a[<span class=\"number\">0</span>].append(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b[<span class=\"number\">0</span>].append(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a == b</span><br><span class=\"line\"><span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</span><br><span class=\"line\">[[<span class=\"number\">1</span>], [<span class=\"number\">1</span>], [<span class=\"number\">1</span>]]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b</span><br><span class=\"line\">[[<span class=\"number\">1</span>], [], []]</span><br></pre></td></tr></table></figure>\n\n<p>探究其原因是因为使用乘号<code>*</code>复制时，只是复制了索引，即复制的n个索引都指向同一个物理地址，所以在操作其中任何一个时，都会同时修改其他内容。同理列表中多个空字典也是同样的问题。</p>\n<p>优雅的解决这个问题(借助列表推导式)：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; a  = [[] for i in range(3)]</span><br><span class=\"line\">&gt;&gt;&gt; a</span><br><span class=\"line\">[[], [], []]</span><br><span class=\"line\">&gt;&gt;&gt; a[0].append(1)</span><br><span class=\"line\">&gt;&gt;&gt; a</span><br><span class=\"line\">[[1], [], []]</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>如下代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = [[]] * <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = []</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">3</span>):</span><br><span class=\"line\"><span class=\"meta\">... </span>   b.append([])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a == b</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</span><br><span class=\"line\">[[], [], []]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b</span><br><span class=\"line\">[[], [], []]</span><br></pre></td></tr></table></figure>\n\n<p>从上面结果看，<code>[[]] * 3</code>确实是创建了一个 <code>[[], [], []]</code>的空列表，但是我们在赋值的时候就会出现以下出乎意料的情况：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a[<span class=\"number\">0</span>].append(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b[<span class=\"number\">0</span>].append(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a == b</span><br><span class=\"line\"><span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</span><br><span class=\"line\">[[<span class=\"number\">1</span>], [<span class=\"number\">1</span>], [<span class=\"number\">1</span>]]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b</span><br><span class=\"line\">[[<span class=\"number\">1</span>], [], []]</span><br></pre></td></tr></table></figure>\n\n<p>探究其原因是因为使用乘号<code>*</code>复制时，只是复制了索引，即复制的n个索引都指向同一个物理地址，所以在操作其中任何一个时，都会同时修改其他内容。同理列表中多个空字典也是同样的问题。</p>\n<p>优雅的解决这个问题(借助列表推导式)：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; a  = [[] for i in range(3)]</span><br><span class=\"line\">&gt;&gt;&gt; a</span><br><span class=\"line\">[[], [], []]</span><br><span class=\"line\">&gt;&gt;&gt; a[0].append(1)</span><br><span class=\"line\">&gt;&gt;&gt; a</span><br><span class=\"line\">[[1], [], []]</span><br></pre></td></tr></table></figure>\n\n"},{"title":"RabbitMQ的发布和订阅模式","date":"2021-03-01T16:00:00.000Z","_content":"\nRabbitMQ可以通过交换机(Exchange)把消息发送给所有绑定该交换机的队列，实现发布和订阅的模式。\n\n> 发布者会把消息发送给RabbitMQ的交换机（Exchange），Exchange的一侧是发布者，另一侧则是一个或多个由订阅者创建的队列，由Exchange决定一条消息的生命周期。\n\n### 使用Python的pika库\n\n- 发布者声明交换机(Exchange)，交换机名称为 `exchange_1`,交互机类型为`fanout`\n\n  ```\n  channel.exchange_declare('exchange_1', durable=True, exchange_type='fanout')\n  ```\n\n  `durable=True` 设置交换机持久化，如果交换机不存在就创建。\n\n- 订阅者1声明队列`Q1`，并持久化(`durable=True`)，并与交换机`exchange_1`进行绑定\n\n  ```\n  channel.queue_declare('Q1', durable=True)\n  channel.queue_bind(exchange='exchange_1', queue='Q1')\n  ```\n\n- 订阅者2声明队列`Q2`，并持久化(`durable=True`)，并与交换机`exchange_1`进行绑定\n\n  ```\n  channel.queue_declare('Q2', durable=True)\n  channel.queue_bind(exchange='exchange_1', queue='Q2')\n  ```\n\n- 启动订阅者1和订阅者2，启动生产者发布消息，1和2都可以接收到相同的消息。**如果发布者发布的时候，无队列与交换机绑定，那么交换机会丢掉消息**;因为上面订阅者1和2都做了持久化的设置，当服务都出现问题时，交换机仍然会把消息发送给`Q1`和`Q2`\n\n### 代码演示\n\n发布者\n\n<!-- more -->\n\n```\nimport pika\n\namqp_config = {\n    'user': 'guest',\n    'password': 'guest',\n    'host': '127.0.0.1',\n    'port': '5672'\n}\n\nconnection = pika.BlockingConnection(\n    pika.URLParameters(\n        'amqp://{user}:{password}@{host}:{port}/%2F'.format(**amqp_config)))\nchannel = connection.channel()\n\nexchange = 'exchange_1'\n# exchange_type = 'fanout' 交换机类型为广播模式\nchannel.exchange_declare(exchange, durable=True, exchange_type='fanout')\ndata = 'message'\n# 发布消息，因为用的是fanout, 所以routing_key值为空\nchannel.basic_publish(exchange=exchange, routing_key='', body=data)\nconnection.close()\n\n```\n\n订阅者\n\n```\nimport time\nimport pika\n\nconnection = pika.BlockingConnection(pika.ConnectionParameters('localhost'))\nchannel = connection.channel()\n\nqueue_name = 'Q1'\nexchange = 'exchange_1'\n\nchannel.exchange_declare(exchange, durable=True, exchange_type='fanout')\nchannel.queue_declare(queue_name, durable=True)\n# 绑定队列和交换机\nchannel.queue_bind(exchange=exchange, queue=queue_name)\n\n\nprint('Waiting for Message.')\n\n\ndef callback(ch, method, properties, body):\n\n    print('Received %r' % (body,))\n    time.sleep(10)\n    ch.basic_ack(delivery_tag=method.delivery_tag)  # 告诉生产者，消息处理完成\n\n\nchannel.basic_qos(prefetch_count=1)\nchannel.basic_consume(queue=queue_name, on_message_callback=callback)\n\ntry:\n    channel.start_consuming()\nexcept KeyboardInterrupt:\n    pass\n\nconnection.close()\n```\n\n","source":"_posts/RabbitMQ的发布和订阅模式.md","raw":"---\ntitle: RabbitMQ的发布和订阅模式\ndate: 2021-03-02\ntags: [Python, 中间件]\n---\n\nRabbitMQ可以通过交换机(Exchange)把消息发送给所有绑定该交换机的队列，实现发布和订阅的模式。\n\n> 发布者会把消息发送给RabbitMQ的交换机（Exchange），Exchange的一侧是发布者，另一侧则是一个或多个由订阅者创建的队列，由Exchange决定一条消息的生命周期。\n\n### 使用Python的pika库\n\n- 发布者声明交换机(Exchange)，交换机名称为 `exchange_1`,交互机类型为`fanout`\n\n  ```\n  channel.exchange_declare('exchange_1', durable=True, exchange_type='fanout')\n  ```\n\n  `durable=True` 设置交换机持久化，如果交换机不存在就创建。\n\n- 订阅者1声明队列`Q1`，并持久化(`durable=True`)，并与交换机`exchange_1`进行绑定\n\n  ```\n  channel.queue_declare('Q1', durable=True)\n  channel.queue_bind(exchange='exchange_1', queue='Q1')\n  ```\n\n- 订阅者2声明队列`Q2`，并持久化(`durable=True`)，并与交换机`exchange_1`进行绑定\n\n  ```\n  channel.queue_declare('Q2', durable=True)\n  channel.queue_bind(exchange='exchange_1', queue='Q2')\n  ```\n\n- 启动订阅者1和订阅者2，启动生产者发布消息，1和2都可以接收到相同的消息。**如果发布者发布的时候，无队列与交换机绑定，那么交换机会丢掉消息**;因为上面订阅者1和2都做了持久化的设置，当服务都出现问题时，交换机仍然会把消息发送给`Q1`和`Q2`\n\n### 代码演示\n\n发布者\n\n<!-- more -->\n\n```\nimport pika\n\namqp_config = {\n    'user': 'guest',\n    'password': 'guest',\n    'host': '127.0.0.1',\n    'port': '5672'\n}\n\nconnection = pika.BlockingConnection(\n    pika.URLParameters(\n        'amqp://{user}:{password}@{host}:{port}/%2F'.format(**amqp_config)))\nchannel = connection.channel()\n\nexchange = 'exchange_1'\n# exchange_type = 'fanout' 交换机类型为广播模式\nchannel.exchange_declare(exchange, durable=True, exchange_type='fanout')\ndata = 'message'\n# 发布消息，因为用的是fanout, 所以routing_key值为空\nchannel.basic_publish(exchange=exchange, routing_key='', body=data)\nconnection.close()\n\n```\n\n订阅者\n\n```\nimport time\nimport pika\n\nconnection = pika.BlockingConnection(pika.ConnectionParameters('localhost'))\nchannel = connection.channel()\n\nqueue_name = 'Q1'\nexchange = 'exchange_1'\n\nchannel.exchange_declare(exchange, durable=True, exchange_type='fanout')\nchannel.queue_declare(queue_name, durable=True)\n# 绑定队列和交换机\nchannel.queue_bind(exchange=exchange, queue=queue_name)\n\n\nprint('Waiting for Message.')\n\n\ndef callback(ch, method, properties, body):\n\n    print('Received %r' % (body,))\n    time.sleep(10)\n    ch.basic_ack(delivery_tag=method.delivery_tag)  # 告诉生产者，消息处理完成\n\n\nchannel.basic_qos(prefetch_count=1)\nchannel.basic_consume(queue=queue_name, on_message_callback=callback)\n\ntry:\n    channel.start_consuming()\nexcept KeyboardInterrupt:\n    pass\n\nconnection.close()\n```\n\n","slug":"RabbitMQ的发布和订阅模式","published":1,"updated":"2021-06-20T10:25:20.125Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluqa1hip001lrlogd2d3692s","content":"<p>RabbitMQ可以通过交换机(Exchange)把消息发送给所有绑定该交换机的队列，实现发布和订阅的模式。</p>\n<blockquote>\n<p>发布者会把消息发送给RabbitMQ的交换机（Exchange），Exchange的一侧是发布者，另一侧则是一个或多个由订阅者创建的队列，由Exchange决定一条消息的生命周期。</p>\n</blockquote>\n<h3 id=\"使用Python的pika库\"><a href=\"#使用Python的pika库\" class=\"headerlink\" title=\"使用Python的pika库\"></a>使用Python的pika库</h3><ul>\n<li><p>发布者声明交换机(Exchange)，交换机名称为 <code>exchange_1</code>,交互机类型为<code>fanout</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">channel.exchange_declare(&#x27;exchange_1&#x27;, durable=True, exchange_type=&#x27;fanout&#x27;)</span><br></pre></td></tr></table></figure>\n\n<p><code>durable=True</code> 设置交换机持久化，如果交换机不存在就创建。</p>\n</li>\n<li><p>订阅者1声明队列<code>Q1</code>，并持久化(<code>durable=True</code>)，并与交换机<code>exchange_1</code>进行绑定</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">channel.queue_declare(&#x27;Q1&#x27;, durable=True)</span><br><span class=\"line\">channel.queue_bind(exchange=&#x27;exchange_1&#x27;, queue=&#x27;Q1&#x27;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>订阅者2声明队列<code>Q2</code>，并持久化(<code>durable=True</code>)，并与交换机<code>exchange_1</code>进行绑定</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">channel.queue_declare(&#x27;Q2&#x27;, durable=True)</span><br><span class=\"line\">channel.queue_bind(exchange=&#x27;exchange_1&#x27;, queue=&#x27;Q2&#x27;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动订阅者1和订阅者2，启动生产者发布消息，1和2都可以接收到相同的消息。<strong>如果发布者发布的时候，无队列与交换机绑定，那么交换机会丢掉消息</strong>;因为上面订阅者1和2都做了持久化的设置，当服务都出现问题时，交换机仍然会把消息发送给<code>Q1</code>和<code>Q2</code></p>\n</li>\n</ul>\n<h3 id=\"代码演示\"><a href=\"#代码演示\" class=\"headerlink\" title=\"代码演示\"></a>代码演示</h3><p>发布者</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import pika</span><br><span class=\"line\"></span><br><span class=\"line\">amqp_config = &#123;</span><br><span class=\"line\">    &#x27;user&#x27;: &#x27;guest&#x27;,</span><br><span class=\"line\">    &#x27;password&#x27;: &#x27;guest&#x27;,</span><br><span class=\"line\">    &#x27;host&#x27;: &#x27;127.0.0.1&#x27;,</span><br><span class=\"line\">    &#x27;port&#x27;: &#x27;5672&#x27;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">connection = pika.BlockingConnection(</span><br><span class=\"line\">    pika.URLParameters(</span><br><span class=\"line\">        &#x27;amqp://&#123;user&#125;:&#123;password&#125;@&#123;host&#125;:&#123;port&#125;/%2F&#x27;.format(**amqp_config)))</span><br><span class=\"line\">channel = connection.channel()</span><br><span class=\"line\"></span><br><span class=\"line\">exchange = &#x27;exchange_1&#x27;</span><br><span class=\"line\"># exchange_type = &#x27;fanout&#x27; 交换机类型为广播模式</span><br><span class=\"line\">channel.exchange_declare(exchange, durable=True, exchange_type=&#x27;fanout&#x27;)</span><br><span class=\"line\">data = &#x27;message&#x27;</span><br><span class=\"line\"># 发布消息，因为用的是fanout, 所以routing_key值为空</span><br><span class=\"line\">channel.basic_publish(exchange=exchange, routing_key=&#x27;&#x27;, body=data)</span><br><span class=\"line\">connection.close()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>订阅者</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import time</span><br><span class=\"line\">import pika</span><br><span class=\"line\"></span><br><span class=\"line\">connection = pika.BlockingConnection(pika.ConnectionParameters(&#x27;localhost&#x27;))</span><br><span class=\"line\">channel = connection.channel()</span><br><span class=\"line\"></span><br><span class=\"line\">queue_name = &#x27;Q1&#x27;</span><br><span class=\"line\">exchange = &#x27;exchange_1&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">channel.exchange_declare(exchange, durable=True, exchange_type=&#x27;fanout&#x27;)</span><br><span class=\"line\">channel.queue_declare(queue_name, durable=True)</span><br><span class=\"line\"># 绑定队列和交换机</span><br><span class=\"line\">channel.queue_bind(exchange=exchange, queue=queue_name)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">print(&#x27;Waiting for Message.&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def callback(ch, method, properties, body):</span><br><span class=\"line\"></span><br><span class=\"line\">    print(&#x27;Received %r&#x27; % (body,))</span><br><span class=\"line\">    time.sleep(10)</span><br><span class=\"line\">    ch.basic_ack(delivery_tag=method.delivery_tag)  # 告诉生产者，消息处理完成</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">channel.basic_qos(prefetch_count=1)</span><br><span class=\"line\">channel.basic_consume(queue=queue_name, on_message_callback=callback)</span><br><span class=\"line\"></span><br><span class=\"line\">try:</span><br><span class=\"line\">    channel.start_consuming()</span><br><span class=\"line\">except KeyboardInterrupt:</span><br><span class=\"line\">    pass</span><br><span class=\"line\"></span><br><span class=\"line\">connection.close()</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>RabbitMQ可以通过交换机(Exchange)把消息发送给所有绑定该交换机的队列，实现发布和订阅的模式。</p>\n<blockquote>\n<p>发布者会把消息发送给RabbitMQ的交换机（Exchange），Exchange的一侧是发布者，另一侧则是一个或多个由订阅者创建的队列，由Exchange决定一条消息的生命周期。</p>\n</blockquote>\n<h3 id=\"使用Python的pika库\"><a href=\"#使用Python的pika库\" class=\"headerlink\" title=\"使用Python的pika库\"></a>使用Python的pika库</h3><ul>\n<li><p>发布者声明交换机(Exchange)，交换机名称为 <code>exchange_1</code>,交互机类型为<code>fanout</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">channel.exchange_declare(&#x27;exchange_1&#x27;, durable=True, exchange_type=&#x27;fanout&#x27;)</span><br></pre></td></tr></table></figure>\n\n<p><code>durable=True</code> 设置交换机持久化，如果交换机不存在就创建。</p>\n</li>\n<li><p>订阅者1声明队列<code>Q1</code>，并持久化(<code>durable=True</code>)，并与交换机<code>exchange_1</code>进行绑定</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">channel.queue_declare(&#x27;Q1&#x27;, durable=True)</span><br><span class=\"line\">channel.queue_bind(exchange=&#x27;exchange_1&#x27;, queue=&#x27;Q1&#x27;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>订阅者2声明队列<code>Q2</code>，并持久化(<code>durable=True</code>)，并与交换机<code>exchange_1</code>进行绑定</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">channel.queue_declare(&#x27;Q2&#x27;, durable=True)</span><br><span class=\"line\">channel.queue_bind(exchange=&#x27;exchange_1&#x27;, queue=&#x27;Q2&#x27;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动订阅者1和订阅者2，启动生产者发布消息，1和2都可以接收到相同的消息。<strong>如果发布者发布的时候，无队列与交换机绑定，那么交换机会丢掉消息</strong>;因为上面订阅者1和2都做了持久化的设置，当服务都出现问题时，交换机仍然会把消息发送给<code>Q1</code>和<code>Q2</code></p>\n</li>\n</ul>\n<h3 id=\"代码演示\"><a href=\"#代码演示\" class=\"headerlink\" title=\"代码演示\"></a>代码演示</h3><p>发布者</p>","more":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import pika</span><br><span class=\"line\"></span><br><span class=\"line\">amqp_config = &#123;</span><br><span class=\"line\">    &#x27;user&#x27;: &#x27;guest&#x27;,</span><br><span class=\"line\">    &#x27;password&#x27;: &#x27;guest&#x27;,</span><br><span class=\"line\">    &#x27;host&#x27;: &#x27;127.0.0.1&#x27;,</span><br><span class=\"line\">    &#x27;port&#x27;: &#x27;5672&#x27;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">connection = pika.BlockingConnection(</span><br><span class=\"line\">    pika.URLParameters(</span><br><span class=\"line\">        &#x27;amqp://&#123;user&#125;:&#123;password&#125;@&#123;host&#125;:&#123;port&#125;/%2F&#x27;.format(**amqp_config)))</span><br><span class=\"line\">channel = connection.channel()</span><br><span class=\"line\"></span><br><span class=\"line\">exchange = &#x27;exchange_1&#x27;</span><br><span class=\"line\"># exchange_type = &#x27;fanout&#x27; 交换机类型为广播模式</span><br><span class=\"line\">channel.exchange_declare(exchange, durable=True, exchange_type=&#x27;fanout&#x27;)</span><br><span class=\"line\">data = &#x27;message&#x27;</span><br><span class=\"line\"># 发布消息，因为用的是fanout, 所以routing_key值为空</span><br><span class=\"line\">channel.basic_publish(exchange=exchange, routing_key=&#x27;&#x27;, body=data)</span><br><span class=\"line\">connection.close()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>订阅者</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import time</span><br><span class=\"line\">import pika</span><br><span class=\"line\"></span><br><span class=\"line\">connection = pika.BlockingConnection(pika.ConnectionParameters(&#x27;localhost&#x27;))</span><br><span class=\"line\">channel = connection.channel()</span><br><span class=\"line\"></span><br><span class=\"line\">queue_name = &#x27;Q1&#x27;</span><br><span class=\"line\">exchange = &#x27;exchange_1&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">channel.exchange_declare(exchange, durable=True, exchange_type=&#x27;fanout&#x27;)</span><br><span class=\"line\">channel.queue_declare(queue_name, durable=True)</span><br><span class=\"line\"># 绑定队列和交换机</span><br><span class=\"line\">channel.queue_bind(exchange=exchange, queue=queue_name)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">print(&#x27;Waiting for Message.&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def callback(ch, method, properties, body):</span><br><span class=\"line\"></span><br><span class=\"line\">    print(&#x27;Received %r&#x27; % (body,))</span><br><span class=\"line\">    time.sleep(10)</span><br><span class=\"line\">    ch.basic_ack(delivery_tag=method.delivery_tag)  # 告诉生产者，消息处理完成</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">channel.basic_qos(prefetch_count=1)</span><br><span class=\"line\">channel.basic_consume(queue=queue_name, on_message_callback=callback)</span><br><span class=\"line\"></span><br><span class=\"line\">try:</span><br><span class=\"line\">    channel.start_consuming()</span><br><span class=\"line\">except KeyboardInterrupt:</span><br><span class=\"line\">    pass</span><br><span class=\"line\"></span><br><span class=\"line\">connection.close()</span><br></pre></td></tr></table></figure>"},{"title":"Tmux使用","date":"2023-07-19T16:00:00.000Z","_content":"\n## 会话\n\n新开启会话\n\n```\n$ tmux 或 tmux new -s <name>\n```\n\n### 分离会话\n\n```\n$ tmux detach\n```\n\n查询会话窗口\n\n```\n$ tmux ls\n```\n\n### 重接会话\n\n```\n$ tmux attach -t <name or index>\n```\n\n### 杀死会话\n\n```\n$ tmux kill-session -t <name or index>\n```\n\n### 切换会话\n\n```\ntmux switch -t <name or index>\n```\n\n### 其他命令\n\n```\n# 列出所有快捷键，及其对应的 Tmux 命令\n$ tmux list-keys\n\n# 列出所有 Tmux 命令及其参数\n$ tmux list-commands\n\n# 列出当前所有 Tmux 会话的信息\n$ tmux info\n\n# 重新加载当前的 Tmux 配置\n$ tmux source-file ~/.tmux.conf\n```\n\n### 安装插件管理器tpm\n\n```\ngit clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm\n```\n\n 使用快捷键 `prefix + I`  安装插件\n \n ## 窗格(Pane)操作\n\n- % 左右平分出两个窗格\n- \" 上下平分出两个窗格\n- x 关闭当前窗格\n- { 当前窗格前移\n- } 当前窗格后移\n- ; 选择上次使用的窗格\n- o 选择下一个窗格，也可以使用上下左右方向键来选择\n- space 切换窗格布局，tmux 内置了五种窗格布局，也可以通过 ⌥1 至 ⌥5来切换\n- z 最大化当前窗格，再次执行可恢复原来大小\n- q 显示所有窗格的序号，在序号出现期间按下对应的数字，即可跳转至对应的窗格\n\n### tmux个人配置.tmux.conf\n\n```\n# Set prefix key to Ctrl-a\n# unbind-key C-b\n# set-option -g prefix C-a\n# bind-key C-a last-window # 方便切换，个人习惯\n# bind-key a send-prefix\n# shell下的Ctrl+a切换到行首在此配置下失效，此处设置之后Ctrl+a再按a即可切换至shell行首\nset-option -g prefix2 M-`  # 第二个快捷键为ALT+` \n\n# 重新读取加载配置文件\nbind r source-file ~/.tmux.conf \\; display-message \"Config reloaded...\"\n\n# 不使用prefix键，使用Ctrl和左右方向键方便切换窗口\n# bind-key -n \"M-Left\" select-window -t :-\n# bind-key -n \"M-Right\" select-window -t :+\n\n# displays \nsetw -g mouse on\n\nset -g default-terminal \"screen-256color\"   # use 256 colors\nset -g display-time 5000                    # status line messages display\nset -g history-limit 100000                 # scrollback buffer n lines\nsetw -g mode-keys vi                        # use vi mode\n\n# vim ESC 键延迟时间\nset -s escape-time 50\n\nunbind-key j\nbind-key -n M-j select-pane -D\nunbind-key k\nbind-key -n M-k select-pane -U\nunbind-key h\nbind-key -n M-h select-pane -L\nunbind-key l\nbind-key -n M-l select-pane -R\n\n# 绑定Ctrl+↑↓←→键为面板上下左右调整边缘的快捷指令\nbind-key -n \"C-Up\" resizep -U 3\nbind-key -n \"C-Down\" resizep -D 3\nbind-key -n \"C-Left\" resizep -L 10\nbind-key -n \"C-Right\" resizep -R 10\n\n# 使窗口从1开始，默认从0开始 \nset -g base-index 1\n# 自动重新编号 window\nset -g renumber-windows on\n\n# 关闭rename机制\nsetw -g automatic-rename off\nsetw -g allow-rename off\n\nunbind %\nbind -n M-- splitw -v -c '#{pane_current_path}'  # 垂直方向新增面板，默认进入当前目录\nunbind '\"'\nbind -n M-= splitw -h -c '#{pane_current_path}' # 水平方向新增面板，默认进入当前目录\n\n# 设置自动刷新的时间间隔\nset -g status-interval 1\n# 状态栏左对齐\nset -g status-justify left\n# 状态栏左侧宽度\nset -g status-left-length 20\n# 状态栏右侧宽度\nset -g status-right-length 50\n\n# 状态栏背景颜色\nset -g status-bg '#333333'\n# 状态栏前景颜色\nset -g status-fg '#ffffff'\n# 状态栏左侧显示 session 的名字\nset -g status-left '#[bg=#00bb00] [#S] #[default] '\n# 状态栏右侧显示时间\nset -g status-right '#[fg=white,bg=#444444] [#h] #[fg=white,bg=#666666] %Y-%m-%d #[fg=white,bg=#888888] %H:%M:%S '\n\n# 当前激活窗口在状态栏的展位格式\nsetw -g window-status-current-format '#[bg=#00bbbb, fg=#ffffff, bold]*[#I] #W*'\n# 未激活每个窗口占位的格式\nsetw -g window-status-format '#[bg=#00bbff, fg=#ffffff] [#I] #W '\n\n# 插件列表\nset -g @plugin 'tmux-plugins/tpm'\nset -g @plugin 'tmux-plugins/tmux-sensible'\n\nset -g @plugin 'tmux-plugins/tmux-resurrect'\nset -g @plugin 'christoomey/vim-tmux-navigator'\nset -g @plugin 'tmux-plugins/tmux-yank'\n\n# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)\nrun -b '~/.tmux/plugins/tpm/tpm'\n```\n\n","source":"_posts/Tmux使用.md","raw":"---\ntitle: Tmux使用\ndate: 2023-07-20\ntags: [Linux, Tmux]\n\n---\n\n## 会话\n\n新开启会话\n\n```\n$ tmux 或 tmux new -s <name>\n```\n\n### 分离会话\n\n```\n$ tmux detach\n```\n\n查询会话窗口\n\n```\n$ tmux ls\n```\n\n### 重接会话\n\n```\n$ tmux attach -t <name or index>\n```\n\n### 杀死会话\n\n```\n$ tmux kill-session -t <name or index>\n```\n\n### 切换会话\n\n```\ntmux switch -t <name or index>\n```\n\n### 其他命令\n\n```\n# 列出所有快捷键，及其对应的 Tmux 命令\n$ tmux list-keys\n\n# 列出所有 Tmux 命令及其参数\n$ tmux list-commands\n\n# 列出当前所有 Tmux 会话的信息\n$ tmux info\n\n# 重新加载当前的 Tmux 配置\n$ tmux source-file ~/.tmux.conf\n```\n\n### 安装插件管理器tpm\n\n```\ngit clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm\n```\n\n 使用快捷键 `prefix + I`  安装插件\n \n ## 窗格(Pane)操作\n\n- % 左右平分出两个窗格\n- \" 上下平分出两个窗格\n- x 关闭当前窗格\n- { 当前窗格前移\n- } 当前窗格后移\n- ; 选择上次使用的窗格\n- o 选择下一个窗格，也可以使用上下左右方向键来选择\n- space 切换窗格布局，tmux 内置了五种窗格布局，也可以通过 ⌥1 至 ⌥5来切换\n- z 最大化当前窗格，再次执行可恢复原来大小\n- q 显示所有窗格的序号，在序号出现期间按下对应的数字，即可跳转至对应的窗格\n\n### tmux个人配置.tmux.conf\n\n```\n# Set prefix key to Ctrl-a\n# unbind-key C-b\n# set-option -g prefix C-a\n# bind-key C-a last-window # 方便切换，个人习惯\n# bind-key a send-prefix\n# shell下的Ctrl+a切换到行首在此配置下失效，此处设置之后Ctrl+a再按a即可切换至shell行首\nset-option -g prefix2 M-`  # 第二个快捷键为ALT+` \n\n# 重新读取加载配置文件\nbind r source-file ~/.tmux.conf \\; display-message \"Config reloaded...\"\n\n# 不使用prefix键，使用Ctrl和左右方向键方便切换窗口\n# bind-key -n \"M-Left\" select-window -t :-\n# bind-key -n \"M-Right\" select-window -t :+\n\n# displays \nsetw -g mouse on\n\nset -g default-terminal \"screen-256color\"   # use 256 colors\nset -g display-time 5000                    # status line messages display\nset -g history-limit 100000                 # scrollback buffer n lines\nsetw -g mode-keys vi                        # use vi mode\n\n# vim ESC 键延迟时间\nset -s escape-time 50\n\nunbind-key j\nbind-key -n M-j select-pane -D\nunbind-key k\nbind-key -n M-k select-pane -U\nunbind-key h\nbind-key -n M-h select-pane -L\nunbind-key l\nbind-key -n M-l select-pane -R\n\n# 绑定Ctrl+↑↓←→键为面板上下左右调整边缘的快捷指令\nbind-key -n \"C-Up\" resizep -U 3\nbind-key -n \"C-Down\" resizep -D 3\nbind-key -n \"C-Left\" resizep -L 10\nbind-key -n \"C-Right\" resizep -R 10\n\n# 使窗口从1开始，默认从0开始 \nset -g base-index 1\n# 自动重新编号 window\nset -g renumber-windows on\n\n# 关闭rename机制\nsetw -g automatic-rename off\nsetw -g allow-rename off\n\nunbind %\nbind -n M-- splitw -v -c '#{pane_current_path}'  # 垂直方向新增面板，默认进入当前目录\nunbind '\"'\nbind -n M-= splitw -h -c '#{pane_current_path}' # 水平方向新增面板，默认进入当前目录\n\n# 设置自动刷新的时间间隔\nset -g status-interval 1\n# 状态栏左对齐\nset -g status-justify left\n# 状态栏左侧宽度\nset -g status-left-length 20\n# 状态栏右侧宽度\nset -g status-right-length 50\n\n# 状态栏背景颜色\nset -g status-bg '#333333'\n# 状态栏前景颜色\nset -g status-fg '#ffffff'\n# 状态栏左侧显示 session 的名字\nset -g status-left '#[bg=#00bb00] [#S] #[default] '\n# 状态栏右侧显示时间\nset -g status-right '#[fg=white,bg=#444444] [#h] #[fg=white,bg=#666666] %Y-%m-%d #[fg=white,bg=#888888] %H:%M:%S '\n\n# 当前激活窗口在状态栏的展位格式\nsetw -g window-status-current-format '#[bg=#00bbbb, fg=#ffffff, bold]*[#I] #W*'\n# 未激活每个窗口占位的格式\nsetw -g window-status-format '#[bg=#00bbff, fg=#ffffff] [#I] #W '\n\n# 插件列表\nset -g @plugin 'tmux-plugins/tpm'\nset -g @plugin 'tmux-plugins/tmux-sensible'\n\nset -g @plugin 'tmux-plugins/tmux-resurrect'\nset -g @plugin 'christoomey/vim-tmux-navigator'\nset -g @plugin 'tmux-plugins/tmux-yank'\n\n# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)\nrun -b '~/.tmux/plugins/tpm/tpm'\n```\n\n","slug":"Tmux使用","published":1,"updated":"2023-08-15T11:46:23.500Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluqa1hiq001orloge0dp28m9","content":"<h2 id=\"会话\"><a href=\"#会话\" class=\"headerlink\" title=\"会话\"></a>会话</h2><p>新开启会话</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ tmux 或 tmux new -s &lt;name&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"分离会话\"><a href=\"#分离会话\" class=\"headerlink\" title=\"分离会话\"></a>分离会话</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ tmux detach</span><br></pre></td></tr></table></figure>\n\n<p>查询会话窗口</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ tmux ls</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"重接会话\"><a href=\"#重接会话\" class=\"headerlink\" title=\"重接会话\"></a>重接会话</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ tmux attach -t &lt;name or index&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"杀死会话\"><a href=\"#杀死会话\" class=\"headerlink\" title=\"杀死会话\"></a>杀死会话</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ tmux kill-session -t &lt;name or index&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"切换会话\"><a href=\"#切换会话\" class=\"headerlink\" title=\"切换会话\"></a>切换会话</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux switch -t &lt;name or index&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"其他命令\"><a href=\"#其他命令\" class=\"headerlink\" title=\"其他命令\"></a>其他命令</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 列出所有快捷键，及其对应的 Tmux 命令</span><br><span class=\"line\">$ tmux list-keys</span><br><span class=\"line\"></span><br><span class=\"line\"># 列出所有 Tmux 命令及其参数</span><br><span class=\"line\">$ tmux list-commands</span><br><span class=\"line\"></span><br><span class=\"line\"># 列出当前所有 Tmux 会话的信息</span><br><span class=\"line\">$ tmux info</span><br><span class=\"line\"></span><br><span class=\"line\"># 重新加载当前的 Tmux 配置</span><br><span class=\"line\">$ tmux source-file ~/.tmux.conf</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装插件管理器tpm\"><a href=\"#安装插件管理器tpm\" class=\"headerlink\" title=\"安装插件管理器tpm\"></a>安装插件管理器tpm</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm</span><br></pre></td></tr></table></figure>\n\n<p> 使用快捷键 <code>prefix + I</code>  安装插件</p>\n<h2 id=\"窗格-Pane-操作\"><a href=\"#窗格-Pane-操作\" class=\"headerlink\" title=\"窗格(Pane)操作\"></a>窗格(Pane)操作</h2><ul>\n<li>% 左右平分出两个窗格</li>\n<li>“ 上下平分出两个窗格</li>\n<li>x 关闭当前窗格</li>\n<li>{ 当前窗格前移</li>\n<li>} 当前窗格后移</li>\n<li>; 选择上次使用的窗格</li>\n<li>o 选择下一个窗格，也可以使用上下左右方向键来选择</li>\n<li>space 切换窗格布局，tmux 内置了五种窗格布局，也可以通过 ⌥1 至 ⌥5来切换</li>\n<li>z 最大化当前窗格，再次执行可恢复原来大小</li>\n<li>q 显示所有窗格的序号，在序号出现期间按下对应的数字，即可跳转至对应的窗格</li>\n</ul>\n<h3 id=\"tmux个人配置-tmux-conf\"><a href=\"#tmux个人配置-tmux-conf\" class=\"headerlink\" title=\"tmux个人配置.tmux.conf\"></a>tmux个人配置.tmux.conf</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Set prefix key to Ctrl-a</span><br><span class=\"line\"># unbind-key C-b</span><br><span class=\"line\"># set-option -g prefix C-a</span><br><span class=\"line\"># bind-key C-a last-window # 方便切换，个人习惯</span><br><span class=\"line\"># bind-key a send-prefix</span><br><span class=\"line\"># shell下的Ctrl+a切换到行首在此配置下失效，此处设置之后Ctrl+a再按a即可切换至shell行首</span><br><span class=\"line\">set-option -g prefix2 M-`  # 第二个快捷键为ALT+` </span><br><span class=\"line\"></span><br><span class=\"line\"># 重新读取加载配置文件</span><br><span class=\"line\">bind r source-file ~/.tmux.conf \\; display-message &quot;Config reloaded...&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 不使用prefix键，使用Ctrl和左右方向键方便切换窗口</span><br><span class=\"line\"># bind-key -n &quot;M-Left&quot; select-window -t :-</span><br><span class=\"line\"># bind-key -n &quot;M-Right&quot; select-window -t :+</span><br><span class=\"line\"></span><br><span class=\"line\"># displays </span><br><span class=\"line\">setw -g mouse on</span><br><span class=\"line\"></span><br><span class=\"line\">set -g default-terminal &quot;screen-256color&quot;   # use 256 colors</span><br><span class=\"line\">set -g display-time 5000                    # status line messages display</span><br><span class=\"line\">set -g history-limit 100000                 # scrollback buffer n lines</span><br><span class=\"line\">setw -g mode-keys vi                        # use vi mode</span><br><span class=\"line\"></span><br><span class=\"line\"># vim ESC 键延迟时间</span><br><span class=\"line\">set -s escape-time 50</span><br><span class=\"line\"></span><br><span class=\"line\">unbind-key j</span><br><span class=\"line\">bind-key -n M-j select-pane -D</span><br><span class=\"line\">unbind-key k</span><br><span class=\"line\">bind-key -n M-k select-pane -U</span><br><span class=\"line\">unbind-key h</span><br><span class=\"line\">bind-key -n M-h select-pane -L</span><br><span class=\"line\">unbind-key l</span><br><span class=\"line\">bind-key -n M-l select-pane -R</span><br><span class=\"line\"></span><br><span class=\"line\"># 绑定Ctrl+↑↓←→键为面板上下左右调整边缘的快捷指令</span><br><span class=\"line\">bind-key -n &quot;C-Up&quot; resizep -U 3</span><br><span class=\"line\">bind-key -n &quot;C-Down&quot; resizep -D 3</span><br><span class=\"line\">bind-key -n &quot;C-Left&quot; resizep -L 10</span><br><span class=\"line\">bind-key -n &quot;C-Right&quot; resizep -R 10</span><br><span class=\"line\"></span><br><span class=\"line\"># 使窗口从1开始，默认从0开始 </span><br><span class=\"line\">set -g base-index 1</span><br><span class=\"line\"># 自动重新编号 window</span><br><span class=\"line\">set -g renumber-windows on</span><br><span class=\"line\"></span><br><span class=\"line\"># 关闭rename机制</span><br><span class=\"line\">setw -g automatic-rename off</span><br><span class=\"line\">setw -g allow-rename off</span><br><span class=\"line\"></span><br><span class=\"line\">unbind %</span><br><span class=\"line\">bind -n M-- splitw -v -c &#x27;#&#123;pane_current_path&#125;&#x27;  # 垂直方向新增面板，默认进入当前目录</span><br><span class=\"line\">unbind &#x27;&quot;&#x27;</span><br><span class=\"line\">bind -n M-= splitw -h -c &#x27;#&#123;pane_current_path&#125;&#x27; # 水平方向新增面板，默认进入当前目录</span><br><span class=\"line\"></span><br><span class=\"line\"># 设置自动刷新的时间间隔</span><br><span class=\"line\">set -g status-interval 1</span><br><span class=\"line\"># 状态栏左对齐</span><br><span class=\"line\">set -g status-justify left</span><br><span class=\"line\"># 状态栏左侧宽度</span><br><span class=\"line\">set -g status-left-length 20</span><br><span class=\"line\"># 状态栏右侧宽度</span><br><span class=\"line\">set -g status-right-length 50</span><br><span class=\"line\"></span><br><span class=\"line\"># 状态栏背景颜色</span><br><span class=\"line\">set -g status-bg &#x27;#333333&#x27;</span><br><span class=\"line\"># 状态栏前景颜色</span><br><span class=\"line\">set -g status-fg &#x27;#ffffff&#x27;</span><br><span class=\"line\"># 状态栏左侧显示 session 的名字</span><br><span class=\"line\">set -g status-left &#x27;#[bg=#00bb00] [#S] #[default] &#x27;</span><br><span class=\"line\"># 状态栏右侧显示时间</span><br><span class=\"line\">set -g status-right &#x27;#[fg=white,bg=#444444] [#h] #[fg=white,bg=#666666] %Y-%m-%d #[fg=white,bg=#888888] %H:%M:%S &#x27;</span><br><span class=\"line\"></span><br><span class=\"line\"># 当前激活窗口在状态栏的展位格式</span><br><span class=\"line\">setw -g window-status-current-format &#x27;#[bg=#00bbbb, fg=#ffffff, bold]*[#I] #W*&#x27;</span><br><span class=\"line\"># 未激活每个窗口占位的格式</span><br><span class=\"line\">setw -g window-status-format &#x27;#[bg=#00bbff, fg=#ffffff] [#I] #W &#x27;</span><br><span class=\"line\"></span><br><span class=\"line\"># 插件列表</span><br><span class=\"line\">set -g @plugin &#x27;tmux-plugins/tpm&#x27;</span><br><span class=\"line\">set -g @plugin &#x27;tmux-plugins/tmux-sensible&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">set -g @plugin &#x27;tmux-plugins/tmux-resurrect&#x27;</span><br><span class=\"line\">set -g @plugin &#x27;christoomey/vim-tmux-navigator&#x27;</span><br><span class=\"line\">set -g @plugin &#x27;tmux-plugins/tmux-yank&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\"># Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)</span><br><span class=\"line\">run -b &#x27;~/.tmux/plugins/tpm/tpm&#x27;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"会话\"><a href=\"#会话\" class=\"headerlink\" title=\"会话\"></a>会话</h2><p>新开启会话</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ tmux 或 tmux new -s &lt;name&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"分离会话\"><a href=\"#分离会话\" class=\"headerlink\" title=\"分离会话\"></a>分离会话</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ tmux detach</span><br></pre></td></tr></table></figure>\n\n<p>查询会话窗口</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ tmux ls</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"重接会话\"><a href=\"#重接会话\" class=\"headerlink\" title=\"重接会话\"></a>重接会话</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ tmux attach -t &lt;name or index&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"杀死会话\"><a href=\"#杀死会话\" class=\"headerlink\" title=\"杀死会话\"></a>杀死会话</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ tmux kill-session -t &lt;name or index&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"切换会话\"><a href=\"#切换会话\" class=\"headerlink\" title=\"切换会话\"></a>切换会话</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmux switch -t &lt;name or index&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"其他命令\"><a href=\"#其他命令\" class=\"headerlink\" title=\"其他命令\"></a>其他命令</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 列出所有快捷键，及其对应的 Tmux 命令</span><br><span class=\"line\">$ tmux list-keys</span><br><span class=\"line\"></span><br><span class=\"line\"># 列出所有 Tmux 命令及其参数</span><br><span class=\"line\">$ tmux list-commands</span><br><span class=\"line\"></span><br><span class=\"line\"># 列出当前所有 Tmux 会话的信息</span><br><span class=\"line\">$ tmux info</span><br><span class=\"line\"></span><br><span class=\"line\"># 重新加载当前的 Tmux 配置</span><br><span class=\"line\">$ tmux source-file ~/.tmux.conf</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装插件管理器tpm\"><a href=\"#安装插件管理器tpm\" class=\"headerlink\" title=\"安装插件管理器tpm\"></a>安装插件管理器tpm</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm</span><br></pre></td></tr></table></figure>\n\n<p> 使用快捷键 <code>prefix + I</code>  安装插件</p>\n<h2 id=\"窗格-Pane-操作\"><a href=\"#窗格-Pane-操作\" class=\"headerlink\" title=\"窗格(Pane)操作\"></a>窗格(Pane)操作</h2><ul>\n<li>% 左右平分出两个窗格</li>\n<li>“ 上下平分出两个窗格</li>\n<li>x 关闭当前窗格</li>\n<li>{ 当前窗格前移</li>\n<li>} 当前窗格后移</li>\n<li>; 选择上次使用的窗格</li>\n<li>o 选择下一个窗格，也可以使用上下左右方向键来选择</li>\n<li>space 切换窗格布局，tmux 内置了五种窗格布局，也可以通过 ⌥1 至 ⌥5来切换</li>\n<li>z 最大化当前窗格，再次执行可恢复原来大小</li>\n<li>q 显示所有窗格的序号，在序号出现期间按下对应的数字，即可跳转至对应的窗格</li>\n</ul>\n<h3 id=\"tmux个人配置-tmux-conf\"><a href=\"#tmux个人配置-tmux-conf\" class=\"headerlink\" title=\"tmux个人配置.tmux.conf\"></a>tmux个人配置.tmux.conf</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Set prefix key to Ctrl-a</span><br><span class=\"line\"># unbind-key C-b</span><br><span class=\"line\"># set-option -g prefix C-a</span><br><span class=\"line\"># bind-key C-a last-window # 方便切换，个人习惯</span><br><span class=\"line\"># bind-key a send-prefix</span><br><span class=\"line\"># shell下的Ctrl+a切换到行首在此配置下失效，此处设置之后Ctrl+a再按a即可切换至shell行首</span><br><span class=\"line\">set-option -g prefix2 M-`  # 第二个快捷键为ALT+` </span><br><span class=\"line\"></span><br><span class=\"line\"># 重新读取加载配置文件</span><br><span class=\"line\">bind r source-file ~/.tmux.conf \\; display-message &quot;Config reloaded...&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 不使用prefix键，使用Ctrl和左右方向键方便切换窗口</span><br><span class=\"line\"># bind-key -n &quot;M-Left&quot; select-window -t :-</span><br><span class=\"line\"># bind-key -n &quot;M-Right&quot; select-window -t :+</span><br><span class=\"line\"></span><br><span class=\"line\"># displays </span><br><span class=\"line\">setw -g mouse on</span><br><span class=\"line\"></span><br><span class=\"line\">set -g default-terminal &quot;screen-256color&quot;   # use 256 colors</span><br><span class=\"line\">set -g display-time 5000                    # status line messages display</span><br><span class=\"line\">set -g history-limit 100000                 # scrollback buffer n lines</span><br><span class=\"line\">setw -g mode-keys vi                        # use vi mode</span><br><span class=\"line\"></span><br><span class=\"line\"># vim ESC 键延迟时间</span><br><span class=\"line\">set -s escape-time 50</span><br><span class=\"line\"></span><br><span class=\"line\">unbind-key j</span><br><span class=\"line\">bind-key -n M-j select-pane -D</span><br><span class=\"line\">unbind-key k</span><br><span class=\"line\">bind-key -n M-k select-pane -U</span><br><span class=\"line\">unbind-key h</span><br><span class=\"line\">bind-key -n M-h select-pane -L</span><br><span class=\"line\">unbind-key l</span><br><span class=\"line\">bind-key -n M-l select-pane -R</span><br><span class=\"line\"></span><br><span class=\"line\"># 绑定Ctrl+↑↓←→键为面板上下左右调整边缘的快捷指令</span><br><span class=\"line\">bind-key -n &quot;C-Up&quot; resizep -U 3</span><br><span class=\"line\">bind-key -n &quot;C-Down&quot; resizep -D 3</span><br><span class=\"line\">bind-key -n &quot;C-Left&quot; resizep -L 10</span><br><span class=\"line\">bind-key -n &quot;C-Right&quot; resizep -R 10</span><br><span class=\"line\"></span><br><span class=\"line\"># 使窗口从1开始，默认从0开始 </span><br><span class=\"line\">set -g base-index 1</span><br><span class=\"line\"># 自动重新编号 window</span><br><span class=\"line\">set -g renumber-windows on</span><br><span class=\"line\"></span><br><span class=\"line\"># 关闭rename机制</span><br><span class=\"line\">setw -g automatic-rename off</span><br><span class=\"line\">setw -g allow-rename off</span><br><span class=\"line\"></span><br><span class=\"line\">unbind %</span><br><span class=\"line\">bind -n M-- splitw -v -c &#x27;#&#123;pane_current_path&#125;&#x27;  # 垂直方向新增面板，默认进入当前目录</span><br><span class=\"line\">unbind &#x27;&quot;&#x27;</span><br><span class=\"line\">bind -n M-= splitw -h -c &#x27;#&#123;pane_current_path&#125;&#x27; # 水平方向新增面板，默认进入当前目录</span><br><span class=\"line\"></span><br><span class=\"line\"># 设置自动刷新的时间间隔</span><br><span class=\"line\">set -g status-interval 1</span><br><span class=\"line\"># 状态栏左对齐</span><br><span class=\"line\">set -g status-justify left</span><br><span class=\"line\"># 状态栏左侧宽度</span><br><span class=\"line\">set -g status-left-length 20</span><br><span class=\"line\"># 状态栏右侧宽度</span><br><span class=\"line\">set -g status-right-length 50</span><br><span class=\"line\"></span><br><span class=\"line\"># 状态栏背景颜色</span><br><span class=\"line\">set -g status-bg &#x27;#333333&#x27;</span><br><span class=\"line\"># 状态栏前景颜色</span><br><span class=\"line\">set -g status-fg &#x27;#ffffff&#x27;</span><br><span class=\"line\"># 状态栏左侧显示 session 的名字</span><br><span class=\"line\">set -g status-left &#x27;#[bg=#00bb00] [#S] #[default] &#x27;</span><br><span class=\"line\"># 状态栏右侧显示时间</span><br><span class=\"line\">set -g status-right &#x27;#[fg=white,bg=#444444] [#h] #[fg=white,bg=#666666] %Y-%m-%d #[fg=white,bg=#888888] %H:%M:%S &#x27;</span><br><span class=\"line\"></span><br><span class=\"line\"># 当前激活窗口在状态栏的展位格式</span><br><span class=\"line\">setw -g window-status-current-format &#x27;#[bg=#00bbbb, fg=#ffffff, bold]*[#I] #W*&#x27;</span><br><span class=\"line\"># 未激活每个窗口占位的格式</span><br><span class=\"line\">setw -g window-status-format &#x27;#[bg=#00bbff, fg=#ffffff] [#I] #W &#x27;</span><br><span class=\"line\"></span><br><span class=\"line\"># 插件列表</span><br><span class=\"line\">set -g @plugin &#x27;tmux-plugins/tpm&#x27;</span><br><span class=\"line\">set -g @plugin &#x27;tmux-plugins/tmux-sensible&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">set -g @plugin &#x27;tmux-plugins/tmux-resurrect&#x27;</span><br><span class=\"line\">set -g @plugin &#x27;christoomey/vim-tmux-navigator&#x27;</span><br><span class=\"line\">set -g @plugin &#x27;tmux-plugins/tmux-yank&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\"># Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)</span><br><span class=\"line\">run -b &#x27;~/.tmux/plugins/tpm/tpm&#x27;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Python：使用setuptools进行包管理","date":"2019-12-12T16:00:00.000Z","_content":"\n作为Python的打包和分发工具，steuptools是十分易用的，而将程序打包之后，可以更方便的进行部署和分发，也可以上传到Pypi。这里结合一个例子，记录一下自己在使用打包过程的笔记和遇到的问题。\n\n只需写一个简短的setup.py安装文件，就可以开始了你的Python应用打包。\n\n## Setup.py\n\n假设要打包的程序为`setup-demo`，则当前目录结构如下：\n\n```\nsetup-demo/\n  |- setup.py\n  |- setup_demo/\n    |- __init__.py\n    |- ...\n```\n\n现在编写最基础的`setup.py`\n\n```python\nfrom setuptools import setup\n\nsetup(\n    name='setup-demo',    # 应用名\n    version='1.0',        # 版本号\n    packages=['setup_demo']    # 包括在安装包内的Python包\n)\n```\n\n### 打包\n\n有了上面的 setup.py 文件，我们就可以打出各种安装包：\n\n- 创建egg包\n\n```\n$ python setup.py bdist_egg\n```\n\n该命令会在当前目录下的`dist`目录内创建一个`egg`文件，名为`setup_demo-1.0-py3.6.egg`。文件名格式就是“应用名-版本号-Python版本.egg”，同时你会注意到，当前目录多了`build`和``setup_demo.egg-info`子目录来存放打包的中间结果。\n\n- 创建tar.gz包\n\n```\n$ python setup.py sdist\n```\n\n同上例类似，只不过创建的文件类型是`tar.gz`，文件名为`setup-demo-1.0.linux-x86_64.tar.gz`。\n\n- 创建wheel包\n\n**官方推荐的打包方式使用 wheel 打包**，首先要安装 wheel：\n\n```\n$ pip install wheel\n```\n\n然后使用 bdist_wheel 打包：\n\n```\n$ python setup.py bdist_wheel\n```\n\n打包完成之后，可以使用 pip 安装到本地 Python 的 site-packages 目录。例如`pip install dist/setup_demo-1.0-py3-none-any.whl`，然后现在和其他使用 pip 安装的三方库一样使用了。\n\n### 安装\n\n- 安装应用\n\n```\n$ python setup.py install\n```\n\n该命令会将当前的Python应用安装到当前Python环境的`site-packages`目录下，这样其他程序就可以像导入标准库一样导入该应用的代码了。\n\n- 开发方式安装\n\n```\n$ python setup.py develop \n```\n\n或\n\n```\n$ pip install -e . \n```\n<!--more-->\n如果应用在开发过程中会频繁变更，每次安装还需要先将原来的版本卸掉，很麻烦。使用`develop`开发方式安装的话，应用代码不会真的被拷贝到本地Python环境的`site-packages`目录下，而是在`site-packages`目录里创建一个指向当前应用位置的链接。这样如果当前位置的源码被改动，就会马上反映到`site-packages`里。\n\n### 上传\n\n注册 PyPI 账号，登录 [pypi.python.org/pypi](https://pypi.python.org/pypi) Register 注册账号。虽然 setuptools 支持使用` python setup.py upload `上传包文件到 PyPI，但只支持 HTTP 而被新的 twine 取代。先安装 twine：\n\n```\n$ pip install twine\n```\n\n使用 twine 上传：\n\n```\n$ twine upload dist/*\n```\n\n输入 username 和 password 即上传至 PyPI。如果不想每次输入账号密码，可以在`~`目录下创建 `.pypirc`文件，内容如下：\n\n```\n[distutils]\nindex-servers =\n    pypi\n\n[pypi]\nusername: \npassword: \n```\n\n填上自己的账号密码即可，这里配置了官方的 pypi，若要配置其他仓库，按格式添加。回到 PyPI 主页即可看到上传的。\n\n### 一些比较重要的参数\n\n上面的 setup.py 文件内，只使用了name, version, packages，但是对于一个具有完成功能的包来说这是远远不够的，我的依赖、非源码文件等等怎么办？下面是一些同样重要的参数：\n\n- packages: 列出项目内需要被打包的所有 package。一般使用` setuptools.find_packages() `自动发现。\n\n  ```python\n  packages=find_packages(exclude=['docs', 'tests*'])\n  ```\n\n- description：项目的简短描述，一般一句话就好，会显示在 PyPI 上名字下端。\n\n- long_description: 对项目的完整描述。如果此字符串是 rst 格式的，PyPI 会自动渲染成 HTML 显示。也可指定使用 markdown。一般会加载README.md文件中的内容。\n\n  ```\n  long_description=long_description,\n  long_description_content_type='text/x-rst\n  # long_description_content_type='text/markdown',\n  ```\n\n- url: 通常为 GitHub上的链接或者 readthedocs 的链接。\n\n- author:作者信息\n\n  ```\n  author='example',\n  author_email='example@example.com'\n  ```\n\n- license:项目许可证。关于各种许可证的介绍和选择，参考：[choosealicense.com/](https://choosealicense.com/)\n\n- classifiers:项目分类，完整可选项参考：[https://pypi.python.org/pypi?%3Aaction=list_classifiers](https://pypi.python.org/pypi?%3Aaction=list_classifiers)\n\n  ```\n  classifiers=[\n      # How mature is this project? Common values are\n      # 3 - Alpha\n      # 4 - Beta\n      # 5 - Production/Stable\n      'Development Status :: 3 - Alpha',\n  \n      # Indicate who your project is intended for\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n  \n      # Pick your license as you wish (should match \"license\" above)\n       'License :: OSI Approved :: MIT License',\n  \n      # Specify the Python versions you support here. In particular, ensure\n      # that you indicate whether you support Python 2, Python 3 or both.\n      'Programming Language :: Python :: 2',\n      'Programming Language :: Python :: 2.6',\n      'Programming Language :: Python :: 2.7',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.2',\n      'Programming Language :: Python :: 3.3',\n      'Programming Language :: Python :: 3.4',\n  ]\n  ```\n\n  如果是私有项目，不希望开源，可以在classifiers中添加 `'Private :: Do Not Upload'`这样，万一有小伙伴手抖上传到Pypi，官方也不会收录。\n\n- python_requires: 指定运行时需要的Python版本。\n\n  ```\n  python_requires='>=3.5'\n  ```\n\n  以上指定仅在3.5及以上版本使用。\n\n- keywords:项目关键词列表\n\n  ```\n  keywords='sample setuptools development'\n  ```\n\n- project_urls:项目相关额外连接，如代码仓库，文档地址等\n\n  ```\n  project_urls={\n      'Documentation': 'https://packaging.python.org/tutorials/distributing-packages/',\n      'Funding': 'https://donate.pypi.org',\n      'Say Thanks!': 'http://saythanks.io/to/example',\n      'Source': 'https://github.com/pypa/sampleproject/',\n      'Tracker': 'https://github.com/pypa/sampleproject/issues',\n  }\n  ```\n\n- **install_requires**:项目依赖的 Python 库，使用 pip 安装本项目时会自动检查和安装依赖。\n\n  ```\n  install_requires=['pyyaml']\n  ```\n\n- `extras_require`:指定了可选的功能与依赖。某些特殊的、偏门的功能，可能绝大多数用户不会去使用。这些功能的依赖，不适合放在`install_requires`里。这时就可以用`extras_require`来指定。\n\n  ```\n  extras_require={\n      'security': ['pyOpenSSL>=0.14', 'cryptography>=1.3.4', 'idna>=2.0.0'],\n      'socks': ['PySocks>=1.5.6, !=1.5.7'],\n  },\n  ```\n\n  以上以[requests](http://python-requests.org/)的设置为例。`extras_require`需要一个dict，其中按（自定义的）功能名称进行分组，每组一个列表，与`install_requires`规则相同。使用时，可以用类似`'requests[security, socks]'`的形式来指定。\n\n- package_data:项目依赖数据文件，数据文件必须放在项目目录内且使用相对路径\n\n  ```\n  package_data={\n      'setup_demo': ['data/*.yml'],\n  }\n  ```\n\n  如果不指定作为目录的键为空串，则代表对所有模块操作（下例中将包含所有包内 data 目录下的 yaml 文件）：\n\n  ```\n  package_data={\n      '': ['data/*.yml'],\n  }\n  ```\n\n- data_files: 如果数据文件存在于项目外，则可以使用 data_files 参数或者 MANIFEST.in 文件进行管理。如果用于源码包，则使用 MANIFEST.in；如果用于 wheel，则使用 data_files。\n  ```\n  data_files=[('mydata', ['data/conf.yml'])]\n  ```\n\n- zip_safe: 决定应用是否作为一个zip压缩后的`egg`文件安装在当前Python环境中，还是作为一个以”.egg”结尾的目录安装在当前环境中。因为有些工具不支持zip压缩文件，而且压缩后的包也不方便调试，所以建议将其设为False\n\n  ```\n  zip_safe=False\n  ```\n\n- `entry_points` :用来支持自动生成脚本，其值应该为是一个字典，从 entry_point 组名映射到一个表示 entry_point 的字符串或字符串列表，如：\n\n  ```\n  entry_points={\n      'console_scripts': [\n          'foo=foo.entry:main',\n          'bar=foo.entry:main',\n      ],    \n  }\n  ```\n\n### 示例\n\n以一个简单工具包为例（全部代码在 [https://github.com/suAdminWen/translate-it](https://github.com/suAdminWen/translate-it)）\n\n```python\nimport os\n\nfrom codecs import open\nfrom setuptools import setup, find_packages\n\nhere = os.path.abspath(os.path.dirname(__file__))\n\n\nrequires = [\n    'requests>=2.22.0',\n    'lxml>=4.4.1',\n    'cachelib',\n    'appdirs'\n]\n\n\nabout = {}\nwith open(os.path.join(here, 'translate_it', '__version__.py'),\n          'r', 'utf-8') as f:\n    exec(f.read(), about)\n\nwith open('README.md', 'r', 'utf-8') as f:\n    readme = f.read()\n\n\nsetup(\n\n    name=about['__name__'],\n    version=about['__version__'],\n    description=about['__description__'],\n    long_description=readme,\n    long_description_content_type='text/markdown',\n    python_requires='>=3.5',\n    packages=find_packages(exclude=('tests', 'tests.*')),\n    zip_safe=False,\n    author=about['__author__'],\n    author_email=about['__author_email__'],\n    url=about['__url__'],\n    include_package_data=True,\n    classifiers=[\n        \"Programming Language :: Python :: 3.5\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n    ],\n    entry_points={\n        'console_scripts': [\n            'translate_it = translate_it.translate_it:command_line_runner'\n        ]\n    },\n    install_requires=requires,\n)\n```\n\n### 注意的地方\n\n刚开始的时候打完包之后发现部分模块并没有被包含进去，百思不得其解，后来发现缺少`__init__.py`文件，在Python3中，即使模块中不包含该文件，也可以当作一个模块，但是打包的时候，如果缺少该文件，则认为不是源码包含的模块，会被忽略掉。\n\n## 其他文件\n\n除了最基本核心的 setup.py 文件和主程序之外，还会看到其他一些文件。\n\n- `setup.cfg`包含了构建时候的一些默认参数。例如：\n\n  ```\n  [bdist_wheel]\n  universal=1\n  ```\n\n  用于在使用 bdist_wheel 的时候的默认设置 --universal 参数 。\n\n  ```\n  [build_sphinx]\n  all-files = 1\n  build-dir = docs/_build\n  warning-is-error = 1\n  ```\n\n  使用sphinx生成文档是的一些配置。\n\n- README.rst/README.md:项目说明文档，使用 reStrutruedText 可以在 PyPI 上很好的渲染，但 Markdown 则支持不够好。\n\n- MANIFEST.in:此文件在打源码包的时候告诉 setuptools 还需要额外打包哪些文件。\n\n  ```\n  # Include the README\n  include *.md\n  \n  # Include the license file\n  include LICENSE.txt\n  \n  # Include the data files\n  recursive-include data *\n  ```\n\n## 参考\n\n- [setup.py里的几个require](https://note.qidong.name/2018/01/python-setup-requires/)\n- [Python打包分发工具setuptools](https://juejin.im/post/5d46eb4bf265da03ef79f7e3)\n- [Python打包分发工具setuptools简介](http://www.bjhee.com/setuptools.html)","source":"_posts/Python：使用setuptools进行包管理.md","raw":"---\ntitle: Python：使用setuptools进行包管理\ndate: 2019-12-13\ntags: [Python]\n---\n\n作为Python的打包和分发工具，steuptools是十分易用的，而将程序打包之后，可以更方便的进行部署和分发，也可以上传到Pypi。这里结合一个例子，记录一下自己在使用打包过程的笔记和遇到的问题。\n\n只需写一个简短的setup.py安装文件，就可以开始了你的Python应用打包。\n\n## Setup.py\n\n假设要打包的程序为`setup-demo`，则当前目录结构如下：\n\n```\nsetup-demo/\n  |- setup.py\n  |- setup_demo/\n    |- __init__.py\n    |- ...\n```\n\n现在编写最基础的`setup.py`\n\n```python\nfrom setuptools import setup\n\nsetup(\n    name='setup-demo',    # 应用名\n    version='1.0',        # 版本号\n    packages=['setup_demo']    # 包括在安装包内的Python包\n)\n```\n\n### 打包\n\n有了上面的 setup.py 文件，我们就可以打出各种安装包：\n\n- 创建egg包\n\n```\n$ python setup.py bdist_egg\n```\n\n该命令会在当前目录下的`dist`目录内创建一个`egg`文件，名为`setup_demo-1.0-py3.6.egg`。文件名格式就是“应用名-版本号-Python版本.egg”，同时你会注意到，当前目录多了`build`和``setup_demo.egg-info`子目录来存放打包的中间结果。\n\n- 创建tar.gz包\n\n```\n$ python setup.py sdist\n```\n\n同上例类似，只不过创建的文件类型是`tar.gz`，文件名为`setup-demo-1.0.linux-x86_64.tar.gz`。\n\n- 创建wheel包\n\n**官方推荐的打包方式使用 wheel 打包**，首先要安装 wheel：\n\n```\n$ pip install wheel\n```\n\n然后使用 bdist_wheel 打包：\n\n```\n$ python setup.py bdist_wheel\n```\n\n打包完成之后，可以使用 pip 安装到本地 Python 的 site-packages 目录。例如`pip install dist/setup_demo-1.0-py3-none-any.whl`，然后现在和其他使用 pip 安装的三方库一样使用了。\n\n### 安装\n\n- 安装应用\n\n```\n$ python setup.py install\n```\n\n该命令会将当前的Python应用安装到当前Python环境的`site-packages`目录下，这样其他程序就可以像导入标准库一样导入该应用的代码了。\n\n- 开发方式安装\n\n```\n$ python setup.py develop \n```\n\n或\n\n```\n$ pip install -e . \n```\n<!--more-->\n如果应用在开发过程中会频繁变更，每次安装还需要先将原来的版本卸掉，很麻烦。使用`develop`开发方式安装的话，应用代码不会真的被拷贝到本地Python环境的`site-packages`目录下，而是在`site-packages`目录里创建一个指向当前应用位置的链接。这样如果当前位置的源码被改动，就会马上反映到`site-packages`里。\n\n### 上传\n\n注册 PyPI 账号，登录 [pypi.python.org/pypi](https://pypi.python.org/pypi) Register 注册账号。虽然 setuptools 支持使用` python setup.py upload `上传包文件到 PyPI，但只支持 HTTP 而被新的 twine 取代。先安装 twine：\n\n```\n$ pip install twine\n```\n\n使用 twine 上传：\n\n```\n$ twine upload dist/*\n```\n\n输入 username 和 password 即上传至 PyPI。如果不想每次输入账号密码，可以在`~`目录下创建 `.pypirc`文件，内容如下：\n\n```\n[distutils]\nindex-servers =\n    pypi\n\n[pypi]\nusername: \npassword: \n```\n\n填上自己的账号密码即可，这里配置了官方的 pypi，若要配置其他仓库，按格式添加。回到 PyPI 主页即可看到上传的。\n\n### 一些比较重要的参数\n\n上面的 setup.py 文件内，只使用了name, version, packages，但是对于一个具有完成功能的包来说这是远远不够的，我的依赖、非源码文件等等怎么办？下面是一些同样重要的参数：\n\n- packages: 列出项目内需要被打包的所有 package。一般使用` setuptools.find_packages() `自动发现。\n\n  ```python\n  packages=find_packages(exclude=['docs', 'tests*'])\n  ```\n\n- description：项目的简短描述，一般一句话就好，会显示在 PyPI 上名字下端。\n\n- long_description: 对项目的完整描述。如果此字符串是 rst 格式的，PyPI 会自动渲染成 HTML 显示。也可指定使用 markdown。一般会加载README.md文件中的内容。\n\n  ```\n  long_description=long_description,\n  long_description_content_type='text/x-rst\n  # long_description_content_type='text/markdown',\n  ```\n\n- url: 通常为 GitHub上的链接或者 readthedocs 的链接。\n\n- author:作者信息\n\n  ```\n  author='example',\n  author_email='example@example.com'\n  ```\n\n- license:项目许可证。关于各种许可证的介绍和选择，参考：[choosealicense.com/](https://choosealicense.com/)\n\n- classifiers:项目分类，完整可选项参考：[https://pypi.python.org/pypi?%3Aaction=list_classifiers](https://pypi.python.org/pypi?%3Aaction=list_classifiers)\n\n  ```\n  classifiers=[\n      # How mature is this project? Common values are\n      # 3 - Alpha\n      # 4 - Beta\n      # 5 - Production/Stable\n      'Development Status :: 3 - Alpha',\n  \n      # Indicate who your project is intended for\n      'Intended Audience :: Developers',\n      'Topic :: Software Development :: Build Tools',\n  \n      # Pick your license as you wish (should match \"license\" above)\n       'License :: OSI Approved :: MIT License',\n  \n      # Specify the Python versions you support here. In particular, ensure\n      # that you indicate whether you support Python 2, Python 3 or both.\n      'Programming Language :: Python :: 2',\n      'Programming Language :: Python :: 2.6',\n      'Programming Language :: Python :: 2.7',\n      'Programming Language :: Python :: 3',\n      'Programming Language :: Python :: 3.2',\n      'Programming Language :: Python :: 3.3',\n      'Programming Language :: Python :: 3.4',\n  ]\n  ```\n\n  如果是私有项目，不希望开源，可以在classifiers中添加 `'Private :: Do Not Upload'`这样，万一有小伙伴手抖上传到Pypi，官方也不会收录。\n\n- python_requires: 指定运行时需要的Python版本。\n\n  ```\n  python_requires='>=3.5'\n  ```\n\n  以上指定仅在3.5及以上版本使用。\n\n- keywords:项目关键词列表\n\n  ```\n  keywords='sample setuptools development'\n  ```\n\n- project_urls:项目相关额外连接，如代码仓库，文档地址等\n\n  ```\n  project_urls={\n      'Documentation': 'https://packaging.python.org/tutorials/distributing-packages/',\n      'Funding': 'https://donate.pypi.org',\n      'Say Thanks!': 'http://saythanks.io/to/example',\n      'Source': 'https://github.com/pypa/sampleproject/',\n      'Tracker': 'https://github.com/pypa/sampleproject/issues',\n  }\n  ```\n\n- **install_requires**:项目依赖的 Python 库，使用 pip 安装本项目时会自动检查和安装依赖。\n\n  ```\n  install_requires=['pyyaml']\n  ```\n\n- `extras_require`:指定了可选的功能与依赖。某些特殊的、偏门的功能，可能绝大多数用户不会去使用。这些功能的依赖，不适合放在`install_requires`里。这时就可以用`extras_require`来指定。\n\n  ```\n  extras_require={\n      'security': ['pyOpenSSL>=0.14', 'cryptography>=1.3.4', 'idna>=2.0.0'],\n      'socks': ['PySocks>=1.5.6, !=1.5.7'],\n  },\n  ```\n\n  以上以[requests](http://python-requests.org/)的设置为例。`extras_require`需要一个dict，其中按（自定义的）功能名称进行分组，每组一个列表，与`install_requires`规则相同。使用时，可以用类似`'requests[security, socks]'`的形式来指定。\n\n- package_data:项目依赖数据文件，数据文件必须放在项目目录内且使用相对路径\n\n  ```\n  package_data={\n      'setup_demo': ['data/*.yml'],\n  }\n  ```\n\n  如果不指定作为目录的键为空串，则代表对所有模块操作（下例中将包含所有包内 data 目录下的 yaml 文件）：\n\n  ```\n  package_data={\n      '': ['data/*.yml'],\n  }\n  ```\n\n- data_files: 如果数据文件存在于项目外，则可以使用 data_files 参数或者 MANIFEST.in 文件进行管理。如果用于源码包，则使用 MANIFEST.in；如果用于 wheel，则使用 data_files。\n  ```\n  data_files=[('mydata', ['data/conf.yml'])]\n  ```\n\n- zip_safe: 决定应用是否作为一个zip压缩后的`egg`文件安装在当前Python环境中，还是作为一个以”.egg”结尾的目录安装在当前环境中。因为有些工具不支持zip压缩文件，而且压缩后的包也不方便调试，所以建议将其设为False\n\n  ```\n  zip_safe=False\n  ```\n\n- `entry_points` :用来支持自动生成脚本，其值应该为是一个字典，从 entry_point 组名映射到一个表示 entry_point 的字符串或字符串列表，如：\n\n  ```\n  entry_points={\n      'console_scripts': [\n          'foo=foo.entry:main',\n          'bar=foo.entry:main',\n      ],    \n  }\n  ```\n\n### 示例\n\n以一个简单工具包为例（全部代码在 [https://github.com/suAdminWen/translate-it](https://github.com/suAdminWen/translate-it)）\n\n```python\nimport os\n\nfrom codecs import open\nfrom setuptools import setup, find_packages\n\nhere = os.path.abspath(os.path.dirname(__file__))\n\n\nrequires = [\n    'requests>=2.22.0',\n    'lxml>=4.4.1',\n    'cachelib',\n    'appdirs'\n]\n\n\nabout = {}\nwith open(os.path.join(here, 'translate_it', '__version__.py'),\n          'r', 'utf-8') as f:\n    exec(f.read(), about)\n\nwith open('README.md', 'r', 'utf-8') as f:\n    readme = f.read()\n\n\nsetup(\n\n    name=about['__name__'],\n    version=about['__version__'],\n    description=about['__description__'],\n    long_description=readme,\n    long_description_content_type='text/markdown',\n    python_requires='>=3.5',\n    packages=find_packages(exclude=('tests', 'tests.*')),\n    zip_safe=False,\n    author=about['__author__'],\n    author_email=about['__author_email__'],\n    url=about['__url__'],\n    include_package_data=True,\n    classifiers=[\n        \"Programming Language :: Python :: 3.5\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n    ],\n    entry_points={\n        'console_scripts': [\n            'translate_it = translate_it.translate_it:command_line_runner'\n        ]\n    },\n    install_requires=requires,\n)\n```\n\n### 注意的地方\n\n刚开始的时候打完包之后发现部分模块并没有被包含进去，百思不得其解，后来发现缺少`__init__.py`文件，在Python3中，即使模块中不包含该文件，也可以当作一个模块，但是打包的时候，如果缺少该文件，则认为不是源码包含的模块，会被忽略掉。\n\n## 其他文件\n\n除了最基本核心的 setup.py 文件和主程序之外，还会看到其他一些文件。\n\n- `setup.cfg`包含了构建时候的一些默认参数。例如：\n\n  ```\n  [bdist_wheel]\n  universal=1\n  ```\n\n  用于在使用 bdist_wheel 的时候的默认设置 --universal 参数 。\n\n  ```\n  [build_sphinx]\n  all-files = 1\n  build-dir = docs/_build\n  warning-is-error = 1\n  ```\n\n  使用sphinx生成文档是的一些配置。\n\n- README.rst/README.md:项目说明文档，使用 reStrutruedText 可以在 PyPI 上很好的渲染，但 Markdown 则支持不够好。\n\n- MANIFEST.in:此文件在打源码包的时候告诉 setuptools 还需要额外打包哪些文件。\n\n  ```\n  # Include the README\n  include *.md\n  \n  # Include the license file\n  include LICENSE.txt\n  \n  # Include the data files\n  recursive-include data *\n  ```\n\n## 参考\n\n- [setup.py里的几个require](https://note.qidong.name/2018/01/python-setup-requires/)\n- [Python打包分发工具setuptools](https://juejin.im/post/5d46eb4bf265da03ef79f7e3)\n- [Python打包分发工具setuptools简介](http://www.bjhee.com/setuptools.html)","slug":"Python：使用setuptools进行包管理","published":1,"updated":"2021-06-20T10:25:20.125Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluqa1hir001qrloggq4778qi","content":"<p>作为Python的打包和分发工具，steuptools是十分易用的，而将程序打包之后，可以更方便的进行部署和分发，也可以上传到Pypi。这里结合一个例子，记录一下自己在使用打包过程的笔记和遇到的问题。</p>\n<p>只需写一个简短的setup.py安装文件，就可以开始了你的Python应用打包。</p>\n<h2 id=\"Setup-py\"><a href=\"#Setup-py\" class=\"headerlink\" title=\"Setup.py\"></a>Setup.py</h2><p>假设要打包的程序为<code>setup-demo</code>，则当前目录结构如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setup-demo/</span><br><span class=\"line\">  |- setup.py</span><br><span class=\"line\">  |- setup_demo/</span><br><span class=\"line\">    |- __init__.py</span><br><span class=\"line\">    |- ...</span><br></pre></td></tr></table></figure>\n\n<p>现在编写最基础的<code>setup.py</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> setuptools <span class=\"keyword\">import</span> setup</span><br><span class=\"line\"></span><br><span class=\"line\">setup(</span><br><span class=\"line\">    name=<span class=\"string\">&#x27;setup-demo&#x27;</span>,    <span class=\"comment\"># 应用名</span></span><br><span class=\"line\">    version=<span class=\"string\">&#x27;1.0&#x27;</span>,        <span class=\"comment\"># 版本号</span></span><br><span class=\"line\">    packages=[<span class=\"string\">&#x27;setup_demo&#x27;</span>]    <span class=\"comment\"># 包括在安装包内的Python包</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"打包\"><a href=\"#打包\" class=\"headerlink\" title=\"打包\"></a>打包</h3><p>有了上面的 setup.py 文件，我们就可以打出各种安装包：</p>\n<ul>\n<li>创建egg包</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python setup.py bdist_egg</span><br></pre></td></tr></table></figure>\n\n<p>该命令会在当前目录下的<code>dist</code>目录内创建一个<code>egg</code>文件，名为<code>setup_demo-1.0-py3.6.egg</code>。文件名格式就是“应用名-版本号-Python版本.egg”，同时你会注意到，当前目录多了<code>build</code>和&#96;&#96;setup_demo.egg-info&#96;子目录来存放打包的中间结果。</p>\n<ul>\n<li>创建tar.gz包</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python setup.py sdist</span><br></pre></td></tr></table></figure>\n\n<p>同上例类似，只不过创建的文件类型是<code>tar.gz</code>，文件名为<code>setup-demo-1.0.linux-x86_64.tar.gz</code>。</p>\n<ul>\n<li>创建wheel包</li>\n</ul>\n<p><strong>官方推荐的打包方式使用 wheel 打包</strong>，首先要安装 wheel：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pip install wheel</span><br></pre></td></tr></table></figure>\n\n<p>然后使用 bdist_wheel 打包：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python setup.py bdist_wheel</span><br></pre></td></tr></table></figure>\n\n<p>打包完成之后，可以使用 pip 安装到本地 Python 的 site-packages 目录。例如<code>pip install dist/setup_demo-1.0-py3-none-any.whl</code>，然后现在和其他使用 pip 安装的三方库一样使用了。</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><ul>\n<li>安装应用</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python setup.py install</span><br></pre></td></tr></table></figure>\n\n<p>该命令会将当前的Python应用安装到当前Python环境的<code>site-packages</code>目录下，这样其他程序就可以像导入标准库一样导入该应用的代码了。</p>\n<ul>\n<li>开发方式安装</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python setup.py develop </span><br></pre></td></tr></table></figure>\n\n<p>或</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pip install -e . </span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<p>如果应用在开发过程中会频繁变更，每次安装还需要先将原来的版本卸掉，很麻烦。使用<code>develop</code>开发方式安装的话，应用代码不会真的被拷贝到本地Python环境的<code>site-packages</code>目录下，而是在<code>site-packages</code>目录里创建一个指向当前应用位置的链接。这样如果当前位置的源码被改动，就会马上反映到<code>site-packages</code>里。</p>\n<h3 id=\"上传\"><a href=\"#上传\" class=\"headerlink\" title=\"上传\"></a>上传</h3><p>注册 PyPI 账号，登录 <a href=\"https://pypi.python.org/pypi\">pypi.python.org&#x2F;pypi</a> Register 注册账号。虽然 setuptools 支持使用<code>python setup.py upload</code>上传包文件到 PyPI，但只支持 HTTP 而被新的 twine 取代。先安装 twine：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pip install twine</span><br></pre></td></tr></table></figure>\n\n<p>使用 twine 上传：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ twine upload dist/*</span><br></pre></td></tr></table></figure>\n\n<p>输入 username 和 password 即上传至 PyPI。如果不想每次输入账号密码，可以在<code>~</code>目录下创建 <code>.pypirc</code>文件，内容如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[distutils]</span><br><span class=\"line\">index-servers =</span><br><span class=\"line\">    pypi</span><br><span class=\"line\"></span><br><span class=\"line\">[pypi]</span><br><span class=\"line\">username: </span><br><span class=\"line\">password: </span><br></pre></td></tr></table></figure>\n\n<p>填上自己的账号密码即可，这里配置了官方的 pypi，若要配置其他仓库，按格式添加。回到 PyPI 主页即可看到上传的。</p>\n<h3 id=\"一些比较重要的参数\"><a href=\"#一些比较重要的参数\" class=\"headerlink\" title=\"一些比较重要的参数\"></a>一些比较重要的参数</h3><p>上面的 setup.py 文件内，只使用了name, version, packages，但是对于一个具有完成功能的包来说这是远远不够的，我的依赖、非源码文件等等怎么办？下面是一些同样重要的参数：</p>\n<ul>\n<li><p>packages: 列出项目内需要被打包的所有 package。一般使用<code>setuptools.find_packages()</code>自动发现。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">packages=find_packages(exclude=[<span class=\"string\">&#x27;docs&#x27;</span>, <span class=\"string\">&#x27;tests*&#x27;</span>])</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>description：项目的简短描述，一般一句话就好，会显示在 PyPI 上名字下端。</p>\n</li>\n<li><p>long_description: 对项目的完整描述。如果此字符串是 rst 格式的，PyPI 会自动渲染成 HTML 显示。也可指定使用 markdown。一般会加载README.md文件中的内容。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">long_description=long_description,</span><br><span class=\"line\">long_description_content_type=&#x27;text/x-rst</span><br><span class=\"line\"># long_description_content_type=&#x27;text/markdown&#x27;,</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>url: 通常为 GitHub上的链接或者 readthedocs 的链接。</p>\n</li>\n<li><p>author:作者信息</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">author=&#x27;example&#x27;,</span><br><span class=\"line\">author_email=&#x27;example@example.com&#x27;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>license:项目许可证。关于各种许可证的介绍和选择，参考：<a href=\"https://choosealicense.com/\">choosealicense.com&#x2F;</a></p>\n</li>\n<li><p>classifiers:项目分类，完整可选项参考：<a href=\"https://pypi.python.org/pypi?:action=list_classifiers\">https://pypi.python.org/pypi?%3Aaction=list_classifiers</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">classifiers=[</span><br><span class=\"line\">    # How mature is this project? Common values are</span><br><span class=\"line\">    # 3 - Alpha</span><br><span class=\"line\">    # 4 - Beta</span><br><span class=\"line\">    # 5 - Production/Stable</span><br><span class=\"line\">    &#x27;Development Status :: 3 - Alpha&#x27;,</span><br><span class=\"line\"></span><br><span class=\"line\">    # Indicate who your project is intended for</span><br><span class=\"line\">    &#x27;Intended Audience :: Developers&#x27;,</span><br><span class=\"line\">    &#x27;Topic :: Software Development :: Build Tools&#x27;,</span><br><span class=\"line\"></span><br><span class=\"line\">    # Pick your license as you wish (should match &quot;license&quot; above)</span><br><span class=\"line\">     &#x27;License :: OSI Approved :: MIT License&#x27;,</span><br><span class=\"line\"></span><br><span class=\"line\">    # Specify the Python versions you support here. In particular, ensure</span><br><span class=\"line\">    # that you indicate whether you support Python 2, Python 3 or both.</span><br><span class=\"line\">    &#x27;Programming Language :: Python :: 2&#x27;,</span><br><span class=\"line\">    &#x27;Programming Language :: Python :: 2.6&#x27;,</span><br><span class=\"line\">    &#x27;Programming Language :: Python :: 2.7&#x27;,</span><br><span class=\"line\">    &#x27;Programming Language :: Python :: 3&#x27;,</span><br><span class=\"line\">    &#x27;Programming Language :: Python :: 3.2&#x27;,</span><br><span class=\"line\">    &#x27;Programming Language :: Python :: 3.3&#x27;,</span><br><span class=\"line\">    &#x27;Programming Language :: Python :: 3.4&#x27;,</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>如果是私有项目，不希望开源，可以在classifiers中添加 <code>&#39;Private :: Do Not Upload&#39;</code>这样，万一有小伙伴手抖上传到Pypi，官方也不会收录。</p>\n</li>\n<li><p>python_requires: 指定运行时需要的Python版本。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python_requires=&#x27;&gt;=3.5&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>以上指定仅在3.5及以上版本使用。</p>\n</li>\n<li><p>keywords:项目关键词列表</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keywords=&#x27;sample setuptools development&#x27;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>project_urls:项目相关额外连接，如代码仓库，文档地址等</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">project_urls=&#123;</span><br><span class=\"line\">    &#x27;Documentation&#x27;: &#x27;https://packaging.python.org/tutorials/distributing-packages/&#x27;,</span><br><span class=\"line\">    &#x27;Funding&#x27;: &#x27;https://donate.pypi.org&#x27;,</span><br><span class=\"line\">    &#x27;Say Thanks!&#x27;: &#x27;http://saythanks.io/to/example&#x27;,</span><br><span class=\"line\">    &#x27;Source&#x27;: &#x27;https://github.com/pypa/sampleproject/&#x27;,</span><br><span class=\"line\">    &#x27;Tracker&#x27;: &#x27;https://github.com/pypa/sampleproject/issues&#x27;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>install_requires</strong>:项目依赖的 Python 库，使用 pip 安装本项目时会自动检查和安装依赖。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">install_requires=[&#x27;pyyaml&#x27;]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>extras_require</code>:指定了可选的功能与依赖。某些特殊的、偏门的功能，可能绝大多数用户不会去使用。这些功能的依赖，不适合放在<code>install_requires</code>里。这时就可以用<code>extras_require</code>来指定。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">extras_require=&#123;</span><br><span class=\"line\">    &#x27;security&#x27;: [&#x27;pyOpenSSL&gt;=0.14&#x27;, &#x27;cryptography&gt;=1.3.4&#x27;, &#x27;idna&gt;=2.0.0&#x27;],</span><br><span class=\"line\">    &#x27;socks&#x27;: [&#x27;PySocks&gt;=1.5.6, !=1.5.7&#x27;],</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>以上以<a href=\"http://python-requests.org/\">requests</a>的设置为例。<code>extras_require</code>需要一个dict，其中按（自定义的）功能名称进行分组，每组一个列表，与<code>install_requires</code>规则相同。使用时，可以用类似<code>&#39;requests[security, socks]&#39;</code>的形式来指定。</p>\n</li>\n<li><p>package_data:项目依赖数据文件，数据文件必须放在项目目录内且使用相对路径</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package_data=&#123;</span><br><span class=\"line\">    &#x27;setup_demo&#x27;: [&#x27;data/*.yml&#x27;],</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果不指定作为目录的键为空串，则代表对所有模块操作（下例中将包含所有包内 data 目录下的 yaml 文件）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package_data=&#123;</span><br><span class=\"line\">    &#x27;&#x27;: [&#x27;data/*.yml&#x27;],</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>data_files: 如果数据文件存在于项目外，则可以使用 data_files 参数或者 MANIFEST.in 文件进行管理。如果用于源码包，则使用 MANIFEST.in；如果用于 wheel，则使用 data_files。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data_files=[(&#x27;mydata&#x27;, [&#x27;data/conf.yml&#x27;])]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>zip_safe: 决定应用是否作为一个zip压缩后的<code>egg</code>文件安装在当前Python环境中，还是作为一个以”.egg”结尾的目录安装在当前环境中。因为有些工具不支持zip压缩文件，而且压缩后的包也不方便调试，所以建议将其设为False</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zip_safe=False</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>entry_points</code> :用来支持自动生成脚本，其值应该为是一个字典，从 entry_point 组名映射到一个表示 entry_point 的字符串或字符串列表，如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">entry_points=&#123;</span><br><span class=\"line\">    &#x27;console_scripts&#x27;: [</span><br><span class=\"line\">        &#x27;foo=foo.entry:main&#x27;,</span><br><span class=\"line\">        &#x27;bar=foo.entry:main&#x27;,</span><br><span class=\"line\">    ],    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p>以一个简单工具包为例（全部代码在 <a href=\"https://github.com/suAdminWen/translate-it\">https://github.com/suAdminWen/translate-it</a>）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> codecs <span class=\"keyword\">import</span> <span class=\"built_in\">open</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> setuptools <span class=\"keyword\">import</span> setup, find_packages</span><br><span class=\"line\"></span><br><span class=\"line\">here = os.path.abspath(os.path.dirname(__file__))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">requires = [</span><br><span class=\"line\">    <span class=\"string\">&#x27;requests&gt;=2.22.0&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;lxml&gt;=4.4.1&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;cachelib&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;appdirs&#x27;</span></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">about = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(os.path.join(here, <span class=\"string\">&#x27;translate_it&#x27;</span>, <span class=\"string\">&#x27;__version__.py&#x27;</span>),</span><br><span class=\"line\">          <span class=\"string\">&#x27;r&#x27;</span>, <span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    <span class=\"built_in\">exec</span>(f.read(), about)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;README.md&#x27;</span>, <span class=\"string\">&#x27;r&#x27;</span>, <span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    readme = f.read()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">setup(</span><br><span class=\"line\"></span><br><span class=\"line\">    name=about[<span class=\"string\">&#x27;__name__&#x27;</span>],</span><br><span class=\"line\">    version=about[<span class=\"string\">&#x27;__version__&#x27;</span>],</span><br><span class=\"line\">    description=about[<span class=\"string\">&#x27;__description__&#x27;</span>],</span><br><span class=\"line\">    long_description=readme,</span><br><span class=\"line\">    long_description_content_type=<span class=\"string\">&#x27;text/markdown&#x27;</span>,</span><br><span class=\"line\">    python_requires=<span class=\"string\">&#x27;&gt;=3.5&#x27;</span>,</span><br><span class=\"line\">    packages=find_packages(exclude=(<span class=\"string\">&#x27;tests&#x27;</span>, <span class=\"string\">&#x27;tests.*&#x27;</span>)),</span><br><span class=\"line\">    zip_safe=<span class=\"literal\">False</span>,</span><br><span class=\"line\">    author=about[<span class=\"string\">&#x27;__author__&#x27;</span>],</span><br><span class=\"line\">    author_email=about[<span class=\"string\">&#x27;__author_email__&#x27;</span>],</span><br><span class=\"line\">    url=about[<span class=\"string\">&#x27;__url__&#x27;</span>],</span><br><span class=\"line\">    include_package_data=<span class=\"literal\">True</span>,</span><br><span class=\"line\">    classifiers=[</span><br><span class=\"line\">        <span class=\"string\">&quot;Programming Language :: Python :: 3.5&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;Programming Language :: Python :: 3.6&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;Programming Language :: Python :: 3.7&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;Programming Language :: Python :: 3.8&quot;</span>,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    entry_points=&#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;console_scripts&#x27;</span>: [</span><br><span class=\"line\">            <span class=\"string\">&#x27;translate_it = translate_it.translate_it:command_line_runner&#x27;</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    install_requires=requires,</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"注意的地方\"><a href=\"#注意的地方\" class=\"headerlink\" title=\"注意的地方\"></a>注意的地方</h3><p>刚开始的时候打完包之后发现部分模块并没有被包含进去，百思不得其解，后来发现缺少<code>__init__.py</code>文件，在Python3中，即使模块中不包含该文件，也可以当作一个模块，但是打包的时候，如果缺少该文件，则认为不是源码包含的模块，会被忽略掉。</p>\n<h2 id=\"其他文件\"><a href=\"#其他文件\" class=\"headerlink\" title=\"其他文件\"></a>其他文件</h2><p>除了最基本核心的 setup.py 文件和主程序之外，还会看到其他一些文件。</p>\n<ul>\n<li><p><code>setup.cfg</code>包含了构建时候的一些默认参数。例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[bdist_wheel]</span><br><span class=\"line\">universal=1</span><br></pre></td></tr></table></figure>\n\n<p>用于在使用 bdist_wheel 的时候的默认设置 –universal 参数 。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[build_sphinx]</span><br><span class=\"line\">all-files = 1</span><br><span class=\"line\">build-dir = docs/_build</span><br><span class=\"line\">warning-is-error = 1</span><br></pre></td></tr></table></figure>\n\n<p>使用sphinx生成文档是的一些配置。</p>\n</li>\n<li><p>README.rst&#x2F;README.md:项目说明文档，使用 reStrutruedText 可以在 PyPI 上很好的渲染，但 Markdown 则支持不够好。</p>\n</li>\n<li><p>MANIFEST.in:此文件在打源码包的时候告诉 setuptools 还需要额外打包哪些文件。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Include the README</span><br><span class=\"line\">include *.md</span><br><span class=\"line\"></span><br><span class=\"line\"># Include the license file</span><br><span class=\"line\">include LICENSE.txt</span><br><span class=\"line\"></span><br><span class=\"line\"># Include the data files</span><br><span class=\"line\">recursive-include data *</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://note.qidong.name/2018/01/python-setup-requires/\">setup.py里的几个require</a></li>\n<li><a href=\"https://juejin.im/post/5d46eb4bf265da03ef79f7e3\">Python打包分发工具setuptools</a></li>\n<li><a href=\"http://www.bjhee.com/setuptools.html\">Python打包分发工具setuptools简介</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>作为Python的打包和分发工具，steuptools是十分易用的，而将程序打包之后，可以更方便的进行部署和分发，也可以上传到Pypi。这里结合一个例子，记录一下自己在使用打包过程的笔记和遇到的问题。</p>\n<p>只需写一个简短的setup.py安装文件，就可以开始了你的Python应用打包。</p>\n<h2 id=\"Setup-py\"><a href=\"#Setup-py\" class=\"headerlink\" title=\"Setup.py\"></a>Setup.py</h2><p>假设要打包的程序为<code>setup-demo</code>，则当前目录结构如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setup-demo/</span><br><span class=\"line\">  |- setup.py</span><br><span class=\"line\">  |- setup_demo/</span><br><span class=\"line\">    |- __init__.py</span><br><span class=\"line\">    |- ...</span><br></pre></td></tr></table></figure>\n\n<p>现在编写最基础的<code>setup.py</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> setuptools <span class=\"keyword\">import</span> setup</span><br><span class=\"line\"></span><br><span class=\"line\">setup(</span><br><span class=\"line\">    name=<span class=\"string\">&#x27;setup-demo&#x27;</span>,    <span class=\"comment\"># 应用名</span></span><br><span class=\"line\">    version=<span class=\"string\">&#x27;1.0&#x27;</span>,        <span class=\"comment\"># 版本号</span></span><br><span class=\"line\">    packages=[<span class=\"string\">&#x27;setup_demo&#x27;</span>]    <span class=\"comment\"># 包括在安装包内的Python包</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"打包\"><a href=\"#打包\" class=\"headerlink\" title=\"打包\"></a>打包</h3><p>有了上面的 setup.py 文件，我们就可以打出各种安装包：</p>\n<ul>\n<li>创建egg包</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python setup.py bdist_egg</span><br></pre></td></tr></table></figure>\n\n<p>该命令会在当前目录下的<code>dist</code>目录内创建一个<code>egg</code>文件，名为<code>setup_demo-1.0-py3.6.egg</code>。文件名格式就是“应用名-版本号-Python版本.egg”，同时你会注意到，当前目录多了<code>build</code>和&#96;&#96;setup_demo.egg-info&#96;子目录来存放打包的中间结果。</p>\n<ul>\n<li>创建tar.gz包</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python setup.py sdist</span><br></pre></td></tr></table></figure>\n\n<p>同上例类似，只不过创建的文件类型是<code>tar.gz</code>，文件名为<code>setup-demo-1.0.linux-x86_64.tar.gz</code>。</p>\n<ul>\n<li>创建wheel包</li>\n</ul>\n<p><strong>官方推荐的打包方式使用 wheel 打包</strong>，首先要安装 wheel：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pip install wheel</span><br></pre></td></tr></table></figure>\n\n<p>然后使用 bdist_wheel 打包：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python setup.py bdist_wheel</span><br></pre></td></tr></table></figure>\n\n<p>打包完成之后，可以使用 pip 安装到本地 Python 的 site-packages 目录。例如<code>pip install dist/setup_demo-1.0-py3-none-any.whl</code>，然后现在和其他使用 pip 安装的三方库一样使用了。</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><ul>\n<li>安装应用</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python setup.py install</span><br></pre></td></tr></table></figure>\n\n<p>该命令会将当前的Python应用安装到当前Python环境的<code>site-packages</code>目录下，这样其他程序就可以像导入标准库一样导入该应用的代码了。</p>\n<ul>\n<li>开发方式安装</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python setup.py develop </span><br></pre></td></tr></table></figure>\n\n<p>或</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pip install -e . </span><br></pre></td></tr></table></figure>","more":"<p>如果应用在开发过程中会频繁变更，每次安装还需要先将原来的版本卸掉，很麻烦。使用<code>develop</code>开发方式安装的话，应用代码不会真的被拷贝到本地Python环境的<code>site-packages</code>目录下，而是在<code>site-packages</code>目录里创建一个指向当前应用位置的链接。这样如果当前位置的源码被改动，就会马上反映到<code>site-packages</code>里。</p>\n<h3 id=\"上传\"><a href=\"#上传\" class=\"headerlink\" title=\"上传\"></a>上传</h3><p>注册 PyPI 账号，登录 <a href=\"https://pypi.python.org/pypi\">pypi.python.org&#x2F;pypi</a> Register 注册账号。虽然 setuptools 支持使用<code>python setup.py upload</code>上传包文件到 PyPI，但只支持 HTTP 而被新的 twine 取代。先安装 twine：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pip install twine</span><br></pre></td></tr></table></figure>\n\n<p>使用 twine 上传：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ twine upload dist/*</span><br></pre></td></tr></table></figure>\n\n<p>输入 username 和 password 即上传至 PyPI。如果不想每次输入账号密码，可以在<code>~</code>目录下创建 <code>.pypirc</code>文件，内容如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[distutils]</span><br><span class=\"line\">index-servers =</span><br><span class=\"line\">    pypi</span><br><span class=\"line\"></span><br><span class=\"line\">[pypi]</span><br><span class=\"line\">username: </span><br><span class=\"line\">password: </span><br></pre></td></tr></table></figure>\n\n<p>填上自己的账号密码即可，这里配置了官方的 pypi，若要配置其他仓库，按格式添加。回到 PyPI 主页即可看到上传的。</p>\n<h3 id=\"一些比较重要的参数\"><a href=\"#一些比较重要的参数\" class=\"headerlink\" title=\"一些比较重要的参数\"></a>一些比较重要的参数</h3><p>上面的 setup.py 文件内，只使用了name, version, packages，但是对于一个具有完成功能的包来说这是远远不够的，我的依赖、非源码文件等等怎么办？下面是一些同样重要的参数：</p>\n<ul>\n<li><p>packages: 列出项目内需要被打包的所有 package。一般使用<code>setuptools.find_packages()</code>自动发现。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">packages=find_packages(exclude=[<span class=\"string\">&#x27;docs&#x27;</span>, <span class=\"string\">&#x27;tests*&#x27;</span>])</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>description：项目的简短描述，一般一句话就好，会显示在 PyPI 上名字下端。</p>\n</li>\n<li><p>long_description: 对项目的完整描述。如果此字符串是 rst 格式的，PyPI 会自动渲染成 HTML 显示。也可指定使用 markdown。一般会加载README.md文件中的内容。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">long_description=long_description,</span><br><span class=\"line\">long_description_content_type=&#x27;text/x-rst</span><br><span class=\"line\"># long_description_content_type=&#x27;text/markdown&#x27;,</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>url: 通常为 GitHub上的链接或者 readthedocs 的链接。</p>\n</li>\n<li><p>author:作者信息</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">author=&#x27;example&#x27;,</span><br><span class=\"line\">author_email=&#x27;example@example.com&#x27;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>license:项目许可证。关于各种许可证的介绍和选择，参考：<a href=\"https://choosealicense.com/\">choosealicense.com&#x2F;</a></p>\n</li>\n<li><p>classifiers:项目分类，完整可选项参考：<a href=\"https://pypi.python.org/pypi?:action=list_classifiers\">https://pypi.python.org/pypi?%3Aaction=list_classifiers</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">classifiers=[</span><br><span class=\"line\">    # How mature is this project? Common values are</span><br><span class=\"line\">    # 3 - Alpha</span><br><span class=\"line\">    # 4 - Beta</span><br><span class=\"line\">    # 5 - Production/Stable</span><br><span class=\"line\">    &#x27;Development Status :: 3 - Alpha&#x27;,</span><br><span class=\"line\"></span><br><span class=\"line\">    # Indicate who your project is intended for</span><br><span class=\"line\">    &#x27;Intended Audience :: Developers&#x27;,</span><br><span class=\"line\">    &#x27;Topic :: Software Development :: Build Tools&#x27;,</span><br><span class=\"line\"></span><br><span class=\"line\">    # Pick your license as you wish (should match &quot;license&quot; above)</span><br><span class=\"line\">     &#x27;License :: OSI Approved :: MIT License&#x27;,</span><br><span class=\"line\"></span><br><span class=\"line\">    # Specify the Python versions you support here. In particular, ensure</span><br><span class=\"line\">    # that you indicate whether you support Python 2, Python 3 or both.</span><br><span class=\"line\">    &#x27;Programming Language :: Python :: 2&#x27;,</span><br><span class=\"line\">    &#x27;Programming Language :: Python :: 2.6&#x27;,</span><br><span class=\"line\">    &#x27;Programming Language :: Python :: 2.7&#x27;,</span><br><span class=\"line\">    &#x27;Programming Language :: Python :: 3&#x27;,</span><br><span class=\"line\">    &#x27;Programming Language :: Python :: 3.2&#x27;,</span><br><span class=\"line\">    &#x27;Programming Language :: Python :: 3.3&#x27;,</span><br><span class=\"line\">    &#x27;Programming Language :: Python :: 3.4&#x27;,</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>如果是私有项目，不希望开源，可以在classifiers中添加 <code>&#39;Private :: Do Not Upload&#39;</code>这样，万一有小伙伴手抖上传到Pypi，官方也不会收录。</p>\n</li>\n<li><p>python_requires: 指定运行时需要的Python版本。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python_requires=&#x27;&gt;=3.5&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>以上指定仅在3.5及以上版本使用。</p>\n</li>\n<li><p>keywords:项目关键词列表</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keywords=&#x27;sample setuptools development&#x27;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>project_urls:项目相关额外连接，如代码仓库，文档地址等</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">project_urls=&#123;</span><br><span class=\"line\">    &#x27;Documentation&#x27;: &#x27;https://packaging.python.org/tutorials/distributing-packages/&#x27;,</span><br><span class=\"line\">    &#x27;Funding&#x27;: &#x27;https://donate.pypi.org&#x27;,</span><br><span class=\"line\">    &#x27;Say Thanks!&#x27;: &#x27;http://saythanks.io/to/example&#x27;,</span><br><span class=\"line\">    &#x27;Source&#x27;: &#x27;https://github.com/pypa/sampleproject/&#x27;,</span><br><span class=\"line\">    &#x27;Tracker&#x27;: &#x27;https://github.com/pypa/sampleproject/issues&#x27;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>install_requires</strong>:项目依赖的 Python 库，使用 pip 安装本项目时会自动检查和安装依赖。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">install_requires=[&#x27;pyyaml&#x27;]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>extras_require</code>:指定了可选的功能与依赖。某些特殊的、偏门的功能，可能绝大多数用户不会去使用。这些功能的依赖，不适合放在<code>install_requires</code>里。这时就可以用<code>extras_require</code>来指定。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">extras_require=&#123;</span><br><span class=\"line\">    &#x27;security&#x27;: [&#x27;pyOpenSSL&gt;=0.14&#x27;, &#x27;cryptography&gt;=1.3.4&#x27;, &#x27;idna&gt;=2.0.0&#x27;],</span><br><span class=\"line\">    &#x27;socks&#x27;: [&#x27;PySocks&gt;=1.5.6, !=1.5.7&#x27;],</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>以上以<a href=\"http://python-requests.org/\">requests</a>的设置为例。<code>extras_require</code>需要一个dict，其中按（自定义的）功能名称进行分组，每组一个列表，与<code>install_requires</code>规则相同。使用时，可以用类似<code>&#39;requests[security, socks]&#39;</code>的形式来指定。</p>\n</li>\n<li><p>package_data:项目依赖数据文件，数据文件必须放在项目目录内且使用相对路径</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package_data=&#123;</span><br><span class=\"line\">    &#x27;setup_demo&#x27;: [&#x27;data/*.yml&#x27;],</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果不指定作为目录的键为空串，则代表对所有模块操作（下例中将包含所有包内 data 目录下的 yaml 文件）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package_data=&#123;</span><br><span class=\"line\">    &#x27;&#x27;: [&#x27;data/*.yml&#x27;],</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>data_files: 如果数据文件存在于项目外，则可以使用 data_files 参数或者 MANIFEST.in 文件进行管理。如果用于源码包，则使用 MANIFEST.in；如果用于 wheel，则使用 data_files。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data_files=[(&#x27;mydata&#x27;, [&#x27;data/conf.yml&#x27;])]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>zip_safe: 决定应用是否作为一个zip压缩后的<code>egg</code>文件安装在当前Python环境中，还是作为一个以”.egg”结尾的目录安装在当前环境中。因为有些工具不支持zip压缩文件，而且压缩后的包也不方便调试，所以建议将其设为False</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zip_safe=False</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>entry_points</code> :用来支持自动生成脚本，其值应该为是一个字典，从 entry_point 组名映射到一个表示 entry_point 的字符串或字符串列表，如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">entry_points=&#123;</span><br><span class=\"line\">    &#x27;console_scripts&#x27;: [</span><br><span class=\"line\">        &#x27;foo=foo.entry:main&#x27;,</span><br><span class=\"line\">        &#x27;bar=foo.entry:main&#x27;,</span><br><span class=\"line\">    ],    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p>以一个简单工具包为例（全部代码在 <a href=\"https://github.com/suAdminWen/translate-it\">https://github.com/suAdminWen/translate-it</a>）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> codecs <span class=\"keyword\">import</span> <span class=\"built_in\">open</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> setuptools <span class=\"keyword\">import</span> setup, find_packages</span><br><span class=\"line\"></span><br><span class=\"line\">here = os.path.abspath(os.path.dirname(__file__))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">requires = [</span><br><span class=\"line\">    <span class=\"string\">&#x27;requests&gt;=2.22.0&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;lxml&gt;=4.4.1&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;cachelib&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;appdirs&#x27;</span></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">about = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(os.path.join(here, <span class=\"string\">&#x27;translate_it&#x27;</span>, <span class=\"string\">&#x27;__version__.py&#x27;</span>),</span><br><span class=\"line\">          <span class=\"string\">&#x27;r&#x27;</span>, <span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    <span class=\"built_in\">exec</span>(f.read(), about)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;README.md&#x27;</span>, <span class=\"string\">&#x27;r&#x27;</span>, <span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    readme = f.read()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">setup(</span><br><span class=\"line\"></span><br><span class=\"line\">    name=about[<span class=\"string\">&#x27;__name__&#x27;</span>],</span><br><span class=\"line\">    version=about[<span class=\"string\">&#x27;__version__&#x27;</span>],</span><br><span class=\"line\">    description=about[<span class=\"string\">&#x27;__description__&#x27;</span>],</span><br><span class=\"line\">    long_description=readme,</span><br><span class=\"line\">    long_description_content_type=<span class=\"string\">&#x27;text/markdown&#x27;</span>,</span><br><span class=\"line\">    python_requires=<span class=\"string\">&#x27;&gt;=3.5&#x27;</span>,</span><br><span class=\"line\">    packages=find_packages(exclude=(<span class=\"string\">&#x27;tests&#x27;</span>, <span class=\"string\">&#x27;tests.*&#x27;</span>)),</span><br><span class=\"line\">    zip_safe=<span class=\"literal\">False</span>,</span><br><span class=\"line\">    author=about[<span class=\"string\">&#x27;__author__&#x27;</span>],</span><br><span class=\"line\">    author_email=about[<span class=\"string\">&#x27;__author_email__&#x27;</span>],</span><br><span class=\"line\">    url=about[<span class=\"string\">&#x27;__url__&#x27;</span>],</span><br><span class=\"line\">    include_package_data=<span class=\"literal\">True</span>,</span><br><span class=\"line\">    classifiers=[</span><br><span class=\"line\">        <span class=\"string\">&quot;Programming Language :: Python :: 3.5&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;Programming Language :: Python :: 3.6&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;Programming Language :: Python :: 3.7&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;Programming Language :: Python :: 3.8&quot;</span>,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    entry_points=&#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;console_scripts&#x27;</span>: [</span><br><span class=\"line\">            <span class=\"string\">&#x27;translate_it = translate_it.translate_it:command_line_runner&#x27;</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    install_requires=requires,</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"注意的地方\"><a href=\"#注意的地方\" class=\"headerlink\" title=\"注意的地方\"></a>注意的地方</h3><p>刚开始的时候打完包之后发现部分模块并没有被包含进去，百思不得其解，后来发现缺少<code>__init__.py</code>文件，在Python3中，即使模块中不包含该文件，也可以当作一个模块，但是打包的时候，如果缺少该文件，则认为不是源码包含的模块，会被忽略掉。</p>\n<h2 id=\"其他文件\"><a href=\"#其他文件\" class=\"headerlink\" title=\"其他文件\"></a>其他文件</h2><p>除了最基本核心的 setup.py 文件和主程序之外，还会看到其他一些文件。</p>\n<ul>\n<li><p><code>setup.cfg</code>包含了构建时候的一些默认参数。例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[bdist_wheel]</span><br><span class=\"line\">universal=1</span><br></pre></td></tr></table></figure>\n\n<p>用于在使用 bdist_wheel 的时候的默认设置 –universal 参数 。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[build_sphinx]</span><br><span class=\"line\">all-files = 1</span><br><span class=\"line\">build-dir = docs/_build</span><br><span class=\"line\">warning-is-error = 1</span><br></pre></td></tr></table></figure>\n\n<p>使用sphinx生成文档是的一些配置。</p>\n</li>\n<li><p>README.rst&#x2F;README.md:项目说明文档，使用 reStrutruedText 可以在 PyPI 上很好的渲染，但 Markdown 则支持不够好。</p>\n</li>\n<li><p>MANIFEST.in:此文件在打源码包的时候告诉 setuptools 还需要额外打包哪些文件。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Include the README</span><br><span class=\"line\">include *.md</span><br><span class=\"line\"></span><br><span class=\"line\"># Include the license file</span><br><span class=\"line\">include LICENSE.txt</span><br><span class=\"line\"></span><br><span class=\"line\"># Include the data files</span><br><span class=\"line\">recursive-include data *</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://note.qidong.name/2018/01/python-setup-requires/\">setup.py里的几个require</a></li>\n<li><a href=\"https://juejin.im/post/5d46eb4bf265da03ef79f7e3\">Python打包分发工具setuptools</a></li>\n<li><a href=\"http://www.bjhee.com/setuptools.html\">Python打包分发工具setuptools简介</a></li>\n</ul>"},{"title":"UDP广播","date":"2024-03-21T16:00:00.000Z","_content":"\n通过利用UDP广播，可以实现一些网络应用程序中需要向整个网络发送信息的场景，比如发现服务、局域网游戏或设备发现等。\n\n\n\n## UDP广播原理\n\n当使用UDP协议进行广播时，数据包将被发送到一个特定的广播地址，以便所有位于该网络的主机都能接收到这个数据包。UDP广播的原理如下：\n\n1 **UDP协议**：UDP（User Datagram Protocol）是一种无连接的、轻量级的传输协议，它提供了一种快速而简单的数据传输方式。UDP不同于TCP，它不需要在发送数据之前建立连接，也不保证数据的可靠传输和顺序交付。\n\n2 **广播地址**：在IPv4网络中，广播地址是一个特殊的IP地址，用于向网络中的所有主机发送数据包。常见的局域网广播地址是以特定网络段结尾的地址，比如以`.255`结尾的地址。例如，对于IP地址`192.168.1.0`，广播地址为`192.168.1.255`。\n\n3 **发送UDP广播**：要发送UDP广播，发送方将数据包发送到指定的广播地址，而不是特定的单个主机地址。发送方创建一个UDP数据包，并指定目标地址为广播地址。\n\n4 **网络设备处理**：当网络设备（如路由器或交换机）接收到UDP广播数据包时，它会将数据包转发到与该网络相连的所有主机。这使得所有连接到网络的主机都能接收到这个广播数据包。\n\n5 **接收UDP广播**：接收方主机上的应用程序可以监听指定的UDP端口，以接收来自广播地址的数据包。一旦接收到UDP广播数据包，应用程序就可以处理其中的信息。\n\n6 **局限性**：需要注意的是，UDP广播在跨越不同网络的情况下通常不可行，因为广播数据包通常被路由器所阻止。此外，UDP广播可能存在安全风险，因为所有连接到网络的主机都可以接收到广播数据包。\n\n   \n\n##  UDP广播示例DEMO\n\n1 创建了一个UDP socket，并设置其为广播模式。然后，我们不断发送消息到广播地址`<broadcast>:12345`，并每隔1秒发送一次\n\n```python\nimport socket\nimport time\n\n# 创建UDP socket\nudp_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\nudp_socket.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, 1)\n\n# 广播地址和端口\nbroadcast_addr = ('255.255.255.255', 12345)\n\n# 发送广播消息\nwhile True:\n    message = b\"Hello, world!\"\n    udp_socket.sendto(message, broadcast_addr)\n    time.sleep(1)\n```\n\n2 创建了一个UDP socket，并设置其为可重用地址。然后，我们绑定到广播地址和端口，以便接收广播消息。通过使用`IP_ADD_MEMBERSHIP`选项，我们加入了一个广播组，以便接收来自特定广播地址的消息。每次接收到广播消息时，我们打印出消息内容以及发送者的地址。\n\n```python\nimport socket\n\n# 创建UDP socket\nudp_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\nudp_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n\n# 绑定广播地址和端口\nudp_socket.bind(('', 12345))\n\n# 加入广播组\nudp_socket.setsockopt(socket.IPPROTO_IP, socket.IP_ADD_MEMBERSHIP, socket.inet_aton('224.0.0.1') + socket.inet_aton('0.0.0.0'))\n\n# 接收广播消息\nwhile True:\n    data, addr = udp_socket.recvfrom(1024)\n    print(f\"Received message from {addr}: {data.decode()}\")\n```\n\n\n\n## docker容器，如何接收其他主机发送的udp广播\n\n在Docker Compose 中，您可以通过指定端口映射的格式来指定要使用的协议。如果您想要映射的端口只接收UDP协议，您可以在端口映射规范中指定协议为`udp`\n\n```yaml\nversion: '3.9'\nservices:\n  your_service:\n    image: your_image\n    ports:\n      - \"12345:12345/udp\"\n```\n\n问题：\n\n我的网络模式为 `bridge`，监听服务打印的发送者地址为子网ip，如果想使用udp广播接收，需要更改网络模式，或其他处理方式。\n\n发送广播时，body中的数据包含发送者的ip地址，接收广播时，可以通过解析body中的数据，获取发送者的ip地址，然后进行处理。\n\n\n","source":"_posts/UDP广播.md","raw":"---\ntitle: UDP广播\ndate: 2024-03-22\ntags: [udp]\n---\n\n通过利用UDP广播，可以实现一些网络应用程序中需要向整个网络发送信息的场景，比如发现服务、局域网游戏或设备发现等。\n\n\n\n## UDP广播原理\n\n当使用UDP协议进行广播时，数据包将被发送到一个特定的广播地址，以便所有位于该网络的主机都能接收到这个数据包。UDP广播的原理如下：\n\n1 **UDP协议**：UDP（User Datagram Protocol）是一种无连接的、轻量级的传输协议，它提供了一种快速而简单的数据传输方式。UDP不同于TCP，它不需要在发送数据之前建立连接，也不保证数据的可靠传输和顺序交付。\n\n2 **广播地址**：在IPv4网络中，广播地址是一个特殊的IP地址，用于向网络中的所有主机发送数据包。常见的局域网广播地址是以特定网络段结尾的地址，比如以`.255`结尾的地址。例如，对于IP地址`192.168.1.0`，广播地址为`192.168.1.255`。\n\n3 **发送UDP广播**：要发送UDP广播，发送方将数据包发送到指定的广播地址，而不是特定的单个主机地址。发送方创建一个UDP数据包，并指定目标地址为广播地址。\n\n4 **网络设备处理**：当网络设备（如路由器或交换机）接收到UDP广播数据包时，它会将数据包转发到与该网络相连的所有主机。这使得所有连接到网络的主机都能接收到这个广播数据包。\n\n5 **接收UDP广播**：接收方主机上的应用程序可以监听指定的UDP端口，以接收来自广播地址的数据包。一旦接收到UDP广播数据包，应用程序就可以处理其中的信息。\n\n6 **局限性**：需要注意的是，UDP广播在跨越不同网络的情况下通常不可行，因为广播数据包通常被路由器所阻止。此外，UDP广播可能存在安全风险，因为所有连接到网络的主机都可以接收到广播数据包。\n\n   \n\n##  UDP广播示例DEMO\n\n1 创建了一个UDP socket，并设置其为广播模式。然后，我们不断发送消息到广播地址`<broadcast>:12345`，并每隔1秒发送一次\n\n```python\nimport socket\nimport time\n\n# 创建UDP socket\nudp_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\nudp_socket.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, 1)\n\n# 广播地址和端口\nbroadcast_addr = ('255.255.255.255', 12345)\n\n# 发送广播消息\nwhile True:\n    message = b\"Hello, world!\"\n    udp_socket.sendto(message, broadcast_addr)\n    time.sleep(1)\n```\n\n2 创建了一个UDP socket，并设置其为可重用地址。然后，我们绑定到广播地址和端口，以便接收广播消息。通过使用`IP_ADD_MEMBERSHIP`选项，我们加入了一个广播组，以便接收来自特定广播地址的消息。每次接收到广播消息时，我们打印出消息内容以及发送者的地址。\n\n```python\nimport socket\n\n# 创建UDP socket\nudp_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\nudp_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n\n# 绑定广播地址和端口\nudp_socket.bind(('', 12345))\n\n# 加入广播组\nudp_socket.setsockopt(socket.IPPROTO_IP, socket.IP_ADD_MEMBERSHIP, socket.inet_aton('224.0.0.1') + socket.inet_aton('0.0.0.0'))\n\n# 接收广播消息\nwhile True:\n    data, addr = udp_socket.recvfrom(1024)\n    print(f\"Received message from {addr}: {data.decode()}\")\n```\n\n\n\n## docker容器，如何接收其他主机发送的udp广播\n\n在Docker Compose 中，您可以通过指定端口映射的格式来指定要使用的协议。如果您想要映射的端口只接收UDP协议，您可以在端口映射规范中指定协议为`udp`\n\n```yaml\nversion: '3.9'\nservices:\n  your_service:\n    image: your_image\n    ports:\n      - \"12345:12345/udp\"\n```\n\n问题：\n\n我的网络模式为 `bridge`，监听服务打印的发送者地址为子网ip，如果想使用udp广播接收，需要更改网络模式，或其他处理方式。\n\n发送广播时，body中的数据包含发送者的ip地址，接收广播时，可以通过解析body中的数据，获取发送者的ip地址，然后进行处理。\n\n\n","slug":"UDP广播","published":1,"updated":"2024-04-02T03:46:03.591Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluqa1hir001trlogaupt0w63","content":"<p>通过利用UDP广播，可以实现一些网络应用程序中需要向整个网络发送信息的场景，比如发现服务、局域网游戏或设备发现等。</p>\n<h2 id=\"UDP广播原理\"><a href=\"#UDP广播原理\" class=\"headerlink\" title=\"UDP广播原理\"></a>UDP广播原理</h2><p>当使用UDP协议进行广播时，数据包将被发送到一个特定的广播地址，以便所有位于该网络的主机都能接收到这个数据包。UDP广播的原理如下：</p>\n<p>1 <strong>UDP协议</strong>：UDP（User Datagram Protocol）是一种无连接的、轻量级的传输协议，它提供了一种快速而简单的数据传输方式。UDP不同于TCP，它不需要在发送数据之前建立连接，也不保证数据的可靠传输和顺序交付。</p>\n<p>2 <strong>广播地址</strong>：在IPv4网络中，广播地址是一个特殊的IP地址，用于向网络中的所有主机发送数据包。常见的局域网广播地址是以特定网络段结尾的地址，比如以<code>.255</code>结尾的地址。例如，对于IP地址<code>192.168.1.0</code>，广播地址为<code>192.168.1.255</code>。</p>\n<p>3 <strong>发送UDP广播</strong>：要发送UDP广播，发送方将数据包发送到指定的广播地址，而不是特定的单个主机地址。发送方创建一个UDP数据包，并指定目标地址为广播地址。</p>\n<p>4 <strong>网络设备处理</strong>：当网络设备（如路由器或交换机）接收到UDP广播数据包时，它会将数据包转发到与该网络相连的所有主机。这使得所有连接到网络的主机都能接收到这个广播数据包。</p>\n<p>5 <strong>接收UDP广播</strong>：接收方主机上的应用程序可以监听指定的UDP端口，以接收来自广播地址的数据包。一旦接收到UDP广播数据包，应用程序就可以处理其中的信息。</p>\n<p>6 <strong>局限性</strong>：需要注意的是，UDP广播在跨越不同网络的情况下通常不可行，因为广播数据包通常被路由器所阻止。此外，UDP广播可能存在安全风险，因为所有连接到网络的主机都可以接收到广播数据包。</p>\n<h2 id=\"UDP广播示例DEMO\"><a href=\"#UDP广播示例DEMO\" class=\"headerlink\" title=\"UDP广播示例DEMO\"></a>UDP广播示例DEMO</h2><p>1 创建了一个UDP socket，并设置其为广播模式。然后，我们不断发送消息到广播地址<code>&lt;broadcast&gt;:12345</code>，并每隔1秒发送一次</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> socket</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建UDP socket</span></span><br><span class=\"line\">udp_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class=\"line\">udp_socket.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 广播地址和端口</span></span><br><span class=\"line\">broadcast_addr = (<span class=\"string\">&#x27;255.255.255.255&#x27;</span>, <span class=\"number\">12345</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 发送广播消息</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    message = <span class=\"string\">b&quot;Hello, world!&quot;</span></span><br><span class=\"line\">    udp_socket.sendto(message, broadcast_addr)</span><br><span class=\"line\">    time.sleep(<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n\n<p>2 创建了一个UDP socket，并设置其为可重用地址。然后，我们绑定到广播地址和端口，以便接收广播消息。通过使用<code>IP_ADD_MEMBERSHIP</code>选项，我们加入了一个广播组，以便接收来自特定广播地址的消息。每次接收到广播消息时，我们打印出消息内容以及发送者的地址。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> socket</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建UDP socket</span></span><br><span class=\"line\">udp_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class=\"line\">udp_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 绑定广播地址和端口</span></span><br><span class=\"line\">udp_socket.bind((<span class=\"string\">&#x27;&#x27;</span>, <span class=\"number\">12345</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 加入广播组</span></span><br><span class=\"line\">udp_socket.setsockopt(socket.IPPROTO_IP, socket.IP_ADD_MEMBERSHIP, socket.inet_aton(<span class=\"string\">&#x27;224.0.0.1&#x27;</span>) + socket.inet_aton(<span class=\"string\">&#x27;0.0.0.0&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 接收广播消息</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    data, addr = udp_socket.recvfrom(<span class=\"number\">1024</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;Received message from <span class=\"subst\">&#123;addr&#125;</span>: <span class=\"subst\">&#123;data.decode()&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"docker容器，如何接收其他主机发送的udp广播\"><a href=\"#docker容器，如何接收其他主机发送的udp广播\" class=\"headerlink\" title=\"docker容器，如何接收其他主机发送的udp广播\"></a>docker容器，如何接收其他主机发送的udp广播</h2><p>在Docker Compose 中，您可以通过指定端口映射的格式来指定要使用的协议。如果您想要映射的端口只接收UDP协议，您可以在端口映射规范中指定协议为<code>udp</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&#x27;3.9&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">your_service:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">your_image</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;12345:12345/udp&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>问题：</p>\n<p>我的网络模式为 <code>bridge</code>，监听服务打印的发送者地址为子网ip，如果想使用udp广播接收，需要更改网络模式，或其他处理方式。</p>\n<p>发送广播时，body中的数据包含发送者的ip地址，接收广播时，可以通过解析body中的数据，获取发送者的ip地址，然后进行处理。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>通过利用UDP广播，可以实现一些网络应用程序中需要向整个网络发送信息的场景，比如发现服务、局域网游戏或设备发现等。</p>\n<h2 id=\"UDP广播原理\"><a href=\"#UDP广播原理\" class=\"headerlink\" title=\"UDP广播原理\"></a>UDP广播原理</h2><p>当使用UDP协议进行广播时，数据包将被发送到一个特定的广播地址，以便所有位于该网络的主机都能接收到这个数据包。UDP广播的原理如下：</p>\n<p>1 <strong>UDP协议</strong>：UDP（User Datagram Protocol）是一种无连接的、轻量级的传输协议，它提供了一种快速而简单的数据传输方式。UDP不同于TCP，它不需要在发送数据之前建立连接，也不保证数据的可靠传输和顺序交付。</p>\n<p>2 <strong>广播地址</strong>：在IPv4网络中，广播地址是一个特殊的IP地址，用于向网络中的所有主机发送数据包。常见的局域网广播地址是以特定网络段结尾的地址，比如以<code>.255</code>结尾的地址。例如，对于IP地址<code>192.168.1.0</code>，广播地址为<code>192.168.1.255</code>。</p>\n<p>3 <strong>发送UDP广播</strong>：要发送UDP广播，发送方将数据包发送到指定的广播地址，而不是特定的单个主机地址。发送方创建一个UDP数据包，并指定目标地址为广播地址。</p>\n<p>4 <strong>网络设备处理</strong>：当网络设备（如路由器或交换机）接收到UDP广播数据包时，它会将数据包转发到与该网络相连的所有主机。这使得所有连接到网络的主机都能接收到这个广播数据包。</p>\n<p>5 <strong>接收UDP广播</strong>：接收方主机上的应用程序可以监听指定的UDP端口，以接收来自广播地址的数据包。一旦接收到UDP广播数据包，应用程序就可以处理其中的信息。</p>\n<p>6 <strong>局限性</strong>：需要注意的是，UDP广播在跨越不同网络的情况下通常不可行，因为广播数据包通常被路由器所阻止。此外，UDP广播可能存在安全风险，因为所有连接到网络的主机都可以接收到广播数据包。</p>\n<h2 id=\"UDP广播示例DEMO\"><a href=\"#UDP广播示例DEMO\" class=\"headerlink\" title=\"UDP广播示例DEMO\"></a>UDP广播示例DEMO</h2><p>1 创建了一个UDP socket，并设置其为广播模式。然后，我们不断发送消息到广播地址<code>&lt;broadcast&gt;:12345</code>，并每隔1秒发送一次</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> socket</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建UDP socket</span></span><br><span class=\"line\">udp_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class=\"line\">udp_socket.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 广播地址和端口</span></span><br><span class=\"line\">broadcast_addr = (<span class=\"string\">&#x27;255.255.255.255&#x27;</span>, <span class=\"number\">12345</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 发送广播消息</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    message = <span class=\"string\">b&quot;Hello, world!&quot;</span></span><br><span class=\"line\">    udp_socket.sendto(message, broadcast_addr)</span><br><span class=\"line\">    time.sleep(<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n\n<p>2 创建了一个UDP socket，并设置其为可重用地址。然后，我们绑定到广播地址和端口，以便接收广播消息。通过使用<code>IP_ADD_MEMBERSHIP</code>选项，我们加入了一个广播组，以便接收来自特定广播地址的消息。每次接收到广播消息时，我们打印出消息内容以及发送者的地址。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> socket</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建UDP socket</span></span><br><span class=\"line\">udp_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class=\"line\">udp_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 绑定广播地址和端口</span></span><br><span class=\"line\">udp_socket.bind((<span class=\"string\">&#x27;&#x27;</span>, <span class=\"number\">12345</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 加入广播组</span></span><br><span class=\"line\">udp_socket.setsockopt(socket.IPPROTO_IP, socket.IP_ADD_MEMBERSHIP, socket.inet_aton(<span class=\"string\">&#x27;224.0.0.1&#x27;</span>) + socket.inet_aton(<span class=\"string\">&#x27;0.0.0.0&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 接收广播消息</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    data, addr = udp_socket.recvfrom(<span class=\"number\">1024</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;Received message from <span class=\"subst\">&#123;addr&#125;</span>: <span class=\"subst\">&#123;data.decode()&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"docker容器，如何接收其他主机发送的udp广播\"><a href=\"#docker容器，如何接收其他主机发送的udp广播\" class=\"headerlink\" title=\"docker容器，如何接收其他主机发送的udp广播\"></a>docker容器，如何接收其他主机发送的udp广播</h2><p>在Docker Compose 中，您可以通过指定端口映射的格式来指定要使用的协议。如果您想要映射的端口只接收UDP协议，您可以在端口映射规范中指定协议为<code>udp</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&#x27;3.9&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">your_service:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">your_image</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;12345:12345/udp&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>问题：</p>\n<p>我的网络模式为 <code>bridge</code>，监听服务打印的发送者地址为子网ip，如果想使用udp广播接收，需要更改网络模式，或其他处理方式。</p>\n<p>发送广播时，body中的数据包含发送者的ip地址，接收广播时，可以通过解析body中的数据，获取发送者的ip地址，然后进行处理。</p>\n"},{"title":"Ubuntu18 给自定义应用程序快捷方式","date":"2018-11-11T16:00:00.000Z","_content":"\n## Ubuntu 创建快捷启动应用程序\n\n在 $HOME/.local/share/applications 目录下，新建文件： youapp_name.desktop，然后在其中填入以下内容：\n\n```\n[Desktop Entry]\n\nEncoding=UTF-8\n\nName=Navicat\n\nExec=/opt/navicat121_mysql_en_x64/start_navicat\nIcon=/opt/navicat121_mysql_en_x64/icon.png\n\nTerminal=false\n\nType=Application\n\nCategories=Development;\n```\n\n其中  `Exec` 对应的是启动命令，如果是自己写的脚本，那就在以 `Exec=sh` 开头。\n`Icon` 对应的是图标\n\n## Ubuntu18 如何将快捷方式锁定在启动器上\n\n长按图标，然后选择添加到收藏夹即可\n","source":"_posts/Ubuntu18 给自定义应用程序快捷方式.md","raw":"---\ntitle: Ubuntu18 给自定义应用程序快捷方式\ndate: 2018-11-12\ntags: [Ubuntu]\n---\n\n## Ubuntu 创建快捷启动应用程序\n\n在 $HOME/.local/share/applications 目录下，新建文件： youapp_name.desktop，然后在其中填入以下内容：\n\n```\n[Desktop Entry]\n\nEncoding=UTF-8\n\nName=Navicat\n\nExec=/opt/navicat121_mysql_en_x64/start_navicat\nIcon=/opt/navicat121_mysql_en_x64/icon.png\n\nTerminal=false\n\nType=Application\n\nCategories=Development;\n```\n\n其中  `Exec` 对应的是启动命令，如果是自己写的脚本，那就在以 `Exec=sh` 开头。\n`Icon` 对应的是图标\n\n## Ubuntu18 如何将快捷方式锁定在启动器上\n\n长按图标，然后选择添加到收藏夹即可\n","slug":"Ubuntu18 给自定义应用程序快捷方式","published":1,"updated":"2021-06-20T10:25:20.125Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluqa1hir001vrlog3t83fbc5","content":"<h2 id=\"Ubuntu-创建快捷启动应用程序\"><a href=\"#Ubuntu-创建快捷启动应用程序\" class=\"headerlink\" title=\"Ubuntu 创建快捷启动应用程序\"></a>Ubuntu 创建快捷启动应用程序</h2><p>在 $HOME&#x2F;.local&#x2F;share&#x2F;applications 目录下，新建文件： youapp_name.desktop，然后在其中填入以下内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Desktop Entry]</span><br><span class=\"line\"></span><br><span class=\"line\">Encoding=UTF-8</span><br><span class=\"line\"></span><br><span class=\"line\">Name=Navicat</span><br><span class=\"line\"></span><br><span class=\"line\">Exec=/opt/navicat121_mysql_en_x64/start_navicat</span><br><span class=\"line\">Icon=/opt/navicat121_mysql_en_x64/icon.png</span><br><span class=\"line\"></span><br><span class=\"line\">Terminal=false</span><br><span class=\"line\"></span><br><span class=\"line\">Type=Application</span><br><span class=\"line\"></span><br><span class=\"line\">Categories=Development;</span><br></pre></td></tr></table></figure>\n\n<p>其中  <code>Exec</code> 对应的是启动命令，如果是自己写的脚本，那就在以 <code>Exec=sh</code> 开头。<br><code>Icon</code> 对应的是图标</p>\n<h2 id=\"Ubuntu18-如何将快捷方式锁定在启动器上\"><a href=\"#Ubuntu18-如何将快捷方式锁定在启动器上\" class=\"headerlink\" title=\"Ubuntu18 如何将快捷方式锁定在启动器上\"></a>Ubuntu18 如何将快捷方式锁定在启动器上</h2><p>长按图标，然后选择添加到收藏夹即可</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Ubuntu-创建快捷启动应用程序\"><a href=\"#Ubuntu-创建快捷启动应用程序\" class=\"headerlink\" title=\"Ubuntu 创建快捷启动应用程序\"></a>Ubuntu 创建快捷启动应用程序</h2><p>在 $HOME&#x2F;.local&#x2F;share&#x2F;applications 目录下，新建文件： youapp_name.desktop，然后在其中填入以下内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Desktop Entry]</span><br><span class=\"line\"></span><br><span class=\"line\">Encoding=UTF-8</span><br><span class=\"line\"></span><br><span class=\"line\">Name=Navicat</span><br><span class=\"line\"></span><br><span class=\"line\">Exec=/opt/navicat121_mysql_en_x64/start_navicat</span><br><span class=\"line\">Icon=/opt/navicat121_mysql_en_x64/icon.png</span><br><span class=\"line\"></span><br><span class=\"line\">Terminal=false</span><br><span class=\"line\"></span><br><span class=\"line\">Type=Application</span><br><span class=\"line\"></span><br><span class=\"line\">Categories=Development;</span><br></pre></td></tr></table></figure>\n\n<p>其中  <code>Exec</code> 对应的是启动命令，如果是自己写的脚本，那就在以 <code>Exec=sh</code> 开头。<br><code>Icon</code> 对应的是图标</p>\n<h2 id=\"Ubuntu18-如何将快捷方式锁定在启动器上\"><a href=\"#Ubuntu18-如何将快捷方式锁定在启动器上\" class=\"headerlink\" title=\"Ubuntu18 如何将快捷方式锁定在启动器上\"></a>Ubuntu18 如何将快捷方式锁定在启动器上</h2><p>长按图标，然后选择添加到收藏夹即可</p>\n"},{"title":"Ubuntu下matplotlib图例中文显示方块的解决","date":"2019-08-24T16:00:00.000Z","_content":"\n以下是步骤：\n\n1、下载中文字体（黑体，看准系统版本）[http://www.fontpalace.com/font-details/SimHei/](http://www.fontpalace.com/font-details/SimHei/)\n2、安装字体\n\n```\nsudo mv SimHei.ttf /usr/share/fonts/\n```\n\n3、在`~/.config/matplotlib/`下创建 `matplotlibrc`添加以下三行：\n\n```\nfont.family         : sans-serif        \nfont.sans-serif     : SimHei, Bitstream Vera Sans, Lucida Grande, Verdana, Geneva, Lucid, Arial, Helvetica, Avant Garde, sans-serif   \naxes.unicode_minus  : False\n```\n\n或者 修改配置文件 `matplotlibrc` 同样在`matplotlib/mpl-data/fonts`目录下面添加三行(原配置文件这是三个配置项应该是被注释掉的)\n\n**如果还不行**\n\n删除matplotlib的缓存:\n```\nsudo rm ~/.cache/matplotlib\n```\n","source":"_posts/Ubuntu下matplotlib图例中文显示方块的解决.md","raw":"---\ntitle: Ubuntu下matplotlib图例中文显示方块的解决\ndate: 2019-08-25\ntags: [Python, matplotlib]\n---\n\n以下是步骤：\n\n1、下载中文字体（黑体，看准系统版本）[http://www.fontpalace.com/font-details/SimHei/](http://www.fontpalace.com/font-details/SimHei/)\n2、安装字体\n\n```\nsudo mv SimHei.ttf /usr/share/fonts/\n```\n\n3、在`~/.config/matplotlib/`下创建 `matplotlibrc`添加以下三行：\n\n```\nfont.family         : sans-serif        \nfont.sans-serif     : SimHei, Bitstream Vera Sans, Lucida Grande, Verdana, Geneva, Lucid, Arial, Helvetica, Avant Garde, sans-serif   \naxes.unicode_minus  : False\n```\n\n或者 修改配置文件 `matplotlibrc` 同样在`matplotlib/mpl-data/fonts`目录下面添加三行(原配置文件这是三个配置项应该是被注释掉的)\n\n**如果还不行**\n\n删除matplotlib的缓存:\n```\nsudo rm ~/.cache/matplotlib\n```\n","slug":"Ubuntu下matplotlib图例中文显示方块的解决","published":1,"updated":"2021-06-20T10:25:20.125Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluqa1his001xrloge3q18ek0","content":"<p>以下是步骤：</p>\n<p>1、下载中文字体（黑体，看准系统版本）<a href=\"http://www.fontpalace.com/font-details/SimHei/\">http://www.fontpalace.com/font-details/SimHei/</a><br>2、安装字体</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mv SimHei.ttf /usr/share/fonts/</span><br></pre></td></tr></table></figure>\n\n<p>3、在<code>~/.config/matplotlib/</code>下创建 <code>matplotlibrc</code>添加以下三行：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">font.family         : sans-serif        </span><br><span class=\"line\">font.sans-serif     : SimHei, Bitstream Vera Sans, Lucida Grande, Verdana, Geneva, Lucid, Arial, Helvetica, Avant Garde, sans-serif   </span><br><span class=\"line\">axes.unicode_minus  : False</span><br></pre></td></tr></table></figure>\n\n<p>或者 修改配置文件 <code>matplotlibrc</code> 同样在<code>matplotlib/mpl-data/fonts</code>目录下面添加三行(原配置文件这是三个配置项应该是被注释掉的)</p>\n<p><strong>如果还不行</strong></p>\n<p>删除matplotlib的缓存:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo rm ~/.cache/matplotlib</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>以下是步骤：</p>\n<p>1、下载中文字体（黑体，看准系统版本）<a href=\"http://www.fontpalace.com/font-details/SimHei/\">http://www.fontpalace.com/font-details/SimHei/</a><br>2、安装字体</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mv SimHei.ttf /usr/share/fonts/</span><br></pre></td></tr></table></figure>\n\n<p>3、在<code>~/.config/matplotlib/</code>下创建 <code>matplotlibrc</code>添加以下三行：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">font.family         : sans-serif        </span><br><span class=\"line\">font.sans-serif     : SimHei, Bitstream Vera Sans, Lucida Grande, Verdana, Geneva, Lucid, Arial, Helvetica, Avant Garde, sans-serif   </span><br><span class=\"line\">axes.unicode_minus  : False</span><br></pre></td></tr></table></figure>\n\n<p>或者 修改配置文件 <code>matplotlibrc</code> 同样在<code>matplotlib/mpl-data/fonts</code>目录下面添加三行(原配置文件这是三个配置项应该是被注释掉的)</p>\n<p><strong>如果还不行</strong></p>\n<p>删除matplotlib的缓存:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo rm ~/.cache/matplotlib</span><br></pre></td></tr></table></figure>\n"},{"title":"Ubuntu编译安装Aria2 – 突破百度网盘下载限速","date":"2018-11-29T16:00:00.000Z","_content":"\n# 下载源码\n\n安装一些必要的依赖环境\n\n```\napt install -y libcurl4-openssl-dev libevent-dev \\\n                ca-certificates libssl-dev pkg-config \\\n                build-essential intltool libgcrypt-dev \\\n                libssl-dev libxml2-dev\n```\n\n下载最新的aria2的源码：\n\n```\nwget --no-check-certificate https://github.com/aria2/aria2/releases/download/release-1.31.0/aria2-1.31.0.tar.gz\ntar zxf aria2-1.31.0.tar.gz\ncd ./aria2-1.31.0\n```\n\n# 修改源码\n\nAria2的参数中`-max-server-connection`和`-min-split-files`很大程度上决定了网盘的下载速度。\n在这里我将`-max-server-connection`最高设置为256，`-min-split-files`最小设置为256k。\n\n<!--more-->\n\n```\n    #aira2的基本配置选项大多都存储在文件OptionHandlerFactory.cc中\n    vi src/OptionHandlerFactory.cc\n\n    #定位到441行\n    #将服务器最大连接数16修改为256\n    OptionHandler* op(new NumberOptionHandler(PREF_MAX_CONNECTION_PER_SERVER,\n                                              TEXT_MAX_CONNECTION_PER_SERVER,\n                                           // \"1\", 1, 16, 'x'));\n                                              \"1\", 1, 256, 'x'));\n    #定位到第503行\n    #将最文件分片大小设置为256_k\n    #到此源代码需要修改的地方改完了\n    OptionHandler* op(new UnitNumberOptionHandler(\n    //PREF_MIN_SPLIT_SIZE, TEXT_MIN_SPLIT_SIZE, \"1M\", 1_m, 1_g, 'k'));\n     PREF_MIN_SPLIT_SIZE, TEXT_MIN_SPLIT_SIZE, \"1M\", 256_k, 1_g, 'k'));\n```\n\n# 编译前的参数设置\n\n```\n./configure\n```\n\n编译\n\n```\nmake\n```\n\n编译完成之后\n\n```\ncp src/aria2c /usr/local/bin\n```\n\n# 查看安装是否成功\n\n```\naria2c -v\n```\n\n如果能显示版本号，就表示成功。\n\n# 配置\n\n在/etc里新建一个aria2的目录,新建配置文件aria2.conf\n\n```\nmkdir -p /etc/aria2\nvi /etc/aria2/aria2.conf\n```\n\n插入以下内容：\n\n```\ndir=/home/wen/Downloads  # 这里需要改成绝对路径\ndisable-ipv6=true\nenable-rpc=true\nrpc-allow-origin-all=true\nrpc-listen-all=true\nrpc-listen-port=6800\ncontinue=true\ninput-file=/etc/aria2/aria2.session\n#rpc-user=admin\n#rpc-passwd=password\nsave-session=/etc/aria2/aria2.session\nsave-session-interval=7200\nmax-concurrent-downloads=20\nmax-connection-per-server=256\nmin-split-size=256k\n#log=/var/log/aria2/aria2.log\n# Complete delete .aria2 files\non-download-complete=/etc/aria2/delete_aria2\nmax-overall-upload-limit=5K\nmax-upload-limit=5K\nfollow-torrent=true\n#BT\nbt-request-peer-speed-limit=200K\n#PT download\nbt-max-peers=48\nlisten-port=26834\nenable-dht=false\nbt-enable-lpd=false\nenable-peer-exchange=false\nuser-agent=uTorrent/341(109279400)(30888)\npeer-id-prefix=-UT341-\nseed-ratio=0\nforce-save=true\nbt-hash-check-seed=true\nbt-seed-unverified=true\nbt-save-metadata=true\n```\n\n新建一个aria2.session，用于存储正在下载的一些信息\n\n```\ntouch /etc/aria2/aria2.session\n```\n\n# 启动\n\n启动文件配置\n\n```\n#!/bin/sh\n### BEGIN INIT INFO\n# Provides:          aria2\n# Required-Start:    $remote_fs $network\n# Required-Stop:     $remote_fs $network\n# Default-Start:     2 3 4 5\n# Default-Stop:      0 1 6\n# Short-Description: Aria2 Downloader\n### END INIT INFO\ncase \"$1\" in\nstart)\n    echo -n \"Starting aria2cn\"\n    sudo -u root aria2c --conf-path=/etc/aria2/aria2.conf -D\n    #sudo -u后面的是你正在使用的用户名，因为我用的root\n;;\nstop)\n    echo -n \"Shutting down aria2c \"\n    killall aria2c\n;;\nrestart)\n    echo -n \"Shutting down aria2c  \"\n    killall aria2c\nsleep 3\necho -n \"Starting aria2c\"\n    sudo -u root aria2c --conf-path=/etc/aria2/aria2.conf -D\n    #同上面的一样，根据自己的用户名改root。\n;;\n*)\n    echo 'Usage:' `basename $0` '[option]'\n    echo 'Available option:'\n    for option in start stop restart\n    do\n    echo '  -' $option\n    done\n;;\nesac\n```\n\n给启动文件一个权限以及开机自动运行aria2\n\n```\nsudo chmod 755 /etc/init.d/aria2c\nupdate-rc.d aria2c defaults\n```\n\n启动aria2\n\n```\nsudo service aria2c start\n```\n\n# 参考文章\n\n- [https://www.lucktang.com/2559.html](https://www.lucktang.com/2559.html)\n- [https://www.easegamer.com/?p=483](https://www.easegamer.com/?p=483)\n","source":"_posts/Ubuntu编译安装Aria2 – 突破百度网盘下载限速.md","raw":"---\ntitle: Ubuntu编译安装Aria2 – 突破百度网盘下载限速\ndate: 2018-11-30\ntags: [Ubuntu, 服务器]\n---\n\n# 下载源码\n\n安装一些必要的依赖环境\n\n```\napt install -y libcurl4-openssl-dev libevent-dev \\\n                ca-certificates libssl-dev pkg-config \\\n                build-essential intltool libgcrypt-dev \\\n                libssl-dev libxml2-dev\n```\n\n下载最新的aria2的源码：\n\n```\nwget --no-check-certificate https://github.com/aria2/aria2/releases/download/release-1.31.0/aria2-1.31.0.tar.gz\ntar zxf aria2-1.31.0.tar.gz\ncd ./aria2-1.31.0\n```\n\n# 修改源码\n\nAria2的参数中`-max-server-connection`和`-min-split-files`很大程度上决定了网盘的下载速度。\n在这里我将`-max-server-connection`最高设置为256，`-min-split-files`最小设置为256k。\n\n<!--more-->\n\n```\n    #aira2的基本配置选项大多都存储在文件OptionHandlerFactory.cc中\n    vi src/OptionHandlerFactory.cc\n\n    #定位到441行\n    #将服务器最大连接数16修改为256\n    OptionHandler* op(new NumberOptionHandler(PREF_MAX_CONNECTION_PER_SERVER,\n                                              TEXT_MAX_CONNECTION_PER_SERVER,\n                                           // \"1\", 1, 16, 'x'));\n                                              \"1\", 1, 256, 'x'));\n    #定位到第503行\n    #将最文件分片大小设置为256_k\n    #到此源代码需要修改的地方改完了\n    OptionHandler* op(new UnitNumberOptionHandler(\n    //PREF_MIN_SPLIT_SIZE, TEXT_MIN_SPLIT_SIZE, \"1M\", 1_m, 1_g, 'k'));\n     PREF_MIN_SPLIT_SIZE, TEXT_MIN_SPLIT_SIZE, \"1M\", 256_k, 1_g, 'k'));\n```\n\n# 编译前的参数设置\n\n```\n./configure\n```\n\n编译\n\n```\nmake\n```\n\n编译完成之后\n\n```\ncp src/aria2c /usr/local/bin\n```\n\n# 查看安装是否成功\n\n```\naria2c -v\n```\n\n如果能显示版本号，就表示成功。\n\n# 配置\n\n在/etc里新建一个aria2的目录,新建配置文件aria2.conf\n\n```\nmkdir -p /etc/aria2\nvi /etc/aria2/aria2.conf\n```\n\n插入以下内容：\n\n```\ndir=/home/wen/Downloads  # 这里需要改成绝对路径\ndisable-ipv6=true\nenable-rpc=true\nrpc-allow-origin-all=true\nrpc-listen-all=true\nrpc-listen-port=6800\ncontinue=true\ninput-file=/etc/aria2/aria2.session\n#rpc-user=admin\n#rpc-passwd=password\nsave-session=/etc/aria2/aria2.session\nsave-session-interval=7200\nmax-concurrent-downloads=20\nmax-connection-per-server=256\nmin-split-size=256k\n#log=/var/log/aria2/aria2.log\n# Complete delete .aria2 files\non-download-complete=/etc/aria2/delete_aria2\nmax-overall-upload-limit=5K\nmax-upload-limit=5K\nfollow-torrent=true\n#BT\nbt-request-peer-speed-limit=200K\n#PT download\nbt-max-peers=48\nlisten-port=26834\nenable-dht=false\nbt-enable-lpd=false\nenable-peer-exchange=false\nuser-agent=uTorrent/341(109279400)(30888)\npeer-id-prefix=-UT341-\nseed-ratio=0\nforce-save=true\nbt-hash-check-seed=true\nbt-seed-unverified=true\nbt-save-metadata=true\n```\n\n新建一个aria2.session，用于存储正在下载的一些信息\n\n```\ntouch /etc/aria2/aria2.session\n```\n\n# 启动\n\n启动文件配置\n\n```\n#!/bin/sh\n### BEGIN INIT INFO\n# Provides:          aria2\n# Required-Start:    $remote_fs $network\n# Required-Stop:     $remote_fs $network\n# Default-Start:     2 3 4 5\n# Default-Stop:      0 1 6\n# Short-Description: Aria2 Downloader\n### END INIT INFO\ncase \"$1\" in\nstart)\n    echo -n \"Starting aria2cn\"\n    sudo -u root aria2c --conf-path=/etc/aria2/aria2.conf -D\n    #sudo -u后面的是你正在使用的用户名，因为我用的root\n;;\nstop)\n    echo -n \"Shutting down aria2c \"\n    killall aria2c\n;;\nrestart)\n    echo -n \"Shutting down aria2c  \"\n    killall aria2c\nsleep 3\necho -n \"Starting aria2c\"\n    sudo -u root aria2c --conf-path=/etc/aria2/aria2.conf -D\n    #同上面的一样，根据自己的用户名改root。\n;;\n*)\n    echo 'Usage:' `basename $0` '[option]'\n    echo 'Available option:'\n    for option in start stop restart\n    do\n    echo '  -' $option\n    done\n;;\nesac\n```\n\n给启动文件一个权限以及开机自动运行aria2\n\n```\nsudo chmod 755 /etc/init.d/aria2c\nupdate-rc.d aria2c defaults\n```\n\n启动aria2\n\n```\nsudo service aria2c start\n```\n\n# 参考文章\n\n- [https://www.lucktang.com/2559.html](https://www.lucktang.com/2559.html)\n- [https://www.easegamer.com/?p=483](https://www.easegamer.com/?p=483)\n","slug":"Ubuntu编译安装Aria2 – 突破百度网盘下载限速","published":1,"updated":"2021-06-20T10:25:20.125Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluqa1hit001zrlog77988gyy","content":"<h1 id=\"下载源码\"><a href=\"#下载源码\" class=\"headerlink\" title=\"下载源码\"></a>下载源码</h1><p>安装一些必要的依赖环境</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt install -y libcurl4-openssl-dev libevent-dev \\</span><br><span class=\"line\">                ca-certificates libssl-dev pkg-config \\</span><br><span class=\"line\">                build-essential intltool libgcrypt-dev \\</span><br><span class=\"line\">                libssl-dev libxml2-dev</span><br></pre></td></tr></table></figure>\n\n<p>下载最新的aria2的源码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget --no-check-certificate https://github.com/aria2/aria2/releases/download/release-1.31.0/aria2-1.31.0.tar.gz</span><br><span class=\"line\">tar zxf aria2-1.31.0.tar.gz</span><br><span class=\"line\">cd ./aria2-1.31.0</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"修改源码\"><a href=\"#修改源码\" class=\"headerlink\" title=\"修改源码\"></a>修改源码</h1><p>Aria2的参数中<code>-max-server-connection</code>和<code>-min-split-files</code>很大程度上决定了网盘的下载速度。<br>在这里我将<code>-max-server-connection</code>最高设置为256，<code>-min-split-files</code>最小设置为256k。</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#aira2的基本配置选项大多都存储在文件OptionHandlerFactory.cc中</span><br><span class=\"line\">vi src/OptionHandlerFactory.cc</span><br><span class=\"line\"></span><br><span class=\"line\">#定位到441行</span><br><span class=\"line\">#将服务器最大连接数16修改为256</span><br><span class=\"line\">OptionHandler* op(new NumberOptionHandler(PREF_MAX_CONNECTION_PER_SERVER,</span><br><span class=\"line\">                                          TEXT_MAX_CONNECTION_PER_SERVER,</span><br><span class=\"line\">                                       // &quot;1&quot;, 1, 16, &#x27;x&#x27;));</span><br><span class=\"line\">                                          &quot;1&quot;, 1, 256, &#x27;x&#x27;));</span><br><span class=\"line\">#定位到第503行</span><br><span class=\"line\">#将最文件分片大小设置为256_k</span><br><span class=\"line\">#到此源代码需要修改的地方改完了</span><br><span class=\"line\">OptionHandler* op(new UnitNumberOptionHandler(</span><br><span class=\"line\">//PREF_MIN_SPLIT_SIZE, TEXT_MIN_SPLIT_SIZE, &quot;1M&quot;, 1_m, 1_g, &#x27;k&#x27;));</span><br><span class=\"line\"> PREF_MIN_SPLIT_SIZE, TEXT_MIN_SPLIT_SIZE, &quot;1M&quot;, 256_k, 1_g, &#x27;k&#x27;));</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"编译前的参数设置\"><a href=\"#编译前的参数设置\" class=\"headerlink\" title=\"编译前的参数设置\"></a>编译前的参数设置</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure</span><br></pre></td></tr></table></figure>\n\n<p>编译</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make</span><br></pre></td></tr></table></figure>\n\n<p>编译完成之后</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp src/aria2c /usr/local/bin</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"查看安装是否成功\"><a href=\"#查看安装是否成功\" class=\"headerlink\" title=\"查看安装是否成功\"></a>查看安装是否成功</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aria2c -v</span><br></pre></td></tr></table></figure>\n\n<p>如果能显示版本号，就表示成功。</p>\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><p>在&#x2F;etc里新建一个aria2的目录,新建配置文件aria2.conf</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /etc/aria2</span><br><span class=\"line\">vi /etc/aria2/aria2.conf</span><br></pre></td></tr></table></figure>\n\n<p>插入以下内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dir=/home/wen/Downloads  # 这里需要改成绝对路径</span><br><span class=\"line\">disable-ipv6=true</span><br><span class=\"line\">enable-rpc=true</span><br><span class=\"line\">rpc-allow-origin-all=true</span><br><span class=\"line\">rpc-listen-all=true</span><br><span class=\"line\">rpc-listen-port=6800</span><br><span class=\"line\">continue=true</span><br><span class=\"line\">input-file=/etc/aria2/aria2.session</span><br><span class=\"line\">#rpc-user=admin</span><br><span class=\"line\">#rpc-passwd=password</span><br><span class=\"line\">save-session=/etc/aria2/aria2.session</span><br><span class=\"line\">save-session-interval=7200</span><br><span class=\"line\">max-concurrent-downloads=20</span><br><span class=\"line\">max-connection-per-server=256</span><br><span class=\"line\">min-split-size=256k</span><br><span class=\"line\">#log=/var/log/aria2/aria2.log</span><br><span class=\"line\"># Complete delete .aria2 files</span><br><span class=\"line\">on-download-complete=/etc/aria2/delete_aria2</span><br><span class=\"line\">max-overall-upload-limit=5K</span><br><span class=\"line\">max-upload-limit=5K</span><br><span class=\"line\">follow-torrent=true</span><br><span class=\"line\">#BT</span><br><span class=\"line\">bt-request-peer-speed-limit=200K</span><br><span class=\"line\">#PT download</span><br><span class=\"line\">bt-max-peers=48</span><br><span class=\"line\">listen-port=26834</span><br><span class=\"line\">enable-dht=false</span><br><span class=\"line\">bt-enable-lpd=false</span><br><span class=\"line\">enable-peer-exchange=false</span><br><span class=\"line\">user-agent=uTorrent/341(109279400)(30888)</span><br><span class=\"line\">peer-id-prefix=-UT341-</span><br><span class=\"line\">seed-ratio=0</span><br><span class=\"line\">force-save=true</span><br><span class=\"line\">bt-hash-check-seed=true</span><br><span class=\"line\">bt-seed-unverified=true</span><br><span class=\"line\">bt-save-metadata=true</span><br></pre></td></tr></table></figure>\n\n<p>新建一个aria2.session，用于存储正在下载的一些信息</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch /etc/aria2/aria2.session</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h1><p>启动文件配置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/sh</span><br><span class=\"line\">### BEGIN INIT INFO</span><br><span class=\"line\"># Provides:          aria2</span><br><span class=\"line\"># Required-Start:    $remote_fs $network</span><br><span class=\"line\"># Required-Stop:     $remote_fs $network</span><br><span class=\"line\"># Default-Start:     2 3 4 5</span><br><span class=\"line\"># Default-Stop:      0 1 6</span><br><span class=\"line\"># Short-Description: Aria2 Downloader</span><br><span class=\"line\">### END INIT INFO</span><br><span class=\"line\">case &quot;$1&quot; in</span><br><span class=\"line\">start)</span><br><span class=\"line\">    echo -n &quot;Starting aria2cn&quot;</span><br><span class=\"line\">    sudo -u root aria2c --conf-path=/etc/aria2/aria2.conf -D</span><br><span class=\"line\">    #sudo -u后面的是你正在使用的用户名，因为我用的root</span><br><span class=\"line\">;;</span><br><span class=\"line\">stop)</span><br><span class=\"line\">    echo -n &quot;Shutting down aria2c &quot;</span><br><span class=\"line\">    killall aria2c</span><br><span class=\"line\">;;</span><br><span class=\"line\">restart)</span><br><span class=\"line\">    echo -n &quot;Shutting down aria2c  &quot;</span><br><span class=\"line\">    killall aria2c</span><br><span class=\"line\">sleep 3</span><br><span class=\"line\">echo -n &quot;Starting aria2c&quot;</span><br><span class=\"line\">    sudo -u root aria2c --conf-path=/etc/aria2/aria2.conf -D</span><br><span class=\"line\">    #同上面的一样，根据自己的用户名改root。</span><br><span class=\"line\">;;</span><br><span class=\"line\">*)</span><br><span class=\"line\">    echo &#x27;Usage:&#x27; `basename $0` &#x27;[option]&#x27;</span><br><span class=\"line\">    echo &#x27;Available option:&#x27;</span><br><span class=\"line\">    for option in start stop restart</span><br><span class=\"line\">    do</span><br><span class=\"line\">    echo &#x27;  -&#x27; $option</span><br><span class=\"line\">    done</span><br><span class=\"line\">;;</span><br><span class=\"line\">esac</span><br></pre></td></tr></table></figure>\n\n<p>给启动文件一个权限以及开机自动运行aria2</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chmod 755 /etc/init.d/aria2c</span><br><span class=\"line\">update-rc.d aria2c defaults</span><br></pre></td></tr></table></figure>\n\n<p>启动aria2</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service aria2c start</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h1><ul>\n<li><a href=\"https://www.lucktang.com/2559.html\">https://www.lucktang.com/2559.html</a></li>\n<li><a href=\"https://www.easegamer.com/?p=483\">https://www.easegamer.com/?p=483</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"下载源码\"><a href=\"#下载源码\" class=\"headerlink\" title=\"下载源码\"></a>下载源码</h1><p>安装一些必要的依赖环境</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt install -y libcurl4-openssl-dev libevent-dev \\</span><br><span class=\"line\">                ca-certificates libssl-dev pkg-config \\</span><br><span class=\"line\">                build-essential intltool libgcrypt-dev \\</span><br><span class=\"line\">                libssl-dev libxml2-dev</span><br></pre></td></tr></table></figure>\n\n<p>下载最新的aria2的源码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget --no-check-certificate https://github.com/aria2/aria2/releases/download/release-1.31.0/aria2-1.31.0.tar.gz</span><br><span class=\"line\">tar zxf aria2-1.31.0.tar.gz</span><br><span class=\"line\">cd ./aria2-1.31.0</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"修改源码\"><a href=\"#修改源码\" class=\"headerlink\" title=\"修改源码\"></a>修改源码</h1><p>Aria2的参数中<code>-max-server-connection</code>和<code>-min-split-files</code>很大程度上决定了网盘的下载速度。<br>在这里我将<code>-max-server-connection</code>最高设置为256，<code>-min-split-files</code>最小设置为256k。</p>","more":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#aira2的基本配置选项大多都存储在文件OptionHandlerFactory.cc中</span><br><span class=\"line\">vi src/OptionHandlerFactory.cc</span><br><span class=\"line\"></span><br><span class=\"line\">#定位到441行</span><br><span class=\"line\">#将服务器最大连接数16修改为256</span><br><span class=\"line\">OptionHandler* op(new NumberOptionHandler(PREF_MAX_CONNECTION_PER_SERVER,</span><br><span class=\"line\">                                          TEXT_MAX_CONNECTION_PER_SERVER,</span><br><span class=\"line\">                                       // &quot;1&quot;, 1, 16, &#x27;x&#x27;));</span><br><span class=\"line\">                                          &quot;1&quot;, 1, 256, &#x27;x&#x27;));</span><br><span class=\"line\">#定位到第503行</span><br><span class=\"line\">#将最文件分片大小设置为256_k</span><br><span class=\"line\">#到此源代码需要修改的地方改完了</span><br><span class=\"line\">OptionHandler* op(new UnitNumberOptionHandler(</span><br><span class=\"line\">//PREF_MIN_SPLIT_SIZE, TEXT_MIN_SPLIT_SIZE, &quot;1M&quot;, 1_m, 1_g, &#x27;k&#x27;));</span><br><span class=\"line\"> PREF_MIN_SPLIT_SIZE, TEXT_MIN_SPLIT_SIZE, &quot;1M&quot;, 256_k, 1_g, &#x27;k&#x27;));</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"编译前的参数设置\"><a href=\"#编译前的参数设置\" class=\"headerlink\" title=\"编译前的参数设置\"></a>编译前的参数设置</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure</span><br></pre></td></tr></table></figure>\n\n<p>编译</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make</span><br></pre></td></tr></table></figure>\n\n<p>编译完成之后</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp src/aria2c /usr/local/bin</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"查看安装是否成功\"><a href=\"#查看安装是否成功\" class=\"headerlink\" title=\"查看安装是否成功\"></a>查看安装是否成功</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aria2c -v</span><br></pre></td></tr></table></figure>\n\n<p>如果能显示版本号，就表示成功。</p>\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><p>在&#x2F;etc里新建一个aria2的目录,新建配置文件aria2.conf</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /etc/aria2</span><br><span class=\"line\">vi /etc/aria2/aria2.conf</span><br></pre></td></tr></table></figure>\n\n<p>插入以下内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dir=/home/wen/Downloads  # 这里需要改成绝对路径</span><br><span class=\"line\">disable-ipv6=true</span><br><span class=\"line\">enable-rpc=true</span><br><span class=\"line\">rpc-allow-origin-all=true</span><br><span class=\"line\">rpc-listen-all=true</span><br><span class=\"line\">rpc-listen-port=6800</span><br><span class=\"line\">continue=true</span><br><span class=\"line\">input-file=/etc/aria2/aria2.session</span><br><span class=\"line\">#rpc-user=admin</span><br><span class=\"line\">#rpc-passwd=password</span><br><span class=\"line\">save-session=/etc/aria2/aria2.session</span><br><span class=\"line\">save-session-interval=7200</span><br><span class=\"line\">max-concurrent-downloads=20</span><br><span class=\"line\">max-connection-per-server=256</span><br><span class=\"line\">min-split-size=256k</span><br><span class=\"line\">#log=/var/log/aria2/aria2.log</span><br><span class=\"line\"># Complete delete .aria2 files</span><br><span class=\"line\">on-download-complete=/etc/aria2/delete_aria2</span><br><span class=\"line\">max-overall-upload-limit=5K</span><br><span class=\"line\">max-upload-limit=5K</span><br><span class=\"line\">follow-torrent=true</span><br><span class=\"line\">#BT</span><br><span class=\"line\">bt-request-peer-speed-limit=200K</span><br><span class=\"line\">#PT download</span><br><span class=\"line\">bt-max-peers=48</span><br><span class=\"line\">listen-port=26834</span><br><span class=\"line\">enable-dht=false</span><br><span class=\"line\">bt-enable-lpd=false</span><br><span class=\"line\">enable-peer-exchange=false</span><br><span class=\"line\">user-agent=uTorrent/341(109279400)(30888)</span><br><span class=\"line\">peer-id-prefix=-UT341-</span><br><span class=\"line\">seed-ratio=0</span><br><span class=\"line\">force-save=true</span><br><span class=\"line\">bt-hash-check-seed=true</span><br><span class=\"line\">bt-seed-unverified=true</span><br><span class=\"line\">bt-save-metadata=true</span><br></pre></td></tr></table></figure>\n\n<p>新建一个aria2.session，用于存储正在下载的一些信息</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch /etc/aria2/aria2.session</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h1><p>启动文件配置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/sh</span><br><span class=\"line\">### BEGIN INIT INFO</span><br><span class=\"line\"># Provides:          aria2</span><br><span class=\"line\"># Required-Start:    $remote_fs $network</span><br><span class=\"line\"># Required-Stop:     $remote_fs $network</span><br><span class=\"line\"># Default-Start:     2 3 4 5</span><br><span class=\"line\"># Default-Stop:      0 1 6</span><br><span class=\"line\"># Short-Description: Aria2 Downloader</span><br><span class=\"line\">### END INIT INFO</span><br><span class=\"line\">case &quot;$1&quot; in</span><br><span class=\"line\">start)</span><br><span class=\"line\">    echo -n &quot;Starting aria2cn&quot;</span><br><span class=\"line\">    sudo -u root aria2c --conf-path=/etc/aria2/aria2.conf -D</span><br><span class=\"line\">    #sudo -u后面的是你正在使用的用户名，因为我用的root</span><br><span class=\"line\">;;</span><br><span class=\"line\">stop)</span><br><span class=\"line\">    echo -n &quot;Shutting down aria2c &quot;</span><br><span class=\"line\">    killall aria2c</span><br><span class=\"line\">;;</span><br><span class=\"line\">restart)</span><br><span class=\"line\">    echo -n &quot;Shutting down aria2c  &quot;</span><br><span class=\"line\">    killall aria2c</span><br><span class=\"line\">sleep 3</span><br><span class=\"line\">echo -n &quot;Starting aria2c&quot;</span><br><span class=\"line\">    sudo -u root aria2c --conf-path=/etc/aria2/aria2.conf -D</span><br><span class=\"line\">    #同上面的一样，根据自己的用户名改root。</span><br><span class=\"line\">;;</span><br><span class=\"line\">*)</span><br><span class=\"line\">    echo &#x27;Usage:&#x27; `basename $0` &#x27;[option]&#x27;</span><br><span class=\"line\">    echo &#x27;Available option:&#x27;</span><br><span class=\"line\">    for option in start stop restart</span><br><span class=\"line\">    do</span><br><span class=\"line\">    echo &#x27;  -&#x27; $option</span><br><span class=\"line\">    done</span><br><span class=\"line\">;;</span><br><span class=\"line\">esac</span><br></pre></td></tr></table></figure>\n\n<p>给启动文件一个权限以及开机自动运行aria2</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chmod 755 /etc/init.d/aria2c</span><br><span class=\"line\">update-rc.d aria2c defaults</span><br></pre></td></tr></table></figure>\n\n<p>启动aria2</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service aria2c start</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h1><ul>\n<li><a href=\"https://www.lucktang.com/2559.html\">https://www.lucktang.com/2559.html</a></li>\n<li><a href=\"https://www.easegamer.com/?p=483\">https://www.easegamer.com/?p=483</a></li>\n</ul>"},{"title":"Ubuntu装机后个人必装软件及配置","date":"2018-06-18T16:00:00.000Z","_content":"\n# Ubuntu 18 版本  \n\n## google-chrome\n\n```bash\n\nsudo wget https://repo.fdzh.org/chrome/google-chrome.list -P /etc/apt/sources.list.d/\n\nwget -q -O - https://dl.google.com/linux/linux_signing_key.pub  | sudo apt-key add -\n\nsudo apt-get update\n\nsudo apt-get install google-chrome-stable\n```\n\n安装完成之后，命令行启动\n\n`/usr/bin/google-chrome-stable`\n\n启动完成之后锁定到启动器即可。\n\n## shadowsocks-qt5\n\n```bash\nsudo add-apt-repository ppa:hzwhuang/ss-qt5\n\nsudo apt update\n\nsudo apt install shadowsocks-qt5\n```\n\nUbuntu18及以上版本会在`add-apt-repository`之后会报错，需要手动去改源中的版本信息：\n\n打开文件：\n\n```\nsudo vi /etc/apt/sources.list.d/hzwhuang-ubuntu-ss-qt5-bionic.list\n```\n\n将下面`bionic`改成 `xenial`:\n\n```\ndeb-src http://ppa.launchpad.net/hzwhuang/ss-qt5/ubuntu xenial main\n```\n\n## ssr-qt5与全局代理\n\n**注意，Ubuntu 18及以上版本，以下方式添加全局代理已经无效。目前的做法就是，在设置网络中，“网络代理”选择手动，填入相应的代理IP和端口。然后登录谷歌，同步插件SwitchyOmega，进行代理。成功之后再禁用设置网络中的网络代理。**\n\n[参考这里](https://www.litcc.com/2016/12/29/Ubuntu16-shadowsocks-pac/index.html)\n\n```bash\nsudo pip install genpac\npip install --upgrade genpac\n```\n\n### 下载规则\n\nhttps://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt 保存到本地gfwlist.txt\n\n在fwlist.txt 目录下，执行以下命令：\n\n```bash\ngenpac --pac-proxy \"SOCKS5 127.0.0.1:1080\" --gfwlist-proxy=\"SOCKS5 127.0.0.1:1080\" --gfwlist-local=gfwlist.txt --output=\"autoproxy.pac\"\n```\n\n### 设置全局代理\n\n点击：System settings > Network > Network Proxy，选择 Method 为 Automatic，设置 Configuration URL 为 autoproxy.pac 文件的路径，点击 Apply System Wide。\n格式如：file:///home/{user}/autoproxy.pac\n\nfile:///home/wen/Downloads/autoproxy.pac\n\n## gnome-tweak-tool\n\n界面优化工具，可以自定义系统主题、图标、锁屏界面内容、字体，管理插件等内容\n\n```bash\nsudo apt-get install gnome-tweak-tool\n```\n\n<!--more-->\n\n## 网易云音乐\n\n[官网搬运V1.1.0](http://d1.music.126.net/dmusic/netease-cloud-music_1.1.0_amd64_ubuntu.deb)\n\n[官网搬运V1.2.1](http://d1.music.126.net/dmusic/netease-cloud-music_1.2.1_amd64_ubuntu_20190428.deb)\n\n下载完成之后，在文件所在目录：\n\n```\nsudo dpkg -i netease-cloud-music_1.1.0_amd64_ubuntu16.04.deb\n```\n\n## WPS for Linux\n\n[官网搬运](https://wdl1.cache.wps.cn/wps/download/ep/Linux2019/8722/wps-office_11.1.0.8722_amd64.deb)\n\n下载完成之后，进行安装\n\n```bash\nsudo dpkg -i wps-office_11.1.0.8722_amd64.deb\n```\n\n### 以下是卸载libreOffice\n\n```\nsudo apt remove libreoffice-common\n\nsudo apt remove unity-webapps-common\n\nsudo apt autoremove\n```\n\n### 字体缺失问题\n\n下载字体包：\n\n[百度网盘](https://pan.baidu.com/s/1eS6xIzo)\n[谷歌云端硬盘共享](https://drive.google.com/file/d/1K2G1cVWYEUeV4IuciRzKAqlHxlzFr9HI/view?usp=sharing)\n\n下载之后解包，然后\n\n```bash\nsudo mv mtextra.ttf  symbol.ttf  WEBDINGS.TTF  wingding.ttf  WINGDNG2.ttf  WINGDNG3.ttf  /usr/share/fonts\nsudo fc-cache -f -v\n```\n\n重启wps 即可。\n\n## 安装MAC字体\n\n```bash\nwget -O mac-fonts.zip http://drive.noobslab.com/data/Mac-14.04/macfonts.zip\n\nsudo unzip mac-fonts.zip -d /usr/share/fonts; rm mac-fonts.zip\n\nsudo fc-cache -f -v\n```\n\n## 状态栏显示网速\n\n```bash\nsudo add-apt-repository ppa:nilarimogard/webupd8\nsudo apt-get update\nsudo apt-get install indicator-netspeed\n```\n\n之后把 `indicator-netspend` 加入到自动的脚本中去。[参考](https://blog.csdn.net/sinat_36219858/article/details/61195905)\n\n## 搜狗输入法\n\n一顿操作猛如虎：\n\n```\nwget http://cdn2.ime.sogou.com/dl/index/1524572264/sogoupinyin_2.2.0.0108_amd64.deb\n\nsudo dpkg -i sogoupinyin_2.2.0.0108_amd64.deb\nsudo apt install -f \nsudo dpkg -i sogoupinyin_2.2.0.0108_amd64.deb\nsudo rm sogoupinyin_2.2.0.0108_amd64.deb\n\n```\n安装完成之后，好像需要重启电脑一下，然后就可以通过 `CTR+空格键` 切换输入法了。\n\n## 美化终端\n\n### 安装zsh\n### 安装terminator\n## neovim 安装\n\n从vim 转移到neovim，个人觉得neovim用着可能更舒服一些，主要还是一些插件安装和用着舒服。\n\n** 以上的三个配置为了方便移至，已经写了一个自动部署的脚本，详见[ubuntu_auto_config](http://github.com/suadminwen/ubuntu_auto_config) **\n\n脚本完成之后，配置基本完成。\n然而，没有那么智能，安装的过程中，总会有一些问题，所以还有根据具体问题进行修复。\n\n## 截屏软件\n\n截屏软件更新了一下，发现一个好用又强大的软件：火焰截图。\n\n```\nsudo apt install flameshot\n```\n如果apt 无法安装，我们也可以通过github下载安装包安装：[https://github.com/lupoDharkael/flameshot/releases](https://github.com/lupoDharkael/flameshot/releases)\n选择ubuntu 18 版本的 `flameshot_0.6.0_bionic_x86_64.deb`下载，然后\n\n```\nsudo dpkg -i flameshot_0.6.0_bionic_x86_64.deb\n```\n安装完成之后，可以通过命令：`flameshot gui` 启动截图。\n\n然后配置到快捷键便可以愉快的截图啦！\n\n## Typora Markdown文档编辑器\n\nTypora，到目前为止，认为的Ubuntu下最好的Markdown编辑器。\n\n```\nwget -qO - https://typora.io/linux/public-key.asc | sudo apt-key add -\nsudo add-apt-repository 'deb https://typora.io/linux ./'\nsudo apt-get update\nsudo apt-get install typora\n```\n\n## guake 下拉终端\n\n```\nsudo apt install guake\n```\n\n安装完成之后，将guake添加到开机启动项中。\n\nF12：显示/隐藏Guake的程序界面。\n\n## electronic-wechat \n\nMac OS X 和 Linux 下更好用的微信客户端. 更多功能, 更少bug. 使用Electron构建.\n\n[github地址](https://github.com/kooritea/electronic-wechat)\n","source":"_posts/Ubuntu装机后个人必装软件及配置.md","raw":"---\ntitle: Ubuntu装机后个人必装软件及配置\ndate: 2018-06-19\ntags: [Ubuntu]\n---\n\n# Ubuntu 18 版本  \n\n## google-chrome\n\n```bash\n\nsudo wget https://repo.fdzh.org/chrome/google-chrome.list -P /etc/apt/sources.list.d/\n\nwget -q -O - https://dl.google.com/linux/linux_signing_key.pub  | sudo apt-key add -\n\nsudo apt-get update\n\nsudo apt-get install google-chrome-stable\n```\n\n安装完成之后，命令行启动\n\n`/usr/bin/google-chrome-stable`\n\n启动完成之后锁定到启动器即可。\n\n## shadowsocks-qt5\n\n```bash\nsudo add-apt-repository ppa:hzwhuang/ss-qt5\n\nsudo apt update\n\nsudo apt install shadowsocks-qt5\n```\n\nUbuntu18及以上版本会在`add-apt-repository`之后会报错，需要手动去改源中的版本信息：\n\n打开文件：\n\n```\nsudo vi /etc/apt/sources.list.d/hzwhuang-ubuntu-ss-qt5-bionic.list\n```\n\n将下面`bionic`改成 `xenial`:\n\n```\ndeb-src http://ppa.launchpad.net/hzwhuang/ss-qt5/ubuntu xenial main\n```\n\n## ssr-qt5与全局代理\n\n**注意，Ubuntu 18及以上版本，以下方式添加全局代理已经无效。目前的做法就是，在设置网络中，“网络代理”选择手动，填入相应的代理IP和端口。然后登录谷歌，同步插件SwitchyOmega，进行代理。成功之后再禁用设置网络中的网络代理。**\n\n[参考这里](https://www.litcc.com/2016/12/29/Ubuntu16-shadowsocks-pac/index.html)\n\n```bash\nsudo pip install genpac\npip install --upgrade genpac\n```\n\n### 下载规则\n\nhttps://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt 保存到本地gfwlist.txt\n\n在fwlist.txt 目录下，执行以下命令：\n\n```bash\ngenpac --pac-proxy \"SOCKS5 127.0.0.1:1080\" --gfwlist-proxy=\"SOCKS5 127.0.0.1:1080\" --gfwlist-local=gfwlist.txt --output=\"autoproxy.pac\"\n```\n\n### 设置全局代理\n\n点击：System settings > Network > Network Proxy，选择 Method 为 Automatic，设置 Configuration URL 为 autoproxy.pac 文件的路径，点击 Apply System Wide。\n格式如：file:///home/{user}/autoproxy.pac\n\nfile:///home/wen/Downloads/autoproxy.pac\n\n## gnome-tweak-tool\n\n界面优化工具，可以自定义系统主题、图标、锁屏界面内容、字体，管理插件等内容\n\n```bash\nsudo apt-get install gnome-tweak-tool\n```\n\n<!--more-->\n\n## 网易云音乐\n\n[官网搬运V1.1.0](http://d1.music.126.net/dmusic/netease-cloud-music_1.1.0_amd64_ubuntu.deb)\n\n[官网搬运V1.2.1](http://d1.music.126.net/dmusic/netease-cloud-music_1.2.1_amd64_ubuntu_20190428.deb)\n\n下载完成之后，在文件所在目录：\n\n```\nsudo dpkg -i netease-cloud-music_1.1.0_amd64_ubuntu16.04.deb\n```\n\n## WPS for Linux\n\n[官网搬运](https://wdl1.cache.wps.cn/wps/download/ep/Linux2019/8722/wps-office_11.1.0.8722_amd64.deb)\n\n下载完成之后，进行安装\n\n```bash\nsudo dpkg -i wps-office_11.1.0.8722_amd64.deb\n```\n\n### 以下是卸载libreOffice\n\n```\nsudo apt remove libreoffice-common\n\nsudo apt remove unity-webapps-common\n\nsudo apt autoremove\n```\n\n### 字体缺失问题\n\n下载字体包：\n\n[百度网盘](https://pan.baidu.com/s/1eS6xIzo)\n[谷歌云端硬盘共享](https://drive.google.com/file/d/1K2G1cVWYEUeV4IuciRzKAqlHxlzFr9HI/view?usp=sharing)\n\n下载之后解包，然后\n\n```bash\nsudo mv mtextra.ttf  symbol.ttf  WEBDINGS.TTF  wingding.ttf  WINGDNG2.ttf  WINGDNG3.ttf  /usr/share/fonts\nsudo fc-cache -f -v\n```\n\n重启wps 即可。\n\n## 安装MAC字体\n\n```bash\nwget -O mac-fonts.zip http://drive.noobslab.com/data/Mac-14.04/macfonts.zip\n\nsudo unzip mac-fonts.zip -d /usr/share/fonts; rm mac-fonts.zip\n\nsudo fc-cache -f -v\n```\n\n## 状态栏显示网速\n\n```bash\nsudo add-apt-repository ppa:nilarimogard/webupd8\nsudo apt-get update\nsudo apt-get install indicator-netspeed\n```\n\n之后把 `indicator-netspend` 加入到自动的脚本中去。[参考](https://blog.csdn.net/sinat_36219858/article/details/61195905)\n\n## 搜狗输入法\n\n一顿操作猛如虎：\n\n```\nwget http://cdn2.ime.sogou.com/dl/index/1524572264/sogoupinyin_2.2.0.0108_amd64.deb\n\nsudo dpkg -i sogoupinyin_2.2.0.0108_amd64.deb\nsudo apt install -f \nsudo dpkg -i sogoupinyin_2.2.0.0108_amd64.deb\nsudo rm sogoupinyin_2.2.0.0108_amd64.deb\n\n```\n安装完成之后，好像需要重启电脑一下，然后就可以通过 `CTR+空格键` 切换输入法了。\n\n## 美化终端\n\n### 安装zsh\n### 安装terminator\n## neovim 安装\n\n从vim 转移到neovim，个人觉得neovim用着可能更舒服一些，主要还是一些插件安装和用着舒服。\n\n** 以上的三个配置为了方便移至，已经写了一个自动部署的脚本，详见[ubuntu_auto_config](http://github.com/suadminwen/ubuntu_auto_config) **\n\n脚本完成之后，配置基本完成。\n然而，没有那么智能，安装的过程中，总会有一些问题，所以还有根据具体问题进行修复。\n\n## 截屏软件\n\n截屏软件更新了一下，发现一个好用又强大的软件：火焰截图。\n\n```\nsudo apt install flameshot\n```\n如果apt 无法安装，我们也可以通过github下载安装包安装：[https://github.com/lupoDharkael/flameshot/releases](https://github.com/lupoDharkael/flameshot/releases)\n选择ubuntu 18 版本的 `flameshot_0.6.0_bionic_x86_64.deb`下载，然后\n\n```\nsudo dpkg -i flameshot_0.6.0_bionic_x86_64.deb\n```\n安装完成之后，可以通过命令：`flameshot gui` 启动截图。\n\n然后配置到快捷键便可以愉快的截图啦！\n\n## Typora Markdown文档编辑器\n\nTypora，到目前为止，认为的Ubuntu下最好的Markdown编辑器。\n\n```\nwget -qO - https://typora.io/linux/public-key.asc | sudo apt-key add -\nsudo add-apt-repository 'deb https://typora.io/linux ./'\nsudo apt-get update\nsudo apt-get install typora\n```\n\n## guake 下拉终端\n\n```\nsudo apt install guake\n```\n\n安装完成之后，将guake添加到开机启动项中。\n\nF12：显示/隐藏Guake的程序界面。\n\n## electronic-wechat \n\nMac OS X 和 Linux 下更好用的微信客户端. 更多功能, 更少bug. 使用Electron构建.\n\n[github地址](https://github.com/kooritea/electronic-wechat)\n","slug":"Ubuntu装机后个人必装软件及配置","published":1,"updated":"2021-06-20T10:25:20.126Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluqa1hit0021rlog4ftg2pkx","content":"<h1 id=\"Ubuntu-18-版本\"><a href=\"#Ubuntu-18-版本\" class=\"headerlink\" title=\"Ubuntu 18 版本\"></a>Ubuntu 18 版本</h1><h2 id=\"google-chrome\"><a href=\"#google-chrome\" class=\"headerlink\" title=\"google-chrome\"></a>google-chrome</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">sudo wget https://repo.fdzh.org/chrome/google-chrome.list -P /etc/apt/sources.list.d/</span><br><span class=\"line\"></span><br><span class=\"line\">wget -q -O - https://dl.google.com/linux/linux_signing_key.pub  | sudo apt-key add -</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-get install google-chrome-stable</span><br></pre></td></tr></table></figure>\n\n<p>安装完成之后，命令行启动</p>\n<p><code>/usr/bin/google-chrome-stable</code></p>\n<p>启动完成之后锁定到启动器即可。</p>\n<h2 id=\"shadowsocks-qt5\"><a href=\"#shadowsocks-qt5\" class=\"headerlink\" title=\"shadowsocks-qt5\"></a>shadowsocks-qt5</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo add-apt-repository ppa:hzwhuang/ss-qt5</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt update</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt install shadowsocks-qt5</span><br></pre></td></tr></table></figure>\n\n<p>Ubuntu18及以上版本会在<code>add-apt-repository</code>之后会报错，需要手动去改源中的版本信息：</p>\n<p>打开文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vi /etc/apt/sources.list.d/hzwhuang-ubuntu-ss-qt5-bionic.list</span><br></pre></td></tr></table></figure>\n\n<p>将下面<code>bionic</code>改成 <code>xenial</code>:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deb-src http://ppa.launchpad.net/hzwhuang/ss-qt5/ubuntu xenial main</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ssr-qt5与全局代理\"><a href=\"#ssr-qt5与全局代理\" class=\"headerlink\" title=\"ssr-qt5与全局代理\"></a>ssr-qt5与全局代理</h2><p><strong>注意，Ubuntu 18及以上版本，以下方式添加全局代理已经无效。目前的做法就是，在设置网络中，“网络代理”选择手动，填入相应的代理IP和端口。然后登录谷歌，同步插件SwitchyOmega，进行代理。成功之后再禁用设置网络中的网络代理。</strong></p>\n<p><a href=\"https://www.litcc.com/2016/12/29/Ubuntu16-shadowsocks-pac/index.html\">参考这里</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pip install genpac</span><br><span class=\"line\">pip install --upgrade genpac</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"下载规则\"><a href=\"#下载规则\" class=\"headerlink\" title=\"下载规则\"></a>下载规则</h3><p><a href=\"https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt\">https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt</a> 保存到本地gfwlist.txt</p>\n<p>在fwlist.txt 目录下，执行以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">genpac --pac-proxy <span class=\"string\">&quot;SOCKS5 127.0.0.1:1080&quot;</span> --gfwlist-proxy=<span class=\"string\">&quot;SOCKS5 127.0.0.1:1080&quot;</span> --gfwlist-local=gfwlist.txt --output=<span class=\"string\">&quot;autoproxy.pac&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"设置全局代理\"><a href=\"#设置全局代理\" class=\"headerlink\" title=\"设置全局代理\"></a>设置全局代理</h3><p>点击：System settings &gt; Network &gt; Network Proxy，选择 Method 为 Automatic，设置 Configuration URL 为 autoproxy.pac 文件的路径，点击 Apply System Wide。<br>格式如：file:&#x2F;&#x2F;&#x2F;home&#x2F;{user}&#x2F;autoproxy.pac</p>\n<p>file:&#x2F;&#x2F;&#x2F;home&#x2F;wen&#x2F;Downloads&#x2F;autoproxy.pac</p>\n<h2 id=\"gnome-tweak-tool\"><a href=\"#gnome-tweak-tool\" class=\"headerlink\" title=\"gnome-tweak-tool\"></a>gnome-tweak-tool</h2><p>界面优化工具，可以自定义系统主题、图标、锁屏界面内容、字体，管理插件等内容</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install gnome-tweak-tool</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"网易云音乐\"><a href=\"#网易云音乐\" class=\"headerlink\" title=\"网易云音乐\"></a>网易云音乐</h2><p><a href=\"http://d1.music.126.net/dmusic/netease-cloud-music_1.1.0_amd64_ubuntu.deb\">官网搬运V1.1.0</a></p>\n<p><a href=\"http://d1.music.126.net/dmusic/netease-cloud-music_1.2.1_amd64_ubuntu_20190428.deb\">官网搬运V1.2.1</a></p>\n<p>下载完成之后，在文件所在目录：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo dpkg -i netease-cloud-music_1.1.0_amd64_ubuntu16.04.deb</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"WPS-for-Linux\"><a href=\"#WPS-for-Linux\" class=\"headerlink\" title=\"WPS for Linux\"></a>WPS for Linux</h2><p><a href=\"https://wdl1.cache.wps.cn/wps/download/ep/Linux2019/8722/wps-office_11.1.0.8722_amd64.deb\">官网搬运</a></p>\n<p>下载完成之后，进行安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo dpkg -i wps-office_11.1.0.8722_amd64.deb</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"以下是卸载libreOffice\"><a href=\"#以下是卸载libreOffice\" class=\"headerlink\" title=\"以下是卸载libreOffice\"></a>以下是卸载libreOffice</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt remove libreoffice-common</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt remove unity-webapps-common</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt autoremove</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"字体缺失问题\"><a href=\"#字体缺失问题\" class=\"headerlink\" title=\"字体缺失问题\"></a>字体缺失问题</h3><p>下载字体包：</p>\n<p><a href=\"https://pan.baidu.com/s/1eS6xIzo\">百度网盘</a><br><a href=\"https://drive.google.com/file/d/1K2G1cVWYEUeV4IuciRzKAqlHxlzFr9HI/view?usp=sharing\">谷歌云端硬盘共享</a></p>\n<p>下载之后解包，然后</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">mv</span> mtextra.ttf  symbol.ttf  WEBDINGS.TTF  wingding.ttf  WINGDNG2.ttf  WINGDNG3.ttf  /usr/share/fonts</span><br><span class=\"line\">sudo fc-cache -f -v</span><br></pre></td></tr></table></figure>\n\n<p>重启wps 即可。</p>\n<h2 id=\"安装MAC字体\"><a href=\"#安装MAC字体\" class=\"headerlink\" title=\"安装MAC字体\"></a>安装MAC字体</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -O mac-fonts.zip http://drive.noobslab.com/data/Mac-14.04/macfonts.zip</span><br><span class=\"line\"></span><br><span class=\"line\">sudo unzip mac-fonts.zip -d /usr/share/fonts; <span class=\"built_in\">rm</span> mac-fonts.zip</span><br><span class=\"line\"></span><br><span class=\"line\">sudo fc-cache -f -v</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"状态栏显示网速\"><a href=\"#状态栏显示网速\" class=\"headerlink\" title=\"状态栏显示网速\"></a>状态栏显示网速</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo add-apt-repository ppa:nilarimogard/webupd8</span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install indicator-netspeed</span><br></pre></td></tr></table></figure>\n\n<p>之后把 <code>indicator-netspend</code> 加入到自动的脚本中去。<a href=\"https://blog.csdn.net/sinat_36219858/article/details/61195905\">参考</a></p>\n<h2 id=\"搜狗输入法\"><a href=\"#搜狗输入法\" class=\"headerlink\" title=\"搜狗输入法\"></a>搜狗输入法</h2><p>一顿操作猛如虎：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://cdn2.ime.sogou.com/dl/index/1524572264/sogoupinyin_2.2.0.0108_amd64.deb</span><br><span class=\"line\"></span><br><span class=\"line\">sudo dpkg -i sogoupinyin_2.2.0.0108_amd64.deb</span><br><span class=\"line\">sudo apt install -f </span><br><span class=\"line\">sudo dpkg -i sogoupinyin_2.2.0.0108_amd64.deb</span><br><span class=\"line\">sudo rm sogoupinyin_2.2.0.0108_amd64.deb</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>安装完成之后，好像需要重启电脑一下，然后就可以通过 <code>CTR+空格键</code> 切换输入法了。</p>\n<h2 id=\"美化终端\"><a href=\"#美化终端\" class=\"headerlink\" title=\"美化终端\"></a>美化终端</h2><h3 id=\"安装zsh\"><a href=\"#安装zsh\" class=\"headerlink\" title=\"安装zsh\"></a>安装zsh</h3><h3 id=\"安装terminator\"><a href=\"#安装terminator\" class=\"headerlink\" title=\"安装terminator\"></a>安装terminator</h3><h2 id=\"neovim-安装\"><a href=\"#neovim-安装\" class=\"headerlink\" title=\"neovim 安装\"></a>neovim 安装</h2><p>从vim 转移到neovim，个人觉得neovim用着可能更舒服一些，主要还是一些插件安装和用着舒服。</p>\n<p>** 以上的三个配置为了方便移至，已经写了一个自动部署的脚本，详见<a href=\"http://github.com/suadminwen/ubuntu_auto_config\">ubuntu_auto_config</a> **</p>\n<p>脚本完成之后，配置基本完成。<br>然而，没有那么智能，安装的过程中，总会有一些问题，所以还有根据具体问题进行修复。</p>\n<h2 id=\"截屏软件\"><a href=\"#截屏软件\" class=\"headerlink\" title=\"截屏软件\"></a>截屏软件</h2><p>截屏软件更新了一下，发现一个好用又强大的软件：火焰截图。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install flameshot</span><br></pre></td></tr></table></figure>\n<p>如果apt 无法安装，我们也可以通过github下载安装包安装：<a href=\"https://github.com/lupoDharkael/flameshot/releases\">https://github.com/lupoDharkael/flameshot/releases</a><br>选择ubuntu 18 版本的 <code>flameshot_0.6.0_bionic_x86_64.deb</code>下载，然后</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo dpkg -i flameshot_0.6.0_bionic_x86_64.deb</span><br></pre></td></tr></table></figure>\n<p>安装完成之后，可以通过命令：<code>flameshot gui</code> 启动截图。</p>\n<p>然后配置到快捷键便可以愉快的截图啦！</p>\n<h2 id=\"Typora-Markdown文档编辑器\"><a href=\"#Typora-Markdown文档编辑器\" class=\"headerlink\" title=\"Typora Markdown文档编辑器\"></a>Typora Markdown文档编辑器</h2><p>Typora，到目前为止，认为的Ubuntu下最好的Markdown编辑器。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -qO - https://typora.io/linux/public-key.asc | sudo apt-key add -</span><br><span class=\"line\">sudo add-apt-repository &#x27;deb https://typora.io/linux ./&#x27;</span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install typora</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"guake-下拉终端\"><a href=\"#guake-下拉终端\" class=\"headerlink\" title=\"guake 下拉终端\"></a>guake 下拉终端</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install guake</span><br></pre></td></tr></table></figure>\n\n<p>安装完成之后，将guake添加到开机启动项中。</p>\n<p>F12：显示&#x2F;隐藏Guake的程序界面。</p>\n<h2 id=\"electronic-wechat\"><a href=\"#electronic-wechat\" class=\"headerlink\" title=\"electronic-wechat\"></a>electronic-wechat</h2><p>Mac OS X 和 Linux 下更好用的微信客户端. 更多功能, 更少bug. 使用Electron构建.</p>\n<p><a href=\"https://github.com/kooritea/electronic-wechat\">github地址</a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"Ubuntu-18-版本\"><a href=\"#Ubuntu-18-版本\" class=\"headerlink\" title=\"Ubuntu 18 版本\"></a>Ubuntu 18 版本</h1><h2 id=\"google-chrome\"><a href=\"#google-chrome\" class=\"headerlink\" title=\"google-chrome\"></a>google-chrome</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">sudo wget https://repo.fdzh.org/chrome/google-chrome.list -P /etc/apt/sources.list.d/</span><br><span class=\"line\"></span><br><span class=\"line\">wget -q -O - https://dl.google.com/linux/linux_signing_key.pub  | sudo apt-key add -</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-get install google-chrome-stable</span><br></pre></td></tr></table></figure>\n\n<p>安装完成之后，命令行启动</p>\n<p><code>/usr/bin/google-chrome-stable</code></p>\n<p>启动完成之后锁定到启动器即可。</p>\n<h2 id=\"shadowsocks-qt5\"><a href=\"#shadowsocks-qt5\" class=\"headerlink\" title=\"shadowsocks-qt5\"></a>shadowsocks-qt5</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo add-apt-repository ppa:hzwhuang/ss-qt5</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt update</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt install shadowsocks-qt5</span><br></pre></td></tr></table></figure>\n\n<p>Ubuntu18及以上版本会在<code>add-apt-repository</code>之后会报错，需要手动去改源中的版本信息：</p>\n<p>打开文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vi /etc/apt/sources.list.d/hzwhuang-ubuntu-ss-qt5-bionic.list</span><br></pre></td></tr></table></figure>\n\n<p>将下面<code>bionic</code>改成 <code>xenial</code>:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deb-src http://ppa.launchpad.net/hzwhuang/ss-qt5/ubuntu xenial main</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ssr-qt5与全局代理\"><a href=\"#ssr-qt5与全局代理\" class=\"headerlink\" title=\"ssr-qt5与全局代理\"></a>ssr-qt5与全局代理</h2><p><strong>注意，Ubuntu 18及以上版本，以下方式添加全局代理已经无效。目前的做法就是，在设置网络中，“网络代理”选择手动，填入相应的代理IP和端口。然后登录谷歌，同步插件SwitchyOmega，进行代理。成功之后再禁用设置网络中的网络代理。</strong></p>\n<p><a href=\"https://www.litcc.com/2016/12/29/Ubuntu16-shadowsocks-pac/index.html\">参考这里</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pip install genpac</span><br><span class=\"line\">pip install --upgrade genpac</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"下载规则\"><a href=\"#下载规则\" class=\"headerlink\" title=\"下载规则\"></a>下载规则</h3><p><a href=\"https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt\">https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt</a> 保存到本地gfwlist.txt</p>\n<p>在fwlist.txt 目录下，执行以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">genpac --pac-proxy <span class=\"string\">&quot;SOCKS5 127.0.0.1:1080&quot;</span> --gfwlist-proxy=<span class=\"string\">&quot;SOCKS5 127.0.0.1:1080&quot;</span> --gfwlist-local=gfwlist.txt --output=<span class=\"string\">&quot;autoproxy.pac&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"设置全局代理\"><a href=\"#设置全局代理\" class=\"headerlink\" title=\"设置全局代理\"></a>设置全局代理</h3><p>点击：System settings &gt; Network &gt; Network Proxy，选择 Method 为 Automatic，设置 Configuration URL 为 autoproxy.pac 文件的路径，点击 Apply System Wide。<br>格式如：file:&#x2F;&#x2F;&#x2F;home&#x2F;{user}&#x2F;autoproxy.pac</p>\n<p>file:&#x2F;&#x2F;&#x2F;home&#x2F;wen&#x2F;Downloads&#x2F;autoproxy.pac</p>\n<h2 id=\"gnome-tweak-tool\"><a href=\"#gnome-tweak-tool\" class=\"headerlink\" title=\"gnome-tweak-tool\"></a>gnome-tweak-tool</h2><p>界面优化工具，可以自定义系统主题、图标、锁屏界面内容、字体，管理插件等内容</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install gnome-tweak-tool</span><br></pre></td></tr></table></figure>","more":"<h2 id=\"网易云音乐\"><a href=\"#网易云音乐\" class=\"headerlink\" title=\"网易云音乐\"></a>网易云音乐</h2><p><a href=\"http://d1.music.126.net/dmusic/netease-cloud-music_1.1.0_amd64_ubuntu.deb\">官网搬运V1.1.0</a></p>\n<p><a href=\"http://d1.music.126.net/dmusic/netease-cloud-music_1.2.1_amd64_ubuntu_20190428.deb\">官网搬运V1.2.1</a></p>\n<p>下载完成之后，在文件所在目录：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo dpkg -i netease-cloud-music_1.1.0_amd64_ubuntu16.04.deb</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"WPS-for-Linux\"><a href=\"#WPS-for-Linux\" class=\"headerlink\" title=\"WPS for Linux\"></a>WPS for Linux</h2><p><a href=\"https://wdl1.cache.wps.cn/wps/download/ep/Linux2019/8722/wps-office_11.1.0.8722_amd64.deb\">官网搬运</a></p>\n<p>下载完成之后，进行安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo dpkg -i wps-office_11.1.0.8722_amd64.deb</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"以下是卸载libreOffice\"><a href=\"#以下是卸载libreOffice\" class=\"headerlink\" title=\"以下是卸载libreOffice\"></a>以下是卸载libreOffice</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt remove libreoffice-common</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt remove unity-webapps-common</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt autoremove</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"字体缺失问题\"><a href=\"#字体缺失问题\" class=\"headerlink\" title=\"字体缺失问题\"></a>字体缺失问题</h3><p>下载字体包：</p>\n<p><a href=\"https://pan.baidu.com/s/1eS6xIzo\">百度网盘</a><br><a href=\"https://drive.google.com/file/d/1K2G1cVWYEUeV4IuciRzKAqlHxlzFr9HI/view?usp=sharing\">谷歌云端硬盘共享</a></p>\n<p>下载之后解包，然后</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">mv</span> mtextra.ttf  symbol.ttf  WEBDINGS.TTF  wingding.ttf  WINGDNG2.ttf  WINGDNG3.ttf  /usr/share/fonts</span><br><span class=\"line\">sudo fc-cache -f -v</span><br></pre></td></tr></table></figure>\n\n<p>重启wps 即可。</p>\n<h2 id=\"安装MAC字体\"><a href=\"#安装MAC字体\" class=\"headerlink\" title=\"安装MAC字体\"></a>安装MAC字体</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -O mac-fonts.zip http://drive.noobslab.com/data/Mac-14.04/macfonts.zip</span><br><span class=\"line\"></span><br><span class=\"line\">sudo unzip mac-fonts.zip -d /usr/share/fonts; <span class=\"built_in\">rm</span> mac-fonts.zip</span><br><span class=\"line\"></span><br><span class=\"line\">sudo fc-cache -f -v</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"状态栏显示网速\"><a href=\"#状态栏显示网速\" class=\"headerlink\" title=\"状态栏显示网速\"></a>状态栏显示网速</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo add-apt-repository ppa:nilarimogard/webupd8</span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install indicator-netspeed</span><br></pre></td></tr></table></figure>\n\n<p>之后把 <code>indicator-netspend</code> 加入到自动的脚本中去。<a href=\"https://blog.csdn.net/sinat_36219858/article/details/61195905\">参考</a></p>\n<h2 id=\"搜狗输入法\"><a href=\"#搜狗输入法\" class=\"headerlink\" title=\"搜狗输入法\"></a>搜狗输入法</h2><p>一顿操作猛如虎：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://cdn2.ime.sogou.com/dl/index/1524572264/sogoupinyin_2.2.0.0108_amd64.deb</span><br><span class=\"line\"></span><br><span class=\"line\">sudo dpkg -i sogoupinyin_2.2.0.0108_amd64.deb</span><br><span class=\"line\">sudo apt install -f </span><br><span class=\"line\">sudo dpkg -i sogoupinyin_2.2.0.0108_amd64.deb</span><br><span class=\"line\">sudo rm sogoupinyin_2.2.0.0108_amd64.deb</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>安装完成之后，好像需要重启电脑一下，然后就可以通过 <code>CTR+空格键</code> 切换输入法了。</p>\n<h2 id=\"美化终端\"><a href=\"#美化终端\" class=\"headerlink\" title=\"美化终端\"></a>美化终端</h2><h3 id=\"安装zsh\"><a href=\"#安装zsh\" class=\"headerlink\" title=\"安装zsh\"></a>安装zsh</h3><h3 id=\"安装terminator\"><a href=\"#安装terminator\" class=\"headerlink\" title=\"安装terminator\"></a>安装terminator</h3><h2 id=\"neovim-安装\"><a href=\"#neovim-安装\" class=\"headerlink\" title=\"neovim 安装\"></a>neovim 安装</h2><p>从vim 转移到neovim，个人觉得neovim用着可能更舒服一些，主要还是一些插件安装和用着舒服。</p>\n<p>** 以上的三个配置为了方便移至，已经写了一个自动部署的脚本，详见<a href=\"http://github.com/suadminwen/ubuntu_auto_config\">ubuntu_auto_config</a> **</p>\n<p>脚本完成之后，配置基本完成。<br>然而，没有那么智能，安装的过程中，总会有一些问题，所以还有根据具体问题进行修复。</p>\n<h2 id=\"截屏软件\"><a href=\"#截屏软件\" class=\"headerlink\" title=\"截屏软件\"></a>截屏软件</h2><p>截屏软件更新了一下，发现一个好用又强大的软件：火焰截图。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install flameshot</span><br></pre></td></tr></table></figure>\n<p>如果apt 无法安装，我们也可以通过github下载安装包安装：<a href=\"https://github.com/lupoDharkael/flameshot/releases\">https://github.com/lupoDharkael/flameshot/releases</a><br>选择ubuntu 18 版本的 <code>flameshot_0.6.0_bionic_x86_64.deb</code>下载，然后</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo dpkg -i flameshot_0.6.0_bionic_x86_64.deb</span><br></pre></td></tr></table></figure>\n<p>安装完成之后，可以通过命令：<code>flameshot gui</code> 启动截图。</p>\n<p>然后配置到快捷键便可以愉快的截图啦！</p>\n<h2 id=\"Typora-Markdown文档编辑器\"><a href=\"#Typora-Markdown文档编辑器\" class=\"headerlink\" title=\"Typora Markdown文档编辑器\"></a>Typora Markdown文档编辑器</h2><p>Typora，到目前为止，认为的Ubuntu下最好的Markdown编辑器。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -qO - https://typora.io/linux/public-key.asc | sudo apt-key add -</span><br><span class=\"line\">sudo add-apt-repository &#x27;deb https://typora.io/linux ./&#x27;</span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install typora</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"guake-下拉终端\"><a href=\"#guake-下拉终端\" class=\"headerlink\" title=\"guake 下拉终端\"></a>guake 下拉终端</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install guake</span><br></pre></td></tr></table></figure>\n\n<p>安装完成之后，将guake添加到开机启动项中。</p>\n<p>F12：显示&#x2F;隐藏Guake的程序界面。</p>\n<h2 id=\"electronic-wechat\"><a href=\"#electronic-wechat\" class=\"headerlink\" title=\"electronic-wechat\"></a>electronic-wechat</h2><p>Mac OS X 和 Linux 下更好用的微信客户端. 更多功能, 更少bug. 使用Electron构建.</p>\n<p><a href=\"https://github.com/kooritea/electronic-wechat\">github地址</a></p>"},{"title":"WinRM连接报错SSL_UNSUPPORTED_PROTOCOL","date":"2024-04-01T16:00:00.000Z","_content":">  参考：https://docs.ansible.com/ansible/latest/os_guide/windows_winrm.html#tls-1-2-support\n\n\n\n使用WinRMl连接主机报错：\n\n\n```\nHTTPSConnectionPool(host='server', port=5986): Max retries exceeded with url: /wsman (Caused by SSLError(SSLError(1, '[SSL: UNSUPPORTED_PROTOCOL] unsupported protocol (_ssl.c:1056)')))\n```\n\n报错原因SSL协议版本不支持，需要升级服务器使用TLS v1.2或以上版本。Windows 8和Windows Server 2012默认安装并启用了TLS v1.2，但像Server 2008 R2和Windows 7这样的旧主机必须手动启用(这里待确认，发现Windows Server 2012 R2 也没有开启)。\n\n\n\n1 验证 Windows 主机支持的协议:\n\n\n\n```\nopenssl s_client -connect <hostname>:5986\n```\n\n输出将包含有关TLS会话的信息，协议行将显示已经协商的版本:\n\n<!-- more -->\n\n\n\n```\nConnecting to 172.16.52.159\nCONNECTED(00000003)\nCan't use SSL_get_servername\ndepth=0 CN=NODE-1\nverify error:num=18:self-signed certificate\nverify return:1\ndepth=0 CN=NODE-1\nverify return:1\n---\nCertificate chain\n 0 s:CN=NODE-1\n   i:CN=NODE-1\n   a:PKEY: rsaEncryption, 4096 (bit); sigalg: RSA-SHA256\n   v:NotBefore: Mar 28 10:09:27 2024 GMT; NotAfter: Mar 28 10:09:27 2027 GMT\n---\nServer certificate\n-----BEGIN CERTIFICATE-----\n...\n-----END CERTIFICATE-----\nsubject=CN=NODE-1\nissuer=CN=NODE-1\n---\nNo client certificate CA names sent\n---\nSSL handshake has read 1488 bytes and written 913 bytes\nVerification error: self-signed certificate\n---\nNew, TLSv1.2, Cipher is AES128-SHA256\nServer public key is 4096 bit\nSecure Renegotiation IS supported\nCompression: NONE\nExpansion: NONE\nNo ALPN negotiated\nSSL-Session:\n    Protocol  : TLSv1.2\n    Cipher    : AES128-SHA256\n    Session-ID: 384D000039807105789CF5CD1FA146D98784F7EB229076D3411C696F9A312405\n    Session-ID-ctx:\n    Master-Key: 535B8CA128376927EC549A2A7037686C62726DF9D6C840EDA4A81C9E2D6B54F2A7AF52FBADC22CF73FA95962106440E0\n    PSK identity: None\n    PSK identity hint: None\n    SRP username: None\n    Start Time: 1711706775\n    Timeout   : 7200 (sec)\n    Verify return code: 18 (self-signed certificate)\n    Extended master secret: no\n---\nread:errno=54\n```\n\n\n\n如果主机返回的是TLSv1，则应配置为启用TLS v1.2。您可以通过运行以下PowerShell脚本来实现这一点：(**注意需要重启**)\n\n\n\n```powershell\nFunction Enable-TLS12 {\n    param(\n        [ValidateSet(\"Server\", \"Client\")]\n        [String]$Component = \"Server\"\n    )\n\n    $protocols_path = 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols'\n    New-Item -Path \"$protocols_path\\TLS 1.2\\$Component\" -Force\n    New-ItemProperty -Path \"$protocols_path\\TLS 1.2\\$Component\" -Name Enabled -Value 1 -Type DWORD -Force\n    New-ItemProperty -Path \"$protocols_path\\TLS 1.2\\$Component\" -Name DisabledByDefault -Value 0 -Type DWORD -Force\n}\n\nEnable-TLS12 -Component Server\n\n# Not required but highly recommended to enable the Client side TLS 1.2 components\nEnable-TLS12 -Component Client\n\nRestart-Computer\n```\n\n\n\n2 查看服务器SSL/TLS配置\n\n在Windows服务器上，WinRM服务的SSL/TLS配置通常是由Windows操作系统的Schannel组件来处理的，而不是由WinRM服务本身来处理。因此，需要查看Schannel的配置来了解WinRM服务的SSL/TLS配置。\n\n以下是如何查看Schannel的SSL/TLS配置的步骤：\n\n- 打开注册表编辑器（Regedit）。你可以在开始菜单中搜索\"regedit\"，然后点击\"注册表编辑器\"应用来打开它。\n- 在注册表编辑器中，导航到以下路径：\n\n```\nHKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\n```\n\n- 在这个路径下，你应该能看到几个文件夹，比如\"SSL 2.0\"，\"SSL 3.0\"，\"TLS 1.0\"，\"TLS 1.1\"，\"TLS 1.2\"，\"TLS 1.3\"等。这些文件夹代表了服务器支持的SSL/TLS版本。\n\n![4392eee5146633841007471659f756d4.png](/blog-img/4feb779c3f3d46f5928913ee73b75f96.png)\n\n\n\n3 代码修改适配ssl2.0协议\n\n配置TLS1.2 需要重启服务器，对于客户环境该要求过于理想，所以需要代码改造。\n\n主要是重写 `requests.HTTPAdapter`类的 `init_poolmanager` 方法，在 `init_poolmanager` 方法中，创建了一个新的 SSL 上下文，并配置该上下文以使用 TLSv1 协议。然后，它通过 `ctx.options |= ssl.PROTOCOL_TLS` 语句启用了对所有版本的 SSL 和 TLS 协议的支持。最后，它创建了一个新的 `PoolManager` 实例，并将创建的 SSL 上下文传递给这个实例:\n\n\n\n```Python\nimport ssl\nimport requests\n\nfrom requests.adapters import HTTPAdapter\nfrom requests.packages.urllib3.poolmanager import PoolManager\nfrom requests.packages.urllib3.util import ssl_\n\n\nclass TLSAdapter(HTTPAdapter):\n    \"\"\"\n    适配器类，用于处理https请求\n    创建了一个新的 SSL 上下文，该上下文默认配置为使用 TLSV1 协议\n    options指定为ssl.PROTOCOL_TLS, 处理其他所有版本的 SSL 和 TLS 协议\n    使用：\n    self.session.mount('https://', TLSAdapter())\n    \"\"\"\n    def init_poolmanager(self, *pool_args, **pool_kwargs):\n        ctx = ssl_.create_urllib3_context(ssl.PROTOCOL_TLSv1)\n        ctx.options |= ssl.PROTOCOL_TLS\n        self.poolmanager = PoolManager(*pool_args,\n                                       ssl_context=ctx,\n                                       **pool_kwargs)\n# 这里示范怎么使用TLSAdapter类\nsession = requests.Session()\nsession.mount('https://', TLSAdapter())\n```\n\n\n\n我们对Winrm进行改造：\n\n\n\n```python\nclass WinrmExectuor(ExecutorBase, winrm.Session, metaclass=ExecutorMeta):\n    def __init__(self, target, auth, **kwargs):\n        ...\n    \n    def run_cmd(self, command, args=()):\n\n        # 兼容低版本协议ssl2.0\n        if not self.protocol.transport.session:\n            self.protocol.transport.build_session()\n        self.protocol.transport.session.mount('https://', TLSAdapter())\n        \n        shell_id = self.protocol.open_shell(codepage=54936)  # 54936(gb18030) or 936(gbk)\n        ...\n\n    def async_run_cmd(self, command, args=()):\n\n        # 兼容低版本协议ssl2.0\n        if not self.protocol.transport.session:\n            self.protocol.transport.build_session()\n        self.protocol.transport.session.mount('https://', TLSAdapter())\n\n        shell_id = self.protocol.open_shell(codepage=54936)  # 54936(gb18030) or 936(gbk)\n        ...\n\n\n```\n","source":"_posts/WinRM连接报错SSL_UNSUPPORTED_PROTOCOL.md","raw":"---\ntitle: WinRM连接报错SSL_UNSUPPORTED_PROTOCOL\ndate: 2024-04-02\ntags: [winrm,https]\n---\n>  参考：https://docs.ansible.com/ansible/latest/os_guide/windows_winrm.html#tls-1-2-support\n\n\n\n使用WinRMl连接主机报错：\n\n\n```\nHTTPSConnectionPool(host='server', port=5986): Max retries exceeded with url: /wsman (Caused by SSLError(SSLError(1, '[SSL: UNSUPPORTED_PROTOCOL] unsupported protocol (_ssl.c:1056)')))\n```\n\n报错原因SSL协议版本不支持，需要升级服务器使用TLS v1.2或以上版本。Windows 8和Windows Server 2012默认安装并启用了TLS v1.2，但像Server 2008 R2和Windows 7这样的旧主机必须手动启用(这里待确认，发现Windows Server 2012 R2 也没有开启)。\n\n\n\n1 验证 Windows 主机支持的协议:\n\n\n\n```\nopenssl s_client -connect <hostname>:5986\n```\n\n输出将包含有关TLS会话的信息，协议行将显示已经协商的版本:\n\n<!-- more -->\n\n\n\n```\nConnecting to 172.16.52.159\nCONNECTED(00000003)\nCan't use SSL_get_servername\ndepth=0 CN=NODE-1\nverify error:num=18:self-signed certificate\nverify return:1\ndepth=0 CN=NODE-1\nverify return:1\n---\nCertificate chain\n 0 s:CN=NODE-1\n   i:CN=NODE-1\n   a:PKEY: rsaEncryption, 4096 (bit); sigalg: RSA-SHA256\n   v:NotBefore: Mar 28 10:09:27 2024 GMT; NotAfter: Mar 28 10:09:27 2027 GMT\n---\nServer certificate\n-----BEGIN CERTIFICATE-----\n...\n-----END CERTIFICATE-----\nsubject=CN=NODE-1\nissuer=CN=NODE-1\n---\nNo client certificate CA names sent\n---\nSSL handshake has read 1488 bytes and written 913 bytes\nVerification error: self-signed certificate\n---\nNew, TLSv1.2, Cipher is AES128-SHA256\nServer public key is 4096 bit\nSecure Renegotiation IS supported\nCompression: NONE\nExpansion: NONE\nNo ALPN negotiated\nSSL-Session:\n    Protocol  : TLSv1.2\n    Cipher    : AES128-SHA256\n    Session-ID: 384D000039807105789CF5CD1FA146D98784F7EB229076D3411C696F9A312405\n    Session-ID-ctx:\n    Master-Key: 535B8CA128376927EC549A2A7037686C62726DF9D6C840EDA4A81C9E2D6B54F2A7AF52FBADC22CF73FA95962106440E0\n    PSK identity: None\n    PSK identity hint: None\n    SRP username: None\n    Start Time: 1711706775\n    Timeout   : 7200 (sec)\n    Verify return code: 18 (self-signed certificate)\n    Extended master secret: no\n---\nread:errno=54\n```\n\n\n\n如果主机返回的是TLSv1，则应配置为启用TLS v1.2。您可以通过运行以下PowerShell脚本来实现这一点：(**注意需要重启**)\n\n\n\n```powershell\nFunction Enable-TLS12 {\n    param(\n        [ValidateSet(\"Server\", \"Client\")]\n        [String]$Component = \"Server\"\n    )\n\n    $protocols_path = 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols'\n    New-Item -Path \"$protocols_path\\TLS 1.2\\$Component\" -Force\n    New-ItemProperty -Path \"$protocols_path\\TLS 1.2\\$Component\" -Name Enabled -Value 1 -Type DWORD -Force\n    New-ItemProperty -Path \"$protocols_path\\TLS 1.2\\$Component\" -Name DisabledByDefault -Value 0 -Type DWORD -Force\n}\n\nEnable-TLS12 -Component Server\n\n# Not required but highly recommended to enable the Client side TLS 1.2 components\nEnable-TLS12 -Component Client\n\nRestart-Computer\n```\n\n\n\n2 查看服务器SSL/TLS配置\n\n在Windows服务器上，WinRM服务的SSL/TLS配置通常是由Windows操作系统的Schannel组件来处理的，而不是由WinRM服务本身来处理。因此，需要查看Schannel的配置来了解WinRM服务的SSL/TLS配置。\n\n以下是如何查看Schannel的SSL/TLS配置的步骤：\n\n- 打开注册表编辑器（Regedit）。你可以在开始菜单中搜索\"regedit\"，然后点击\"注册表编辑器\"应用来打开它。\n- 在注册表编辑器中，导航到以下路径：\n\n```\nHKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\n```\n\n- 在这个路径下，你应该能看到几个文件夹，比如\"SSL 2.0\"，\"SSL 3.0\"，\"TLS 1.0\"，\"TLS 1.1\"，\"TLS 1.2\"，\"TLS 1.3\"等。这些文件夹代表了服务器支持的SSL/TLS版本。\n\n![4392eee5146633841007471659f756d4.png](/blog-img/4feb779c3f3d46f5928913ee73b75f96.png)\n\n\n\n3 代码修改适配ssl2.0协议\n\n配置TLS1.2 需要重启服务器，对于客户环境该要求过于理想，所以需要代码改造。\n\n主要是重写 `requests.HTTPAdapter`类的 `init_poolmanager` 方法，在 `init_poolmanager` 方法中，创建了一个新的 SSL 上下文，并配置该上下文以使用 TLSv1 协议。然后，它通过 `ctx.options |= ssl.PROTOCOL_TLS` 语句启用了对所有版本的 SSL 和 TLS 协议的支持。最后，它创建了一个新的 `PoolManager` 实例，并将创建的 SSL 上下文传递给这个实例:\n\n\n\n```Python\nimport ssl\nimport requests\n\nfrom requests.adapters import HTTPAdapter\nfrom requests.packages.urllib3.poolmanager import PoolManager\nfrom requests.packages.urllib3.util import ssl_\n\n\nclass TLSAdapter(HTTPAdapter):\n    \"\"\"\n    适配器类，用于处理https请求\n    创建了一个新的 SSL 上下文，该上下文默认配置为使用 TLSV1 协议\n    options指定为ssl.PROTOCOL_TLS, 处理其他所有版本的 SSL 和 TLS 协议\n    使用：\n    self.session.mount('https://', TLSAdapter())\n    \"\"\"\n    def init_poolmanager(self, *pool_args, **pool_kwargs):\n        ctx = ssl_.create_urllib3_context(ssl.PROTOCOL_TLSv1)\n        ctx.options |= ssl.PROTOCOL_TLS\n        self.poolmanager = PoolManager(*pool_args,\n                                       ssl_context=ctx,\n                                       **pool_kwargs)\n# 这里示范怎么使用TLSAdapter类\nsession = requests.Session()\nsession.mount('https://', TLSAdapter())\n```\n\n\n\n我们对Winrm进行改造：\n\n\n\n```python\nclass WinrmExectuor(ExecutorBase, winrm.Session, metaclass=ExecutorMeta):\n    def __init__(self, target, auth, **kwargs):\n        ...\n    \n    def run_cmd(self, command, args=()):\n\n        # 兼容低版本协议ssl2.0\n        if not self.protocol.transport.session:\n            self.protocol.transport.build_session()\n        self.protocol.transport.session.mount('https://', TLSAdapter())\n        \n        shell_id = self.protocol.open_shell(codepage=54936)  # 54936(gb18030) or 936(gbk)\n        ...\n\n    def async_run_cmd(self, command, args=()):\n\n        # 兼容低版本协议ssl2.0\n        if not self.protocol.transport.session:\n            self.protocol.transport.build_session()\n        self.protocol.transport.session.mount('https://', TLSAdapter())\n\n        shell_id = self.protocol.open_shell(codepage=54936)  # 54936(gb18030) or 936(gbk)\n        ...\n\n\n```\n","slug":"WinRM连接报错SSL_UNSUPPORTED_PROTOCOL","published":1,"updated":"2024-04-07T07:58:00.104Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluqa1hiu0024rloge7fvftbi","content":"<blockquote>\n<p> 参考：<a href=\"https://docs.ansible.com/ansible/latest/os_guide/windows_winrm.html#tls-1-2-support\">https://docs.ansible.com/ansible/latest/os_guide/windows_winrm.html#tls-1-2-support</a></p>\n</blockquote>\n<p>使用WinRMl连接主机报错：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTPSConnectionPool(host=&#x27;server&#x27;, port=5986): Max retries exceeded with url: /wsman (Caused by SSLError(SSLError(1, &#x27;[SSL: UNSUPPORTED_PROTOCOL] unsupported protocol (_ssl.c:1056)&#x27;)))</span><br></pre></td></tr></table></figure>\n\n<p>报错原因SSL协议版本不支持，需要升级服务器使用TLS v1.2或以上版本。Windows 8和Windows Server 2012默认安装并启用了TLS v1.2，但像Server 2008 R2和Windows 7这样的旧主机必须手动启用(这里待确认，发现Windows Server 2012 R2 也没有开启)。</p>\n<p>1 验证 Windows 主机支持的协议:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl s_client -connect &lt;hostname&gt;:5986</span><br></pre></td></tr></table></figure>\n\n<p>输出将包含有关TLS会话的信息，协议行将显示已经协商的版本:</p>\n<span id=\"more\"></span>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Connecting to 172.16.52.159</span><br><span class=\"line\">CONNECTED(00000003)</span><br><span class=\"line\">Can&#x27;t use SSL_get_servername</span><br><span class=\"line\">depth=0 CN=NODE-1</span><br><span class=\"line\">verify error:num=18:self-signed certificate</span><br><span class=\"line\">verify return:1</span><br><span class=\"line\">depth=0 CN=NODE-1</span><br><span class=\"line\">verify return:1</span><br><span class=\"line\">---</span><br><span class=\"line\">Certificate chain</span><br><span class=\"line\"> 0 s:CN=NODE-1</span><br><span class=\"line\">   i:CN=NODE-1</span><br><span class=\"line\">   a:PKEY: rsaEncryption, 4096 (bit); sigalg: RSA-SHA256</span><br><span class=\"line\">   v:NotBefore: Mar 28 10:09:27 2024 GMT; NotAfter: Mar 28 10:09:27 2027 GMT</span><br><span class=\"line\">---</span><br><span class=\"line\">Server certificate</span><br><span class=\"line\">-----BEGIN CERTIFICATE-----</span><br><span class=\"line\">...</span><br><span class=\"line\">-----END CERTIFICATE-----</span><br><span class=\"line\">subject=CN=NODE-1</span><br><span class=\"line\">issuer=CN=NODE-1</span><br><span class=\"line\">---</span><br><span class=\"line\">No client certificate CA names sent</span><br><span class=\"line\">---</span><br><span class=\"line\">SSL handshake has read 1488 bytes and written 913 bytes</span><br><span class=\"line\">Verification error: self-signed certificate</span><br><span class=\"line\">---</span><br><span class=\"line\">New, TLSv1.2, Cipher is AES128-SHA256</span><br><span class=\"line\">Server public key is 4096 bit</span><br><span class=\"line\">Secure Renegotiation IS supported</span><br><span class=\"line\">Compression: NONE</span><br><span class=\"line\">Expansion: NONE</span><br><span class=\"line\">No ALPN negotiated</span><br><span class=\"line\">SSL-Session:</span><br><span class=\"line\">    Protocol  : TLSv1.2</span><br><span class=\"line\">    Cipher    : AES128-SHA256</span><br><span class=\"line\">    Session-ID: 384D000039807105789CF5CD1FA146D98784F7EB229076D3411C696F9A312405</span><br><span class=\"line\">    Session-ID-ctx:</span><br><span class=\"line\">    Master-Key: 535B8CA128376927EC549A2A7037686C62726DF9D6C840EDA4A81C9E2D6B54F2A7AF52FBADC22CF73FA95962106440E0</span><br><span class=\"line\">    PSK identity: None</span><br><span class=\"line\">    PSK identity hint: None</span><br><span class=\"line\">    SRP username: None</span><br><span class=\"line\">    Start Time: 1711706775</span><br><span class=\"line\">    Timeout   : 7200 (sec)</span><br><span class=\"line\">    Verify return code: 18 (self-signed certificate)</span><br><span class=\"line\">    Extended master secret: no</span><br><span class=\"line\">---</span><br><span class=\"line\">read:errno=54</span><br></pre></td></tr></table></figure>\n\n\n\n<p>如果主机返回的是TLSv1，则应配置为启用TLS v1.2。您可以通过运行以下PowerShell脚本来实现这一点：(<strong>注意需要重启</strong>)</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">Function</span> <span class=\"title\">Enable-TLS12</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">param</span>(</span><br><span class=\"line\">        [<span class=\"type\">ValidateSet</span>(<span class=\"string\">&quot;Server&quot;</span>, <span class=\"string\">&quot;Client&quot;</span>)]</span><br><span class=\"line\">        [<span class=\"built_in\">String</span>]<span class=\"variable\">$Component</span> = <span class=\"string\">&quot;Server&quot;</span></span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable\">$protocols_path</span> = <span class=\"string\">&#x27;HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols&#x27;</span></span><br><span class=\"line\">    <span class=\"built_in\">New-Item</span> <span class=\"literal\">-Path</span> <span class=\"string\">&quot;<span class=\"variable\">$protocols_path</span>\\TLS 1.2\\<span class=\"variable\">$Component</span>&quot;</span> <span class=\"literal\">-Force</span></span><br><span class=\"line\">    <span class=\"built_in\">New-ItemProperty</span> <span class=\"literal\">-Path</span> <span class=\"string\">&quot;<span class=\"variable\">$protocols_path</span>\\TLS 1.2\\<span class=\"variable\">$Component</span>&quot;</span> <span class=\"literal\">-Name</span> Enabled <span class=\"literal\">-Value</span> <span class=\"number\">1</span> <span class=\"literal\">-Type</span> DWORD <span class=\"literal\">-Force</span></span><br><span class=\"line\">    <span class=\"built_in\">New-ItemProperty</span> <span class=\"literal\">-Path</span> <span class=\"string\">&quot;<span class=\"variable\">$protocols_path</span>\\TLS 1.2\\<span class=\"variable\">$Component</span>&quot;</span> <span class=\"literal\">-Name</span> DisabledByDefault <span class=\"literal\">-Value</span> <span class=\"number\">0</span> <span class=\"literal\">-Type</span> DWORD <span class=\"literal\">-Force</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Enable-TLS12</span> <span class=\"literal\">-Component</span> Server</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Not required but highly recommended to enable the Client side TLS 1.2 components</span></span><br><span class=\"line\"><span class=\"built_in\">Enable-TLS12</span> <span class=\"literal\">-Component</span> Client</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Restart-Computer</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>2 查看服务器SSL&#x2F;TLS配置</p>\n<p>在Windows服务器上，WinRM服务的SSL&#x2F;TLS配置通常是由Windows操作系统的Schannel组件来处理的，而不是由WinRM服务本身来处理。因此，需要查看Schannel的配置来了解WinRM服务的SSL&#x2F;TLS配置。</p>\n<p>以下是如何查看Schannel的SSL&#x2F;TLS配置的步骤：</p>\n<ul>\n<li>打开注册表编辑器（Regedit）。你可以在开始菜单中搜索”regedit”，然后点击”注册表编辑器”应用来打开它。</li>\n<li>在注册表编辑器中，导航到以下路径：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在这个路径下，你应该能看到几个文件夹，比如”SSL 2.0”，”SSL 3.0”，”TLS 1.0”，”TLS 1.1”，”TLS 1.2”，”TLS 1.3”等。这些文件夹代表了服务器支持的SSL&#x2F;TLS版本。</li>\n</ul>\n<p><img src=\"/blog-img/4feb779c3f3d46f5928913ee73b75f96.png\" alt=\"4392eee5146633841007471659f756d4.png\"></p>\n<p>3 代码修改适配ssl2.0协议</p>\n<p>配置TLS1.2 需要重启服务器，对于客户环境该要求过于理想，所以需要代码改造。</p>\n<p>主要是重写 <code>requests.HTTPAdapter</code>类的 <code>init_poolmanager</code> 方法，在 <code>init_poolmanager</code> 方法中，创建了一个新的 SSL 上下文，并配置该上下文以使用 TLSv1 协议。然后，它通过 <code>ctx.options |= ssl.PROTOCOL_TLS</code> 语句启用了对所有版本的 SSL 和 TLS 协议的支持。最后，它创建了一个新的 <code>PoolManager</code> 实例，并将创建的 SSL 上下文传递给这个实例:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> ssl</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> requests.adapters <span class=\"keyword\">import</span> HTTPAdapter</span><br><span class=\"line\"><span class=\"keyword\">from</span> requests.packages.urllib3.poolmanager <span class=\"keyword\">import</span> PoolManager</span><br><span class=\"line\"><span class=\"keyword\">from</span> requests.packages.urllib3.util <span class=\"keyword\">import</span> ssl_</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TLSAdapter</span>(<span class=\"title class_ inherited__\">HTTPAdapter</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    适配器类，用于处理https请求</span></span><br><span class=\"line\"><span class=\"string\">    创建了一个新的 SSL 上下文，该上下文默认配置为使用 TLSV1 协议</span></span><br><span class=\"line\"><span class=\"string\">    options指定为ssl.PROTOCOL_TLS, 处理其他所有版本的 SSL 和 TLS 协议</span></span><br><span class=\"line\"><span class=\"string\">    使用：</span></span><br><span class=\"line\"><span class=\"string\">    self.session.mount(&#x27;https://&#x27;, TLSAdapter())</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">init_poolmanager</span>(<span class=\"params\">self, *pool_args, **pool_kwargs</span>):</span><br><span class=\"line\">        ctx = ssl_.create_urllib3_context(ssl.PROTOCOL_TLSv1)</span><br><span class=\"line\">        ctx.options |= ssl.PROTOCOL_TLS</span><br><span class=\"line\">        self.poolmanager = PoolManager(*pool_args,</span><br><span class=\"line\">                                       ssl_context=ctx,</span><br><span class=\"line\">                                       **pool_kwargs)</span><br><span class=\"line\"><span class=\"comment\"># 这里示范怎么使用TLSAdapter类</span></span><br><span class=\"line\">session = requests.Session()</span><br><span class=\"line\">session.mount(<span class=\"string\">&#x27;https://&#x27;</span>, TLSAdapter())</span><br></pre></td></tr></table></figure>\n\n\n\n<p>我们对Winrm进行改造：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">WinrmExectuor</span>(ExecutorBase, winrm.Session, metaclass=ExecutorMeta):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, target, auth, **kwargs</span>):</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">run_cmd</span>(<span class=\"params\">self, command, args=(<span class=\"params\"></span>)</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 兼容低版本协议ssl2.0</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> self.protocol.transport.session:</span><br><span class=\"line\">            self.protocol.transport.build_session()</span><br><span class=\"line\">        self.protocol.transport.session.mount(<span class=\"string\">&#x27;https://&#x27;</span>, TLSAdapter())</span><br><span class=\"line\">        </span><br><span class=\"line\">        shell_id = self.protocol.open_shell(codepage=<span class=\"number\">54936</span>)  <span class=\"comment\"># 54936(gb18030) or 936(gbk)</span></span><br><span class=\"line\">        ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">async_run_cmd</span>(<span class=\"params\">self, command, args=(<span class=\"params\"></span>)</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 兼容低版本协议ssl2.0</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> self.protocol.transport.session:</span><br><span class=\"line\">            self.protocol.transport.build_session()</span><br><span class=\"line\">        self.protocol.transport.session.mount(<span class=\"string\">&#x27;https://&#x27;</span>, TLSAdapter())</span><br><span class=\"line\"></span><br><span class=\"line\">        shell_id = self.protocol.open_shell(codepage=<span class=\"number\">54936</span>)  <span class=\"comment\"># 54936(gb18030) or 936(gbk)</span></span><br><span class=\"line\">        ...</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p> 参考：<a href=\"https://docs.ansible.com/ansible/latest/os_guide/windows_winrm.html#tls-1-2-support\">https://docs.ansible.com/ansible/latest/os_guide/windows_winrm.html#tls-1-2-support</a></p>\n</blockquote>\n<p>使用WinRMl连接主机报错：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTPSConnectionPool(host=&#x27;server&#x27;, port=5986): Max retries exceeded with url: /wsman (Caused by SSLError(SSLError(1, &#x27;[SSL: UNSUPPORTED_PROTOCOL] unsupported protocol (_ssl.c:1056)&#x27;)))</span><br></pre></td></tr></table></figure>\n\n<p>报错原因SSL协议版本不支持，需要升级服务器使用TLS v1.2或以上版本。Windows 8和Windows Server 2012默认安装并启用了TLS v1.2，但像Server 2008 R2和Windows 7这样的旧主机必须手动启用(这里待确认，发现Windows Server 2012 R2 也没有开启)。</p>\n<p>1 验证 Windows 主机支持的协议:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl s_client -connect &lt;hostname&gt;:5986</span><br></pre></td></tr></table></figure>\n\n<p>输出将包含有关TLS会话的信息，协议行将显示已经协商的版本:</p>","more":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Connecting to 172.16.52.159</span><br><span class=\"line\">CONNECTED(00000003)</span><br><span class=\"line\">Can&#x27;t use SSL_get_servername</span><br><span class=\"line\">depth=0 CN=NODE-1</span><br><span class=\"line\">verify error:num=18:self-signed certificate</span><br><span class=\"line\">verify return:1</span><br><span class=\"line\">depth=0 CN=NODE-1</span><br><span class=\"line\">verify return:1</span><br><span class=\"line\">---</span><br><span class=\"line\">Certificate chain</span><br><span class=\"line\"> 0 s:CN=NODE-1</span><br><span class=\"line\">   i:CN=NODE-1</span><br><span class=\"line\">   a:PKEY: rsaEncryption, 4096 (bit); sigalg: RSA-SHA256</span><br><span class=\"line\">   v:NotBefore: Mar 28 10:09:27 2024 GMT; NotAfter: Mar 28 10:09:27 2027 GMT</span><br><span class=\"line\">---</span><br><span class=\"line\">Server certificate</span><br><span class=\"line\">-----BEGIN CERTIFICATE-----</span><br><span class=\"line\">...</span><br><span class=\"line\">-----END CERTIFICATE-----</span><br><span class=\"line\">subject=CN=NODE-1</span><br><span class=\"line\">issuer=CN=NODE-1</span><br><span class=\"line\">---</span><br><span class=\"line\">No client certificate CA names sent</span><br><span class=\"line\">---</span><br><span class=\"line\">SSL handshake has read 1488 bytes and written 913 bytes</span><br><span class=\"line\">Verification error: self-signed certificate</span><br><span class=\"line\">---</span><br><span class=\"line\">New, TLSv1.2, Cipher is AES128-SHA256</span><br><span class=\"line\">Server public key is 4096 bit</span><br><span class=\"line\">Secure Renegotiation IS supported</span><br><span class=\"line\">Compression: NONE</span><br><span class=\"line\">Expansion: NONE</span><br><span class=\"line\">No ALPN negotiated</span><br><span class=\"line\">SSL-Session:</span><br><span class=\"line\">    Protocol  : TLSv1.2</span><br><span class=\"line\">    Cipher    : AES128-SHA256</span><br><span class=\"line\">    Session-ID: 384D000039807105789CF5CD1FA146D98784F7EB229076D3411C696F9A312405</span><br><span class=\"line\">    Session-ID-ctx:</span><br><span class=\"line\">    Master-Key: 535B8CA128376927EC549A2A7037686C62726DF9D6C840EDA4A81C9E2D6B54F2A7AF52FBADC22CF73FA95962106440E0</span><br><span class=\"line\">    PSK identity: None</span><br><span class=\"line\">    PSK identity hint: None</span><br><span class=\"line\">    SRP username: None</span><br><span class=\"line\">    Start Time: 1711706775</span><br><span class=\"line\">    Timeout   : 7200 (sec)</span><br><span class=\"line\">    Verify return code: 18 (self-signed certificate)</span><br><span class=\"line\">    Extended master secret: no</span><br><span class=\"line\">---</span><br><span class=\"line\">read:errno=54</span><br></pre></td></tr></table></figure>\n\n\n\n<p>如果主机返回的是TLSv1，则应配置为启用TLS v1.2。您可以通过运行以下PowerShell脚本来实现这一点：(<strong>注意需要重启</strong>)</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">Function</span> <span class=\"title\">Enable-TLS12</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">param</span>(</span><br><span class=\"line\">        [<span class=\"type\">ValidateSet</span>(<span class=\"string\">&quot;Server&quot;</span>, <span class=\"string\">&quot;Client&quot;</span>)]</span><br><span class=\"line\">        [<span class=\"built_in\">String</span>]<span class=\"variable\">$Component</span> = <span class=\"string\">&quot;Server&quot;</span></span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable\">$protocols_path</span> = <span class=\"string\">&#x27;HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols&#x27;</span></span><br><span class=\"line\">    <span class=\"built_in\">New-Item</span> <span class=\"literal\">-Path</span> <span class=\"string\">&quot;<span class=\"variable\">$protocols_path</span>\\TLS 1.2\\<span class=\"variable\">$Component</span>&quot;</span> <span class=\"literal\">-Force</span></span><br><span class=\"line\">    <span class=\"built_in\">New-ItemProperty</span> <span class=\"literal\">-Path</span> <span class=\"string\">&quot;<span class=\"variable\">$protocols_path</span>\\TLS 1.2\\<span class=\"variable\">$Component</span>&quot;</span> <span class=\"literal\">-Name</span> Enabled <span class=\"literal\">-Value</span> <span class=\"number\">1</span> <span class=\"literal\">-Type</span> DWORD <span class=\"literal\">-Force</span></span><br><span class=\"line\">    <span class=\"built_in\">New-ItemProperty</span> <span class=\"literal\">-Path</span> <span class=\"string\">&quot;<span class=\"variable\">$protocols_path</span>\\TLS 1.2\\<span class=\"variable\">$Component</span>&quot;</span> <span class=\"literal\">-Name</span> DisabledByDefault <span class=\"literal\">-Value</span> <span class=\"number\">0</span> <span class=\"literal\">-Type</span> DWORD <span class=\"literal\">-Force</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Enable-TLS12</span> <span class=\"literal\">-Component</span> Server</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Not required but highly recommended to enable the Client side TLS 1.2 components</span></span><br><span class=\"line\"><span class=\"built_in\">Enable-TLS12</span> <span class=\"literal\">-Component</span> Client</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Restart-Computer</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>2 查看服务器SSL&#x2F;TLS配置</p>\n<p>在Windows服务器上，WinRM服务的SSL&#x2F;TLS配置通常是由Windows操作系统的Schannel组件来处理的，而不是由WinRM服务本身来处理。因此，需要查看Schannel的配置来了解WinRM服务的SSL&#x2F;TLS配置。</p>\n<p>以下是如何查看Schannel的SSL&#x2F;TLS配置的步骤：</p>\n<ul>\n<li>打开注册表编辑器（Regedit）。你可以在开始菜单中搜索”regedit”，然后点击”注册表编辑器”应用来打开它。</li>\n<li>在注册表编辑器中，导航到以下路径：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在这个路径下，你应该能看到几个文件夹，比如”SSL 2.0”，”SSL 3.0”，”TLS 1.0”，”TLS 1.1”，”TLS 1.2”，”TLS 1.3”等。这些文件夹代表了服务器支持的SSL&#x2F;TLS版本。</li>\n</ul>\n<p><img src=\"/blog-img/4feb779c3f3d46f5928913ee73b75f96.png\" alt=\"4392eee5146633841007471659f756d4.png\"></p>\n<p>3 代码修改适配ssl2.0协议</p>\n<p>配置TLS1.2 需要重启服务器，对于客户环境该要求过于理想，所以需要代码改造。</p>\n<p>主要是重写 <code>requests.HTTPAdapter</code>类的 <code>init_poolmanager</code> 方法，在 <code>init_poolmanager</code> 方法中，创建了一个新的 SSL 上下文，并配置该上下文以使用 TLSv1 协议。然后，它通过 <code>ctx.options |= ssl.PROTOCOL_TLS</code> 语句启用了对所有版本的 SSL 和 TLS 协议的支持。最后，它创建了一个新的 <code>PoolManager</code> 实例，并将创建的 SSL 上下文传递给这个实例:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> ssl</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> requests.adapters <span class=\"keyword\">import</span> HTTPAdapter</span><br><span class=\"line\"><span class=\"keyword\">from</span> requests.packages.urllib3.poolmanager <span class=\"keyword\">import</span> PoolManager</span><br><span class=\"line\"><span class=\"keyword\">from</span> requests.packages.urllib3.util <span class=\"keyword\">import</span> ssl_</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TLSAdapter</span>(<span class=\"title class_ inherited__\">HTTPAdapter</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    适配器类，用于处理https请求</span></span><br><span class=\"line\"><span class=\"string\">    创建了一个新的 SSL 上下文，该上下文默认配置为使用 TLSV1 协议</span></span><br><span class=\"line\"><span class=\"string\">    options指定为ssl.PROTOCOL_TLS, 处理其他所有版本的 SSL 和 TLS 协议</span></span><br><span class=\"line\"><span class=\"string\">    使用：</span></span><br><span class=\"line\"><span class=\"string\">    self.session.mount(&#x27;https://&#x27;, TLSAdapter())</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">init_poolmanager</span>(<span class=\"params\">self, *pool_args, **pool_kwargs</span>):</span><br><span class=\"line\">        ctx = ssl_.create_urllib3_context(ssl.PROTOCOL_TLSv1)</span><br><span class=\"line\">        ctx.options |= ssl.PROTOCOL_TLS</span><br><span class=\"line\">        self.poolmanager = PoolManager(*pool_args,</span><br><span class=\"line\">                                       ssl_context=ctx,</span><br><span class=\"line\">                                       **pool_kwargs)</span><br><span class=\"line\"><span class=\"comment\"># 这里示范怎么使用TLSAdapter类</span></span><br><span class=\"line\">session = requests.Session()</span><br><span class=\"line\">session.mount(<span class=\"string\">&#x27;https://&#x27;</span>, TLSAdapter())</span><br></pre></td></tr></table></figure>\n\n\n\n<p>我们对Winrm进行改造：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">WinrmExectuor</span>(ExecutorBase, winrm.Session, metaclass=ExecutorMeta):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, target, auth, **kwargs</span>):</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">run_cmd</span>(<span class=\"params\">self, command, args=(<span class=\"params\"></span>)</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 兼容低版本协议ssl2.0</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> self.protocol.transport.session:</span><br><span class=\"line\">            self.protocol.transport.build_session()</span><br><span class=\"line\">        self.protocol.transport.session.mount(<span class=\"string\">&#x27;https://&#x27;</span>, TLSAdapter())</span><br><span class=\"line\">        </span><br><span class=\"line\">        shell_id = self.protocol.open_shell(codepage=<span class=\"number\">54936</span>)  <span class=\"comment\"># 54936(gb18030) or 936(gbk)</span></span><br><span class=\"line\">        ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">async_run_cmd</span>(<span class=\"params\">self, command, args=(<span class=\"params\"></span>)</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 兼容低版本协议ssl2.0</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> self.protocol.transport.session:</span><br><span class=\"line\">            self.protocol.transport.build_session()</span><br><span class=\"line\">        self.protocol.transport.session.mount(<span class=\"string\">&#x27;https://&#x27;</span>, TLSAdapter())</span><br><span class=\"line\"></span><br><span class=\"line\">        shell_id = self.protocol.open_shell(codepage=<span class=\"number\">54936</span>)  <span class=\"comment\"># 54936(gb18030) or 936(gbk)</span></span><br><span class=\"line\">        ...</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"Windows PowerShell常用命令整理","date":"2023-10-15T16:00:00.000Z","_content":"\n在 Windows 系统管理和运维中，PowerShell 是一个强大的工具，提供了各种命令来执行任务、管理系统和执行自动化操作。在本文中，我们将介绍一些常见的 PowerShell 命令，以及如何使用它们来管理 Windows 系统。\n\n### 模拟阻塞命令\n\n有时候，我们需要在脚本或批处理中添加延迟。使用 `Start-Sleep` 命令，你可以模拟阻塞操作，例如等待 10 秒：\n\n```powershell\nStart-Sleep -Seconds 10\n```\n\n### 查看当前登录的用户名\n\n要查看当前登录用户的用户名，可以使用 `whoami` 命令：\n\n```powershell\nwhoami\n```\n\n### 查看当前环境变量\n\n查看当前用户的环境变量可以使用以下命令：\n\n```powershell\necho $env:PATH\n```\n\n### 查看命令路径\n\n如果你想查找特定命令的路径，例如 `sqlplus`，可以使用 `get-command` 命令：\n\n```powershell\nget-command sqlplus\n```\n\n### 获取所有用户的环境变量\n\n要获取系统中所有用户的环境变量，可以使用 `Get-WmiObject` 命令：\n\n```powershell\nGet-WmiObject -Class Win32_Environment\n```\n\n### 获取文件权限\n\n如果你需要查看文件或目录的权限设置，可以使用 `Get-Acl` 命令。例如，要查看 `C:\\` 的权限，可以运行：\n\n```powershell\nGet-Acl C:\\\n```\n\n### 查询进程信息\n\nPowerShell 允许你查询和筛选正在运行的进程。例如，要查找包含特定关键字的进程，可以使用以下命令：\n\n```powershell\nGet-Process | Where-Object { $_.ProcessName -like \"*关键字*\" }\n```\n\n这些是一些常见的 PowerShell 命令，可以帮助你进行 Windows 运维和管理任务。无论是自动化任务、查询系统信息还是管理权限，PowerShell 提供了丰富的功能，可用于广泛的系统管理任务。","source":"_posts/Windows PowerShell常用命令整理.md","raw":"---\ntitle: Windows PowerShell常用命令整理\ndate: 2023-10-16\ntags: [Windows, PowerShell]\n---\n\n在 Windows 系统管理和运维中，PowerShell 是一个强大的工具，提供了各种命令来执行任务、管理系统和执行自动化操作。在本文中，我们将介绍一些常见的 PowerShell 命令，以及如何使用它们来管理 Windows 系统。\n\n### 模拟阻塞命令\n\n有时候，我们需要在脚本或批处理中添加延迟。使用 `Start-Sleep` 命令，你可以模拟阻塞操作，例如等待 10 秒：\n\n```powershell\nStart-Sleep -Seconds 10\n```\n\n### 查看当前登录的用户名\n\n要查看当前登录用户的用户名，可以使用 `whoami` 命令：\n\n```powershell\nwhoami\n```\n\n### 查看当前环境变量\n\n查看当前用户的环境变量可以使用以下命令：\n\n```powershell\necho $env:PATH\n```\n\n### 查看命令路径\n\n如果你想查找特定命令的路径，例如 `sqlplus`，可以使用 `get-command` 命令：\n\n```powershell\nget-command sqlplus\n```\n\n### 获取所有用户的环境变量\n\n要获取系统中所有用户的环境变量，可以使用 `Get-WmiObject` 命令：\n\n```powershell\nGet-WmiObject -Class Win32_Environment\n```\n\n### 获取文件权限\n\n如果你需要查看文件或目录的权限设置，可以使用 `Get-Acl` 命令。例如，要查看 `C:\\` 的权限，可以运行：\n\n```powershell\nGet-Acl C:\\\n```\n\n### 查询进程信息\n\nPowerShell 允许你查询和筛选正在运行的进程。例如，要查找包含特定关键字的进程，可以使用以下命令：\n\n```powershell\nGet-Process | Where-Object { $_.ProcessName -like \"*关键字*\" }\n```\n\n这些是一些常见的 PowerShell 命令，可以帮助你进行 Windows 运维和管理任务。无论是自动化任务、查询系统信息还是管理权限，PowerShell 提供了丰富的功能，可用于广泛的系统管理任务。","slug":"Windows PowerShell常用命令整理","published":1,"updated":"2023-10-16T09:42:29.337Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluqa1hiv0026rlogcsv3h1e7","content":"<p>在 Windows 系统管理和运维中，PowerShell 是一个强大的工具，提供了各种命令来执行任务、管理系统和执行自动化操作。在本文中，我们将介绍一些常见的 PowerShell 命令，以及如何使用它们来管理 Windows 系统。</p>\n<h3 id=\"模拟阻塞命令\"><a href=\"#模拟阻塞命令\" class=\"headerlink\" title=\"模拟阻塞命令\"></a>模拟阻塞命令</h3><p>有时候，我们需要在脚本或批处理中添加延迟。使用 <code>Start-Sleep</code> 命令，你可以模拟阻塞操作，例如等待 10 秒：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Start-Sleep</span> <span class=\"literal\">-Seconds</span> <span class=\"number\">10</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看当前登录的用户名\"><a href=\"#查看当前登录的用户名\" class=\"headerlink\" title=\"查看当前登录的用户名\"></a>查看当前登录的用户名</h3><p>要查看当前登录用户的用户名，可以使用 <code>whoami</code> 命令：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">whoami</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看当前环境变量\"><a href=\"#查看当前环境变量\" class=\"headerlink\" title=\"查看当前环境变量\"></a>查看当前环境变量</h3><p>查看当前用户的环境变量可以使用以下命令：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$env:PATH</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看命令路径\"><a href=\"#查看命令路径\" class=\"headerlink\" title=\"查看命令路径\"></a>查看命令路径</h3><p>如果你想查找特定命令的路径，例如 <code>sqlplus</code>，可以使用 <code>get-command</code> 命令：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">get-command</span> sqlplus</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"获取所有用户的环境变量\"><a href=\"#获取所有用户的环境变量\" class=\"headerlink\" title=\"获取所有用户的环境变量\"></a>获取所有用户的环境变量</h3><p>要获取系统中所有用户的环境变量，可以使用 <code>Get-WmiObject</code> 命令：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Get-WmiObject</span> <span class=\"literal\">-Class</span> Win32_Environment</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"获取文件权限\"><a href=\"#获取文件权限\" class=\"headerlink\" title=\"获取文件权限\"></a>获取文件权限</h3><p>如果你需要查看文件或目录的权限设置，可以使用 <code>Get-Acl</code> 命令。例如，要查看 <code>C:\\</code> 的权限，可以运行：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Get-Acl</span> C:\\</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查询进程信息\"><a href=\"#查询进程信息\" class=\"headerlink\" title=\"查询进程信息\"></a>查询进程信息</h3><p>PowerShell 允许你查询和筛选正在运行的进程。例如，要查找包含特定关键字的进程，可以使用以下命令：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Get-Process</span> | <span class=\"built_in\">Where-Object</span> &#123; <span class=\"variable\">$_</span>.ProcessName <span class=\"operator\">-like</span> <span class=\"string\">&quot;*关键字*&quot;</span> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>这些是一些常见的 PowerShell 命令，可以帮助你进行 Windows 运维和管理任务。无论是自动化任务、查询系统信息还是管理权限，PowerShell 提供了丰富的功能，可用于广泛的系统管理任务。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在 Windows 系统管理和运维中，PowerShell 是一个强大的工具，提供了各种命令来执行任务、管理系统和执行自动化操作。在本文中，我们将介绍一些常见的 PowerShell 命令，以及如何使用它们来管理 Windows 系统。</p>\n<h3 id=\"模拟阻塞命令\"><a href=\"#模拟阻塞命令\" class=\"headerlink\" title=\"模拟阻塞命令\"></a>模拟阻塞命令</h3><p>有时候，我们需要在脚本或批处理中添加延迟。使用 <code>Start-Sleep</code> 命令，你可以模拟阻塞操作，例如等待 10 秒：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Start-Sleep</span> <span class=\"literal\">-Seconds</span> <span class=\"number\">10</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看当前登录的用户名\"><a href=\"#查看当前登录的用户名\" class=\"headerlink\" title=\"查看当前登录的用户名\"></a>查看当前登录的用户名</h3><p>要查看当前登录用户的用户名，可以使用 <code>whoami</code> 命令：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">whoami</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看当前环境变量\"><a href=\"#查看当前环境变量\" class=\"headerlink\" title=\"查看当前环境变量\"></a>查看当前环境变量</h3><p>查看当前用户的环境变量可以使用以下命令：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$env:PATH</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看命令路径\"><a href=\"#查看命令路径\" class=\"headerlink\" title=\"查看命令路径\"></a>查看命令路径</h3><p>如果你想查找特定命令的路径，例如 <code>sqlplus</code>，可以使用 <code>get-command</code> 命令：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">get-command</span> sqlplus</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"获取所有用户的环境变量\"><a href=\"#获取所有用户的环境变量\" class=\"headerlink\" title=\"获取所有用户的环境变量\"></a>获取所有用户的环境变量</h3><p>要获取系统中所有用户的环境变量，可以使用 <code>Get-WmiObject</code> 命令：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Get-WmiObject</span> <span class=\"literal\">-Class</span> Win32_Environment</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"获取文件权限\"><a href=\"#获取文件权限\" class=\"headerlink\" title=\"获取文件权限\"></a>获取文件权限</h3><p>如果你需要查看文件或目录的权限设置，可以使用 <code>Get-Acl</code> 命令。例如，要查看 <code>C:\\</code> 的权限，可以运行：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Get-Acl</span> C:\\</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查询进程信息\"><a href=\"#查询进程信息\" class=\"headerlink\" title=\"查询进程信息\"></a>查询进程信息</h3><p>PowerShell 允许你查询和筛选正在运行的进程。例如，要查找包含特定关键字的进程，可以使用以下命令：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Get-Process</span> | <span class=\"built_in\">Where-Object</span> &#123; <span class=\"variable\">$_</span>.ProcessName <span class=\"operator\">-like</span> <span class=\"string\">&quot;*关键字*&quot;</span> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>这些是一些常见的 PowerShell 命令，可以帮助你进行 Windows 运维和管理任务。无论是自动化任务、查询系统信息还是管理权限，PowerShell 提供了丰富的功能，可用于广泛的系统管理任务。</p>\n"},{"title":"Windows开启WinRM服务","date":"2024-04-01T16:00:00.000Z","_content":"## 配置 WinRM（HTTP）服务\n\n1 登录 Windows 服务器，并以管理员身份运行 PowerShell。\n\n2 配置完成后, 可以通过以下命令确认是否配置成功\n\n\n   ```powershell\n   winrm enumerate winrm/config/listener\n   ```\n\n3 运行以下命令配置 WinRM 服务：\n\n\n   ```powershell\n   winrm quickconfig -quiet\n   winrm set winrm/config/service/auth '@{Basic=\"true\"}'\n   winrm set winrm/config/service '@{AllowUnencrypted=\"true\"}'\n   Set-Item WSMan:\\localhost\\Shell\\MaxShellsPerUser 100\n   Set-Item WSMan:\\localhost\\Shell\\MaxMemoryPerShellMB 300\n   Set-item wsman:/localhost/listener/listener*/port 5985\n   ```\n\n## 配置 WinRM（HTTPS）服务\n\n1 下载 `enable_winrm_ssl.ps1` 脚本并上传到服务器的C盘根目录。\n\n\n   ```powershell\n   $SubjectName = $env:COMPUTERNAME\n   $CertValidityDays = 1095\n   \n   Function New-LegacySelfSignedCert {\n       Param (\n           [string]$SubjectName,\n           [int]$ValidDays = 1095\n       )\n   \n       $hostnonFQDN = $env:computerName \n       $hostFQDN = [System.Net.Dns]::GetHostByName(($env:computerName)).Hostname\n       $SignatureAlgorithm = \"SHA256\"\n   \n       $name = New-Object -COM \"X509Enrollment.CX500DistinguishedName.1\"\n       $name.Encode(\"CN=$SubjectName\", 0)\n   \n       $key = New-Object -COM \"X509Enrollment.CX509PrivateKey.1\"\n       $key.ProviderName = \"Microsoft Enhanced RSA and AES Cryptographic Provider\"\n       $key.KeySpec = 1\n       $key.Length = 4096\n       $key.SecurityDescriptor = \"D:PAI(A;;0xd01f01ff;;;SY)(A;;0xd01f01ff;;;BA)(A;;0x80120089;;;NS)\"\n       $key.MachineContext = 1\n       $key.Create()\n   \n       $serverauthoid = New-Object -COM \"X509Enrollment.CObjectId.1\"\n       $serverauthoid.InitializeFromValue(\"1.3.6.1.5.5.7.3.1\")\n       $ekuoids = New-Object -COM \"X509Enrollment.CObjectIds.1\"\n       $ekuoids.Add($serverauthoid)\n       $ekuext = New-Object -COM \"X509Enrollment.CX509ExtensionEnhancedKeyUsage.1\"\n       $ekuext.InitializeEncode($ekuoids)\n   \n       $cert = New-Object -COM \"X509Enrollment.CX509CertificateRequestCertificate.1\"\n       $cert.InitializeFromPrivateKey(2, $key, \"\")\n       $cert.Subject = $name\n       $cert.Issuer = $cert.Subject\n       $cert.NotBefore = (Get-Date).AddDays(-1)\n       $cert.NotAfter = $cert.NotBefore.AddDays($ValidDays)\n   \n       $SigOID = New-Object -ComObject X509Enrollment.CObjectId\n       $SigOID.InitializeFromValue(([Security.Cryptography.Oid]$SignatureAlgorithm).Value)\n   \n       [string[]] $AlternativeName += $hostnonFQDN\n       $AlternativeName += $hostFQDN\n       $IAlternativeNames = New-Object -ComObject X509Enrollment.CAlternativeNames\n   \n       foreach ($AN in $AlternativeName) {\n           $AltName = New-Object -ComObject X509Enrollment.CAlternativeName\n           $AltName.InitializeFromString(0x3, $AN)\n           $IAlternativeNames.Add($AltName)\n       }\n   \n       $SubjectAlternativeName = New-Object -ComObject X509Enrollment.CX509ExtensionAlternativeNames\n       $SubjectAlternativeName.InitializeEncode($IAlternativeNames)\n   \n       [String[]]$KeyUsage = (\"DigitalSignature\", \"KeyEncipherment\")\n       $KeyUsageObj = New-Object -ComObject X509Enrollment.CX509ExtensionKeyUsage\n       $KeyUsageObj.InitializeEncode([int][Security.Cryptography.X509Certificates.X509KeyUsageFlags]($KeyUsage))\n       $KeyUsageObj.Critical = $true\n   \n       $cert.X509Extensions.Add($KeyUsageObj)\n       $cert.X509Extensions.Add($ekuext)\n       $cert.SignatureInformation.HashAlgorithm = $SigOID\n       $CERT.X509Extensions.Add($SubjectAlternativeName)\n       $cert.Encode()\n   \n       $enrollment = New-Object -COM \"X509Enrollment.CX509Enrollment.1\"\n       $enrollment.InitializeFromRequest($cert)\n       $certdata = $enrollment.CreateRequest(0)\n       $enrollment.InstallResponse(2, $certdata, 0, \"\")\n   \n       # extract/return the thumbprint from the generated cert\n       $parsed_cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2\n       $parsed_cert.Import([System.Text.Encoding]::UTF8.GetBytes($certdata))\n   \n       return $parsed_cert.Thumbprint\n   }\n   \n   $thumbprint = New-LegacySelfSignedCert -SubjectName $SubjectName -ValidDays $CertValidityDays\n   Write-Host \"Self-signed SSL certificate generated; thumbprint: $thumbprint\"\n   \n   $valueset = @{\n       CertificateThumbprint = $thumbprint\n       Hostname = $SubjectName\n   }\n   \n   $selectorset = @{\n       Address   = \"*\"\n       Transport = \"HTTPS\"\n   }\n   \n   New-WSManInstance -ResourceURI 'winrm/config/Listener' -SelectorSet $selectorset -ValueSet $valueset\n   \n   Set-Item WSMan:\\localhost\\Service\\Auth\\Basic true\n   Set-Item WSMan:\\localhost\\Shell\\MaxShellsPerUser 100\n   Set-Item WSMan:\\localhost\\Shell\\MaxMemoryPerShellMB 300\n   \n   ```\n\n2 以管理员身份运行 PowerShell，执行以下命令：\n\n\n   ```\n   Type c:\\enable_winrm_ssl.ps1 | PowerShell.exe -noprofile -\n   ```\n","source":"_posts/Windows开启WinRM服务.md","raw":"---\ntitle: Windows开启WinRM服务\ndate: 2024-04-02\ntags: [winrm,Windows]\n---\n## 配置 WinRM（HTTP）服务\n\n1 登录 Windows 服务器，并以管理员身份运行 PowerShell。\n\n2 配置完成后, 可以通过以下命令确认是否配置成功\n\n\n   ```powershell\n   winrm enumerate winrm/config/listener\n   ```\n\n3 运行以下命令配置 WinRM 服务：\n\n\n   ```powershell\n   winrm quickconfig -quiet\n   winrm set winrm/config/service/auth '@{Basic=\"true\"}'\n   winrm set winrm/config/service '@{AllowUnencrypted=\"true\"}'\n   Set-Item WSMan:\\localhost\\Shell\\MaxShellsPerUser 100\n   Set-Item WSMan:\\localhost\\Shell\\MaxMemoryPerShellMB 300\n   Set-item wsman:/localhost/listener/listener*/port 5985\n   ```\n\n## 配置 WinRM（HTTPS）服务\n\n1 下载 `enable_winrm_ssl.ps1` 脚本并上传到服务器的C盘根目录。\n\n\n   ```powershell\n   $SubjectName = $env:COMPUTERNAME\n   $CertValidityDays = 1095\n   \n   Function New-LegacySelfSignedCert {\n       Param (\n           [string]$SubjectName,\n           [int]$ValidDays = 1095\n       )\n   \n       $hostnonFQDN = $env:computerName \n       $hostFQDN = [System.Net.Dns]::GetHostByName(($env:computerName)).Hostname\n       $SignatureAlgorithm = \"SHA256\"\n   \n       $name = New-Object -COM \"X509Enrollment.CX500DistinguishedName.1\"\n       $name.Encode(\"CN=$SubjectName\", 0)\n   \n       $key = New-Object -COM \"X509Enrollment.CX509PrivateKey.1\"\n       $key.ProviderName = \"Microsoft Enhanced RSA and AES Cryptographic Provider\"\n       $key.KeySpec = 1\n       $key.Length = 4096\n       $key.SecurityDescriptor = \"D:PAI(A;;0xd01f01ff;;;SY)(A;;0xd01f01ff;;;BA)(A;;0x80120089;;;NS)\"\n       $key.MachineContext = 1\n       $key.Create()\n   \n       $serverauthoid = New-Object -COM \"X509Enrollment.CObjectId.1\"\n       $serverauthoid.InitializeFromValue(\"1.3.6.1.5.5.7.3.1\")\n       $ekuoids = New-Object -COM \"X509Enrollment.CObjectIds.1\"\n       $ekuoids.Add($serverauthoid)\n       $ekuext = New-Object -COM \"X509Enrollment.CX509ExtensionEnhancedKeyUsage.1\"\n       $ekuext.InitializeEncode($ekuoids)\n   \n       $cert = New-Object -COM \"X509Enrollment.CX509CertificateRequestCertificate.1\"\n       $cert.InitializeFromPrivateKey(2, $key, \"\")\n       $cert.Subject = $name\n       $cert.Issuer = $cert.Subject\n       $cert.NotBefore = (Get-Date).AddDays(-1)\n       $cert.NotAfter = $cert.NotBefore.AddDays($ValidDays)\n   \n       $SigOID = New-Object -ComObject X509Enrollment.CObjectId\n       $SigOID.InitializeFromValue(([Security.Cryptography.Oid]$SignatureAlgorithm).Value)\n   \n       [string[]] $AlternativeName += $hostnonFQDN\n       $AlternativeName += $hostFQDN\n       $IAlternativeNames = New-Object -ComObject X509Enrollment.CAlternativeNames\n   \n       foreach ($AN in $AlternativeName) {\n           $AltName = New-Object -ComObject X509Enrollment.CAlternativeName\n           $AltName.InitializeFromString(0x3, $AN)\n           $IAlternativeNames.Add($AltName)\n       }\n   \n       $SubjectAlternativeName = New-Object -ComObject X509Enrollment.CX509ExtensionAlternativeNames\n       $SubjectAlternativeName.InitializeEncode($IAlternativeNames)\n   \n       [String[]]$KeyUsage = (\"DigitalSignature\", \"KeyEncipherment\")\n       $KeyUsageObj = New-Object -ComObject X509Enrollment.CX509ExtensionKeyUsage\n       $KeyUsageObj.InitializeEncode([int][Security.Cryptography.X509Certificates.X509KeyUsageFlags]($KeyUsage))\n       $KeyUsageObj.Critical = $true\n   \n       $cert.X509Extensions.Add($KeyUsageObj)\n       $cert.X509Extensions.Add($ekuext)\n       $cert.SignatureInformation.HashAlgorithm = $SigOID\n       $CERT.X509Extensions.Add($SubjectAlternativeName)\n       $cert.Encode()\n   \n       $enrollment = New-Object -COM \"X509Enrollment.CX509Enrollment.1\"\n       $enrollment.InitializeFromRequest($cert)\n       $certdata = $enrollment.CreateRequest(0)\n       $enrollment.InstallResponse(2, $certdata, 0, \"\")\n   \n       # extract/return the thumbprint from the generated cert\n       $parsed_cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2\n       $parsed_cert.Import([System.Text.Encoding]::UTF8.GetBytes($certdata))\n   \n       return $parsed_cert.Thumbprint\n   }\n   \n   $thumbprint = New-LegacySelfSignedCert -SubjectName $SubjectName -ValidDays $CertValidityDays\n   Write-Host \"Self-signed SSL certificate generated; thumbprint: $thumbprint\"\n   \n   $valueset = @{\n       CertificateThumbprint = $thumbprint\n       Hostname = $SubjectName\n   }\n   \n   $selectorset = @{\n       Address   = \"*\"\n       Transport = \"HTTPS\"\n   }\n   \n   New-WSManInstance -ResourceURI 'winrm/config/Listener' -SelectorSet $selectorset -ValueSet $valueset\n   \n   Set-Item WSMan:\\localhost\\Service\\Auth\\Basic true\n   Set-Item WSMan:\\localhost\\Shell\\MaxShellsPerUser 100\n   Set-Item WSMan:\\localhost\\Shell\\MaxMemoryPerShellMB 300\n   \n   ```\n\n2 以管理员身份运行 PowerShell，执行以下命令：\n\n\n   ```\n   Type c:\\enable_winrm_ssl.ps1 | PowerShell.exe -noprofile -\n   ```\n","slug":"Windows开启WinRM服务","published":1,"updated":"2024-04-07T07:56:11.844Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluqa1hiw0029rlog88ao9hr9","content":"<h2 id=\"配置-WinRM（HTTP）服务\"><a href=\"#配置-WinRM（HTTP）服务\" class=\"headerlink\" title=\"配置 WinRM（HTTP）服务\"></a>配置 WinRM（HTTP）服务</h2><p>1 登录 Windows 服务器，并以管理员身份运行 PowerShell。</p>\n<p>2 配置完成后, 可以通过以下命令确认是否配置成功</p>\n   <figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">winrm enumerate winrm/config/listener</span><br></pre></td></tr></table></figure>\n\n<p>3 运行以下命令配置 WinRM 服务：</p>\n   <figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">winrm quickconfig <span class=\"literal\">-quiet</span></span><br><span class=\"line\">winrm <span class=\"built_in\">set</span> winrm/config/service/auth <span class=\"string\">&#x27;@&#123;Basic=&quot;true&quot;&#125;&#x27;</span></span><br><span class=\"line\">winrm <span class=\"built_in\">set</span> winrm/config/service <span class=\"string\">&#x27;@&#123;AllowUnencrypted=&quot;true&quot;&#125;&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">Set-Item</span> WSMan:\\localhost\\Shell\\MaxShellsPerUser <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"built_in\">Set-Item</span> WSMan:\\localhost\\Shell\\MaxMemoryPerShellMB <span class=\"number\">300</span></span><br><span class=\"line\"><span class=\"built_in\">Set-item</span> wsman:/localhost/listener/listener*/port <span class=\"number\">5985</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置-WinRM（HTTPS）服务\"><a href=\"#配置-WinRM（HTTPS）服务\" class=\"headerlink\" title=\"配置 WinRM（HTTPS）服务\"></a>配置 WinRM（HTTPS）服务</h2><p>1 下载 <code>enable_winrm_ssl.ps1</code> 脚本并上传到服务器的C盘根目录。</p>\n   <figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$SubjectName</span> = <span class=\"variable\">$env:COMPUTERNAME</span></span><br><span class=\"line\"><span class=\"variable\">$CertValidityDays</span> = <span class=\"number\">1095</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">Function</span> <span class=\"title\">New-LegacySelfSignedCert</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">Param</span> (</span><br><span class=\"line\">        [<span class=\"built_in\">string</span>]<span class=\"variable\">$SubjectName</span>,</span><br><span class=\"line\">        [<span class=\"built_in\">int</span>]<span class=\"variable\">$ValidDays</span> = <span class=\"number\">1095</span></span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable\">$hostnonFQDN</span> = <span class=\"variable\">$env:computerName</span> </span><br><span class=\"line\">    <span class=\"variable\">$hostFQDN</span> = [<span class=\"type\">System.Net.Dns</span>]::GetHostByName((<span class=\"variable\">$env:computerName</span>)).Hostname</span><br><span class=\"line\">    <span class=\"variable\">$SignatureAlgorithm</span> = <span class=\"string\">&quot;SHA256&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable\">$name</span> = <span class=\"built_in\">New-Object</span> <span class=\"literal\">-COM</span> <span class=\"string\">&quot;X509Enrollment.CX500DistinguishedName.1&quot;</span></span><br><span class=\"line\">    <span class=\"variable\">$name</span>.Encode(<span class=\"string\">&quot;CN=<span class=\"variable\">$SubjectName</span>&quot;</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable\">$key</span> = <span class=\"built_in\">New-Object</span> <span class=\"literal\">-COM</span> <span class=\"string\">&quot;X509Enrollment.CX509PrivateKey.1&quot;</span></span><br><span class=\"line\">    <span class=\"variable\">$key</span>.ProviderName = <span class=\"string\">&quot;Microsoft Enhanced RSA and AES Cryptographic Provider&quot;</span></span><br><span class=\"line\">    <span class=\"variable\">$key</span>.KeySpec = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"variable\">$key</span>.Length = <span class=\"number\">4096</span></span><br><span class=\"line\">    <span class=\"variable\">$key</span>.SecurityDescriptor = <span class=\"string\">&quot;D:PAI(A;;0xd01f01ff;;;SY)(A;;0xd01f01ff;;;BA)(A;;0x80120089;;;NS)&quot;</span></span><br><span class=\"line\">    <span class=\"variable\">$key</span>.MachineContext = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"variable\">$key</span>.Create()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable\">$serverauthoid</span> = <span class=\"built_in\">New-Object</span> <span class=\"literal\">-COM</span> <span class=\"string\">&quot;X509Enrollment.CObjectId.1&quot;</span></span><br><span class=\"line\">    <span class=\"variable\">$serverauthoid</span>.InitializeFromValue(<span class=\"string\">&quot;1.3.6.1.5.5.7.3.1&quot;</span>)</span><br><span class=\"line\">    <span class=\"variable\">$ekuoids</span> = <span class=\"built_in\">New-Object</span> <span class=\"literal\">-COM</span> <span class=\"string\">&quot;X509Enrollment.CObjectIds.1&quot;</span></span><br><span class=\"line\">    <span class=\"variable\">$ekuoids</span>.Add(<span class=\"variable\">$serverauthoid</span>)</span><br><span class=\"line\">    <span class=\"variable\">$ekuext</span> = <span class=\"built_in\">New-Object</span> <span class=\"literal\">-COM</span> <span class=\"string\">&quot;X509Enrollment.CX509ExtensionEnhancedKeyUsage.1&quot;</span></span><br><span class=\"line\">    <span class=\"variable\">$ekuext</span>.InitializeEncode(<span class=\"variable\">$ekuoids</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable\">$cert</span> = <span class=\"built_in\">New-Object</span> <span class=\"literal\">-COM</span> <span class=\"string\">&quot;X509Enrollment.CX509CertificateRequestCertificate.1&quot;</span></span><br><span class=\"line\">    <span class=\"variable\">$cert</span>.InitializeFromPrivateKey(<span class=\"number\">2</span>, <span class=\"variable\">$key</span>, <span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">    <span class=\"variable\">$cert</span>.Subject = <span class=\"variable\">$name</span></span><br><span class=\"line\">    <span class=\"variable\">$cert</span>.Issuer = <span class=\"variable\">$cert</span>.Subject</span><br><span class=\"line\">    <span class=\"variable\">$cert</span>.NotBefore = (<span class=\"built_in\">Get-Date</span>).AddDays(<span class=\"literal\">-1</span>)</span><br><span class=\"line\">    <span class=\"variable\">$cert</span>.NotAfter = <span class=\"variable\">$cert</span>.NotBefore.AddDays(<span class=\"variable\">$ValidDays</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable\">$SigOID</span> = <span class=\"built_in\">New-Object</span> <span class=\"literal\">-ComObject</span> X509Enrollment.CObjectId</span><br><span class=\"line\">    <span class=\"variable\">$SigOID</span>.InitializeFromValue(([<span class=\"type\">Security.Cryptography.Oid</span>]<span class=\"variable\">$SignatureAlgorithm</span>).Value)</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"built_in\">string</span>[]] <span class=\"variable\">$AlternativeName</span> += <span class=\"variable\">$hostnonFQDN</span></span><br><span class=\"line\">    <span class=\"variable\">$AlternativeName</span> += <span class=\"variable\">$hostFQDN</span></span><br><span class=\"line\">    <span class=\"variable\">$IAlternativeNames</span> = <span class=\"built_in\">New-Object</span> <span class=\"literal\">-ComObject</span> X509Enrollment.CAlternativeNames</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"variable\">$AN</span> <span class=\"keyword\">in</span> <span class=\"variable\">$AlternativeName</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable\">$AltName</span> = <span class=\"built_in\">New-Object</span> <span class=\"literal\">-ComObject</span> X509Enrollment.CAlternativeName</span><br><span class=\"line\">        <span class=\"variable\">$AltName</span>.InitializeFromString(<span class=\"number\">0</span>x3, <span class=\"variable\">$AN</span>)</span><br><span class=\"line\">        <span class=\"variable\">$IAlternativeNames</span>.Add(<span class=\"variable\">$AltName</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable\">$SubjectAlternativeName</span> = <span class=\"built_in\">New-Object</span> <span class=\"literal\">-ComObject</span> X509Enrollment.CX509ExtensionAlternativeNames</span><br><span class=\"line\">    <span class=\"variable\">$SubjectAlternativeName</span>.InitializeEncode(<span class=\"variable\">$IAlternativeNames</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"built_in\">String</span>[]]<span class=\"variable\">$KeyUsage</span> = (<span class=\"string\">&quot;DigitalSignature&quot;</span>, <span class=\"string\">&quot;KeyEncipherment&quot;</span>)</span><br><span class=\"line\">    <span class=\"variable\">$KeyUsageObj</span> = <span class=\"built_in\">New-Object</span> <span class=\"literal\">-ComObject</span> X509Enrollment.CX509ExtensionKeyUsage</span><br><span class=\"line\">    <span class=\"variable\">$KeyUsageObj</span>.InitializeEncode([<span class=\"built_in\">int</span>][<span class=\"type\">Security.Cryptography.X509Certificates.X509KeyUsageFlags</span>](<span class=\"variable\">$KeyUsage</span>))</span><br><span class=\"line\">    <span class=\"variable\">$KeyUsageObj</span>.Critical = <span class=\"variable\">$true</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable\">$cert</span>.X509Extensions.Add(<span class=\"variable\">$KeyUsageObj</span>)</span><br><span class=\"line\">    <span class=\"variable\">$cert</span>.X509Extensions.Add(<span class=\"variable\">$ekuext</span>)</span><br><span class=\"line\">    <span class=\"variable\">$cert</span>.SignatureInformation.HashAlgorithm = <span class=\"variable\">$SigOID</span></span><br><span class=\"line\">    <span class=\"variable\">$CERT</span>.X509Extensions.Add(<span class=\"variable\">$SubjectAlternativeName</span>)</span><br><span class=\"line\">    <span class=\"variable\">$cert</span>.Encode()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable\">$enrollment</span> = <span class=\"built_in\">New-Object</span> <span class=\"literal\">-COM</span> <span class=\"string\">&quot;X509Enrollment.CX509Enrollment.1&quot;</span></span><br><span class=\"line\">    <span class=\"variable\">$enrollment</span>.InitializeFromRequest(<span class=\"variable\">$cert</span>)</span><br><span class=\"line\">    <span class=\"variable\">$certdata</span> = <span class=\"variable\">$enrollment</span>.CreateRequest(<span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"variable\">$enrollment</span>.InstallResponse(<span class=\"number\">2</span>, <span class=\"variable\">$certdata</span>, <span class=\"number\">0</span>, <span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># extract/return the thumbprint from the generated cert</span></span><br><span class=\"line\">    <span class=\"variable\">$parsed_cert</span> = <span class=\"built_in\">New-Object</span> System.Security.Cryptography.X509Certificates.X509Certificate2</span><br><span class=\"line\">    <span class=\"variable\">$parsed_cert</span>.Import([<span class=\"type\">System.Text.Encoding</span>]::UTF8.GetBytes(<span class=\"variable\">$certdata</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable\">$parsed_cert</span>.Thumbprint</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$thumbprint</span> = <span class=\"built_in\">New-LegacySelfSignedCert</span> <span class=\"literal\">-SubjectName</span> <span class=\"variable\">$SubjectName</span> <span class=\"literal\">-ValidDays</span> <span class=\"variable\">$CertValidityDays</span></span><br><span class=\"line\"><span class=\"built_in\">Write-Host</span> <span class=\"string\">&quot;Self-signed SSL certificate generated; thumbprint: <span class=\"variable\">$thumbprint</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$valueset</span> = <span class=\"selector-tag\">@</span>&#123;</span><br><span class=\"line\">    CertificateThumbprint = <span class=\"variable\">$thumbprint</span></span><br><span class=\"line\">    Hostname = <span class=\"variable\">$SubjectName</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$selectorset</span> = <span class=\"selector-tag\">@</span>&#123;</span><br><span class=\"line\">    Address   = <span class=\"string\">&quot;*&quot;</span></span><br><span class=\"line\">    Transport = <span class=\"string\">&quot;HTTPS&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">New-WSManInstance</span> <span class=\"literal\">-ResourceURI</span> <span class=\"string\">&#x27;winrm/config/Listener&#x27;</span> <span class=\"literal\">-SelectorSet</span> <span class=\"variable\">$selectorset</span> <span class=\"literal\">-ValueSet</span> <span class=\"variable\">$valueset</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Set-Item</span> WSMan:\\localhost\\Service\\Auth\\Basic true</span><br><span class=\"line\"><span class=\"built_in\">Set-Item</span> WSMan:\\localhost\\Shell\\MaxShellsPerUser <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"built_in\">Set-Item</span> WSMan:\\localhost\\Shell\\MaxMemoryPerShellMB <span class=\"number\">300</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>2 以管理员身份运行 PowerShell，执行以下命令：</p>\n   <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Type c:\\enable_winrm_ssl.ps1 | PowerShell.exe -noprofile -</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"配置-WinRM（HTTP）服务\"><a href=\"#配置-WinRM（HTTP）服务\" class=\"headerlink\" title=\"配置 WinRM（HTTP）服务\"></a>配置 WinRM（HTTP）服务</h2><p>1 登录 Windows 服务器，并以管理员身份运行 PowerShell。</p>\n<p>2 配置完成后, 可以通过以下命令确认是否配置成功</p>\n   <figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">winrm enumerate winrm/config/listener</span><br></pre></td></tr></table></figure>\n\n<p>3 运行以下命令配置 WinRM 服务：</p>\n   <figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">winrm quickconfig <span class=\"literal\">-quiet</span></span><br><span class=\"line\">winrm <span class=\"built_in\">set</span> winrm/config/service/auth <span class=\"string\">&#x27;@&#123;Basic=&quot;true&quot;&#125;&#x27;</span></span><br><span class=\"line\">winrm <span class=\"built_in\">set</span> winrm/config/service <span class=\"string\">&#x27;@&#123;AllowUnencrypted=&quot;true&quot;&#125;&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">Set-Item</span> WSMan:\\localhost\\Shell\\MaxShellsPerUser <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"built_in\">Set-Item</span> WSMan:\\localhost\\Shell\\MaxMemoryPerShellMB <span class=\"number\">300</span></span><br><span class=\"line\"><span class=\"built_in\">Set-item</span> wsman:/localhost/listener/listener*/port <span class=\"number\">5985</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置-WinRM（HTTPS）服务\"><a href=\"#配置-WinRM（HTTPS）服务\" class=\"headerlink\" title=\"配置 WinRM（HTTPS）服务\"></a>配置 WinRM（HTTPS）服务</h2><p>1 下载 <code>enable_winrm_ssl.ps1</code> 脚本并上传到服务器的C盘根目录。</p>\n   <figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$SubjectName</span> = <span class=\"variable\">$env:COMPUTERNAME</span></span><br><span class=\"line\"><span class=\"variable\">$CertValidityDays</span> = <span class=\"number\">1095</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">Function</span> <span class=\"title\">New-LegacySelfSignedCert</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">Param</span> (</span><br><span class=\"line\">        [<span class=\"built_in\">string</span>]<span class=\"variable\">$SubjectName</span>,</span><br><span class=\"line\">        [<span class=\"built_in\">int</span>]<span class=\"variable\">$ValidDays</span> = <span class=\"number\">1095</span></span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable\">$hostnonFQDN</span> = <span class=\"variable\">$env:computerName</span> </span><br><span class=\"line\">    <span class=\"variable\">$hostFQDN</span> = [<span class=\"type\">System.Net.Dns</span>]::GetHostByName((<span class=\"variable\">$env:computerName</span>)).Hostname</span><br><span class=\"line\">    <span class=\"variable\">$SignatureAlgorithm</span> = <span class=\"string\">&quot;SHA256&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable\">$name</span> = <span class=\"built_in\">New-Object</span> <span class=\"literal\">-COM</span> <span class=\"string\">&quot;X509Enrollment.CX500DistinguishedName.1&quot;</span></span><br><span class=\"line\">    <span class=\"variable\">$name</span>.Encode(<span class=\"string\">&quot;CN=<span class=\"variable\">$SubjectName</span>&quot;</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable\">$key</span> = <span class=\"built_in\">New-Object</span> <span class=\"literal\">-COM</span> <span class=\"string\">&quot;X509Enrollment.CX509PrivateKey.1&quot;</span></span><br><span class=\"line\">    <span class=\"variable\">$key</span>.ProviderName = <span class=\"string\">&quot;Microsoft Enhanced RSA and AES Cryptographic Provider&quot;</span></span><br><span class=\"line\">    <span class=\"variable\">$key</span>.KeySpec = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"variable\">$key</span>.Length = <span class=\"number\">4096</span></span><br><span class=\"line\">    <span class=\"variable\">$key</span>.SecurityDescriptor = <span class=\"string\">&quot;D:PAI(A;;0xd01f01ff;;;SY)(A;;0xd01f01ff;;;BA)(A;;0x80120089;;;NS)&quot;</span></span><br><span class=\"line\">    <span class=\"variable\">$key</span>.MachineContext = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"variable\">$key</span>.Create()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable\">$serverauthoid</span> = <span class=\"built_in\">New-Object</span> <span class=\"literal\">-COM</span> <span class=\"string\">&quot;X509Enrollment.CObjectId.1&quot;</span></span><br><span class=\"line\">    <span class=\"variable\">$serverauthoid</span>.InitializeFromValue(<span class=\"string\">&quot;1.3.6.1.5.5.7.3.1&quot;</span>)</span><br><span class=\"line\">    <span class=\"variable\">$ekuoids</span> = <span class=\"built_in\">New-Object</span> <span class=\"literal\">-COM</span> <span class=\"string\">&quot;X509Enrollment.CObjectIds.1&quot;</span></span><br><span class=\"line\">    <span class=\"variable\">$ekuoids</span>.Add(<span class=\"variable\">$serverauthoid</span>)</span><br><span class=\"line\">    <span class=\"variable\">$ekuext</span> = <span class=\"built_in\">New-Object</span> <span class=\"literal\">-COM</span> <span class=\"string\">&quot;X509Enrollment.CX509ExtensionEnhancedKeyUsage.1&quot;</span></span><br><span class=\"line\">    <span class=\"variable\">$ekuext</span>.InitializeEncode(<span class=\"variable\">$ekuoids</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable\">$cert</span> = <span class=\"built_in\">New-Object</span> <span class=\"literal\">-COM</span> <span class=\"string\">&quot;X509Enrollment.CX509CertificateRequestCertificate.1&quot;</span></span><br><span class=\"line\">    <span class=\"variable\">$cert</span>.InitializeFromPrivateKey(<span class=\"number\">2</span>, <span class=\"variable\">$key</span>, <span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">    <span class=\"variable\">$cert</span>.Subject = <span class=\"variable\">$name</span></span><br><span class=\"line\">    <span class=\"variable\">$cert</span>.Issuer = <span class=\"variable\">$cert</span>.Subject</span><br><span class=\"line\">    <span class=\"variable\">$cert</span>.NotBefore = (<span class=\"built_in\">Get-Date</span>).AddDays(<span class=\"literal\">-1</span>)</span><br><span class=\"line\">    <span class=\"variable\">$cert</span>.NotAfter = <span class=\"variable\">$cert</span>.NotBefore.AddDays(<span class=\"variable\">$ValidDays</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable\">$SigOID</span> = <span class=\"built_in\">New-Object</span> <span class=\"literal\">-ComObject</span> X509Enrollment.CObjectId</span><br><span class=\"line\">    <span class=\"variable\">$SigOID</span>.InitializeFromValue(([<span class=\"type\">Security.Cryptography.Oid</span>]<span class=\"variable\">$SignatureAlgorithm</span>).Value)</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"built_in\">string</span>[]] <span class=\"variable\">$AlternativeName</span> += <span class=\"variable\">$hostnonFQDN</span></span><br><span class=\"line\">    <span class=\"variable\">$AlternativeName</span> += <span class=\"variable\">$hostFQDN</span></span><br><span class=\"line\">    <span class=\"variable\">$IAlternativeNames</span> = <span class=\"built_in\">New-Object</span> <span class=\"literal\">-ComObject</span> X509Enrollment.CAlternativeNames</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"variable\">$AN</span> <span class=\"keyword\">in</span> <span class=\"variable\">$AlternativeName</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable\">$AltName</span> = <span class=\"built_in\">New-Object</span> <span class=\"literal\">-ComObject</span> X509Enrollment.CAlternativeName</span><br><span class=\"line\">        <span class=\"variable\">$AltName</span>.InitializeFromString(<span class=\"number\">0</span>x3, <span class=\"variable\">$AN</span>)</span><br><span class=\"line\">        <span class=\"variable\">$IAlternativeNames</span>.Add(<span class=\"variable\">$AltName</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable\">$SubjectAlternativeName</span> = <span class=\"built_in\">New-Object</span> <span class=\"literal\">-ComObject</span> X509Enrollment.CX509ExtensionAlternativeNames</span><br><span class=\"line\">    <span class=\"variable\">$SubjectAlternativeName</span>.InitializeEncode(<span class=\"variable\">$IAlternativeNames</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"built_in\">String</span>[]]<span class=\"variable\">$KeyUsage</span> = (<span class=\"string\">&quot;DigitalSignature&quot;</span>, <span class=\"string\">&quot;KeyEncipherment&quot;</span>)</span><br><span class=\"line\">    <span class=\"variable\">$KeyUsageObj</span> = <span class=\"built_in\">New-Object</span> <span class=\"literal\">-ComObject</span> X509Enrollment.CX509ExtensionKeyUsage</span><br><span class=\"line\">    <span class=\"variable\">$KeyUsageObj</span>.InitializeEncode([<span class=\"built_in\">int</span>][<span class=\"type\">Security.Cryptography.X509Certificates.X509KeyUsageFlags</span>](<span class=\"variable\">$KeyUsage</span>))</span><br><span class=\"line\">    <span class=\"variable\">$KeyUsageObj</span>.Critical = <span class=\"variable\">$true</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable\">$cert</span>.X509Extensions.Add(<span class=\"variable\">$KeyUsageObj</span>)</span><br><span class=\"line\">    <span class=\"variable\">$cert</span>.X509Extensions.Add(<span class=\"variable\">$ekuext</span>)</span><br><span class=\"line\">    <span class=\"variable\">$cert</span>.SignatureInformation.HashAlgorithm = <span class=\"variable\">$SigOID</span></span><br><span class=\"line\">    <span class=\"variable\">$CERT</span>.X509Extensions.Add(<span class=\"variable\">$SubjectAlternativeName</span>)</span><br><span class=\"line\">    <span class=\"variable\">$cert</span>.Encode()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable\">$enrollment</span> = <span class=\"built_in\">New-Object</span> <span class=\"literal\">-COM</span> <span class=\"string\">&quot;X509Enrollment.CX509Enrollment.1&quot;</span></span><br><span class=\"line\">    <span class=\"variable\">$enrollment</span>.InitializeFromRequest(<span class=\"variable\">$cert</span>)</span><br><span class=\"line\">    <span class=\"variable\">$certdata</span> = <span class=\"variable\">$enrollment</span>.CreateRequest(<span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"variable\">$enrollment</span>.InstallResponse(<span class=\"number\">2</span>, <span class=\"variable\">$certdata</span>, <span class=\"number\">0</span>, <span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># extract/return the thumbprint from the generated cert</span></span><br><span class=\"line\">    <span class=\"variable\">$parsed_cert</span> = <span class=\"built_in\">New-Object</span> System.Security.Cryptography.X509Certificates.X509Certificate2</span><br><span class=\"line\">    <span class=\"variable\">$parsed_cert</span>.Import([<span class=\"type\">System.Text.Encoding</span>]::UTF8.GetBytes(<span class=\"variable\">$certdata</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable\">$parsed_cert</span>.Thumbprint</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$thumbprint</span> = <span class=\"built_in\">New-LegacySelfSignedCert</span> <span class=\"literal\">-SubjectName</span> <span class=\"variable\">$SubjectName</span> <span class=\"literal\">-ValidDays</span> <span class=\"variable\">$CertValidityDays</span></span><br><span class=\"line\"><span class=\"built_in\">Write-Host</span> <span class=\"string\">&quot;Self-signed SSL certificate generated; thumbprint: <span class=\"variable\">$thumbprint</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$valueset</span> = <span class=\"selector-tag\">@</span>&#123;</span><br><span class=\"line\">    CertificateThumbprint = <span class=\"variable\">$thumbprint</span></span><br><span class=\"line\">    Hostname = <span class=\"variable\">$SubjectName</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$selectorset</span> = <span class=\"selector-tag\">@</span>&#123;</span><br><span class=\"line\">    Address   = <span class=\"string\">&quot;*&quot;</span></span><br><span class=\"line\">    Transport = <span class=\"string\">&quot;HTTPS&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">New-WSManInstance</span> <span class=\"literal\">-ResourceURI</span> <span class=\"string\">&#x27;winrm/config/Listener&#x27;</span> <span class=\"literal\">-SelectorSet</span> <span class=\"variable\">$selectorset</span> <span class=\"literal\">-ValueSet</span> <span class=\"variable\">$valueset</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Set-Item</span> WSMan:\\localhost\\Service\\Auth\\Basic true</span><br><span class=\"line\"><span class=\"built_in\">Set-Item</span> WSMan:\\localhost\\Shell\\MaxShellsPerUser <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"built_in\">Set-Item</span> WSMan:\\localhost\\Shell\\MaxMemoryPerShellMB <span class=\"number\">300</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>2 以管理员身份运行 PowerShell，执行以下命令：</p>\n   <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Type c:\\enable_winrm_ssl.ps1 | PowerShell.exe -noprofile -</span><br></pre></td></tr></table></figure>\n"},{"title":"ZMQ的学习和使用","date":"2019-08-10T16:00:00.000Z","_content":"\n参考：[ZMQ 指南](https://wizardforcel.gitbooks.io/zmq-guide/content/index.html)\n代码：[ZMQ-DEMO](https://github.com/suAdminWen/studyForPython/tree/master/zmq-demo)\n\n> ZeroMQ 是基于消息队列的多线程网络库，其对套接字类型、连续处理、帧甚至路由的底层细节抽象，提供跨域多种传输协议的套接字。\n\n## 生命周期\n\n1 创建上下文。ZMQ 的context上下文是线程安全，可以在多线程中使用，不需要主动为其加锁或解锁。\n2 创建和销毁套接字。ZMQ套接字是在后台I/O操作的，无论是发送还是接受消息，它都会先传送到一个本地的缓存队列。\n3 配置和读取套接字选项。ZMQ套接字不是线程安全的，在 bind 之前不能使用。\n4 为套接字连接。常用的四种协议：机器间(`tcp://`)、进程间(`ipc://`)、进程内(`inproce://`)、广播(`pgm://`)。`bind()`连接的节点称之为服务器，有固定的地址，`connect()`连接的节点成为客户端，其地址一般不固定。\n5 发送和接收信息。\n\n## ZMQ的核心消息模式\n\n- 请求-应答模式，将一组服务端和一组客户端相连，用于远程过程调用或任务分发。（REQ-REP）\n- 发布-订阅模式，将一组发布着和一组订阅者相连，用于数据分发。（PUB-SUB）\n- 管道模式，使用PUSH或PULL的形式组装多个节点，可以产生步骤或循环。（PUSH-PULL）\n\n\n## 实例（Python实现）\n\n### 请求应答模式\n\n请求-应答模式，将一组服务端和一组客户端相连，用于远程过程调用或任务分发。（REQ-REP）\n\n#### 基础实现\n\n![REQ-REP](https://github.com/anjuke/zguide-cn/raw/master/images/chapter1_1.png)\n\n<!--more-->\n\n- server端(`server.py`)\n\n```python\n'''\n基础的请求-应答模式。\nREP 用于响应方，不能主动发送请求，必须是在有响应之后才可以应答。\n'''\nimport time\nimport zmq\n\n# 创建zmq上下文, 该上下文是线程安全的，可以在多线程中使用。\ncontext = zmq.Context()\nsocket = context.socket(zmq.REP)\n# 绑定套接字到端点\nsocket.bind(\"tcp://*:5555\")\n\nwhile True:\n    # 等待客户端请求\n    message = socket.recv()\n    print(\"Received request: %s\" % message)\n\n    # 做些处理\n    time.sleep(1)\n\n    # 响应客户端\n    socket.send(b\"World\")\n```\n\n- client端(`client.py`)\n\n```python\n''' \n基础的请求-应答模式。\nREQ 用于请求方，如果没有应答将一直等待。\n'''\nimport zmq\n\ncontext = zmq.Context()\nprint('connecting to hello world server')\nsocket = context.socket(zmq.REQ)\n# 连接套接字到端点\nsocket.connect('tcp://localhost:5555')\n\nfor request in range(10):\n    # 主动发送请求\n    print(\"Sending request %s ...\" % request)\n    socket.send(b\"Hello\")\n\n    # 等待响应\n    message = socket.recv()\n    print(\"Received reply %s [ %s ]\" % (request, message))\n```\n\n#### 进阶实现和理解\n\n![请求-应答模式，REQ和ROUTER通信，DEALER再和REP通信](https://github.com/anjuke/zguide-cn/raw/master/images/chapter2_10.png)\n\n\n拓展请求-应答模式，使用broker进行负载均衡。\n\n- REQ(client)只需要和ROUTER对话;\n- REP(server)只需要和DEALER对话;\n\n在请求-应答模式中使用到的四种套接字类型：\n\n- DEALER是一种负载均衡，它会将消息分发给已连接的节点，并使用公平队列的机制处理接受到的消息。DEALER的作用就像是PUSH和PULL的结合。\n- REQ发送消息时会在消息顶部插入一个空帧，接受时会将空帧移去。其实REQ是建立在DEALER之上的，但REQ只有当消息发送并接受到回应后才能继续运行。\n- **ROUTER在收到消息时会在顶部添加一个信封，标记消息来源**。发送时会通过该信封决定哪个节点可以获取到该条消息。\n- REP在收到消息时会将第一个空帧之前的所有信息保存起来，将原始信息传送给应用程序。在发送消息时，REP会用刚才保存的信息包裹应答消息。REP其实是建立在ROUTER之上的，但和REQ一样，必须完成接受和发送这两个动作后才能继续。\n\n\nborker实现(`broker.py`):\n\n```python\nimport zmq\n\ncontext = zmq.Context()\n\nbrokerfe = context.socket(zmq.ROUTER)\nbrokerfe.bind('tcp://*:5560')\n\nbrokerbe = context.socket(zmq.DEALER)\nbrokerbe.bind('tcp://*:5561')\n\n# 一个线程中如果有多个sokect,同时需要收发数据时,\n# zmq提供polling sockets实现，\n# 不用在send()或者recv()时阻塞socket\npoller = zmq.Poller()\n# POLLIN在recv()端，负责刷新recv端口，来接受信息\n# POLLOUT在send()端口，负责刷新send端，来发送消息。\npoller.register(brokerbe, zmq.POLLIN)\npoller.register(brokerfe, zmq.POLLIN)\n\nwhile True:\n    # poller.poll()轮询\n    socks = dict(poller.poll())\n    if socks.get(brokerfe) == zmq.POLLIN:\n        msg = brokerfe.recv_multipart()\n        print('brokerfe', msg)\n        brokerbe.send_multipart(msg)\n\n    if socks.get(brokerbe) == zmq.POLLIN:\n        msg = brokerbe.recv_multipart()\n        print('brokerbe', msg)\n        brokerfe.send_multipart(msg)\n\n```\n\nclient实现(`client.py`)\n\n```python\n'''\n拓展请求-应答模式，使用broker进行负载均衡。\n\nREQ(client)只需要和ROUTER对话;\n'''\nimport time\nimport zmq\n\n\ncontext = zmq.Context()\n\nclient = context.socket(zmq.REQ)\nclient.connect('tcp://localhost:5560')\n\nwhile True:\n    client.send(b'HELLO')\n    msg = client.recv()\n    print(msg)\n    time.sleep(3)\n\n```\n\nserver实现(`server.py`)\n\n```python\n'''\n拓展请求-应答模式，使用broker进行负载均衡。\n\nREP(server)只需要和DEALER对话;\n'''\nimport zmq\n\ncontext = zmq.Context()\nserver = context.socket(zmq.REP)\nserver.connect('tcp://localhost:5561')\n\nwhile True:\n    msg = server.recv()\n    print(msg)\n    server.send(b'OK')\n```\n\n### 发布订阅模式\n\n发布-订阅模式，将一组发布着和一组订阅者相连，用于数据分发。（PUB-SUB）\n\n在该模式中，**订阅者(`SUB`)在订阅时，需要设置订阅的内容**。如果你不设置订阅内容，那将什么消息都收不到，订阅信息可以是任何字符串，可以设置多次。只要消息满足其中一条订阅信息，SUB套接字就会收到。另外还需要注意的是，订阅者只能使用`revc`接收信息，不能发送信息；发布者`PUB`只能使用`send`发送信息。\n\n如果发布者没有订阅者与之相连，那它发送的消息将直接被丢弃。\n\n#### 基础实现\n\n![发布-订阅模式](https://github.com/anjuke/zguide-cn/raw/master/images/chapter1_4.png)\n\n\n\n这里演示一个天气信息发布的例子，包括邮编、温度、相对湿度。我们生成这些随机信息服务端将信息发送给一组客户端。\n\n发布者(server.py)\n\n```python\nfrom random import randrange\nimport zmq\n\ncontext = zmq.Context()\nsocket = context.socket(zmq.PUB)\nsocket.bind('tcp://*:5556')\n\nwhile True:\n    # 随机生成一些数据\n    zipcode = randrange(1, 100000)\n    temperature = randrange(-80, 135)\n    relhumidity = randrange(10, 60)\n\n    socket.send_string('%i %i %i' % (zipcode, temperature, relhumidity))\n```\n\n订阅者(client.py)\n\n```python\nimport sys\nimport zmq\n\ncontext = zmq.Context()\nsocket = context.socket(zmq.SUB)\n\nprint('Collecting updates from weather server...')\nsocket.connect('tcp://localhost:5556')\n\nzip_filter = sys.argv[1] if len(sys.argv) > 1 else '10001'\nif isinstance(zip_filter, bytes):\n    zip_filter = zip_filter.decode()\n\n# 这是订阅内容\nsocket.setsockopt_string(zmq.SUBSCRIBE, zip_filter)\n\ntotal_temp = 0\nfor update_nbr in range(5):\n    string = socket.recv_string()\n    zipcode, temperature, relhumidity = string.split()\n    total_temp += int(temperature)\n\nprint('Average temperature for zipcode \"%s\" was %dF' %\n      (zip_filter, total_temp/(update_nbr + 1)))\n\nsocket.close()\ncontext.term()\n\n```\n\n","source":"_posts/ZMQ的学习和使用.md","raw":"---\ntitle: ZMQ的学习和使用\ndate: 2019-08-11\ntags: [物联网, Python, ZMQ]\n---\n\n参考：[ZMQ 指南](https://wizardforcel.gitbooks.io/zmq-guide/content/index.html)\n代码：[ZMQ-DEMO](https://github.com/suAdminWen/studyForPython/tree/master/zmq-demo)\n\n> ZeroMQ 是基于消息队列的多线程网络库，其对套接字类型、连续处理、帧甚至路由的底层细节抽象，提供跨域多种传输协议的套接字。\n\n## 生命周期\n\n1 创建上下文。ZMQ 的context上下文是线程安全，可以在多线程中使用，不需要主动为其加锁或解锁。\n2 创建和销毁套接字。ZMQ套接字是在后台I/O操作的，无论是发送还是接受消息，它都会先传送到一个本地的缓存队列。\n3 配置和读取套接字选项。ZMQ套接字不是线程安全的，在 bind 之前不能使用。\n4 为套接字连接。常用的四种协议：机器间(`tcp://`)、进程间(`ipc://`)、进程内(`inproce://`)、广播(`pgm://`)。`bind()`连接的节点称之为服务器，有固定的地址，`connect()`连接的节点成为客户端，其地址一般不固定。\n5 发送和接收信息。\n\n## ZMQ的核心消息模式\n\n- 请求-应答模式，将一组服务端和一组客户端相连，用于远程过程调用或任务分发。（REQ-REP）\n- 发布-订阅模式，将一组发布着和一组订阅者相连，用于数据分发。（PUB-SUB）\n- 管道模式，使用PUSH或PULL的形式组装多个节点，可以产生步骤或循环。（PUSH-PULL）\n\n\n## 实例（Python实现）\n\n### 请求应答模式\n\n请求-应答模式，将一组服务端和一组客户端相连，用于远程过程调用或任务分发。（REQ-REP）\n\n#### 基础实现\n\n![REQ-REP](https://github.com/anjuke/zguide-cn/raw/master/images/chapter1_1.png)\n\n<!--more-->\n\n- server端(`server.py`)\n\n```python\n'''\n基础的请求-应答模式。\nREP 用于响应方，不能主动发送请求，必须是在有响应之后才可以应答。\n'''\nimport time\nimport zmq\n\n# 创建zmq上下文, 该上下文是线程安全的，可以在多线程中使用。\ncontext = zmq.Context()\nsocket = context.socket(zmq.REP)\n# 绑定套接字到端点\nsocket.bind(\"tcp://*:5555\")\n\nwhile True:\n    # 等待客户端请求\n    message = socket.recv()\n    print(\"Received request: %s\" % message)\n\n    # 做些处理\n    time.sleep(1)\n\n    # 响应客户端\n    socket.send(b\"World\")\n```\n\n- client端(`client.py`)\n\n```python\n''' \n基础的请求-应答模式。\nREQ 用于请求方，如果没有应答将一直等待。\n'''\nimport zmq\n\ncontext = zmq.Context()\nprint('connecting to hello world server')\nsocket = context.socket(zmq.REQ)\n# 连接套接字到端点\nsocket.connect('tcp://localhost:5555')\n\nfor request in range(10):\n    # 主动发送请求\n    print(\"Sending request %s ...\" % request)\n    socket.send(b\"Hello\")\n\n    # 等待响应\n    message = socket.recv()\n    print(\"Received reply %s [ %s ]\" % (request, message))\n```\n\n#### 进阶实现和理解\n\n![请求-应答模式，REQ和ROUTER通信，DEALER再和REP通信](https://github.com/anjuke/zguide-cn/raw/master/images/chapter2_10.png)\n\n\n拓展请求-应答模式，使用broker进行负载均衡。\n\n- REQ(client)只需要和ROUTER对话;\n- REP(server)只需要和DEALER对话;\n\n在请求-应答模式中使用到的四种套接字类型：\n\n- DEALER是一种负载均衡，它会将消息分发给已连接的节点，并使用公平队列的机制处理接受到的消息。DEALER的作用就像是PUSH和PULL的结合。\n- REQ发送消息时会在消息顶部插入一个空帧，接受时会将空帧移去。其实REQ是建立在DEALER之上的，但REQ只有当消息发送并接受到回应后才能继续运行。\n- **ROUTER在收到消息时会在顶部添加一个信封，标记消息来源**。发送时会通过该信封决定哪个节点可以获取到该条消息。\n- REP在收到消息时会将第一个空帧之前的所有信息保存起来，将原始信息传送给应用程序。在发送消息时，REP会用刚才保存的信息包裹应答消息。REP其实是建立在ROUTER之上的，但和REQ一样，必须完成接受和发送这两个动作后才能继续。\n\n\nborker实现(`broker.py`):\n\n```python\nimport zmq\n\ncontext = zmq.Context()\n\nbrokerfe = context.socket(zmq.ROUTER)\nbrokerfe.bind('tcp://*:5560')\n\nbrokerbe = context.socket(zmq.DEALER)\nbrokerbe.bind('tcp://*:5561')\n\n# 一个线程中如果有多个sokect,同时需要收发数据时,\n# zmq提供polling sockets实现，\n# 不用在send()或者recv()时阻塞socket\npoller = zmq.Poller()\n# POLLIN在recv()端，负责刷新recv端口，来接受信息\n# POLLOUT在send()端口，负责刷新send端，来发送消息。\npoller.register(brokerbe, zmq.POLLIN)\npoller.register(brokerfe, zmq.POLLIN)\n\nwhile True:\n    # poller.poll()轮询\n    socks = dict(poller.poll())\n    if socks.get(brokerfe) == zmq.POLLIN:\n        msg = brokerfe.recv_multipart()\n        print('brokerfe', msg)\n        brokerbe.send_multipart(msg)\n\n    if socks.get(brokerbe) == zmq.POLLIN:\n        msg = brokerbe.recv_multipart()\n        print('brokerbe', msg)\n        brokerfe.send_multipart(msg)\n\n```\n\nclient实现(`client.py`)\n\n```python\n'''\n拓展请求-应答模式，使用broker进行负载均衡。\n\nREQ(client)只需要和ROUTER对话;\n'''\nimport time\nimport zmq\n\n\ncontext = zmq.Context()\n\nclient = context.socket(zmq.REQ)\nclient.connect('tcp://localhost:5560')\n\nwhile True:\n    client.send(b'HELLO')\n    msg = client.recv()\n    print(msg)\n    time.sleep(3)\n\n```\n\nserver实现(`server.py`)\n\n```python\n'''\n拓展请求-应答模式，使用broker进行负载均衡。\n\nREP(server)只需要和DEALER对话;\n'''\nimport zmq\n\ncontext = zmq.Context()\nserver = context.socket(zmq.REP)\nserver.connect('tcp://localhost:5561')\n\nwhile True:\n    msg = server.recv()\n    print(msg)\n    server.send(b'OK')\n```\n\n### 发布订阅模式\n\n发布-订阅模式，将一组发布着和一组订阅者相连，用于数据分发。（PUB-SUB）\n\n在该模式中，**订阅者(`SUB`)在订阅时，需要设置订阅的内容**。如果你不设置订阅内容，那将什么消息都收不到，订阅信息可以是任何字符串，可以设置多次。只要消息满足其中一条订阅信息，SUB套接字就会收到。另外还需要注意的是，订阅者只能使用`revc`接收信息，不能发送信息；发布者`PUB`只能使用`send`发送信息。\n\n如果发布者没有订阅者与之相连，那它发送的消息将直接被丢弃。\n\n#### 基础实现\n\n![发布-订阅模式](https://github.com/anjuke/zguide-cn/raw/master/images/chapter1_4.png)\n\n\n\n这里演示一个天气信息发布的例子，包括邮编、温度、相对湿度。我们生成这些随机信息服务端将信息发送给一组客户端。\n\n发布者(server.py)\n\n```python\nfrom random import randrange\nimport zmq\n\ncontext = zmq.Context()\nsocket = context.socket(zmq.PUB)\nsocket.bind('tcp://*:5556')\n\nwhile True:\n    # 随机生成一些数据\n    zipcode = randrange(1, 100000)\n    temperature = randrange(-80, 135)\n    relhumidity = randrange(10, 60)\n\n    socket.send_string('%i %i %i' % (zipcode, temperature, relhumidity))\n```\n\n订阅者(client.py)\n\n```python\nimport sys\nimport zmq\n\ncontext = zmq.Context()\nsocket = context.socket(zmq.SUB)\n\nprint('Collecting updates from weather server...')\nsocket.connect('tcp://localhost:5556')\n\nzip_filter = sys.argv[1] if len(sys.argv) > 1 else '10001'\nif isinstance(zip_filter, bytes):\n    zip_filter = zip_filter.decode()\n\n# 这是订阅内容\nsocket.setsockopt_string(zmq.SUBSCRIBE, zip_filter)\n\ntotal_temp = 0\nfor update_nbr in range(5):\n    string = socket.recv_string()\n    zipcode, temperature, relhumidity = string.split()\n    total_temp += int(temperature)\n\nprint('Average temperature for zipcode \"%s\" was %dF' %\n      (zip_filter, total_temp/(update_nbr + 1)))\n\nsocket.close()\ncontext.term()\n\n```\n\n","slug":"ZMQ的学习和使用","published":1,"updated":"2021-06-20T10:25:20.126Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluqa1hiw002brloge48wdpd9","content":"<p>参考：<a href=\"https://wizardforcel.gitbooks.io/zmq-guide/content/index.html\">ZMQ 指南</a><br>代码：<a href=\"https://github.com/suAdminWen/studyForPython/tree/master/zmq-demo\">ZMQ-DEMO</a></p>\n<blockquote>\n<p>ZeroMQ 是基于消息队列的多线程网络库，其对套接字类型、连续处理、帧甚至路由的底层细节抽象，提供跨域多种传输协议的套接字。</p>\n</blockquote>\n<h2 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h2><p>1 创建上下文。ZMQ 的context上下文是线程安全，可以在多线程中使用，不需要主动为其加锁或解锁。<br>2 创建和销毁套接字。ZMQ套接字是在后台I&#x2F;O操作的，无论是发送还是接受消息，它都会先传送到一个本地的缓存队列。<br>3 配置和读取套接字选项。ZMQ套接字不是线程安全的，在 bind 之前不能使用。<br>4 为套接字连接。常用的四种协议：机器间(<code>tcp://</code>)、进程间(<code>ipc://</code>)、进程内(<code>inproce://</code>)、广播(<code>pgm://</code>)。<code>bind()</code>连接的节点称之为服务器，有固定的地址，<code>connect()</code>连接的节点成为客户端，其地址一般不固定。<br>5 发送和接收信息。</p>\n<h2 id=\"ZMQ的核心消息模式\"><a href=\"#ZMQ的核心消息模式\" class=\"headerlink\" title=\"ZMQ的核心消息模式\"></a>ZMQ的核心消息模式</h2><ul>\n<li>请求-应答模式，将一组服务端和一组客户端相连，用于远程过程调用或任务分发。（REQ-REP）</li>\n<li>发布-订阅模式，将一组发布着和一组订阅者相连，用于数据分发。（PUB-SUB）</li>\n<li>管道模式，使用PUSH或PULL的形式组装多个节点，可以产生步骤或循环。（PUSH-PULL）</li>\n</ul>\n<h2 id=\"实例（Python实现）\"><a href=\"#实例（Python实现）\" class=\"headerlink\" title=\"实例（Python实现）\"></a>实例（Python实现）</h2><h3 id=\"请求应答模式\"><a href=\"#请求应答模式\" class=\"headerlink\" title=\"请求应答模式\"></a>请求应答模式</h3><p>请求-应答模式，将一组服务端和一组客户端相连，用于远程过程调用或任务分发。（REQ-REP）</p>\n<h4 id=\"基础实现\"><a href=\"#基础实现\" class=\"headerlink\" title=\"基础实现\"></a>基础实现</h4><p><img src=\"https://github.com/anjuke/zguide-cn/raw/master/images/chapter1_1.png\" alt=\"REQ-REP\"></p>\n<span id=\"more\"></span>\n\n<ul>\n<li>server端(<code>server.py</code>)</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">基础的请求-应答模式。</span></span><br><span class=\"line\"><span class=\"string\">REP 用于响应方，不能主动发送请求，必须是在有响应之后才可以应答。</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> zmq</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建zmq上下文, 该上下文是线程安全的，可以在多线程中使用。</span></span><br><span class=\"line\">context = zmq.Context()</span><br><span class=\"line\">socket = context.socket(zmq.REP)</span><br><span class=\"line\"><span class=\"comment\"># 绑定套接字到端点</span></span><br><span class=\"line\">socket.bind(<span class=\"string\">&quot;tcp://*:5555&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 等待客户端请求</span></span><br><span class=\"line\">    message = socket.recv()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Received request: %s&quot;</span> % message)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 做些处理</span></span><br><span class=\"line\">    time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 响应客户端</span></span><br><span class=\"line\">    socket.send(<span class=\"string\">b&quot;World&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>client端(<code>client.py</code>)</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27; </span></span><br><span class=\"line\"><span class=\"string\">基础的请求-应答模式。</span></span><br><span class=\"line\"><span class=\"string\">REQ 用于请求方，如果没有应答将一直等待。</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> zmq</span><br><span class=\"line\"></span><br><span class=\"line\">context = zmq.Context()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;connecting to hello world server&#x27;</span>)</span><br><span class=\"line\">socket = context.socket(zmq.REQ)</span><br><span class=\"line\"><span class=\"comment\"># 连接套接字到端点</span></span><br><span class=\"line\">socket.connect(<span class=\"string\">&#x27;tcp://localhost:5555&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> request <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 主动发送请求</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Sending request %s ...&quot;</span> % request)</span><br><span class=\"line\">    socket.send(<span class=\"string\">b&quot;Hello&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 等待响应</span></span><br><span class=\"line\">    message = socket.recv()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Received reply %s [ %s ]&quot;</span> % (request, message))</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"进阶实现和理解\"><a href=\"#进阶实现和理解\" class=\"headerlink\" title=\"进阶实现和理解\"></a>进阶实现和理解</h4><p><img src=\"https://github.com/anjuke/zguide-cn/raw/master/images/chapter2_10.png\" alt=\"请求-应答模式，REQ和ROUTER通信，DEALER再和REP通信\"></p>\n<p>拓展请求-应答模式，使用broker进行负载均衡。</p>\n<ul>\n<li>REQ(client)只需要和ROUTER对话;</li>\n<li>REP(server)只需要和DEALER对话;</li>\n</ul>\n<p>在请求-应答模式中使用到的四种套接字类型：</p>\n<ul>\n<li>DEALER是一种负载均衡，它会将消息分发给已连接的节点，并使用公平队列的机制处理接受到的消息。DEALER的作用就像是PUSH和PULL的结合。</li>\n<li>REQ发送消息时会在消息顶部插入一个空帧，接受时会将空帧移去。其实REQ是建立在DEALER之上的，但REQ只有当消息发送并接受到回应后才能继续运行。</li>\n<li><strong>ROUTER在收到消息时会在顶部添加一个信封，标记消息来源</strong>。发送时会通过该信封决定哪个节点可以获取到该条消息。</li>\n<li>REP在收到消息时会将第一个空帧之前的所有信息保存起来，将原始信息传送给应用程序。在发送消息时，REP会用刚才保存的信息包裹应答消息。REP其实是建立在ROUTER之上的，但和REQ一样，必须完成接受和发送这两个动作后才能继续。</li>\n</ul>\n<p>borker实现(<code>broker.py</code>):</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> zmq</span><br><span class=\"line\"></span><br><span class=\"line\">context = zmq.Context()</span><br><span class=\"line\"></span><br><span class=\"line\">brokerfe = context.socket(zmq.ROUTER)</span><br><span class=\"line\">brokerfe.bind(<span class=\"string\">&#x27;tcp://*:5560&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">brokerbe = context.socket(zmq.DEALER)</span><br><span class=\"line\">brokerbe.bind(<span class=\"string\">&#x27;tcp://*:5561&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 一个线程中如果有多个sokect,同时需要收发数据时,</span></span><br><span class=\"line\"><span class=\"comment\"># zmq提供polling sockets实现，</span></span><br><span class=\"line\"><span class=\"comment\"># 不用在send()或者recv()时阻塞socket</span></span><br><span class=\"line\">poller = zmq.Poller()</span><br><span class=\"line\"><span class=\"comment\"># POLLIN在recv()端，负责刷新recv端口，来接受信息</span></span><br><span class=\"line\"><span class=\"comment\"># POLLOUT在send()端口，负责刷新send端，来发送消息。</span></span><br><span class=\"line\">poller.register(brokerbe, zmq.POLLIN)</span><br><span class=\"line\">poller.register(brokerfe, zmq.POLLIN)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    <span class=\"comment\"># poller.poll()轮询</span></span><br><span class=\"line\">    socks = <span class=\"built_in\">dict</span>(poller.poll())</span><br><span class=\"line\">    <span class=\"keyword\">if</span> socks.get(brokerfe) == zmq.POLLIN:</span><br><span class=\"line\">        msg = brokerfe.recv_multipart()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;brokerfe&#x27;</span>, msg)</span><br><span class=\"line\">        brokerbe.send_multipart(msg)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> socks.get(brokerbe) == zmq.POLLIN:</span><br><span class=\"line\">        msg = brokerbe.recv_multipart()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;brokerbe&#x27;</span>, msg)</span><br><span class=\"line\">        brokerfe.send_multipart(msg)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>client实现(<code>client.py</code>)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">拓展请求-应答模式，使用broker进行负载均衡。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">REQ(client)只需要和ROUTER对话;</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> zmq</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">context = zmq.Context()</span><br><span class=\"line\"></span><br><span class=\"line\">client = context.socket(zmq.REQ)</span><br><span class=\"line\">client.connect(<span class=\"string\">&#x27;tcp://localhost:5560&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    client.send(<span class=\"string\">b&#x27;HELLO&#x27;</span>)</span><br><span class=\"line\">    msg = client.recv()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(msg)</span><br><span class=\"line\">    time.sleep(<span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>server实现(<code>server.py</code>)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">拓展请求-应答模式，使用broker进行负载均衡。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">REP(server)只需要和DEALER对话;</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> zmq</span><br><span class=\"line\"></span><br><span class=\"line\">context = zmq.Context()</span><br><span class=\"line\">server = context.socket(zmq.REP)</span><br><span class=\"line\">server.connect(<span class=\"string\">&#x27;tcp://localhost:5561&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    msg = server.recv()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(msg)</span><br><span class=\"line\">    server.send(<span class=\"string\">b&#x27;OK&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"发布订阅模式\"><a href=\"#发布订阅模式\" class=\"headerlink\" title=\"发布订阅模式\"></a>发布订阅模式</h3><p>发布-订阅模式，将一组发布着和一组订阅者相连，用于数据分发。（PUB-SUB）</p>\n<p>在该模式中，<strong>订阅者(<code>SUB</code>)在订阅时，需要设置订阅的内容</strong>。如果你不设置订阅内容，那将什么消息都收不到，订阅信息可以是任何字符串，可以设置多次。只要消息满足其中一条订阅信息，SUB套接字就会收到。另外还需要注意的是，订阅者只能使用<code>revc</code>接收信息，不能发送信息；发布者<code>PUB</code>只能使用<code>send</code>发送信息。</p>\n<p>如果发布者没有订阅者与之相连，那它发送的消息将直接被丢弃。</p>\n<h4 id=\"基础实现-1\"><a href=\"#基础实现-1\" class=\"headerlink\" title=\"基础实现\"></a>基础实现</h4><p><img src=\"https://github.com/anjuke/zguide-cn/raw/master/images/chapter1_4.png\" alt=\"发布-订阅模式\"></p>\n<p>这里演示一个天气信息发布的例子，包括邮编、温度、相对湿度。我们生成这些随机信息服务端将信息发送给一组客户端。</p>\n<p>发布者(server.py)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> random <span class=\"keyword\">import</span> randrange</span><br><span class=\"line\"><span class=\"keyword\">import</span> zmq</span><br><span class=\"line\"></span><br><span class=\"line\">context = zmq.Context()</span><br><span class=\"line\">socket = context.socket(zmq.PUB)</span><br><span class=\"line\">socket.bind(<span class=\"string\">&#x27;tcp://*:5556&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 随机生成一些数据</span></span><br><span class=\"line\">    zipcode = randrange(<span class=\"number\">1</span>, <span class=\"number\">100000</span>)</span><br><span class=\"line\">    temperature = randrange(-<span class=\"number\">80</span>, <span class=\"number\">135</span>)</span><br><span class=\"line\">    relhumidity = randrange(<span class=\"number\">10</span>, <span class=\"number\">60</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    socket.send_string(<span class=\"string\">&#x27;%i %i %i&#x27;</span> % (zipcode, temperature, relhumidity))</span><br></pre></td></tr></table></figure>\n\n<p>订阅者(client.py)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> zmq</span><br><span class=\"line\"></span><br><span class=\"line\">context = zmq.Context()</span><br><span class=\"line\">socket = context.socket(zmq.SUB)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Collecting updates from weather server...&#x27;</span>)</span><br><span class=\"line\">socket.connect(<span class=\"string\">&#x27;tcp://localhost:5556&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">zip_filter = sys.argv[<span class=\"number\">1</span>] <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(sys.argv) &gt; <span class=\"number\">1</span> <span class=\"keyword\">else</span> <span class=\"string\">&#x27;10001&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(zip_filter, <span class=\"built_in\">bytes</span>):</span><br><span class=\"line\">    zip_filter = zip_filter.decode()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 这是订阅内容</span></span><br><span class=\"line\">socket.setsockopt_string(zmq.SUBSCRIBE, zip_filter)</span><br><span class=\"line\"></span><br><span class=\"line\">total_temp = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> update_nbr <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">5</span>):</span><br><span class=\"line\">    string = socket.recv_string()</span><br><span class=\"line\">    zipcode, temperature, relhumidity = string.split()</span><br><span class=\"line\">    total_temp += <span class=\"built_in\">int</span>(temperature)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Average temperature for zipcode &quot;%s&quot; was %dF&#x27;</span> %</span><br><span class=\"line\">      (zip_filter, total_temp/(update_nbr + <span class=\"number\">1</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\">socket.close()</span><br><span class=\"line\">context.term()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>参考：<a href=\"https://wizardforcel.gitbooks.io/zmq-guide/content/index.html\">ZMQ 指南</a><br>代码：<a href=\"https://github.com/suAdminWen/studyForPython/tree/master/zmq-demo\">ZMQ-DEMO</a></p>\n<blockquote>\n<p>ZeroMQ 是基于消息队列的多线程网络库，其对套接字类型、连续处理、帧甚至路由的底层细节抽象，提供跨域多种传输协议的套接字。</p>\n</blockquote>\n<h2 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h2><p>1 创建上下文。ZMQ 的context上下文是线程安全，可以在多线程中使用，不需要主动为其加锁或解锁。<br>2 创建和销毁套接字。ZMQ套接字是在后台I&#x2F;O操作的，无论是发送还是接受消息，它都会先传送到一个本地的缓存队列。<br>3 配置和读取套接字选项。ZMQ套接字不是线程安全的，在 bind 之前不能使用。<br>4 为套接字连接。常用的四种协议：机器间(<code>tcp://</code>)、进程间(<code>ipc://</code>)、进程内(<code>inproce://</code>)、广播(<code>pgm://</code>)。<code>bind()</code>连接的节点称之为服务器，有固定的地址，<code>connect()</code>连接的节点成为客户端，其地址一般不固定。<br>5 发送和接收信息。</p>\n<h2 id=\"ZMQ的核心消息模式\"><a href=\"#ZMQ的核心消息模式\" class=\"headerlink\" title=\"ZMQ的核心消息模式\"></a>ZMQ的核心消息模式</h2><ul>\n<li>请求-应答模式，将一组服务端和一组客户端相连，用于远程过程调用或任务分发。（REQ-REP）</li>\n<li>发布-订阅模式，将一组发布着和一组订阅者相连，用于数据分发。（PUB-SUB）</li>\n<li>管道模式，使用PUSH或PULL的形式组装多个节点，可以产生步骤或循环。（PUSH-PULL）</li>\n</ul>\n<h2 id=\"实例（Python实现）\"><a href=\"#实例（Python实现）\" class=\"headerlink\" title=\"实例（Python实现）\"></a>实例（Python实现）</h2><h3 id=\"请求应答模式\"><a href=\"#请求应答模式\" class=\"headerlink\" title=\"请求应答模式\"></a>请求应答模式</h3><p>请求-应答模式，将一组服务端和一组客户端相连，用于远程过程调用或任务分发。（REQ-REP）</p>\n<h4 id=\"基础实现\"><a href=\"#基础实现\" class=\"headerlink\" title=\"基础实现\"></a>基础实现</h4><p><img src=\"https://github.com/anjuke/zguide-cn/raw/master/images/chapter1_1.png\" alt=\"REQ-REP\"></p>","more":"<ul>\n<li>server端(<code>server.py</code>)</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">基础的请求-应答模式。</span></span><br><span class=\"line\"><span class=\"string\">REP 用于响应方，不能主动发送请求，必须是在有响应之后才可以应答。</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> zmq</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建zmq上下文, 该上下文是线程安全的，可以在多线程中使用。</span></span><br><span class=\"line\">context = zmq.Context()</span><br><span class=\"line\">socket = context.socket(zmq.REP)</span><br><span class=\"line\"><span class=\"comment\"># 绑定套接字到端点</span></span><br><span class=\"line\">socket.bind(<span class=\"string\">&quot;tcp://*:5555&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 等待客户端请求</span></span><br><span class=\"line\">    message = socket.recv()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Received request: %s&quot;</span> % message)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 做些处理</span></span><br><span class=\"line\">    time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 响应客户端</span></span><br><span class=\"line\">    socket.send(<span class=\"string\">b&quot;World&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>client端(<code>client.py</code>)</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27; </span></span><br><span class=\"line\"><span class=\"string\">基础的请求-应答模式。</span></span><br><span class=\"line\"><span class=\"string\">REQ 用于请求方，如果没有应答将一直等待。</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> zmq</span><br><span class=\"line\"></span><br><span class=\"line\">context = zmq.Context()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;connecting to hello world server&#x27;</span>)</span><br><span class=\"line\">socket = context.socket(zmq.REQ)</span><br><span class=\"line\"><span class=\"comment\"># 连接套接字到端点</span></span><br><span class=\"line\">socket.connect(<span class=\"string\">&#x27;tcp://localhost:5555&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> request <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 主动发送请求</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Sending request %s ...&quot;</span> % request)</span><br><span class=\"line\">    socket.send(<span class=\"string\">b&quot;Hello&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 等待响应</span></span><br><span class=\"line\">    message = socket.recv()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Received reply %s [ %s ]&quot;</span> % (request, message))</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"进阶实现和理解\"><a href=\"#进阶实现和理解\" class=\"headerlink\" title=\"进阶实现和理解\"></a>进阶实现和理解</h4><p><img src=\"https://github.com/anjuke/zguide-cn/raw/master/images/chapter2_10.png\" alt=\"请求-应答模式，REQ和ROUTER通信，DEALER再和REP通信\"></p>\n<p>拓展请求-应答模式，使用broker进行负载均衡。</p>\n<ul>\n<li>REQ(client)只需要和ROUTER对话;</li>\n<li>REP(server)只需要和DEALER对话;</li>\n</ul>\n<p>在请求-应答模式中使用到的四种套接字类型：</p>\n<ul>\n<li>DEALER是一种负载均衡，它会将消息分发给已连接的节点，并使用公平队列的机制处理接受到的消息。DEALER的作用就像是PUSH和PULL的结合。</li>\n<li>REQ发送消息时会在消息顶部插入一个空帧，接受时会将空帧移去。其实REQ是建立在DEALER之上的，但REQ只有当消息发送并接受到回应后才能继续运行。</li>\n<li><strong>ROUTER在收到消息时会在顶部添加一个信封，标记消息来源</strong>。发送时会通过该信封决定哪个节点可以获取到该条消息。</li>\n<li>REP在收到消息时会将第一个空帧之前的所有信息保存起来，将原始信息传送给应用程序。在发送消息时，REP会用刚才保存的信息包裹应答消息。REP其实是建立在ROUTER之上的，但和REQ一样，必须完成接受和发送这两个动作后才能继续。</li>\n</ul>\n<p>borker实现(<code>broker.py</code>):</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> zmq</span><br><span class=\"line\"></span><br><span class=\"line\">context = zmq.Context()</span><br><span class=\"line\"></span><br><span class=\"line\">brokerfe = context.socket(zmq.ROUTER)</span><br><span class=\"line\">brokerfe.bind(<span class=\"string\">&#x27;tcp://*:5560&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">brokerbe = context.socket(zmq.DEALER)</span><br><span class=\"line\">brokerbe.bind(<span class=\"string\">&#x27;tcp://*:5561&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 一个线程中如果有多个sokect,同时需要收发数据时,</span></span><br><span class=\"line\"><span class=\"comment\"># zmq提供polling sockets实现，</span></span><br><span class=\"line\"><span class=\"comment\"># 不用在send()或者recv()时阻塞socket</span></span><br><span class=\"line\">poller = zmq.Poller()</span><br><span class=\"line\"><span class=\"comment\"># POLLIN在recv()端，负责刷新recv端口，来接受信息</span></span><br><span class=\"line\"><span class=\"comment\"># POLLOUT在send()端口，负责刷新send端，来发送消息。</span></span><br><span class=\"line\">poller.register(brokerbe, zmq.POLLIN)</span><br><span class=\"line\">poller.register(brokerfe, zmq.POLLIN)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    <span class=\"comment\"># poller.poll()轮询</span></span><br><span class=\"line\">    socks = <span class=\"built_in\">dict</span>(poller.poll())</span><br><span class=\"line\">    <span class=\"keyword\">if</span> socks.get(brokerfe) == zmq.POLLIN:</span><br><span class=\"line\">        msg = brokerfe.recv_multipart()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;brokerfe&#x27;</span>, msg)</span><br><span class=\"line\">        brokerbe.send_multipart(msg)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> socks.get(brokerbe) == zmq.POLLIN:</span><br><span class=\"line\">        msg = brokerbe.recv_multipart()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;brokerbe&#x27;</span>, msg)</span><br><span class=\"line\">        brokerfe.send_multipart(msg)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>client实现(<code>client.py</code>)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">拓展请求-应答模式，使用broker进行负载均衡。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">REQ(client)只需要和ROUTER对话;</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> zmq</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">context = zmq.Context()</span><br><span class=\"line\"></span><br><span class=\"line\">client = context.socket(zmq.REQ)</span><br><span class=\"line\">client.connect(<span class=\"string\">&#x27;tcp://localhost:5560&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    client.send(<span class=\"string\">b&#x27;HELLO&#x27;</span>)</span><br><span class=\"line\">    msg = client.recv()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(msg)</span><br><span class=\"line\">    time.sleep(<span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>server实现(<code>server.py</code>)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">拓展请求-应答模式，使用broker进行负载均衡。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">REP(server)只需要和DEALER对话;</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> zmq</span><br><span class=\"line\"></span><br><span class=\"line\">context = zmq.Context()</span><br><span class=\"line\">server = context.socket(zmq.REP)</span><br><span class=\"line\">server.connect(<span class=\"string\">&#x27;tcp://localhost:5561&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    msg = server.recv()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(msg)</span><br><span class=\"line\">    server.send(<span class=\"string\">b&#x27;OK&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"发布订阅模式\"><a href=\"#发布订阅模式\" class=\"headerlink\" title=\"发布订阅模式\"></a>发布订阅模式</h3><p>发布-订阅模式，将一组发布着和一组订阅者相连，用于数据分发。（PUB-SUB）</p>\n<p>在该模式中，<strong>订阅者(<code>SUB</code>)在订阅时，需要设置订阅的内容</strong>。如果你不设置订阅内容，那将什么消息都收不到，订阅信息可以是任何字符串，可以设置多次。只要消息满足其中一条订阅信息，SUB套接字就会收到。另外还需要注意的是，订阅者只能使用<code>revc</code>接收信息，不能发送信息；发布者<code>PUB</code>只能使用<code>send</code>发送信息。</p>\n<p>如果发布者没有订阅者与之相连，那它发送的消息将直接被丢弃。</p>\n<h4 id=\"基础实现-1\"><a href=\"#基础实现-1\" class=\"headerlink\" title=\"基础实现\"></a>基础实现</h4><p><img src=\"https://github.com/anjuke/zguide-cn/raw/master/images/chapter1_4.png\" alt=\"发布-订阅模式\"></p>\n<p>这里演示一个天气信息发布的例子，包括邮编、温度、相对湿度。我们生成这些随机信息服务端将信息发送给一组客户端。</p>\n<p>发布者(server.py)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> random <span class=\"keyword\">import</span> randrange</span><br><span class=\"line\"><span class=\"keyword\">import</span> zmq</span><br><span class=\"line\"></span><br><span class=\"line\">context = zmq.Context()</span><br><span class=\"line\">socket = context.socket(zmq.PUB)</span><br><span class=\"line\">socket.bind(<span class=\"string\">&#x27;tcp://*:5556&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 随机生成一些数据</span></span><br><span class=\"line\">    zipcode = randrange(<span class=\"number\">1</span>, <span class=\"number\">100000</span>)</span><br><span class=\"line\">    temperature = randrange(-<span class=\"number\">80</span>, <span class=\"number\">135</span>)</span><br><span class=\"line\">    relhumidity = randrange(<span class=\"number\">10</span>, <span class=\"number\">60</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    socket.send_string(<span class=\"string\">&#x27;%i %i %i&#x27;</span> % (zipcode, temperature, relhumidity))</span><br></pre></td></tr></table></figure>\n\n<p>订阅者(client.py)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> zmq</span><br><span class=\"line\"></span><br><span class=\"line\">context = zmq.Context()</span><br><span class=\"line\">socket = context.socket(zmq.SUB)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Collecting updates from weather server...&#x27;</span>)</span><br><span class=\"line\">socket.connect(<span class=\"string\">&#x27;tcp://localhost:5556&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">zip_filter = sys.argv[<span class=\"number\">1</span>] <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(sys.argv) &gt; <span class=\"number\">1</span> <span class=\"keyword\">else</span> <span class=\"string\">&#x27;10001&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(zip_filter, <span class=\"built_in\">bytes</span>):</span><br><span class=\"line\">    zip_filter = zip_filter.decode()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 这是订阅内容</span></span><br><span class=\"line\">socket.setsockopt_string(zmq.SUBSCRIBE, zip_filter)</span><br><span class=\"line\"></span><br><span class=\"line\">total_temp = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> update_nbr <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">5</span>):</span><br><span class=\"line\">    string = socket.recv_string()</span><br><span class=\"line\">    zipcode, temperature, relhumidity = string.split()</span><br><span class=\"line\">    total_temp += <span class=\"built_in\">int</span>(temperature)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Average temperature for zipcode &quot;%s&quot; was %dF&#x27;</span> %</span><br><span class=\"line\">      (zip_filter, total_temp/(update_nbr + <span class=\"number\">1</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\">socket.close()</span><br><span class=\"line\">context.term()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"django定时任务","date":"2016-06-18T16:00:00.000Z","_content":"\n## django-crontab安装\n\n    pip install django-crontab\n\n## django-crontab配置\n\n只需要将django-crontab加入到settings.py的INSTALLED_APPS即可。如下代码：\n\n      INSTALLED_APPS = (\n          'django_crontab',\n          ...\n      )\n\n<!--more-->\n\ndjango-crontab可以定时运行自定义命令和函数两种方式，因为之前尝试用command+crontab时已经实现了自定义command，所以自然而然使用了自定义命令这种形式。\n\n## django-crontab定时运行命令\n\n在settings.py中加入了django-crontab的命令：\n\n    CRONJOBS = [\n       ('47 11 * * *', 'django.core.management.call_command', ['aizhan_5domain_visits']),\n    ]\n\n意思就是每天11点47分运行aizhan_5domain_visits这个命令。接下来就剩最后一步任务加载了。\n\n## django-crontab定时运行函数\n\ndjango-crontab也可以定时运行函数，只是在CRONJOBS配置时有差别。CRONJOBS关于函数的配置如下：\n\n    CRONJOBS = (\n        # 初级模式\n        ('*/5 * * * *', 'myproject.myapp.cron.my_scheduled_job'),\n\n        # 中级模式\n        ('0   0 1 * *', 'myproject.myapp.cron.my_scheduled_job', '> /tmp/last_scheduled_job.log'),\n\n        #高级模式\n        ('0   0 * * 0', 'django.core.management.call_command', ['dumpdata', 'auth'], {'indent': 4}, '> /home/john/backups/last_sunday_auth_backup.json'),\n    )\n\n分析结果：\n\n- 初级模式很直观，意思就是每五分钟执行一次my_scheduled_job这个程序；\n- 中级模式有个后缀，意思是将程序my_scheduled_job的结果输出到文件/tmp/last_scheduled_job.log中；\n- 高级模式加入了参数，其中['dumpdata', 'auth']和{'indent': 4}都是参数，只是[]中的参数是按照顺序代入，而{}中的参数指定了变量名称，最后一个也是输出结果的后缀。\n\n## django-crontab任务加载\n\ndjango-crontab任务加载比较简单，只需要运行`python manage.py crontab add`即可。如果你运行`crontab -e`可以看到crontab中多了一行：\n\n    47 11 * * * /home/aizhan/bin/python /home/aizhan/aizhan/manage.py crontab run c27d1050fb7f87225bcff587ef5a35a3 # django-cronjobs for aizhan\n\n这是django-crontab自动生成的。\n\n如果要移除所有的任务，则运行`python manage.py crontab remove`;\n当你修改了任务，需要再次运行`python manage.py crontab add`。\n","source":"_posts/django定时任务.md","raw":"---\ntitle: django定时任务\ndate: 2016-06-19\ntags: [python, django] \n---\n\n## django-crontab安装\n\n    pip install django-crontab\n\n## django-crontab配置\n\n只需要将django-crontab加入到settings.py的INSTALLED_APPS即可。如下代码：\n\n      INSTALLED_APPS = (\n          'django_crontab',\n          ...\n      )\n\n<!--more-->\n\ndjango-crontab可以定时运行自定义命令和函数两种方式，因为之前尝试用command+crontab时已经实现了自定义command，所以自然而然使用了自定义命令这种形式。\n\n## django-crontab定时运行命令\n\n在settings.py中加入了django-crontab的命令：\n\n    CRONJOBS = [\n       ('47 11 * * *', 'django.core.management.call_command', ['aizhan_5domain_visits']),\n    ]\n\n意思就是每天11点47分运行aizhan_5domain_visits这个命令。接下来就剩最后一步任务加载了。\n\n## django-crontab定时运行函数\n\ndjango-crontab也可以定时运行函数，只是在CRONJOBS配置时有差别。CRONJOBS关于函数的配置如下：\n\n    CRONJOBS = (\n        # 初级模式\n        ('*/5 * * * *', 'myproject.myapp.cron.my_scheduled_job'),\n\n        # 中级模式\n        ('0   0 1 * *', 'myproject.myapp.cron.my_scheduled_job', '> /tmp/last_scheduled_job.log'),\n\n        #高级模式\n        ('0   0 * * 0', 'django.core.management.call_command', ['dumpdata', 'auth'], {'indent': 4}, '> /home/john/backups/last_sunday_auth_backup.json'),\n    )\n\n分析结果：\n\n- 初级模式很直观，意思就是每五分钟执行一次my_scheduled_job这个程序；\n- 中级模式有个后缀，意思是将程序my_scheduled_job的结果输出到文件/tmp/last_scheduled_job.log中；\n- 高级模式加入了参数，其中['dumpdata', 'auth']和{'indent': 4}都是参数，只是[]中的参数是按照顺序代入，而{}中的参数指定了变量名称，最后一个也是输出结果的后缀。\n\n## django-crontab任务加载\n\ndjango-crontab任务加载比较简单，只需要运行`python manage.py crontab add`即可。如果你运行`crontab -e`可以看到crontab中多了一行：\n\n    47 11 * * * /home/aizhan/bin/python /home/aizhan/aizhan/manage.py crontab run c27d1050fb7f87225bcff587ef5a35a3 # django-cronjobs for aizhan\n\n这是django-crontab自动生成的。\n\n如果要移除所有的任务，则运行`python manage.py crontab remove`;\n当你修改了任务，需要再次运行`python manage.py crontab add`。\n","slug":"django定时任务","published":1,"updated":"2021-06-20T10:25:20.126Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluqa1hix002erlogfyip0su3","content":"<h2 id=\"django-crontab安装\"><a href=\"#django-crontab安装\" class=\"headerlink\" title=\"django-crontab安装\"></a>django-crontab安装</h2><pre><code>pip install django-crontab\n</code></pre>\n<h2 id=\"django-crontab配置\"><a href=\"#django-crontab配置\" class=\"headerlink\" title=\"django-crontab配置\"></a>django-crontab配置</h2><p>只需要将django-crontab加入到settings.py的INSTALLED_APPS即可。如下代码：</p>\n<pre><code>  INSTALLED_APPS = (\n      &#39;django_crontab&#39;,\n      ...\n  )\n</code></pre>\n<span id=\"more\"></span>\n\n<p>django-crontab可以定时运行自定义命令和函数两种方式，因为之前尝试用command+crontab时已经实现了自定义command，所以自然而然使用了自定义命令这种形式。</p>\n<h2 id=\"django-crontab定时运行命令\"><a href=\"#django-crontab定时运行命令\" class=\"headerlink\" title=\"django-crontab定时运行命令\"></a>django-crontab定时运行命令</h2><p>在settings.py中加入了django-crontab的命令：</p>\n<pre><code>CRONJOBS = [\n   (&#39;47 11 * * *&#39;, &#39;django.core.management.call_command&#39;, [&#39;aizhan_5domain_visits&#39;]),\n]\n</code></pre>\n<p>意思就是每天11点47分运行aizhan_5domain_visits这个命令。接下来就剩最后一步任务加载了。</p>\n<h2 id=\"django-crontab定时运行函数\"><a href=\"#django-crontab定时运行函数\" class=\"headerlink\" title=\"django-crontab定时运行函数\"></a>django-crontab定时运行函数</h2><p>django-crontab也可以定时运行函数，只是在CRONJOBS配置时有差别。CRONJOBS关于函数的配置如下：</p>\n<pre><code>CRONJOBS = (\n    # 初级模式\n    (&#39;*/5 * * * *&#39;, &#39;myproject.myapp.cron.my_scheduled_job&#39;),\n\n    # 中级模式\n    (&#39;0   0 1 * *&#39;, &#39;myproject.myapp.cron.my_scheduled_job&#39;, &#39;&gt; /tmp/last_scheduled_job.log&#39;),\n\n    #高级模式\n    (&#39;0   0 * * 0&#39;, &#39;django.core.management.call_command&#39;, [&#39;dumpdata&#39;, &#39;auth&#39;], &#123;&#39;indent&#39;: 4&#125;, &#39;&gt; /home/john/backups/last_sunday_auth_backup.json&#39;),\n)\n</code></pre>\n<p>分析结果：</p>\n<ul>\n<li>初级模式很直观，意思就是每五分钟执行一次my_scheduled_job这个程序；</li>\n<li>中级模式有个后缀，意思是将程序my_scheduled_job的结果输出到文件&#x2F;tmp&#x2F;last_scheduled_job.log中；</li>\n<li>高级模式加入了参数，其中[‘dumpdata’, ‘auth’]和{‘indent’: 4}都是参数，只是[]中的参数是按照顺序代入，而{}中的参数指定了变量名称，最后一个也是输出结果的后缀。</li>\n</ul>\n<h2 id=\"django-crontab任务加载\"><a href=\"#django-crontab任务加载\" class=\"headerlink\" title=\"django-crontab任务加载\"></a>django-crontab任务加载</h2><p>django-crontab任务加载比较简单，只需要运行<code>python manage.py crontab add</code>即可。如果你运行<code>crontab -e</code>可以看到crontab中多了一行：</p>\n<pre><code>47 11 * * * /home/aizhan/bin/python /home/aizhan/aizhan/manage.py crontab run c27d1050fb7f87225bcff587ef5a35a3 # django-cronjobs for aizhan\n</code></pre>\n<p>这是django-crontab自动生成的。</p>\n<p>如果要移除所有的任务，则运行<code>python manage.py crontab remove</code>;<br>当你修改了任务，需要再次运行<code>python manage.py crontab add</code>。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"django-crontab安装\"><a href=\"#django-crontab安装\" class=\"headerlink\" title=\"django-crontab安装\"></a>django-crontab安装</h2><pre><code>pip install django-crontab\n</code></pre>\n<h2 id=\"django-crontab配置\"><a href=\"#django-crontab配置\" class=\"headerlink\" title=\"django-crontab配置\"></a>django-crontab配置</h2><p>只需要将django-crontab加入到settings.py的INSTALLED_APPS即可。如下代码：</p>\n<pre><code>  INSTALLED_APPS = (\n      &#39;django_crontab&#39;,\n      ...\n  )\n</code></pre>","more":"<p>django-crontab可以定时运行自定义命令和函数两种方式，因为之前尝试用command+crontab时已经实现了自定义command，所以自然而然使用了自定义命令这种形式。</p>\n<h2 id=\"django-crontab定时运行命令\"><a href=\"#django-crontab定时运行命令\" class=\"headerlink\" title=\"django-crontab定时运行命令\"></a>django-crontab定时运行命令</h2><p>在settings.py中加入了django-crontab的命令：</p>\n<pre><code>CRONJOBS = [\n   (&#39;47 11 * * *&#39;, &#39;django.core.management.call_command&#39;, [&#39;aizhan_5domain_visits&#39;]),\n]\n</code></pre>\n<p>意思就是每天11点47分运行aizhan_5domain_visits这个命令。接下来就剩最后一步任务加载了。</p>\n<h2 id=\"django-crontab定时运行函数\"><a href=\"#django-crontab定时运行函数\" class=\"headerlink\" title=\"django-crontab定时运行函数\"></a>django-crontab定时运行函数</h2><p>django-crontab也可以定时运行函数，只是在CRONJOBS配置时有差别。CRONJOBS关于函数的配置如下：</p>\n<pre><code>CRONJOBS = (\n    # 初级模式\n    (&#39;*/5 * * * *&#39;, &#39;myproject.myapp.cron.my_scheduled_job&#39;),\n\n    # 中级模式\n    (&#39;0   0 1 * *&#39;, &#39;myproject.myapp.cron.my_scheduled_job&#39;, &#39;&gt; /tmp/last_scheduled_job.log&#39;),\n\n    #高级模式\n    (&#39;0   0 * * 0&#39;, &#39;django.core.management.call_command&#39;, [&#39;dumpdata&#39;, &#39;auth&#39;], &#123;&#39;indent&#39;: 4&#125;, &#39;&gt; /home/john/backups/last_sunday_auth_backup.json&#39;),\n)\n</code></pre>\n<p>分析结果：</p>\n<ul>\n<li>初级模式很直观，意思就是每五分钟执行一次my_scheduled_job这个程序；</li>\n<li>中级模式有个后缀，意思是将程序my_scheduled_job的结果输出到文件&#x2F;tmp&#x2F;last_scheduled_job.log中；</li>\n<li>高级模式加入了参数，其中[‘dumpdata’, ‘auth’]和{‘indent’: 4}都是参数，只是[]中的参数是按照顺序代入，而{}中的参数指定了变量名称，最后一个也是输出结果的后缀。</li>\n</ul>\n<h2 id=\"django-crontab任务加载\"><a href=\"#django-crontab任务加载\" class=\"headerlink\" title=\"django-crontab任务加载\"></a>django-crontab任务加载</h2><p>django-crontab任务加载比较简单，只需要运行<code>python manage.py crontab add</code>即可。如果你运行<code>crontab -e</code>可以看到crontab中多了一行：</p>\n<pre><code>47 11 * * * /home/aizhan/bin/python /home/aizhan/aizhan/manage.py crontab run c27d1050fb7f87225bcff587ef5a35a3 # django-cronjobs for aizhan\n</code></pre>\n<p>这是django-crontab自动生成的。</p>\n<p>如果要移除所有的任务，则运行<code>python manage.py crontab remove</code>;<br>当你修改了任务，需要再次运行<code>python manage.py crontab add</code>。</p>"},{"title":"django拾遗","date":"2017-11-30T16:00:00.000Z","_content":"\ndjango是一个非常强大的web框架，虽然也是基于MVC构造的架构，但是更加关注模型(Model，数据存取层)、模板(Template，表现层)和视图(Views，业务逻辑层)，所以成为MTV模式。django的主要目的是简便、快捷的开发数据库驱动的网站：\n\n- 对象关系映射(ORM): 以python类形式定义你的数据模型与关系数据库连接起来，你将得到一个非常容易使用的数据库API，同时也可以在django中使用原始的SQL语句。\n- URL分派： 使用正则表达式匹配URL，你可以设计任意的URL，没有框架的特定限定。\n- 模板系统： 使用django强大而可扩展的模板语言，可以分隔设计、内容和python代码。并且有可继承性。\n- 表单处理： 你可以方便的生成各种表单模型，实现表单的有效检验。可以方便的从你定义的模型实例生成相应的表单。\n- cache系统： 可以挂在内存缓存或者其他的框架实现超级缓存——实现你所需要的颗粒。\n- 会话(session)： 用户登录与权限检查，快速开发用户会话功能。\n- 国际化：内置国际化系统，方便开发出多种语言的网站。\n- 自动化的管理界面：不需要你花大量的工作来创建人员管理和更新内容。Django自带一个ADMIN site,类似于内容管理系统\n\n<!--more-->\n\n以上是django的简单介绍。在本人的实际开发中，由于当时基础的薄弱和项目开发进度的追赶，虽然用了一年多的django，但是完全没有深入。项目已经上线，回头来认真学习django，才发现django原来是那么的强大。很多功能它已经帮助开发者完成，我们直接使用就可以，但是当时由于理解的浅显，之学到了皮毛。再次学习django，在这里总结一些django优秀或十分有用的地方。\n\n# django模型（数据库）\n\n这一部分，重点介绍一些django模型相关的知识，可以帮助我们更好的使用django模型和加快开发速度。\n\n## Meta django的内部类。用于定义一些Django模型类的行为特性\n\n- abstract\n\n这个属性是定义当前的模型是不是一个抽象类。抽象类时不会对应数据库表的。一般我们用它来归纳一些公共属性字段，然后继承它的子类可以继承这些字段。取值为True或False。当abstract=True时，这个model就是一个抽象类。\n\n- app_label\n\n这个属性只在一种情况下使用，就是你的模型不在默认应用程序包下的models.py文件中，这时需要指定这个模型是哪个应用程序的。\n\n- db_table\n\n指定自定义数据库表名的。django有一套默认的按照一定规则生成数据模型对应的数据库表名，一般是应用的名称.models名。在MySQL中使用小写字母为表命名，当你通过db_table覆写表名称时，强烈推荐使用小写字母给表命名，特别是如果你用了MySQL作为后端。\n\n- db_tablespace\n\n当前模型所使用的数据库表空间 的名字。默认值是项目设置中的DEFAULT_TABLESPACE，如果它存在的话。如果后端并不支持表空间，这个选项可以忽略。\n\n- ordering\n\n这个字段是告诉Django模型对象返回的记录结果集是按照哪个字段排序的\n\n```\nordering=['order_date'] # 按订单升序排列\nordering=['-order_date'] # 按订单降序排列，-表示降序\nordering=['?order_date'] # 随机排序，？表示随机\n```\n\n- verbose_name\n\n就是给你的模型类起一个更可读的名字\n\n- verbose_name_plural\n\n这个选项是指定，模型的复数形式是什么\n\n### 现学现用\n\n\n\n```python\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\nfrom django.utils.encoding import python_2_unicode_compatible\nfrom django.db import models\n\n\nyes_or_no = (\n    (True, \"是\"),\n    (False, \"否\")\n)\n\n\n@python_2_unicode_compatible\nclass User(models.Model):\n    name = models.CharField(\"姓名\", max_length=10)\n    email = models.EmailField(\"邮箱\", unique=True)\n    isUse = models.BooleanField(\"是否启用\", choices=yes_or_no, default=True)\n\n    def __str__(self):\n        return self.name\n\n    class Meta:\n        verbose_name = \"用户\"\n        verbose_name_plural = \"用户\"\n        db_table = \"user\"\n\n\nclass Plan(models.Model):\n    user = models.ForeignKey(User)\n    content = models.CharField(\"计划内容\", max_length=20)\n    isDo = models.CharField(\"是否完成\", choices=yes_or_no, max_length=5, default=False)\n    description = models.CharField(\"备注\", max_length=150, blank=True, null=True)\n    notDoReason = models.CharField(\"未完成原因\", max_length=150, blank=True, null=True)\n\n    class Meta:\n        abstract = True  # 这个model就是一个抽象类\n\n\nclass DayPlan(Plan):\n    startTime = models.TimeField(\"开始时间\")\n    endTime = models.TimeField(\"结束时间\")\n    planDate = models.DateField(\"日期\")\n\n    class Meta:\n        db_table = \"dayPlan\"\n        verbose_name = \"每日计划\"\n        verbose_name_plural = \"每日计划\"\n        ordering = [\"planDate\"]\n\n\nclass WeekPlan(Plan):\n    startDate = models.DateField(\"开始日期\")\n    endDate = models.DateField(\"结束日期\")\n    priority = models.IntegerField(\"优先等级\", default=0)\n\n    class Meta:\n        db_table = \"weekPlan\"\n        verbose_name = \"每周要务\"\n        verbose_name_plural = \"每周要务\"\n        ordering = [\"endDate\"]\n\n```\n\n\n## 创建对象的方法\n\n一共有四种方法：\n\n```\n# 方法一\n\nAuthor.objects.create(name=\"Jom\", sex=\"男\")\n\n# 方法二\n\nauthor = Author(name=\"Jom\", sex=\"男\")\nauthor.save()\n\n# 方法三\n\nauthor = Author()\nauthor.name = \"Jom\"\nauthor.sex = \"男\"\nauthor.save()\n\n# 方法四，首先尝试获取，不存在就创建，可以防止重复\n\nAuthor.objects.get_or_create(name=\"Jom\", sex=\"男\")\n\n```\n\n前三种方法返回的都是对应的 object，最后一种方法返回的是一个元组，(object, True/False)，创建时返回 True, 已经存在时返回 False\n\n# Form\n\n\n### 现学现用\n\n```python\n\n# views.py\ndef login(request):\n    if request.method == \"POST\":\n        fm = LoginForm(request.POST)\n        if fm.is_valid():\n            userName = fm.cleaned_data['userName']\n            passWord = fm.cleaned_data['passWord']\n            print userName, passWord\n        return redirect(index)\n    fm = LoginForm()\n    return render(request, \"login.html\", {\"fm\": fm})\n\n# forms.py\n# -*- coding: utf-8 -*-\nfrom django import forms\n\n\nclass LoginForm(forms.Form):\n    userName = forms.CharField(max_length=20,\n                               required=True,\n                               widget=forms.TextInput(attrs={'class': 'weui-input',\n                                                             'name': 'userName'}),\n                               error_messages={'required': \"用户名不能为空\"})\n    passWord = forms.CharField(max_length=20,\n                              required=True,\n                              widget=forms.PasswordInput(attrs={'class': 'weui-input',\n                                                                'name': 'passWord'}),\n                              error_messages={'required': \"密码不能为空\"})\n\n\n```\n","source":"_posts/django拾遗.md","raw":"---\ntitle: django拾遗\ndate: 2017-12-1\ntags: [python, django]\n---\n\ndjango是一个非常强大的web框架，虽然也是基于MVC构造的架构，但是更加关注模型(Model，数据存取层)、模板(Template，表现层)和视图(Views，业务逻辑层)，所以成为MTV模式。django的主要目的是简便、快捷的开发数据库驱动的网站：\n\n- 对象关系映射(ORM): 以python类形式定义你的数据模型与关系数据库连接起来，你将得到一个非常容易使用的数据库API，同时也可以在django中使用原始的SQL语句。\n- URL分派： 使用正则表达式匹配URL，你可以设计任意的URL，没有框架的特定限定。\n- 模板系统： 使用django强大而可扩展的模板语言，可以分隔设计、内容和python代码。并且有可继承性。\n- 表单处理： 你可以方便的生成各种表单模型，实现表单的有效检验。可以方便的从你定义的模型实例生成相应的表单。\n- cache系统： 可以挂在内存缓存或者其他的框架实现超级缓存——实现你所需要的颗粒。\n- 会话(session)： 用户登录与权限检查，快速开发用户会话功能。\n- 国际化：内置国际化系统，方便开发出多种语言的网站。\n- 自动化的管理界面：不需要你花大量的工作来创建人员管理和更新内容。Django自带一个ADMIN site,类似于内容管理系统\n\n<!--more-->\n\n以上是django的简单介绍。在本人的实际开发中，由于当时基础的薄弱和项目开发进度的追赶，虽然用了一年多的django，但是完全没有深入。项目已经上线，回头来认真学习django，才发现django原来是那么的强大。很多功能它已经帮助开发者完成，我们直接使用就可以，但是当时由于理解的浅显，之学到了皮毛。再次学习django，在这里总结一些django优秀或十分有用的地方。\n\n# django模型（数据库）\n\n这一部分，重点介绍一些django模型相关的知识，可以帮助我们更好的使用django模型和加快开发速度。\n\n## Meta django的内部类。用于定义一些Django模型类的行为特性\n\n- abstract\n\n这个属性是定义当前的模型是不是一个抽象类。抽象类时不会对应数据库表的。一般我们用它来归纳一些公共属性字段，然后继承它的子类可以继承这些字段。取值为True或False。当abstract=True时，这个model就是一个抽象类。\n\n- app_label\n\n这个属性只在一种情况下使用，就是你的模型不在默认应用程序包下的models.py文件中，这时需要指定这个模型是哪个应用程序的。\n\n- db_table\n\n指定自定义数据库表名的。django有一套默认的按照一定规则生成数据模型对应的数据库表名，一般是应用的名称.models名。在MySQL中使用小写字母为表命名，当你通过db_table覆写表名称时，强烈推荐使用小写字母给表命名，特别是如果你用了MySQL作为后端。\n\n- db_tablespace\n\n当前模型所使用的数据库表空间 的名字。默认值是项目设置中的DEFAULT_TABLESPACE，如果它存在的话。如果后端并不支持表空间，这个选项可以忽略。\n\n- ordering\n\n这个字段是告诉Django模型对象返回的记录结果集是按照哪个字段排序的\n\n```\nordering=['order_date'] # 按订单升序排列\nordering=['-order_date'] # 按订单降序排列，-表示降序\nordering=['?order_date'] # 随机排序，？表示随机\n```\n\n- verbose_name\n\n就是给你的模型类起一个更可读的名字\n\n- verbose_name_plural\n\n这个选项是指定，模型的复数形式是什么\n\n### 现学现用\n\n\n\n```python\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\nfrom django.utils.encoding import python_2_unicode_compatible\nfrom django.db import models\n\n\nyes_or_no = (\n    (True, \"是\"),\n    (False, \"否\")\n)\n\n\n@python_2_unicode_compatible\nclass User(models.Model):\n    name = models.CharField(\"姓名\", max_length=10)\n    email = models.EmailField(\"邮箱\", unique=True)\n    isUse = models.BooleanField(\"是否启用\", choices=yes_or_no, default=True)\n\n    def __str__(self):\n        return self.name\n\n    class Meta:\n        verbose_name = \"用户\"\n        verbose_name_plural = \"用户\"\n        db_table = \"user\"\n\n\nclass Plan(models.Model):\n    user = models.ForeignKey(User)\n    content = models.CharField(\"计划内容\", max_length=20)\n    isDo = models.CharField(\"是否完成\", choices=yes_or_no, max_length=5, default=False)\n    description = models.CharField(\"备注\", max_length=150, blank=True, null=True)\n    notDoReason = models.CharField(\"未完成原因\", max_length=150, blank=True, null=True)\n\n    class Meta:\n        abstract = True  # 这个model就是一个抽象类\n\n\nclass DayPlan(Plan):\n    startTime = models.TimeField(\"开始时间\")\n    endTime = models.TimeField(\"结束时间\")\n    planDate = models.DateField(\"日期\")\n\n    class Meta:\n        db_table = \"dayPlan\"\n        verbose_name = \"每日计划\"\n        verbose_name_plural = \"每日计划\"\n        ordering = [\"planDate\"]\n\n\nclass WeekPlan(Plan):\n    startDate = models.DateField(\"开始日期\")\n    endDate = models.DateField(\"结束日期\")\n    priority = models.IntegerField(\"优先等级\", default=0)\n\n    class Meta:\n        db_table = \"weekPlan\"\n        verbose_name = \"每周要务\"\n        verbose_name_plural = \"每周要务\"\n        ordering = [\"endDate\"]\n\n```\n\n\n## 创建对象的方法\n\n一共有四种方法：\n\n```\n# 方法一\n\nAuthor.objects.create(name=\"Jom\", sex=\"男\")\n\n# 方法二\n\nauthor = Author(name=\"Jom\", sex=\"男\")\nauthor.save()\n\n# 方法三\n\nauthor = Author()\nauthor.name = \"Jom\"\nauthor.sex = \"男\"\nauthor.save()\n\n# 方法四，首先尝试获取，不存在就创建，可以防止重复\n\nAuthor.objects.get_or_create(name=\"Jom\", sex=\"男\")\n\n```\n\n前三种方法返回的都是对应的 object，最后一种方法返回的是一个元组，(object, True/False)，创建时返回 True, 已经存在时返回 False\n\n# Form\n\n\n### 现学现用\n\n```python\n\n# views.py\ndef login(request):\n    if request.method == \"POST\":\n        fm = LoginForm(request.POST)\n        if fm.is_valid():\n            userName = fm.cleaned_data['userName']\n            passWord = fm.cleaned_data['passWord']\n            print userName, passWord\n        return redirect(index)\n    fm = LoginForm()\n    return render(request, \"login.html\", {\"fm\": fm})\n\n# forms.py\n# -*- coding: utf-8 -*-\nfrom django import forms\n\n\nclass LoginForm(forms.Form):\n    userName = forms.CharField(max_length=20,\n                               required=True,\n                               widget=forms.TextInput(attrs={'class': 'weui-input',\n                                                             'name': 'userName'}),\n                               error_messages={'required': \"用户名不能为空\"})\n    passWord = forms.CharField(max_length=20,\n                              required=True,\n                              widget=forms.PasswordInput(attrs={'class': 'weui-input',\n                                                                'name': 'passWord'}),\n                              error_messages={'required': \"密码不能为空\"})\n\n\n```\n","slug":"django拾遗","published":1,"updated":"2021-06-20T10:25:20.126Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluqa1hiy002frlog7rmb48kl","content":"<p>django是一个非常强大的web框架，虽然也是基于MVC构造的架构，但是更加关注模型(Model，数据存取层)、模板(Template，表现层)和视图(Views，业务逻辑层)，所以成为MTV模式。django的主要目的是简便、快捷的开发数据库驱动的网站：</p>\n<ul>\n<li>对象关系映射(ORM): 以python类形式定义你的数据模型与关系数据库连接起来，你将得到一个非常容易使用的数据库API，同时也可以在django中使用原始的SQL语句。</li>\n<li>URL分派： 使用正则表达式匹配URL，你可以设计任意的URL，没有框架的特定限定。</li>\n<li>模板系统： 使用django强大而可扩展的模板语言，可以分隔设计、内容和python代码。并且有可继承性。</li>\n<li>表单处理： 你可以方便的生成各种表单模型，实现表单的有效检验。可以方便的从你定义的模型实例生成相应的表单。</li>\n<li>cache系统： 可以挂在内存缓存或者其他的框架实现超级缓存——实现你所需要的颗粒。</li>\n<li>会话(session)： 用户登录与权限检查，快速开发用户会话功能。</li>\n<li>国际化：内置国际化系统，方便开发出多种语言的网站。</li>\n<li>自动化的管理界面：不需要你花大量的工作来创建人员管理和更新内容。Django自带一个ADMIN site,类似于内容管理系统</li>\n</ul>\n<span id=\"more\"></span>\n\n<p>以上是django的简单介绍。在本人的实际开发中，由于当时基础的薄弱和项目开发进度的追赶，虽然用了一年多的django，但是完全没有深入。项目已经上线，回头来认真学习django，才发现django原来是那么的强大。很多功能它已经帮助开发者完成，我们直接使用就可以，但是当时由于理解的浅显，之学到了皮毛。再次学习django，在这里总结一些django优秀或十分有用的地方。</p>\n<h1 id=\"django模型（数据库）\"><a href=\"#django模型（数据库）\" class=\"headerlink\" title=\"django模型（数据库）\"></a>django模型（数据库）</h1><p>这一部分，重点介绍一些django模型相关的知识，可以帮助我们更好的使用django模型和加快开发速度。</p>\n<h2 id=\"Meta-django的内部类。用于定义一些Django模型类的行为特性\"><a href=\"#Meta-django的内部类。用于定义一些Django模型类的行为特性\" class=\"headerlink\" title=\"Meta django的内部类。用于定义一些Django模型类的行为特性\"></a>Meta django的内部类。用于定义一些Django模型类的行为特性</h2><ul>\n<li>abstract</li>\n</ul>\n<p>这个属性是定义当前的模型是不是一个抽象类。抽象类时不会对应数据库表的。一般我们用它来归纳一些公共属性字段，然后继承它的子类可以继承这些字段。取值为True或False。当abstract&#x3D;True时，这个model就是一个抽象类。</p>\n<ul>\n<li>app_label</li>\n</ul>\n<p>这个属性只在一种情况下使用，就是你的模型不在默认应用程序包下的models.py文件中，这时需要指定这个模型是哪个应用程序的。</p>\n<ul>\n<li>db_table</li>\n</ul>\n<p>指定自定义数据库表名的。django有一套默认的按照一定规则生成数据模型对应的数据库表名，一般是应用的名称.models名。在MySQL中使用小写字母为表命名，当你通过db_table覆写表名称时，强烈推荐使用小写字母给表命名，特别是如果你用了MySQL作为后端。</p>\n<ul>\n<li>db_tablespace</li>\n</ul>\n<p>当前模型所使用的数据库表空间 的名字。默认值是项目设置中的DEFAULT_TABLESPACE，如果它存在的话。如果后端并不支持表空间，这个选项可以忽略。</p>\n<ul>\n<li>ordering</li>\n</ul>\n<p>这个字段是告诉Django模型对象返回的记录结果集是按照哪个字段排序的</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ordering=[&#x27;order_date&#x27;] # 按订单升序排列</span><br><span class=\"line\">ordering=[&#x27;-order_date&#x27;] # 按订单降序排列，-表示降序</span><br><span class=\"line\">ordering=[&#x27;?order_date&#x27;] # 随机排序，？表示随机</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>verbose_name</li>\n</ul>\n<p>就是给你的模型类起一个更可读的名字</p>\n<ul>\n<li>verbose_name_plural</li>\n</ul>\n<p>这个选项是指定，模型的复数形式是什么</p>\n<h3 id=\"现学现用\"><a href=\"#现学现用\" class=\"headerlink\" title=\"现学现用\"></a>现学现用</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> __future__ <span class=\"keyword\">import</span> unicode_literals</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.utils.encoding <span class=\"keyword\">import</span> python_2_unicode_compatible</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.db <span class=\"keyword\">import</span> models</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">yes_or_no = (</span><br><span class=\"line\">    (<span class=\"literal\">True</span>, <span class=\"string\">&quot;是&quot;</span>),</span><br><span class=\"line\">    (<span class=\"literal\">False</span>, <span class=\"string\">&quot;否&quot;</span>)</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@python_2_unicode_compatible</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">User</span>(models.Model):</span><br><span class=\"line\">    name = models.CharField(<span class=\"string\">&quot;姓名&quot;</span>, max_length=<span class=\"number\">10</span>)</span><br><span class=\"line\">    email = models.EmailField(<span class=\"string\">&quot;邮箱&quot;</span>, unique=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    isUse = models.BooleanField(<span class=\"string\">&quot;是否启用&quot;</span>, choices=yes_or_no, default=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__str__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.name</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title class_\">Meta</span>:</span><br><span class=\"line\">        verbose_name = <span class=\"string\">&quot;用户&quot;</span></span><br><span class=\"line\">        verbose_name_plural = <span class=\"string\">&quot;用户&quot;</span></span><br><span class=\"line\">        db_table = <span class=\"string\">&quot;user&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Plan</span>(models.Model):</span><br><span class=\"line\">    user = models.ForeignKey(User)</span><br><span class=\"line\">    content = models.CharField(<span class=\"string\">&quot;计划内容&quot;</span>, max_length=<span class=\"number\">20</span>)</span><br><span class=\"line\">    isDo = models.CharField(<span class=\"string\">&quot;是否完成&quot;</span>, choices=yes_or_no, max_length=<span class=\"number\">5</span>, default=<span class=\"literal\">False</span>)</span><br><span class=\"line\">    description = models.CharField(<span class=\"string\">&quot;备注&quot;</span>, max_length=<span class=\"number\">150</span>, blank=<span class=\"literal\">True</span>, null=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    notDoReason = models.CharField(<span class=\"string\">&quot;未完成原因&quot;</span>, max_length=<span class=\"number\">150</span>, blank=<span class=\"literal\">True</span>, null=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title class_\">Meta</span>:</span><br><span class=\"line\">        abstract = <span class=\"literal\">True</span>  <span class=\"comment\"># 这个model就是一个抽象类</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DayPlan</span>(<span class=\"title class_ inherited__\">Plan</span>):</span><br><span class=\"line\">    startTime = models.TimeField(<span class=\"string\">&quot;开始时间&quot;</span>)</span><br><span class=\"line\">    endTime = models.TimeField(<span class=\"string\">&quot;结束时间&quot;</span>)</span><br><span class=\"line\">    planDate = models.DateField(<span class=\"string\">&quot;日期&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title class_\">Meta</span>:</span><br><span class=\"line\">        db_table = <span class=\"string\">&quot;dayPlan&quot;</span></span><br><span class=\"line\">        verbose_name = <span class=\"string\">&quot;每日计划&quot;</span></span><br><span class=\"line\">        verbose_name_plural = <span class=\"string\">&quot;每日计划&quot;</span></span><br><span class=\"line\">        ordering = [<span class=\"string\">&quot;planDate&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">WeekPlan</span>(<span class=\"title class_ inherited__\">Plan</span>):</span><br><span class=\"line\">    startDate = models.DateField(<span class=\"string\">&quot;开始日期&quot;</span>)</span><br><span class=\"line\">    endDate = models.DateField(<span class=\"string\">&quot;结束日期&quot;</span>)</span><br><span class=\"line\">    priority = models.IntegerField(<span class=\"string\">&quot;优先等级&quot;</span>, default=<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title class_\">Meta</span>:</span><br><span class=\"line\">        db_table = <span class=\"string\">&quot;weekPlan&quot;</span></span><br><span class=\"line\">        verbose_name = <span class=\"string\">&quot;每周要务&quot;</span></span><br><span class=\"line\">        verbose_name_plural = <span class=\"string\">&quot;每周要务&quot;</span></span><br><span class=\"line\">        ordering = [<span class=\"string\">&quot;endDate&quot;</span>]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"创建对象的方法\"><a href=\"#创建对象的方法\" class=\"headerlink\" title=\"创建对象的方法\"></a>创建对象的方法</h2><p>一共有四种方法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 方法一</span><br><span class=\"line\"></span><br><span class=\"line\">Author.objects.create(name=&quot;Jom&quot;, sex=&quot;男&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\"># 方法二</span><br><span class=\"line\"></span><br><span class=\"line\">author = Author(name=&quot;Jom&quot;, sex=&quot;男&quot;)</span><br><span class=\"line\">author.save()</span><br><span class=\"line\"></span><br><span class=\"line\"># 方法三</span><br><span class=\"line\"></span><br><span class=\"line\">author = Author()</span><br><span class=\"line\">author.name = &quot;Jom&quot;</span><br><span class=\"line\">author.sex = &quot;男&quot;</span><br><span class=\"line\">author.save()</span><br><span class=\"line\"></span><br><span class=\"line\"># 方法四，首先尝试获取，不存在就创建，可以防止重复</span><br><span class=\"line\"></span><br><span class=\"line\">Author.objects.get_or_create(name=&quot;Jom&quot;, sex=&quot;男&quot;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>前三种方法返回的都是对应的 object，最后一种方法返回的是一个元组，(object, True&#x2F;False)，创建时返回 True, 已经存在时返回 False</p>\n<h1 id=\"Form\"><a href=\"#Form\" class=\"headerlink\" title=\"Form\"></a>Form</h1><h3 id=\"现学现用-1\"><a href=\"#现学现用-1\" class=\"headerlink\" title=\"现学现用\"></a>现学现用</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># views.py</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">login</span>(<span class=\"params\">request</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> request.method == <span class=\"string\">&quot;POST&quot;</span>:</span><br><span class=\"line\">        fm = LoginForm(request.POST)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> fm.is_valid():</span><br><span class=\"line\">            userName = fm.cleaned_data[<span class=\"string\">&#x27;userName&#x27;</span>]</span><br><span class=\"line\">            passWord = fm.cleaned_data[<span class=\"string\">&#x27;passWord&#x27;</span>]</span><br><span class=\"line\">            <span class=\"built_in\">print</span> userName, passWord</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redirect(index)</span><br><span class=\"line\">    fm = LoginForm()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> render(request, <span class=\"string\">&quot;login.html&quot;</span>, &#123;<span class=\"string\">&quot;fm&quot;</span>: fm&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># forms.py</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> django <span class=\"keyword\">import</span> forms</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LoginForm</span>(forms.Form):</span><br><span class=\"line\">    userName = forms.CharField(max_length=<span class=\"number\">20</span>,</span><br><span class=\"line\">                               required=<span class=\"literal\">True</span>,</span><br><span class=\"line\">                               widget=forms.TextInput(attrs=&#123;<span class=\"string\">&#x27;class&#x27;</span>: <span class=\"string\">&#x27;weui-input&#x27;</span>,</span><br><span class=\"line\">                                                             <span class=\"string\">&#x27;name&#x27;</span>: <span class=\"string\">&#x27;userName&#x27;</span>&#125;),</span><br><span class=\"line\">                               error_messages=&#123;<span class=\"string\">&#x27;required&#x27;</span>: <span class=\"string\">&quot;用户名不能为空&quot;</span>&#125;)</span><br><span class=\"line\">    passWord = forms.CharField(max_length=<span class=\"number\">20</span>,</span><br><span class=\"line\">                              required=<span class=\"literal\">True</span>,</span><br><span class=\"line\">                              widget=forms.PasswordInput(attrs=&#123;<span class=\"string\">&#x27;class&#x27;</span>: <span class=\"string\">&#x27;weui-input&#x27;</span>,</span><br><span class=\"line\">                                                                <span class=\"string\">&#x27;name&#x27;</span>: <span class=\"string\">&#x27;passWord&#x27;</span>&#125;),</span><br><span class=\"line\">                              error_messages=&#123;<span class=\"string\">&#x27;required&#x27;</span>: <span class=\"string\">&quot;密码不能为空&quot;</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>django是一个非常强大的web框架，虽然也是基于MVC构造的架构，但是更加关注模型(Model，数据存取层)、模板(Template，表现层)和视图(Views，业务逻辑层)，所以成为MTV模式。django的主要目的是简便、快捷的开发数据库驱动的网站：</p>\n<ul>\n<li>对象关系映射(ORM): 以python类形式定义你的数据模型与关系数据库连接起来，你将得到一个非常容易使用的数据库API，同时也可以在django中使用原始的SQL语句。</li>\n<li>URL分派： 使用正则表达式匹配URL，你可以设计任意的URL，没有框架的特定限定。</li>\n<li>模板系统： 使用django强大而可扩展的模板语言，可以分隔设计、内容和python代码。并且有可继承性。</li>\n<li>表单处理： 你可以方便的生成各种表单模型，实现表单的有效检验。可以方便的从你定义的模型实例生成相应的表单。</li>\n<li>cache系统： 可以挂在内存缓存或者其他的框架实现超级缓存——实现你所需要的颗粒。</li>\n<li>会话(session)： 用户登录与权限检查，快速开发用户会话功能。</li>\n<li>国际化：内置国际化系统，方便开发出多种语言的网站。</li>\n<li>自动化的管理界面：不需要你花大量的工作来创建人员管理和更新内容。Django自带一个ADMIN site,类似于内容管理系统</li>\n</ul>","more":"<p>以上是django的简单介绍。在本人的实际开发中，由于当时基础的薄弱和项目开发进度的追赶，虽然用了一年多的django，但是完全没有深入。项目已经上线，回头来认真学习django，才发现django原来是那么的强大。很多功能它已经帮助开发者完成，我们直接使用就可以，但是当时由于理解的浅显，之学到了皮毛。再次学习django，在这里总结一些django优秀或十分有用的地方。</p>\n<h1 id=\"django模型（数据库）\"><a href=\"#django模型（数据库）\" class=\"headerlink\" title=\"django模型（数据库）\"></a>django模型（数据库）</h1><p>这一部分，重点介绍一些django模型相关的知识，可以帮助我们更好的使用django模型和加快开发速度。</p>\n<h2 id=\"Meta-django的内部类。用于定义一些Django模型类的行为特性\"><a href=\"#Meta-django的内部类。用于定义一些Django模型类的行为特性\" class=\"headerlink\" title=\"Meta django的内部类。用于定义一些Django模型类的行为特性\"></a>Meta django的内部类。用于定义一些Django模型类的行为特性</h2><ul>\n<li>abstract</li>\n</ul>\n<p>这个属性是定义当前的模型是不是一个抽象类。抽象类时不会对应数据库表的。一般我们用它来归纳一些公共属性字段，然后继承它的子类可以继承这些字段。取值为True或False。当abstract&#x3D;True时，这个model就是一个抽象类。</p>\n<ul>\n<li>app_label</li>\n</ul>\n<p>这个属性只在一种情况下使用，就是你的模型不在默认应用程序包下的models.py文件中，这时需要指定这个模型是哪个应用程序的。</p>\n<ul>\n<li>db_table</li>\n</ul>\n<p>指定自定义数据库表名的。django有一套默认的按照一定规则生成数据模型对应的数据库表名，一般是应用的名称.models名。在MySQL中使用小写字母为表命名，当你通过db_table覆写表名称时，强烈推荐使用小写字母给表命名，特别是如果你用了MySQL作为后端。</p>\n<ul>\n<li>db_tablespace</li>\n</ul>\n<p>当前模型所使用的数据库表空间 的名字。默认值是项目设置中的DEFAULT_TABLESPACE，如果它存在的话。如果后端并不支持表空间，这个选项可以忽略。</p>\n<ul>\n<li>ordering</li>\n</ul>\n<p>这个字段是告诉Django模型对象返回的记录结果集是按照哪个字段排序的</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ordering=[&#x27;order_date&#x27;] # 按订单升序排列</span><br><span class=\"line\">ordering=[&#x27;-order_date&#x27;] # 按订单降序排列，-表示降序</span><br><span class=\"line\">ordering=[&#x27;?order_date&#x27;] # 随机排序，？表示随机</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>verbose_name</li>\n</ul>\n<p>就是给你的模型类起一个更可读的名字</p>\n<ul>\n<li>verbose_name_plural</li>\n</ul>\n<p>这个选项是指定，模型的复数形式是什么</p>\n<h3 id=\"现学现用\"><a href=\"#现学现用\" class=\"headerlink\" title=\"现学现用\"></a>现学现用</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> __future__ <span class=\"keyword\">import</span> unicode_literals</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.utils.encoding <span class=\"keyword\">import</span> python_2_unicode_compatible</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.db <span class=\"keyword\">import</span> models</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">yes_or_no = (</span><br><span class=\"line\">    (<span class=\"literal\">True</span>, <span class=\"string\">&quot;是&quot;</span>),</span><br><span class=\"line\">    (<span class=\"literal\">False</span>, <span class=\"string\">&quot;否&quot;</span>)</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@python_2_unicode_compatible</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">User</span>(models.Model):</span><br><span class=\"line\">    name = models.CharField(<span class=\"string\">&quot;姓名&quot;</span>, max_length=<span class=\"number\">10</span>)</span><br><span class=\"line\">    email = models.EmailField(<span class=\"string\">&quot;邮箱&quot;</span>, unique=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    isUse = models.BooleanField(<span class=\"string\">&quot;是否启用&quot;</span>, choices=yes_or_no, default=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__str__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.name</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title class_\">Meta</span>:</span><br><span class=\"line\">        verbose_name = <span class=\"string\">&quot;用户&quot;</span></span><br><span class=\"line\">        verbose_name_plural = <span class=\"string\">&quot;用户&quot;</span></span><br><span class=\"line\">        db_table = <span class=\"string\">&quot;user&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Plan</span>(models.Model):</span><br><span class=\"line\">    user = models.ForeignKey(User)</span><br><span class=\"line\">    content = models.CharField(<span class=\"string\">&quot;计划内容&quot;</span>, max_length=<span class=\"number\">20</span>)</span><br><span class=\"line\">    isDo = models.CharField(<span class=\"string\">&quot;是否完成&quot;</span>, choices=yes_or_no, max_length=<span class=\"number\">5</span>, default=<span class=\"literal\">False</span>)</span><br><span class=\"line\">    description = models.CharField(<span class=\"string\">&quot;备注&quot;</span>, max_length=<span class=\"number\">150</span>, blank=<span class=\"literal\">True</span>, null=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    notDoReason = models.CharField(<span class=\"string\">&quot;未完成原因&quot;</span>, max_length=<span class=\"number\">150</span>, blank=<span class=\"literal\">True</span>, null=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title class_\">Meta</span>:</span><br><span class=\"line\">        abstract = <span class=\"literal\">True</span>  <span class=\"comment\"># 这个model就是一个抽象类</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DayPlan</span>(<span class=\"title class_ inherited__\">Plan</span>):</span><br><span class=\"line\">    startTime = models.TimeField(<span class=\"string\">&quot;开始时间&quot;</span>)</span><br><span class=\"line\">    endTime = models.TimeField(<span class=\"string\">&quot;结束时间&quot;</span>)</span><br><span class=\"line\">    planDate = models.DateField(<span class=\"string\">&quot;日期&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title class_\">Meta</span>:</span><br><span class=\"line\">        db_table = <span class=\"string\">&quot;dayPlan&quot;</span></span><br><span class=\"line\">        verbose_name = <span class=\"string\">&quot;每日计划&quot;</span></span><br><span class=\"line\">        verbose_name_plural = <span class=\"string\">&quot;每日计划&quot;</span></span><br><span class=\"line\">        ordering = [<span class=\"string\">&quot;planDate&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">WeekPlan</span>(<span class=\"title class_ inherited__\">Plan</span>):</span><br><span class=\"line\">    startDate = models.DateField(<span class=\"string\">&quot;开始日期&quot;</span>)</span><br><span class=\"line\">    endDate = models.DateField(<span class=\"string\">&quot;结束日期&quot;</span>)</span><br><span class=\"line\">    priority = models.IntegerField(<span class=\"string\">&quot;优先等级&quot;</span>, default=<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title class_\">Meta</span>:</span><br><span class=\"line\">        db_table = <span class=\"string\">&quot;weekPlan&quot;</span></span><br><span class=\"line\">        verbose_name = <span class=\"string\">&quot;每周要务&quot;</span></span><br><span class=\"line\">        verbose_name_plural = <span class=\"string\">&quot;每周要务&quot;</span></span><br><span class=\"line\">        ordering = [<span class=\"string\">&quot;endDate&quot;</span>]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"创建对象的方法\"><a href=\"#创建对象的方法\" class=\"headerlink\" title=\"创建对象的方法\"></a>创建对象的方法</h2><p>一共有四种方法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 方法一</span><br><span class=\"line\"></span><br><span class=\"line\">Author.objects.create(name=&quot;Jom&quot;, sex=&quot;男&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\"># 方法二</span><br><span class=\"line\"></span><br><span class=\"line\">author = Author(name=&quot;Jom&quot;, sex=&quot;男&quot;)</span><br><span class=\"line\">author.save()</span><br><span class=\"line\"></span><br><span class=\"line\"># 方法三</span><br><span class=\"line\"></span><br><span class=\"line\">author = Author()</span><br><span class=\"line\">author.name = &quot;Jom&quot;</span><br><span class=\"line\">author.sex = &quot;男&quot;</span><br><span class=\"line\">author.save()</span><br><span class=\"line\"></span><br><span class=\"line\"># 方法四，首先尝试获取，不存在就创建，可以防止重复</span><br><span class=\"line\"></span><br><span class=\"line\">Author.objects.get_or_create(name=&quot;Jom&quot;, sex=&quot;男&quot;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>前三种方法返回的都是对应的 object，最后一种方法返回的是一个元组，(object, True&#x2F;False)，创建时返回 True, 已经存在时返回 False</p>\n<h1 id=\"Form\"><a href=\"#Form\" class=\"headerlink\" title=\"Form\"></a>Form</h1><h3 id=\"现学现用-1\"><a href=\"#现学现用-1\" class=\"headerlink\" title=\"现学现用\"></a>现学现用</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># views.py</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">login</span>(<span class=\"params\">request</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> request.method == <span class=\"string\">&quot;POST&quot;</span>:</span><br><span class=\"line\">        fm = LoginForm(request.POST)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> fm.is_valid():</span><br><span class=\"line\">            userName = fm.cleaned_data[<span class=\"string\">&#x27;userName&#x27;</span>]</span><br><span class=\"line\">            passWord = fm.cleaned_data[<span class=\"string\">&#x27;passWord&#x27;</span>]</span><br><span class=\"line\">            <span class=\"built_in\">print</span> userName, passWord</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redirect(index)</span><br><span class=\"line\">    fm = LoginForm()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> render(request, <span class=\"string\">&quot;login.html&quot;</span>, &#123;<span class=\"string\">&quot;fm&quot;</span>: fm&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># forms.py</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> django <span class=\"keyword\">import</span> forms</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LoginForm</span>(forms.Form):</span><br><span class=\"line\">    userName = forms.CharField(max_length=<span class=\"number\">20</span>,</span><br><span class=\"line\">                               required=<span class=\"literal\">True</span>,</span><br><span class=\"line\">                               widget=forms.TextInput(attrs=&#123;<span class=\"string\">&#x27;class&#x27;</span>: <span class=\"string\">&#x27;weui-input&#x27;</span>,</span><br><span class=\"line\">                                                             <span class=\"string\">&#x27;name&#x27;</span>: <span class=\"string\">&#x27;userName&#x27;</span>&#125;),</span><br><span class=\"line\">                               error_messages=&#123;<span class=\"string\">&#x27;required&#x27;</span>: <span class=\"string\">&quot;用户名不能为空&quot;</span>&#125;)</span><br><span class=\"line\">    passWord = forms.CharField(max_length=<span class=\"number\">20</span>,</span><br><span class=\"line\">                              required=<span class=\"literal\">True</span>,</span><br><span class=\"line\">                              widget=forms.PasswordInput(attrs=&#123;<span class=\"string\">&#x27;class&#x27;</span>: <span class=\"string\">&#x27;weui-input&#x27;</span>,</span><br><span class=\"line\">                                                                <span class=\"string\">&#x27;name&#x27;</span>: <span class=\"string\">&#x27;passWord&#x27;</span>&#125;),</span><br><span class=\"line\">                              error_messages=&#123;<span class=\"string\">&#x27;required&#x27;</span>: <span class=\"string\">&quot;密码不能为空&quot;</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"git tag管理","date":"2019-12-09T16:00:00.000Z","_content":"\n转载：[Git标签管理－添加、查看、删除Git标签](https://itbilu.com/other/relate/4yUYrTKlx.html)\n\n在使用`Git`做为代码管理工具的项目，当有新版本上线时，一般会建立一个版本标签。`Git`标签是项目里程碑和历史状态关键点的标识，我们可以根据项目标签来查看历史某一版本的代码，也可以根据项目标签来回滚代码。`Git`标签在项目发布、版本管理中有着非常重要的作用。\n\n### 1. 新建`Git`标签\n\n新建标签使用`git tag -a 标签名`命令：\n\n```\ngit tag -a v1.0 -m 'v1.0的备注信息'\n```\n\n通过以上命名，创建了`v1.0`标签，并使用`-m`参数添加了备注信息\n\n**创建带签名的标签**\n\n`git tag -a`命令创建的标签不带签名，如果需要创建带签名的标签可以使用`git tag -s 标签名`命令，带签名的标签会使用`gpg`私钥对标签进行加密，以保障标签的安全性。\n\n```\ngit tag -s v1.0 -m 'sign v1.0 tag'\n```\n\n创建签名标签后，可以使用`git tag -v 标签名`命名验证标签的合法性：\n\n```\ngit tag -v v1.0\n```\n\n### 2. 推送标签到远程服务器\n\n添加标签后，标签会被添加到`git`本地代码库中。要想将标签推送到远程服务器，需要将其推送到远程服务器中，使用`git push`命令只能推送提交的代码，不能推送标签，提交标签需要增加`--tags`参数：\n\n```\ngit push --tags\n```\n\n### 3. 查看标签\n\n查看项目中所有标签使用`git tag`命令，该命令会列出所有已添加的标签：\n\n```\ngit tag\n```\n\n`git tag`命令会简单显示标签名，如果需要查看描述信息，则使用以下命令：\n\n```\ngit tag -ln\n```\n\n回滚版本时，我们需要根据标签名查找相应的`commit`提交信息。`git show 标签名`会列出标签信息，及其下详细的提交信息：\n\n```\ngit show v1.0\n```\n\n### 4. 删除标签\n\n标签提交有误，或想删除很久以前的标签，可以`git tag -d 标签名`命令将本地标签删除：\n\n```\ngit tag -d v1.0\n```\n\n删除远程标签：\n\n```ruby\ngit push origin :refs/tags/v1.0  \n```\n\n`Git`标签，是使用`Git`进行代码管理中不可缺少的部分。通过`Git`标签，可以让你更加便的进行项目管理，版本标识和代码回滚。\n\n\n\n参考：\n\n- [git tag 删除](https://www.jianshu.com/p/208aff2dccdc)","source":"_posts/git tag管理.md","raw":"---\ntitle: git tag管理\ndate: 2019-12-10\ntags: [git]\n---\n\n转载：[Git标签管理－添加、查看、删除Git标签](https://itbilu.com/other/relate/4yUYrTKlx.html)\n\n在使用`Git`做为代码管理工具的项目，当有新版本上线时，一般会建立一个版本标签。`Git`标签是项目里程碑和历史状态关键点的标识，我们可以根据项目标签来查看历史某一版本的代码，也可以根据项目标签来回滚代码。`Git`标签在项目发布、版本管理中有着非常重要的作用。\n\n### 1. 新建`Git`标签\n\n新建标签使用`git tag -a 标签名`命令：\n\n```\ngit tag -a v1.0 -m 'v1.0的备注信息'\n```\n\n通过以上命名，创建了`v1.0`标签，并使用`-m`参数添加了备注信息\n\n**创建带签名的标签**\n\n`git tag -a`命令创建的标签不带签名，如果需要创建带签名的标签可以使用`git tag -s 标签名`命令，带签名的标签会使用`gpg`私钥对标签进行加密，以保障标签的安全性。\n\n```\ngit tag -s v1.0 -m 'sign v1.0 tag'\n```\n\n创建签名标签后，可以使用`git tag -v 标签名`命名验证标签的合法性：\n\n```\ngit tag -v v1.0\n```\n\n### 2. 推送标签到远程服务器\n\n添加标签后，标签会被添加到`git`本地代码库中。要想将标签推送到远程服务器，需要将其推送到远程服务器中，使用`git push`命令只能推送提交的代码，不能推送标签，提交标签需要增加`--tags`参数：\n\n```\ngit push --tags\n```\n\n### 3. 查看标签\n\n查看项目中所有标签使用`git tag`命令，该命令会列出所有已添加的标签：\n\n```\ngit tag\n```\n\n`git tag`命令会简单显示标签名，如果需要查看描述信息，则使用以下命令：\n\n```\ngit tag -ln\n```\n\n回滚版本时，我们需要根据标签名查找相应的`commit`提交信息。`git show 标签名`会列出标签信息，及其下详细的提交信息：\n\n```\ngit show v1.0\n```\n\n### 4. 删除标签\n\n标签提交有误，或想删除很久以前的标签，可以`git tag -d 标签名`命令将本地标签删除：\n\n```\ngit tag -d v1.0\n```\n\n删除远程标签：\n\n```ruby\ngit push origin :refs/tags/v1.0  \n```\n\n`Git`标签，是使用`Git`进行代码管理中不可缺少的部分。通过`Git`标签，可以让你更加便的进行项目管理，版本标识和代码回滚。\n\n\n\n参考：\n\n- [git tag 删除](https://www.jianshu.com/p/208aff2dccdc)","slug":"git tag管理","published":1,"updated":"2021-06-20T10:25:20.126Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluqa1hiy002hrlogf1re87y2","content":"<p>转载：<a href=\"https://itbilu.com/other/relate/4yUYrTKlx.html\">Git标签管理－添加、查看、删除Git标签</a></p>\n<p>在使用<code>Git</code>做为代码管理工具的项目，当有新版本上线时，一般会建立一个版本标签。<code>Git</code>标签是项目里程碑和历史状态关键点的标识，我们可以根据项目标签来查看历史某一版本的代码，也可以根据项目标签来回滚代码。<code>Git</code>标签在项目发布、版本管理中有着非常重要的作用。</p>\n<h3 id=\"1-新建Git标签\"><a href=\"#1-新建Git标签\" class=\"headerlink\" title=\"1. 新建Git标签\"></a>1. 新建<code>Git</code>标签</h3><p>新建标签使用<code>git tag -a 标签名</code>命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag -a v1.0 -m &#x27;v1.0的备注信息&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>通过以上命名，创建了<code>v1.0</code>标签，并使用<code>-m</code>参数添加了备注信息</p>\n<p><strong>创建带签名的标签</strong></p>\n<p><code>git tag -a</code>命令创建的标签不带签名，如果需要创建带签名的标签可以使用<code>git tag -s 标签名</code>命令，带签名的标签会使用<code>gpg</code>私钥对标签进行加密，以保障标签的安全性。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag -s v1.0 -m &#x27;sign v1.0 tag&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>创建签名标签后，可以使用<code>git tag -v 标签名</code>命名验证标签的合法性：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag -v v1.0</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-推送标签到远程服务器\"><a href=\"#2-推送标签到远程服务器\" class=\"headerlink\" title=\"2. 推送标签到远程服务器\"></a>2. 推送标签到远程服务器</h3><p>添加标签后，标签会被添加到<code>git</code>本地代码库中。要想将标签推送到远程服务器，需要将其推送到远程服务器中，使用<code>git push</code>命令只能推送提交的代码，不能推送标签，提交标签需要增加<code>--tags</code>参数：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push --tags</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-查看标签\"><a href=\"#3-查看标签\" class=\"headerlink\" title=\"3. 查看标签\"></a>3. 查看标签</h3><p>查看项目中所有标签使用<code>git tag</code>命令，该命令会列出所有已添加的标签：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag</span><br></pre></td></tr></table></figure>\n\n<p><code>git tag</code>命令会简单显示标签名，如果需要查看描述信息，则使用以下命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag -ln</span><br></pre></td></tr></table></figure>\n\n<p>回滚版本时，我们需要根据标签名查找相应的<code>commit</code>提交信息。<code>git show 标签名</code>会列出标签信息，及其下详细的提交信息：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git show v1.0</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-删除标签\"><a href=\"#4-删除标签\" class=\"headerlink\" title=\"4. 删除标签\"></a>4. 删除标签</h3><p>标签提交有误，或想删除很久以前的标签，可以<code>git tag -d 标签名</code>命令将本地标签删除：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag -d v1.0</span><br></pre></td></tr></table></figure>\n\n<p>删除远程标签：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin <span class=\"symbol\">:refs/tags/v1</span>.<span class=\"number\">0</span>  </span><br></pre></td></tr></table></figure>\n\n<p><code>Git</code>标签，是使用<code>Git</code>进行代码管理中不可缺少的部分。通过<code>Git</code>标签，可以让你更加便的进行项目管理，版本标识和代码回滚。</p>\n<p>参考：</p>\n<ul>\n<li><a href=\"https://www.jianshu.com/p/208aff2dccdc\">git tag 删除</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>转载：<a href=\"https://itbilu.com/other/relate/4yUYrTKlx.html\">Git标签管理－添加、查看、删除Git标签</a></p>\n<p>在使用<code>Git</code>做为代码管理工具的项目，当有新版本上线时，一般会建立一个版本标签。<code>Git</code>标签是项目里程碑和历史状态关键点的标识，我们可以根据项目标签来查看历史某一版本的代码，也可以根据项目标签来回滚代码。<code>Git</code>标签在项目发布、版本管理中有着非常重要的作用。</p>\n<h3 id=\"1-新建Git标签\"><a href=\"#1-新建Git标签\" class=\"headerlink\" title=\"1. 新建Git标签\"></a>1. 新建<code>Git</code>标签</h3><p>新建标签使用<code>git tag -a 标签名</code>命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag -a v1.0 -m &#x27;v1.0的备注信息&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>通过以上命名，创建了<code>v1.0</code>标签，并使用<code>-m</code>参数添加了备注信息</p>\n<p><strong>创建带签名的标签</strong></p>\n<p><code>git tag -a</code>命令创建的标签不带签名，如果需要创建带签名的标签可以使用<code>git tag -s 标签名</code>命令，带签名的标签会使用<code>gpg</code>私钥对标签进行加密，以保障标签的安全性。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag -s v1.0 -m &#x27;sign v1.0 tag&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>创建签名标签后，可以使用<code>git tag -v 标签名</code>命名验证标签的合法性：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag -v v1.0</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-推送标签到远程服务器\"><a href=\"#2-推送标签到远程服务器\" class=\"headerlink\" title=\"2. 推送标签到远程服务器\"></a>2. 推送标签到远程服务器</h3><p>添加标签后，标签会被添加到<code>git</code>本地代码库中。要想将标签推送到远程服务器，需要将其推送到远程服务器中，使用<code>git push</code>命令只能推送提交的代码，不能推送标签，提交标签需要增加<code>--tags</code>参数：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push --tags</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-查看标签\"><a href=\"#3-查看标签\" class=\"headerlink\" title=\"3. 查看标签\"></a>3. 查看标签</h3><p>查看项目中所有标签使用<code>git tag</code>命令，该命令会列出所有已添加的标签：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag</span><br></pre></td></tr></table></figure>\n\n<p><code>git tag</code>命令会简单显示标签名，如果需要查看描述信息，则使用以下命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag -ln</span><br></pre></td></tr></table></figure>\n\n<p>回滚版本时，我们需要根据标签名查找相应的<code>commit</code>提交信息。<code>git show 标签名</code>会列出标签信息，及其下详细的提交信息：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git show v1.0</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-删除标签\"><a href=\"#4-删除标签\" class=\"headerlink\" title=\"4. 删除标签\"></a>4. 删除标签</h3><p>标签提交有误，或想删除很久以前的标签，可以<code>git tag -d 标签名</code>命令将本地标签删除：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag -d v1.0</span><br></pre></td></tr></table></figure>\n\n<p>删除远程标签：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin <span class=\"symbol\">:refs/tags/v1</span>.<span class=\"number\">0</span>  </span><br></pre></td></tr></table></figure>\n\n<p><code>Git</code>标签，是使用<code>Git</code>进行代码管理中不可缺少的部分。通过<code>Git</code>标签，可以让你更加便的进行项目管理，版本标识和代码回滚。</p>\n<p>参考：</p>\n<ul>\n<li><a href=\"https://www.jianshu.com/p/208aff2dccdc\">git tag 删除</a></li>\n</ul>\n"},{"title":"hexo+travis自动构建github page","date":"2018-04-21T16:00:00.000Z","_content":"\n将近一天的折腾，终于ok了，实现了如题的新玩法。这里做一个简单的记录，记录自己踏过的坑，其实还主要是ssh-key的问题。主要参考[这里](https://gythialy.github.io/travis-add-ssh-key/)\n\n## 前提条件：\n\n- 拥有github帐号，并创建了相关仓库，这里以我个人的为例：\n  + [suadminwen.github.io](https://github.com/suadminwen/suadminwen.github.io)  github page仓库，这里存放编译生成的静态网站相关信息，访问[https://suadminwen.github.io](https://suadminwen.github.io)看到的博客就是由此提供。\n  + [blog-src](https://github.com/suadminwen/blog-src) 博客源码存放的地方，也就是hexo相关的模板。\n- 拥有与github关联的travis帐号。\n\n<!--more-->\n\n## 开启对 项目的集成并进入设置页面\n\n![例图](/blog-img/2018042201.png)\n\n## 生成ssh-key\n\n- ssh-keygen -t rsa -b 4096 -C \"<your_email>\" -f github_deploy_key -N ''\n\n> 注： 这里使用 github_deploy_key 作为存储的名字\n\n**这里创建的ssh-key是给travis提交代码的时候用的，换句话说也就是github page 那个仓库用的key！这里被坑了很久，一直把key添到博客源码的地方。**\n\n这会生成两个文件\n\n- 公钥 github_deploy_key.pub\n- 私钥 github_deploy_key\n\n> 如果是做为项目的部署公钥，需要添加到项目中，以 GitHub 为例:\n> 用文本编辑器打开“github_deploy_key.pub”文件，复制内容到剪贴板。\n> 打开 [https://github.com/settings/ssh](https://github.com/settings/ssh) ，点击 Add SSH Key 按钮，粘贴进去保存即可。\n\n## 安装 The Travis Client\n\n- 首先确保已经安装好 Ruby(1.9.3+)，官方推荐 2.0.0\n\n- 执行 `gem install travis -v 1.8.8 --no-rdoc --no-ri` 安装 `travis client`\n\n- 检查安装是否正确 `ravis version`\n\n## 加密 SSH key\n\nGitHub 项目，建议先通过 `travis login` 登录，然后再通过 `travis encrypt-file github_deploy_key -add` 加密，\ntravis Client 会自动更新 `.traivs.yaml`并且在 travis 中自动添加变量 `encrypted_XXXXXXXXXXXX_key` 和 `encrypted_XXXXXXXXXXXX_iv`\n\n> 注： 这里的`github_deploy_key`是上面的私钥！\n\n## 修改 .travis.yaml\n\n在源码根目录下创建,travis目录，将创建的`github_deploy_key.enc`文件移至该目录下，并在该目录下创建`ssh_config`文件。\n\n- 修改.travis.yaml:\n\n在 `before_install` 添加如下内容：\n```\nbefore_install:\n- openssl aes-256-cbc -K $encrypted_a7d17a00ff1b_key -iv $encrypted_a7d17a00ff1b_iv\n  -in .travis/github_deploy_key.enc -out ~/.ssh/github_deploy_key -d\n- chmod 600 ~/.ssh/github_deploy_key\n- eval $(ssh-agent)\n- ssh-add ~/.ssh/github_deploy_key\n- cp .travis/ssh_config ~/.ssh/config\n- git config --global user.name 'gythialy'\n- git config --global user.email 'gythialy@users.noreply.github.com'\n```\n\n> 注： 步骤如下：通过openssl 解密文件并输出到 ~/.ssh/github_deploy_key 中；设定 ~/.ssh/github_deploy_key 文件权限并添加到 ssh-agent 中\n\n- 添加`ssh_config`内容，主要是防止首次连接的时候，会弹出提示。如果有其他的地址，参考此设置即可。\n\n```\nHost github.com\n    User git\n    StrictHostKeyChecking no\n    IdentityFile ~/.ssh/github_deploy_key\n    IdentitiesOnly yes\nHost gitcafe.com\n    User git\n    StrictHostKeyChecking no\n    IdentityFile ~/.ssh/github_deploy_key\n    IdentitiesOnly yes\nHost git.coding.net\n    User git\n    StrictHostKeyChecking no\n    IdentityFile ~/.ssh/github_deploy_key\n    IdentitiesOnly yes\n```\n\n至此，就成功在 travis 中添加了SSH密钥且能建立链接。","source":"_posts/hexo+travis自动构建github page.md","raw":"---\ntitle: hexo+travis自动构建github page\ndate: 2018-4-22\ntags: [hexo, travis]\n---\n\n将近一天的折腾，终于ok了，实现了如题的新玩法。这里做一个简单的记录，记录自己踏过的坑，其实还主要是ssh-key的问题。主要参考[这里](https://gythialy.github.io/travis-add-ssh-key/)\n\n## 前提条件：\n\n- 拥有github帐号，并创建了相关仓库，这里以我个人的为例：\n  + [suadminwen.github.io](https://github.com/suadminwen/suadminwen.github.io)  github page仓库，这里存放编译生成的静态网站相关信息，访问[https://suadminwen.github.io](https://suadminwen.github.io)看到的博客就是由此提供。\n  + [blog-src](https://github.com/suadminwen/blog-src) 博客源码存放的地方，也就是hexo相关的模板。\n- 拥有与github关联的travis帐号。\n\n<!--more-->\n\n## 开启对 项目的集成并进入设置页面\n\n![例图](/blog-img/2018042201.png)\n\n## 生成ssh-key\n\n- ssh-keygen -t rsa -b 4096 -C \"<your_email>\" -f github_deploy_key -N ''\n\n> 注： 这里使用 github_deploy_key 作为存储的名字\n\n**这里创建的ssh-key是给travis提交代码的时候用的，换句话说也就是github page 那个仓库用的key！这里被坑了很久，一直把key添到博客源码的地方。**\n\n这会生成两个文件\n\n- 公钥 github_deploy_key.pub\n- 私钥 github_deploy_key\n\n> 如果是做为项目的部署公钥，需要添加到项目中，以 GitHub 为例:\n> 用文本编辑器打开“github_deploy_key.pub”文件，复制内容到剪贴板。\n> 打开 [https://github.com/settings/ssh](https://github.com/settings/ssh) ，点击 Add SSH Key 按钮，粘贴进去保存即可。\n\n## 安装 The Travis Client\n\n- 首先确保已经安装好 Ruby(1.9.3+)，官方推荐 2.0.0\n\n- 执行 `gem install travis -v 1.8.8 --no-rdoc --no-ri` 安装 `travis client`\n\n- 检查安装是否正确 `ravis version`\n\n## 加密 SSH key\n\nGitHub 项目，建议先通过 `travis login` 登录，然后再通过 `travis encrypt-file github_deploy_key -add` 加密，\ntravis Client 会自动更新 `.traivs.yaml`并且在 travis 中自动添加变量 `encrypted_XXXXXXXXXXXX_key` 和 `encrypted_XXXXXXXXXXXX_iv`\n\n> 注： 这里的`github_deploy_key`是上面的私钥！\n\n## 修改 .travis.yaml\n\n在源码根目录下创建,travis目录，将创建的`github_deploy_key.enc`文件移至该目录下，并在该目录下创建`ssh_config`文件。\n\n- 修改.travis.yaml:\n\n在 `before_install` 添加如下内容：\n```\nbefore_install:\n- openssl aes-256-cbc -K $encrypted_a7d17a00ff1b_key -iv $encrypted_a7d17a00ff1b_iv\n  -in .travis/github_deploy_key.enc -out ~/.ssh/github_deploy_key -d\n- chmod 600 ~/.ssh/github_deploy_key\n- eval $(ssh-agent)\n- ssh-add ~/.ssh/github_deploy_key\n- cp .travis/ssh_config ~/.ssh/config\n- git config --global user.name 'gythialy'\n- git config --global user.email 'gythialy@users.noreply.github.com'\n```\n\n> 注： 步骤如下：通过openssl 解密文件并输出到 ~/.ssh/github_deploy_key 中；设定 ~/.ssh/github_deploy_key 文件权限并添加到 ssh-agent 中\n\n- 添加`ssh_config`内容，主要是防止首次连接的时候，会弹出提示。如果有其他的地址，参考此设置即可。\n\n```\nHost github.com\n    User git\n    StrictHostKeyChecking no\n    IdentityFile ~/.ssh/github_deploy_key\n    IdentitiesOnly yes\nHost gitcafe.com\n    User git\n    StrictHostKeyChecking no\n    IdentityFile ~/.ssh/github_deploy_key\n    IdentitiesOnly yes\nHost git.coding.net\n    User git\n    StrictHostKeyChecking no\n    IdentityFile ~/.ssh/github_deploy_key\n    IdentitiesOnly yes\n```\n\n至此，就成功在 travis 中添加了SSH密钥且能建立链接。","slug":"hexo+travis自动构建github page","published":1,"updated":"2021-06-20T10:25:20.126Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluqa1hiy002jrlog2awjgj88","content":"<p>将近一天的折腾，终于ok了，实现了如题的新玩法。这里做一个简单的记录，记录自己踏过的坑，其实还主要是ssh-key的问题。主要参考<a href=\"https://gythialy.github.io/travis-add-ssh-key/\">这里</a></p>\n<h2 id=\"前提条件：\"><a href=\"#前提条件：\" class=\"headerlink\" title=\"前提条件：\"></a>前提条件：</h2><ul>\n<li>拥有github帐号，并创建了相关仓库，这里以我个人的为例：<ul>\n<li><a href=\"https://github.com/suadminwen/suadminwen.github.io\">suadminwen.github.io</a>  github page仓库，这里存放编译生成的静态网站相关信息，访问<a href=\"https://suadminwen.github.io/\">https://suadminwen.github.io</a>看到的博客就是由此提供。</li>\n<li><a href=\"https://github.com/suadminwen/blog-src\">blog-src</a> 博客源码存放的地方，也就是hexo相关的模板。</li>\n</ul>\n</li>\n<li>拥有与github关联的travis帐号。</li>\n</ul>\n<span id=\"more\"></span>\n\n<h2 id=\"开启对-项目的集成并进入设置页面\"><a href=\"#开启对-项目的集成并进入设置页面\" class=\"headerlink\" title=\"开启对 项目的集成并进入设置页面\"></a>开启对 项目的集成并进入设置页面</h2><p><img src=\"/blog-img/2018042201.png\" alt=\"例图\"></p>\n<h2 id=\"生成ssh-key\"><a href=\"#生成ssh-key\" class=\"headerlink\" title=\"生成ssh-key\"></a>生成ssh-key</h2><ul>\n<li>ssh-keygen -t rsa -b 4096 -C “<your_email>“ -f github_deploy_key -N ‘’</li>\n</ul>\n<blockquote>\n<p>注： 这里使用 github_deploy_key 作为存储的名字</p>\n</blockquote>\n<p><strong>这里创建的ssh-key是给travis提交代码的时候用的，换句话说也就是github page 那个仓库用的key！这里被坑了很久，一直把key添到博客源码的地方。</strong></p>\n<p>这会生成两个文件</p>\n<ul>\n<li>公钥 github_deploy_key.pub</li>\n<li>私钥 github_deploy_key</li>\n</ul>\n<blockquote>\n<p>如果是做为项目的部署公钥，需要添加到项目中，以 GitHub 为例:<br>用文本编辑器打开“github_deploy_key.pub”文件，复制内容到剪贴板。<br>打开 <a href=\"https://github.com/settings/ssh\">https://github.com/settings/ssh</a> ，点击 Add SSH Key 按钮，粘贴进去保存即可。</p>\n</blockquote>\n<h2 id=\"安装-The-Travis-Client\"><a href=\"#安装-The-Travis-Client\" class=\"headerlink\" title=\"安装 The Travis Client\"></a>安装 The Travis Client</h2><ul>\n<li><p>首先确保已经安装好 Ruby(1.9.3+)，官方推荐 2.0.0</p>\n</li>\n<li><p>执行 <code>gem install travis -v 1.8.8 --no-rdoc --no-ri</code> 安装 <code>travis client</code></p>\n</li>\n<li><p>检查安装是否正确 <code>ravis version</code></p>\n</li>\n</ul>\n<h2 id=\"加密-SSH-key\"><a href=\"#加密-SSH-key\" class=\"headerlink\" title=\"加密 SSH key\"></a>加密 SSH key</h2><p>GitHub 项目，建议先通过 <code>travis login</code> 登录，然后再通过 <code>travis encrypt-file github_deploy_key -add</code> 加密，<br>travis Client 会自动更新 <code>.traivs.yaml</code>并且在 travis 中自动添加变量 <code>encrypted_XXXXXXXXXXXX_key</code> 和 <code>encrypted_XXXXXXXXXXXX_iv</code></p>\n<blockquote>\n<p>注： 这里的<code>github_deploy_key</code>是上面的私钥！</p>\n</blockquote>\n<h2 id=\"修改-travis-yaml\"><a href=\"#修改-travis-yaml\" class=\"headerlink\" title=\"修改 .travis.yaml\"></a>修改 .travis.yaml</h2><p>在源码根目录下创建,travis目录，将创建的<code>github_deploy_key.enc</code>文件移至该目录下，并在该目录下创建<code>ssh_config</code>文件。</p>\n<ul>\n<li>修改.travis.yaml:</li>\n</ul>\n<p>在 <code>before_install</code> 添加如下内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">before_install:</span><br><span class=\"line\">- openssl aes-256-cbc -K $encrypted_a7d17a00ff1b_key -iv $encrypted_a7d17a00ff1b_iv</span><br><span class=\"line\">  -in .travis/github_deploy_key.enc -out ~/.ssh/github_deploy_key -d</span><br><span class=\"line\">- chmod 600 ~/.ssh/github_deploy_key</span><br><span class=\"line\">- eval $(ssh-agent)</span><br><span class=\"line\">- ssh-add ~/.ssh/github_deploy_key</span><br><span class=\"line\">- cp .travis/ssh_config ~/.ssh/config</span><br><span class=\"line\">- git config --global user.name &#x27;gythialy&#x27;</span><br><span class=\"line\">- git config --global user.email &#x27;gythialy@users.noreply.github.com&#x27;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注： 步骤如下：通过openssl 解密文件并输出到 ~&#x2F;.ssh&#x2F;github_deploy_key 中；设定 ~&#x2F;.ssh&#x2F;github_deploy_key 文件权限并添加到 ssh-agent 中</p>\n</blockquote>\n<ul>\n<li>添加<code>ssh_config</code>内容，主要是防止首次连接的时候，会弹出提示。如果有其他的地址，参考此设置即可。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Host github.com</span><br><span class=\"line\">    User git</span><br><span class=\"line\">    StrictHostKeyChecking no</span><br><span class=\"line\">    IdentityFile ~/.ssh/github_deploy_key</span><br><span class=\"line\">    IdentitiesOnly yes</span><br><span class=\"line\">Host gitcafe.com</span><br><span class=\"line\">    User git</span><br><span class=\"line\">    StrictHostKeyChecking no</span><br><span class=\"line\">    IdentityFile ~/.ssh/github_deploy_key</span><br><span class=\"line\">    IdentitiesOnly yes</span><br><span class=\"line\">Host git.coding.net</span><br><span class=\"line\">    User git</span><br><span class=\"line\">    StrictHostKeyChecking no</span><br><span class=\"line\">    IdentityFile ~/.ssh/github_deploy_key</span><br><span class=\"line\">    IdentitiesOnly yes</span><br></pre></td></tr></table></figure>\n\n<p>至此，就成功在 travis 中添加了SSH密钥且能建立链接。</p>\n","site":{"data":{}},"excerpt":"<p>将近一天的折腾，终于ok了，实现了如题的新玩法。这里做一个简单的记录，记录自己踏过的坑，其实还主要是ssh-key的问题。主要参考<a href=\"https://gythialy.github.io/travis-add-ssh-key/\">这里</a></p>\n<h2 id=\"前提条件：\"><a href=\"#前提条件：\" class=\"headerlink\" title=\"前提条件：\"></a>前提条件：</h2><ul>\n<li>拥有github帐号，并创建了相关仓库，这里以我个人的为例：<ul>\n<li><a href=\"https://github.com/suadminwen/suadminwen.github.io\">suadminwen.github.io</a>  github page仓库，这里存放编译生成的静态网站相关信息，访问<a href=\"https://suadminwen.github.io/\">https://suadminwen.github.io</a>看到的博客就是由此提供。</li>\n<li><a href=\"https://github.com/suadminwen/blog-src\">blog-src</a> 博客源码存放的地方，也就是hexo相关的模板。</li>\n</ul>\n</li>\n<li>拥有与github关联的travis帐号。</li>\n</ul>","more":"<h2 id=\"开启对-项目的集成并进入设置页面\"><a href=\"#开启对-项目的集成并进入设置页面\" class=\"headerlink\" title=\"开启对 项目的集成并进入设置页面\"></a>开启对 项目的集成并进入设置页面</h2><p><img src=\"/blog-img/2018042201.png\" alt=\"例图\"></p>\n<h2 id=\"生成ssh-key\"><a href=\"#生成ssh-key\" class=\"headerlink\" title=\"生成ssh-key\"></a>生成ssh-key</h2><ul>\n<li>ssh-keygen -t rsa -b 4096 -C “<your_email>“ -f github_deploy_key -N ‘’</li>\n</ul>\n<blockquote>\n<p>注： 这里使用 github_deploy_key 作为存储的名字</p>\n</blockquote>\n<p><strong>这里创建的ssh-key是给travis提交代码的时候用的，换句话说也就是github page 那个仓库用的key！这里被坑了很久，一直把key添到博客源码的地方。</strong></p>\n<p>这会生成两个文件</p>\n<ul>\n<li>公钥 github_deploy_key.pub</li>\n<li>私钥 github_deploy_key</li>\n</ul>\n<blockquote>\n<p>如果是做为项目的部署公钥，需要添加到项目中，以 GitHub 为例:<br>用文本编辑器打开“github_deploy_key.pub”文件，复制内容到剪贴板。<br>打开 <a href=\"https://github.com/settings/ssh\">https://github.com/settings/ssh</a> ，点击 Add SSH Key 按钮，粘贴进去保存即可。</p>\n</blockquote>\n<h2 id=\"安装-The-Travis-Client\"><a href=\"#安装-The-Travis-Client\" class=\"headerlink\" title=\"安装 The Travis Client\"></a>安装 The Travis Client</h2><ul>\n<li><p>首先确保已经安装好 Ruby(1.9.3+)，官方推荐 2.0.0</p>\n</li>\n<li><p>执行 <code>gem install travis -v 1.8.8 --no-rdoc --no-ri</code> 安装 <code>travis client</code></p>\n</li>\n<li><p>检查安装是否正确 <code>ravis version</code></p>\n</li>\n</ul>\n<h2 id=\"加密-SSH-key\"><a href=\"#加密-SSH-key\" class=\"headerlink\" title=\"加密 SSH key\"></a>加密 SSH key</h2><p>GitHub 项目，建议先通过 <code>travis login</code> 登录，然后再通过 <code>travis encrypt-file github_deploy_key -add</code> 加密，<br>travis Client 会自动更新 <code>.traivs.yaml</code>并且在 travis 中自动添加变量 <code>encrypted_XXXXXXXXXXXX_key</code> 和 <code>encrypted_XXXXXXXXXXXX_iv</code></p>\n<blockquote>\n<p>注： 这里的<code>github_deploy_key</code>是上面的私钥！</p>\n</blockquote>\n<h2 id=\"修改-travis-yaml\"><a href=\"#修改-travis-yaml\" class=\"headerlink\" title=\"修改 .travis.yaml\"></a>修改 .travis.yaml</h2><p>在源码根目录下创建,travis目录，将创建的<code>github_deploy_key.enc</code>文件移至该目录下，并在该目录下创建<code>ssh_config</code>文件。</p>\n<ul>\n<li>修改.travis.yaml:</li>\n</ul>\n<p>在 <code>before_install</code> 添加如下内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">before_install:</span><br><span class=\"line\">- openssl aes-256-cbc -K $encrypted_a7d17a00ff1b_key -iv $encrypted_a7d17a00ff1b_iv</span><br><span class=\"line\">  -in .travis/github_deploy_key.enc -out ~/.ssh/github_deploy_key -d</span><br><span class=\"line\">- chmod 600 ~/.ssh/github_deploy_key</span><br><span class=\"line\">- eval $(ssh-agent)</span><br><span class=\"line\">- ssh-add ~/.ssh/github_deploy_key</span><br><span class=\"line\">- cp .travis/ssh_config ~/.ssh/config</span><br><span class=\"line\">- git config --global user.name &#x27;gythialy&#x27;</span><br><span class=\"line\">- git config --global user.email &#x27;gythialy@users.noreply.github.com&#x27;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注： 步骤如下：通过openssl 解密文件并输出到 ~&#x2F;.ssh&#x2F;github_deploy_key 中；设定 ~&#x2F;.ssh&#x2F;github_deploy_key 文件权限并添加到 ssh-agent 中</p>\n</blockquote>\n<ul>\n<li>添加<code>ssh_config</code>内容，主要是防止首次连接的时候，会弹出提示。如果有其他的地址，参考此设置即可。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Host github.com</span><br><span class=\"line\">    User git</span><br><span class=\"line\">    StrictHostKeyChecking no</span><br><span class=\"line\">    IdentityFile ~/.ssh/github_deploy_key</span><br><span class=\"line\">    IdentitiesOnly yes</span><br><span class=\"line\">Host gitcafe.com</span><br><span class=\"line\">    User git</span><br><span class=\"line\">    StrictHostKeyChecking no</span><br><span class=\"line\">    IdentityFile ~/.ssh/github_deploy_key</span><br><span class=\"line\">    IdentitiesOnly yes</span><br><span class=\"line\">Host git.coding.net</span><br><span class=\"line\">    User git</span><br><span class=\"line\">    StrictHostKeyChecking no</span><br><span class=\"line\">    IdentityFile ~/.ssh/github_deploy_key</span><br><span class=\"line\">    IdentitiesOnly yes</span><br></pre></td></tr></table></figure>\n\n<p>至此，就成功在 travis 中添加了SSH密钥且能建立链接。</p>"},{"title":"mongodb的windows服务的安装","date":"2018-01-24T16:00:00.000Z","_content":"\n> 这篇文章是写给媳妇看的。\n\n\n## 1. 安装文件\n\n官方网站 [http://www.mongodb.org/downloads](http://www.mongodb.org/downloads), 选择对应系统的文件下载。\n\n## 2.配置环境变量\n\n如果没有更改安装目录，mongodb可能安装在 `C:\\Program Files\\MongoDB`。\n\n这样的话，就将 `C:\\Program Files\\MongoDB\\Server\\3.6\\bin`添加到环境变量中。\n\n如果不是的话，只要知道`mongo.exe` 和 `mongod.exe`所在路径，并添加到环境变量中即可。重新打开`cmd`，输入命令`mongod`，提示不是“'mongod' 不是内部或外部命令，也不是可运行的程序或批处理文件。”，就可以认为安装成功。\n\n<!--more-->\n\n## 3.启动服务\n\n在C盘根目录创建文件夹`data`,创建子文件夹`db`和`log`。\n\n- 命令行启动服务：\n\n    mongod --dbpath=C:\\data\n\n就可以启动服务，但是这命令行不能关闭，否则服务就会关闭。\n\n- windows服务启动。\n\n以 **管理员** 权限打开命令行（windows10可以按win+x和a启动）执行以下命令：\n\n```\nmongod --dbpath=C:\\data\\db --logpath=C:\\data\\log\\mongodb.log --install --serviceName \"mongo\" --logappend --directoryperdb\n```\n\n然后启动服务：\n\n```\nnet start mongodb\n```\n\n会出现 “Mongo DB 服务已经启动成功”的提示。\n\n## 4.连接\n\n输入命令`mongo` 即可实现连接。\n\n\n## 5.图形化管理工具\n\nmongodb3.6版本(以前的版本我就不知道了)安装完成之后，会自动安装一个图形化管理工具：`MongoDB Compass Community`\n\n![TIM图片20180126094759.png](https://i.loli.net/2018/01/26/5a6a8914df1f0.png)\n![TIM图片20180126094827.png](https://i.loli.net/2018/01/26/5a6a89155eeaf.png)\n","source":"_posts/mongodb的windows服务安装.md","raw":"---\ntitle: mongodb的windows服务的安装\ndate: 2018-1-25\ntags: [数据库, mongodb]\n---\n\n> 这篇文章是写给媳妇看的。\n\n\n## 1. 安装文件\n\n官方网站 [http://www.mongodb.org/downloads](http://www.mongodb.org/downloads), 选择对应系统的文件下载。\n\n## 2.配置环境变量\n\n如果没有更改安装目录，mongodb可能安装在 `C:\\Program Files\\MongoDB`。\n\n这样的话，就将 `C:\\Program Files\\MongoDB\\Server\\3.6\\bin`添加到环境变量中。\n\n如果不是的话，只要知道`mongo.exe` 和 `mongod.exe`所在路径，并添加到环境变量中即可。重新打开`cmd`，输入命令`mongod`，提示不是“'mongod' 不是内部或外部命令，也不是可运行的程序或批处理文件。”，就可以认为安装成功。\n\n<!--more-->\n\n## 3.启动服务\n\n在C盘根目录创建文件夹`data`,创建子文件夹`db`和`log`。\n\n- 命令行启动服务：\n\n    mongod --dbpath=C:\\data\n\n就可以启动服务，但是这命令行不能关闭，否则服务就会关闭。\n\n- windows服务启动。\n\n以 **管理员** 权限打开命令行（windows10可以按win+x和a启动）执行以下命令：\n\n```\nmongod --dbpath=C:\\data\\db --logpath=C:\\data\\log\\mongodb.log --install --serviceName \"mongo\" --logappend --directoryperdb\n```\n\n然后启动服务：\n\n```\nnet start mongodb\n```\n\n会出现 “Mongo DB 服务已经启动成功”的提示。\n\n## 4.连接\n\n输入命令`mongo` 即可实现连接。\n\n\n## 5.图形化管理工具\n\nmongodb3.6版本(以前的版本我就不知道了)安装完成之后，会自动安装一个图形化管理工具：`MongoDB Compass Community`\n\n![TIM图片20180126094759.png](https://i.loli.net/2018/01/26/5a6a8914df1f0.png)\n![TIM图片20180126094827.png](https://i.loli.net/2018/01/26/5a6a89155eeaf.png)\n","slug":"mongodb的windows服务安装","published":1,"updated":"2021-06-20T10:25:20.126Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluqa1hiz002lrlog6h755feq","content":"<blockquote>\n<p>这篇文章是写给媳妇看的。</p>\n</blockquote>\n<h2 id=\"1-安装文件\"><a href=\"#1-安装文件\" class=\"headerlink\" title=\"1. 安装文件\"></a>1. 安装文件</h2><p>官方网站 <a href=\"http://www.mongodb.org/downloads\">http://www.mongodb.org/downloads</a>, 选择对应系统的文件下载。</p>\n<h2 id=\"2-配置环境变量\"><a href=\"#2-配置环境变量\" class=\"headerlink\" title=\"2.配置环境变量\"></a>2.配置环境变量</h2><p>如果没有更改安装目录，mongodb可能安装在 <code>C:\\Program Files\\MongoDB</code>。</p>\n<p>这样的话，就将 <code>C:\\Program Files\\MongoDB\\Server\\3.6\\bin</code>添加到环境变量中。</p>\n<p>如果不是的话，只要知道<code>mongo.exe</code> 和 <code>mongod.exe</code>所在路径，并添加到环境变量中即可。重新打开<code>cmd</code>，输入命令<code>mongod</code>，提示不是“’mongod’ 不是内部或外部命令，也不是可运行的程序或批处理文件。”，就可以认为安装成功。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"3-启动服务\"><a href=\"#3-启动服务\" class=\"headerlink\" title=\"3.启动服务\"></a>3.启动服务</h2><p>在C盘根目录创建文件夹<code>data</code>,创建子文件夹<code>db</code>和<code>log</code>。</p>\n<ul>\n<li><p>命令行启动服务：</p>\n<p>  mongod –dbpath&#x3D;C:\\data</p>\n</li>\n</ul>\n<p>就可以启动服务，但是这命令行不能关闭，否则服务就会关闭。</p>\n<ul>\n<li>windows服务启动。</li>\n</ul>\n<p>以 <strong>管理员</strong> 权限打开命令行（windows10可以按win+x和a启动）执行以下命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongod --dbpath=C:\\data\\db --logpath=C:\\data\\log\\mongodb.log --install --serviceName &quot;mongo&quot; --logappend --directoryperdb</span><br></pre></td></tr></table></figure>\n\n<p>然后启动服务：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">net start mongodb</span><br></pre></td></tr></table></figure>\n\n<p>会出现 “Mongo DB 服务已经启动成功”的提示。</p>\n<h2 id=\"4-连接\"><a href=\"#4-连接\" class=\"headerlink\" title=\"4.连接\"></a>4.连接</h2><p>输入命令<code>mongo</code> 即可实现连接。</p>\n<h2 id=\"5-图形化管理工具\"><a href=\"#5-图形化管理工具\" class=\"headerlink\" title=\"5.图形化管理工具\"></a>5.图形化管理工具</h2><p>mongodb3.6版本(以前的版本我就不知道了)安装完成之后，会自动安装一个图形化管理工具：<code>MongoDB Compass Community</code></p>\n<p><img src=\"https://i.loli.net/2018/01/26/5a6a8914df1f0.png\" alt=\"TIM图片20180126094759.png\"><br><img src=\"https://i.loli.net/2018/01/26/5a6a89155eeaf.png\" alt=\"TIM图片20180126094827.png\"></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>这篇文章是写给媳妇看的。</p>\n</blockquote>\n<h2 id=\"1-安装文件\"><a href=\"#1-安装文件\" class=\"headerlink\" title=\"1. 安装文件\"></a>1. 安装文件</h2><p>官方网站 <a href=\"http://www.mongodb.org/downloads\">http://www.mongodb.org/downloads</a>, 选择对应系统的文件下载。</p>\n<h2 id=\"2-配置环境变量\"><a href=\"#2-配置环境变量\" class=\"headerlink\" title=\"2.配置环境变量\"></a>2.配置环境变量</h2><p>如果没有更改安装目录，mongodb可能安装在 <code>C:\\Program Files\\MongoDB</code>。</p>\n<p>这样的话，就将 <code>C:\\Program Files\\MongoDB\\Server\\3.6\\bin</code>添加到环境变量中。</p>\n<p>如果不是的话，只要知道<code>mongo.exe</code> 和 <code>mongod.exe</code>所在路径，并添加到环境变量中即可。重新打开<code>cmd</code>，输入命令<code>mongod</code>，提示不是“’mongod’ 不是内部或外部命令，也不是可运行的程序或批处理文件。”，就可以认为安装成功。</p>","more":"<h2 id=\"3-启动服务\"><a href=\"#3-启动服务\" class=\"headerlink\" title=\"3.启动服务\"></a>3.启动服务</h2><p>在C盘根目录创建文件夹<code>data</code>,创建子文件夹<code>db</code>和<code>log</code>。</p>\n<ul>\n<li><p>命令行启动服务：</p>\n<p>  mongod –dbpath&#x3D;C:\\data</p>\n</li>\n</ul>\n<p>就可以启动服务，但是这命令行不能关闭，否则服务就会关闭。</p>\n<ul>\n<li>windows服务启动。</li>\n</ul>\n<p>以 <strong>管理员</strong> 权限打开命令行（windows10可以按win+x和a启动）执行以下命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongod --dbpath=C:\\data\\db --logpath=C:\\data\\log\\mongodb.log --install --serviceName &quot;mongo&quot; --logappend --directoryperdb</span><br></pre></td></tr></table></figure>\n\n<p>然后启动服务：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">net start mongodb</span><br></pre></td></tr></table></figure>\n\n<p>会出现 “Mongo DB 服务已经启动成功”的提示。</p>\n<h2 id=\"4-连接\"><a href=\"#4-连接\" class=\"headerlink\" title=\"4.连接\"></a>4.连接</h2><p>输入命令<code>mongo</code> 即可实现连接。</p>\n<h2 id=\"5-图形化管理工具\"><a href=\"#5-图形化管理工具\" class=\"headerlink\" title=\"5.图形化管理工具\"></a>5.图形化管理工具</h2><p>mongodb3.6版本(以前的版本我就不知道了)安装完成之后，会自动安装一个图形化管理工具：<code>MongoDB Compass Community</code></p>\n<p><img src=\"https://i.loli.net/2018/01/26/5a6a8914df1f0.png\" alt=\"TIM图片20180126094759.png\"><br><img src=\"https://i.loli.net/2018/01/26/5a6a89155eeaf.png\" alt=\"TIM图片20180126094827.png\"></p>"},{"title":"nginx+uwsgi实现负载均衡","date":"2017-05-29T16:00:00.000Z","_content":"\n>nginx不单可以作为强大的web服务器，也可以作为一个反向代理服务器，而且nginx还可以按照调度规则实现动态、静态页面的分离，可以按照轮询、ip哈希、URL哈希、权重等多种方式对后端服务器做负载均衡，同时还支持后端服务器的健康检查。在本文中中，我们使用nginx和uwsgi的方式来实现负载均衡。\n\n\n本文测试环境是VMware里安装了三台一样环境的ubuntu server服务器，内网ip分别为：A 192.168.102.133，B 192.168.102.134 C 192.168.102.135，此三台服务器部署相同的项目环境，使用同一个数据库，都已经安装uwsgi。A服务器作为主服务器，B、C为副服务器。数据库安装在A服务器上。即可以看成A服务器，能够单独提供完整的服务（如何部署一个完整的服务请参考[这里](https://suadminwen.github.io/nginx-+-uwsgi%E9%83%A8%E7%BD%B2odoo%E6%9C%8D%E5%8A%A1)）。\n\n<!--more-->\n\n\n## A服务器的配置\n\n### 1 uwsgi的配置文件\n\n```\n<uwsgi>\n    <socket>192.168.102.133:8077</socket>   <!-- 这里填写的是本机的ip -->\n    <chdir>/home/odoo-10</chdir>\n    <wsgi-file>wsgi-odoo.py</wsgi-file>\n    <processes>8</processes> <!-- 进程数 -->\n    <workers>4</workers>  <!--  -->\n    <daemonize>uwsgi.log</daemonize>\n    <py-autoreload>1</py-autoreload>\n</uwsgi>\n\n```\n\n### 2 nginx的配置\n\n在`http{}`中添加以下内容\n\n```\nupstream myodoo {\n    server 192.168.102.133:8077;\n    server 192.168.102.134:8077;\n    server 192.168.102.135:8077;\n}\n```\n在`server{}`中添加以下内容\n\n```\nlocation / {\n  include        uwsgi_params;\n  uwsgi_pass     myodoo;\n  uwsgi_param UWSGI_SCRIPT home.odoo-10.wsgi-odoo;\n  uwsgi_param UWSGI_CHDIR /home/odoo-10 ;\n}\n```\n\n### 3 重启nginx和uwsgi\n\n\n## B和C服务器的配置\n\n\nB和C服务器不需要安装nginx，uwsgi的配置同A相同，唯一不同的地方就是\n\n    192.168.102.134:8077\n\n    192.168.102.133:8078\n\n这里要填写自己的ip\n\n添加完成之后，重启uwsgi\n\n\n## 注意\n\n\n- 三台服务器共用数据库和一套代码，在vm下，最好是将一台服务器配置完成之后，克隆成其他两台服务器就行。\n- 负载均衡没有限制有几台服务器，本文只是演示三台服务器。\n- 测试有没有成功，增加访问主服务器的进程数，然后查看uwsgi.log就可以看到负载均衡的效果。\n- 祝你好运","source":"_posts/nginx+uwsgi实现负载均衡.md","raw":"---\ntitle: nginx+uwsgi实现负载均衡\ndate: 2017-05-30\ntags: [Linux, nginx]\n---\n\n>nginx不单可以作为强大的web服务器，也可以作为一个反向代理服务器，而且nginx还可以按照调度规则实现动态、静态页面的分离，可以按照轮询、ip哈希、URL哈希、权重等多种方式对后端服务器做负载均衡，同时还支持后端服务器的健康检查。在本文中中，我们使用nginx和uwsgi的方式来实现负载均衡。\n\n\n本文测试环境是VMware里安装了三台一样环境的ubuntu server服务器，内网ip分别为：A 192.168.102.133，B 192.168.102.134 C 192.168.102.135，此三台服务器部署相同的项目环境，使用同一个数据库，都已经安装uwsgi。A服务器作为主服务器，B、C为副服务器。数据库安装在A服务器上。即可以看成A服务器，能够单独提供完整的服务（如何部署一个完整的服务请参考[这里](https://suadminwen.github.io/nginx-+-uwsgi%E9%83%A8%E7%BD%B2odoo%E6%9C%8D%E5%8A%A1)）。\n\n<!--more-->\n\n\n## A服务器的配置\n\n### 1 uwsgi的配置文件\n\n```\n<uwsgi>\n    <socket>192.168.102.133:8077</socket>   <!-- 这里填写的是本机的ip -->\n    <chdir>/home/odoo-10</chdir>\n    <wsgi-file>wsgi-odoo.py</wsgi-file>\n    <processes>8</processes> <!-- 进程数 -->\n    <workers>4</workers>  <!--  -->\n    <daemonize>uwsgi.log</daemonize>\n    <py-autoreload>1</py-autoreload>\n</uwsgi>\n\n```\n\n### 2 nginx的配置\n\n在`http{}`中添加以下内容\n\n```\nupstream myodoo {\n    server 192.168.102.133:8077;\n    server 192.168.102.134:8077;\n    server 192.168.102.135:8077;\n}\n```\n在`server{}`中添加以下内容\n\n```\nlocation / {\n  include        uwsgi_params;\n  uwsgi_pass     myodoo;\n  uwsgi_param UWSGI_SCRIPT home.odoo-10.wsgi-odoo;\n  uwsgi_param UWSGI_CHDIR /home/odoo-10 ;\n}\n```\n\n### 3 重启nginx和uwsgi\n\n\n## B和C服务器的配置\n\n\nB和C服务器不需要安装nginx，uwsgi的配置同A相同，唯一不同的地方就是\n\n    192.168.102.134:8077\n\n    192.168.102.133:8078\n\n这里要填写自己的ip\n\n添加完成之后，重启uwsgi\n\n\n## 注意\n\n\n- 三台服务器共用数据库和一套代码，在vm下，最好是将一台服务器配置完成之后，克隆成其他两台服务器就行。\n- 负载均衡没有限制有几台服务器，本文只是演示三台服务器。\n- 测试有没有成功，增加访问主服务器的进程数，然后查看uwsgi.log就可以看到负载均衡的效果。\n- 祝你好运","slug":"nginx+uwsgi实现负载均衡","published":1,"updated":"2021-06-20T10:25:20.127Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluqa1hj0002orlog5ucxactf","content":"<blockquote>\n<p>nginx不单可以作为强大的web服务器，也可以作为一个反向代理服务器，而且nginx还可以按照调度规则实现动态、静态页面的分离，可以按照轮询、ip哈希、URL哈希、权重等多种方式对后端服务器做负载均衡，同时还支持后端服务器的健康检查。在本文中中，我们使用nginx和uwsgi的方式来实现负载均衡。</p>\n</blockquote>\n<p>本文测试环境是VMware里安装了三台一样环境的ubuntu server服务器，内网ip分别为：A 192.168.102.133，B 192.168.102.134 C 192.168.102.135，此三台服务器部署相同的项目环境，使用同一个数据库，都已经安装uwsgi。A服务器作为主服务器，B、C为副服务器。数据库安装在A服务器上。即可以看成A服务器，能够单独提供完整的服务（如何部署一个完整的服务请参考<a href=\"https://suadminwen.github.io/nginx-+-uwsgi%E9%83%A8%E7%BD%B2odoo%E6%9C%8D%E5%8A%A1\">这里</a>）。</p>\n<span id=\"more\"></span>\n\n\n<h2 id=\"A服务器的配置\"><a href=\"#A服务器的配置\" class=\"headerlink\" title=\"A服务器的配置\"></a>A服务器的配置</h2><h3 id=\"1-uwsgi的配置文件\"><a href=\"#1-uwsgi的配置文件\" class=\"headerlink\" title=\"1 uwsgi的配置文件\"></a>1 uwsgi的配置文件</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;uwsgi&gt;</span><br><span class=\"line\">    &lt;socket&gt;192.168.102.133:8077&lt;/socket&gt;   &lt;!-- 这里填写的是本机的ip --&gt;</span><br><span class=\"line\">    &lt;chdir&gt;/home/odoo-10&lt;/chdir&gt;</span><br><span class=\"line\">    &lt;wsgi-file&gt;wsgi-odoo.py&lt;/wsgi-file&gt;</span><br><span class=\"line\">    &lt;processes&gt;8&lt;/processes&gt; &lt;!-- 进程数 --&gt;</span><br><span class=\"line\">    &lt;workers&gt;4&lt;/workers&gt;  &lt;!--  --&gt;</span><br><span class=\"line\">    &lt;daemonize&gt;uwsgi.log&lt;/daemonize&gt;</span><br><span class=\"line\">    &lt;py-autoreload&gt;1&lt;/py-autoreload&gt;</span><br><span class=\"line\">&lt;/uwsgi&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-nginx的配置\"><a href=\"#2-nginx的配置\" class=\"headerlink\" title=\"2 nginx的配置\"></a>2 nginx的配置</h3><p>在<code>http&#123;&#125;</code>中添加以下内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream myodoo &#123;</span><br><span class=\"line\">    server 192.168.102.133:8077;</span><br><span class=\"line\">    server 192.168.102.134:8077;</span><br><span class=\"line\">    server 192.168.102.135:8077;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在<code>server&#123;&#125;</code>中添加以下内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location / &#123;</span><br><span class=\"line\">  include        uwsgi_params;</span><br><span class=\"line\">  uwsgi_pass     myodoo;</span><br><span class=\"line\">  uwsgi_param UWSGI_SCRIPT home.odoo-10.wsgi-odoo;</span><br><span class=\"line\">  uwsgi_param UWSGI_CHDIR /home/odoo-10 ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-重启nginx和uwsgi\"><a href=\"#3-重启nginx和uwsgi\" class=\"headerlink\" title=\"3 重启nginx和uwsgi\"></a>3 重启nginx和uwsgi</h3><h2 id=\"B和C服务器的配置\"><a href=\"#B和C服务器的配置\" class=\"headerlink\" title=\"B和C服务器的配置\"></a>B和C服务器的配置</h2><p>B和C服务器不需要安装nginx，uwsgi的配置同A相同，唯一不同的地方就是</p>\n<pre><code>192.168.102.134:8077\n\n192.168.102.133:8078\n</code></pre>\n<p>这里要填写自己的ip</p>\n<p>添加完成之后，重启uwsgi</p>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><ul>\n<li>三台服务器共用数据库和一套代码，在vm下，最好是将一台服务器配置完成之后，克隆成其他两台服务器就行。</li>\n<li>负载均衡没有限制有几台服务器，本文只是演示三台服务器。</li>\n<li>测试有没有成功，增加访问主服务器的进程数，然后查看uwsgi.log就可以看到负载均衡的效果。</li>\n<li>祝你好运</li>\n</ul>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>nginx不单可以作为强大的web服务器，也可以作为一个反向代理服务器，而且nginx还可以按照调度规则实现动态、静态页面的分离，可以按照轮询、ip哈希、URL哈希、权重等多种方式对后端服务器做负载均衡，同时还支持后端服务器的健康检查。在本文中中，我们使用nginx和uwsgi的方式来实现负载均衡。</p>\n</blockquote>\n<p>本文测试环境是VMware里安装了三台一样环境的ubuntu server服务器，内网ip分别为：A 192.168.102.133，B 192.168.102.134 C 192.168.102.135，此三台服务器部署相同的项目环境，使用同一个数据库，都已经安装uwsgi。A服务器作为主服务器，B、C为副服务器。数据库安装在A服务器上。即可以看成A服务器，能够单独提供完整的服务（如何部署一个完整的服务请参考<a href=\"https://suadminwen.github.io/nginx-+-uwsgi%E9%83%A8%E7%BD%B2odoo%E6%9C%8D%E5%8A%A1\">这里</a>）。</p>","more":"<h2 id=\"A服务器的配置\"><a href=\"#A服务器的配置\" class=\"headerlink\" title=\"A服务器的配置\"></a>A服务器的配置</h2><h3 id=\"1-uwsgi的配置文件\"><a href=\"#1-uwsgi的配置文件\" class=\"headerlink\" title=\"1 uwsgi的配置文件\"></a>1 uwsgi的配置文件</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;uwsgi&gt;</span><br><span class=\"line\">    &lt;socket&gt;192.168.102.133:8077&lt;/socket&gt;   &lt;!-- 这里填写的是本机的ip --&gt;</span><br><span class=\"line\">    &lt;chdir&gt;/home/odoo-10&lt;/chdir&gt;</span><br><span class=\"line\">    &lt;wsgi-file&gt;wsgi-odoo.py&lt;/wsgi-file&gt;</span><br><span class=\"line\">    &lt;processes&gt;8&lt;/processes&gt; &lt;!-- 进程数 --&gt;</span><br><span class=\"line\">    &lt;workers&gt;4&lt;/workers&gt;  &lt;!--  --&gt;</span><br><span class=\"line\">    &lt;daemonize&gt;uwsgi.log&lt;/daemonize&gt;</span><br><span class=\"line\">    &lt;py-autoreload&gt;1&lt;/py-autoreload&gt;</span><br><span class=\"line\">&lt;/uwsgi&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-nginx的配置\"><a href=\"#2-nginx的配置\" class=\"headerlink\" title=\"2 nginx的配置\"></a>2 nginx的配置</h3><p>在<code>http&#123;&#125;</code>中添加以下内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream myodoo &#123;</span><br><span class=\"line\">    server 192.168.102.133:8077;</span><br><span class=\"line\">    server 192.168.102.134:8077;</span><br><span class=\"line\">    server 192.168.102.135:8077;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在<code>server&#123;&#125;</code>中添加以下内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location / &#123;</span><br><span class=\"line\">  include        uwsgi_params;</span><br><span class=\"line\">  uwsgi_pass     myodoo;</span><br><span class=\"line\">  uwsgi_param UWSGI_SCRIPT home.odoo-10.wsgi-odoo;</span><br><span class=\"line\">  uwsgi_param UWSGI_CHDIR /home/odoo-10 ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-重启nginx和uwsgi\"><a href=\"#3-重启nginx和uwsgi\" class=\"headerlink\" title=\"3 重启nginx和uwsgi\"></a>3 重启nginx和uwsgi</h3><h2 id=\"B和C服务器的配置\"><a href=\"#B和C服务器的配置\" class=\"headerlink\" title=\"B和C服务器的配置\"></a>B和C服务器的配置</h2><p>B和C服务器不需要安装nginx，uwsgi的配置同A相同，唯一不同的地方就是</p>\n<pre><code>192.168.102.134:8077\n\n192.168.102.133:8078\n</code></pre>\n<p>这里要填写自己的ip</p>\n<p>添加完成之后，重启uwsgi</p>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><ul>\n<li>三台服务器共用数据库和一套代码，在vm下，最好是将一台服务器配置完成之后，克隆成其他两台服务器就行。</li>\n<li>负载均衡没有限制有几台服务器，本文只是演示三台服务器。</li>\n<li>测试有没有成功，增加访问主服务器的进程数，然后查看uwsgi.log就可以看到负载均衡的效果。</li>\n<li>祝你好运</li>\n</ul>"},{"title":"nginx+uwsgi部署django服务","date":"2017-05-29T16:00:00.000Z","_content":"\n这篇文章很早以前就自己整理出来了，当然也是参考网上的教程，但是当时也是费劲了千辛万苦，在此做一份记录。\n\n## ubuntu下配置nginx + uwsgi 参考这篇文章[nginx+uwsgi部署odoo服务](https://suadminwen.github.io/2017/05/29/nginx%20+%20uwsgi%E9%83%A8%E7%BD%B2odoo%E6%9C%8D%E5%8A%A1/)\n\n\n\n## 配置django：\n\n编写django_wsgi.py文件，将其放在与文件manage.py同一个目录下。\n注意：\n编写文件时需要注意语句`os.environ.setdefault`比如，如果你的项目为myNote，则你的语句应该是\n\n<!--more-->\n\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"myNote.settings\")\n\n```\n    #!/usr/bin/env python\n    # coding: utf-8\n    import os\n    import sys\n    # 将系统的编码设置为UTF8\n    reload(sys)\n    sys.setdefaultencoding('utf8')\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"myNote.settings\")\n    from django.core.wsgi import get_wsgi_application\n    application = get_wsgi_application()\n```\n\n## 连接django和uwsgi，实现简单的WEB服务器：\n\n假设你的Django项目的地址是/home/wen/myNote，可以执行以下命令：\n\n```\nuwsgi --http-socket :8000 --chdir /home/wen/myNote --plugin python --module django_wsgi\n```\n\n这是可以通过访问`127.0.0.1:8000`来查看服务是否正常。\n\n为了实现Nginx与uWSGI的连接，两者之间将采用soket来通讯方式。在本节中，我们将使用uWSGI配置文件的方式来改进uWSGI的启动方式。假定你的程序目录是`/home/wen/myNote`我们将要让Nginx采用8077端口与uWSGI通讯，请确保此端口没有被其它程序采用。\n新建一个XML文件：`djangochina_socket.xml`，将它放在 `/home/wen/myNote`\n内容如下：\n```\n<uwsgi>\n    <socket>:8077</socket>\n    <chdir>/home/wen/myNote</chdir>\n    <module>django_wsgi</module>\n    <processes>4</processes> <!-- 进程数 --> \n    <daemonize>uwsgi.log</daemonize>\n</uwsgi>\n```\n\n在上面的配置中，我们使用 `uwsgi.log` 来记录日志，开启4个进程来处理请求。这样，我们就配置好uWSGI了。\n\n## 配置Nginx\n\n我们假设你将会把Nginx程序日志放到你的目录下`/var/log/error.log`，请确保该目录存在。\n\n我们假设你的Django的static目录是`/home/wen/myNote/webStatic/`， \n我们假设你的域名是 `127.0.0.1` （在调试时你可以设置成你的机器IP）\n我们假设你的域名端口是 `8001`（在调试时你可以设置一些特殊端口如 8070）\n\n基于上面的假设，我们为`/etc/nginx/nginx.conf`添加以下配置(命令locate nginx.conf可以找到conf文件的路径)\n```\nserver {\n    listen   8001;\n    server_name 127.0.0.1;\n    access_log /var/log/access.log;\n    error_log /var/log/error.log;\n    #charset koi8-r;\n    #access_log  logs/host.access.log  main;\n    location / {\n     include        uwsgi_params;\n     uwsgi_pass     127.0.0.1:8077;\n    }\n    #error_page  404              /404.html;\n    # redirect server error pages to the static page /50x.html\n    #\n    error_page   500 502 503 504  /50x.html;\n    location = /50x.html {\n        root   html;\n    }\n    location /static/ {\n    alias  /home/wen/myNote/webStatic/;\n    index  index.html index.htm;\n    }\n}\n```\n\n## Nginx+uWSGI+Django的实现方式\n\n在完成上面配置后，需要按以下步骤来做：\n\n### 重启Nginx服务器，以使Nginx的配置生效。\n\n    nginx -s  reload\n\n### 重启后检查Nginx日志是否有异常。\n\n启动uWSGI服务器\n\n```\ncd /home/wen/myNote/\nuwsgi -x djangochina_socket.xml\n```\n\n检查日志 uwsgi.log 是否有异常发现。\n\n### 访问服务\n\n因此，我们访问 `127.0.0.1:8001`，如果发现程序与 单独使用Django启动的程序一模一样时，就说明成功啦！\n\n**如果打不开网页，可能是端口被占用，或者防火墙的问题**\n\n### 关闭服务的方法\n\n将uWSGi进程杀死即可。\n\nsu进入root \n\n命令`killall -9 nginx`\n\n命令`killall -9 uwsgi`","source":"_posts/nginx+uwsgi部署django服务.md","raw":"---\ntitle: nginx+uwsgi部署django服务\ndate: 2017-05-30\ntags: [Linux, nginx, django]\n---\n\n这篇文章很早以前就自己整理出来了，当然也是参考网上的教程，但是当时也是费劲了千辛万苦，在此做一份记录。\n\n## ubuntu下配置nginx + uwsgi 参考这篇文章[nginx+uwsgi部署odoo服务](https://suadminwen.github.io/2017/05/29/nginx%20+%20uwsgi%E9%83%A8%E7%BD%B2odoo%E6%9C%8D%E5%8A%A1/)\n\n\n\n## 配置django：\n\n编写django_wsgi.py文件，将其放在与文件manage.py同一个目录下。\n注意：\n编写文件时需要注意语句`os.environ.setdefault`比如，如果你的项目为myNote，则你的语句应该是\n\n<!--more-->\n\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"myNote.settings\")\n\n```\n    #!/usr/bin/env python\n    # coding: utf-8\n    import os\n    import sys\n    # 将系统的编码设置为UTF8\n    reload(sys)\n    sys.setdefaultencoding('utf8')\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"myNote.settings\")\n    from django.core.wsgi import get_wsgi_application\n    application = get_wsgi_application()\n```\n\n## 连接django和uwsgi，实现简单的WEB服务器：\n\n假设你的Django项目的地址是/home/wen/myNote，可以执行以下命令：\n\n```\nuwsgi --http-socket :8000 --chdir /home/wen/myNote --plugin python --module django_wsgi\n```\n\n这是可以通过访问`127.0.0.1:8000`来查看服务是否正常。\n\n为了实现Nginx与uWSGI的连接，两者之间将采用soket来通讯方式。在本节中，我们将使用uWSGI配置文件的方式来改进uWSGI的启动方式。假定你的程序目录是`/home/wen/myNote`我们将要让Nginx采用8077端口与uWSGI通讯，请确保此端口没有被其它程序采用。\n新建一个XML文件：`djangochina_socket.xml`，将它放在 `/home/wen/myNote`\n内容如下：\n```\n<uwsgi>\n    <socket>:8077</socket>\n    <chdir>/home/wen/myNote</chdir>\n    <module>django_wsgi</module>\n    <processes>4</processes> <!-- 进程数 --> \n    <daemonize>uwsgi.log</daemonize>\n</uwsgi>\n```\n\n在上面的配置中，我们使用 `uwsgi.log` 来记录日志，开启4个进程来处理请求。这样，我们就配置好uWSGI了。\n\n## 配置Nginx\n\n我们假设你将会把Nginx程序日志放到你的目录下`/var/log/error.log`，请确保该目录存在。\n\n我们假设你的Django的static目录是`/home/wen/myNote/webStatic/`， \n我们假设你的域名是 `127.0.0.1` （在调试时你可以设置成你的机器IP）\n我们假设你的域名端口是 `8001`（在调试时你可以设置一些特殊端口如 8070）\n\n基于上面的假设，我们为`/etc/nginx/nginx.conf`添加以下配置(命令locate nginx.conf可以找到conf文件的路径)\n```\nserver {\n    listen   8001;\n    server_name 127.0.0.1;\n    access_log /var/log/access.log;\n    error_log /var/log/error.log;\n    #charset koi8-r;\n    #access_log  logs/host.access.log  main;\n    location / {\n     include        uwsgi_params;\n     uwsgi_pass     127.0.0.1:8077;\n    }\n    #error_page  404              /404.html;\n    # redirect server error pages to the static page /50x.html\n    #\n    error_page   500 502 503 504  /50x.html;\n    location = /50x.html {\n        root   html;\n    }\n    location /static/ {\n    alias  /home/wen/myNote/webStatic/;\n    index  index.html index.htm;\n    }\n}\n```\n\n## Nginx+uWSGI+Django的实现方式\n\n在完成上面配置后，需要按以下步骤来做：\n\n### 重启Nginx服务器，以使Nginx的配置生效。\n\n    nginx -s  reload\n\n### 重启后检查Nginx日志是否有异常。\n\n启动uWSGI服务器\n\n```\ncd /home/wen/myNote/\nuwsgi -x djangochina_socket.xml\n```\n\n检查日志 uwsgi.log 是否有异常发现。\n\n### 访问服务\n\n因此，我们访问 `127.0.0.1:8001`，如果发现程序与 单独使用Django启动的程序一模一样时，就说明成功啦！\n\n**如果打不开网页，可能是端口被占用，或者防火墙的问题**\n\n### 关闭服务的方法\n\n将uWSGi进程杀死即可。\n\nsu进入root \n\n命令`killall -9 nginx`\n\n命令`killall -9 uwsgi`","slug":"nginx+uwsgi部署django服务","published":1,"updated":"2021-06-20T10:25:20.127Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluqa1hj0002qrloge98lczgl","content":"<p>这篇文章很早以前就自己整理出来了，当然也是参考网上的教程，但是当时也是费劲了千辛万苦，在此做一份记录。</p>\n<h2 id=\"ubuntu下配置nginx-uwsgi-参考这篇文章nginx-uwsgi部署odoo服务\"><a href=\"#ubuntu下配置nginx-uwsgi-参考这篇文章nginx-uwsgi部署odoo服务\" class=\"headerlink\" title=\"ubuntu下配置nginx + uwsgi 参考这篇文章nginx+uwsgi部署odoo服务\"></a>ubuntu下配置nginx + uwsgi 参考这篇文章<a href=\"https://suadminwen.github.io/2017/05/29/nginx%20+%20uwsgi%E9%83%A8%E7%BD%B2odoo%E6%9C%8D%E5%8A%A1/\">nginx+uwsgi部署odoo服务</a></h2><h2 id=\"配置django：\"><a href=\"#配置django：\" class=\"headerlink\" title=\"配置django：\"></a>配置django：</h2><p>编写django_wsgi.py文件，将其放在与文件manage.py同一个目录下。<br>注意：<br>编写文件时需要注意语句<code>os.environ.setdefault</code>比如，如果你的项目为myNote，则你的语句应该是</p>\n<span id=\"more\"></span>\n\n<pre><code>os.environ.setdefault(&quot;DJANGO_SETTINGS_MODULE&quot;, &quot;myNote.settings&quot;)\n</code></pre>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/env python</span><br><span class=\"line\"># coding: utf-8</span><br><span class=\"line\">import os</span><br><span class=\"line\">import sys</span><br><span class=\"line\"># 将系统的编码设置为UTF8</span><br><span class=\"line\">reload(sys)</span><br><span class=\"line\">sys.setdefaultencoding(&#x27;utf8&#x27;)</span><br><span class=\"line\">os.environ.setdefault(&quot;DJANGO_SETTINGS_MODULE&quot;, &quot;myNote.settings&quot;)</span><br><span class=\"line\">from django.core.wsgi import get_wsgi_application</span><br><span class=\"line\">application = get_wsgi_application()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"连接django和uwsgi，实现简单的WEB服务器：\"><a href=\"#连接django和uwsgi，实现简单的WEB服务器：\" class=\"headerlink\" title=\"连接django和uwsgi，实现简单的WEB服务器：\"></a>连接django和uwsgi，实现简单的WEB服务器：</h2><p>假设你的Django项目的地址是&#x2F;home&#x2F;wen&#x2F;myNote，可以执行以下命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uwsgi --http-socket :8000 --chdir /home/wen/myNote --plugin python --module django_wsgi</span><br></pre></td></tr></table></figure>\n\n<p>这是可以通过访问<code>127.0.0.1:8000</code>来查看服务是否正常。</p>\n<p>为了实现Nginx与uWSGI的连接，两者之间将采用soket来通讯方式。在本节中，我们将使用uWSGI配置文件的方式来改进uWSGI的启动方式。假定你的程序目录是<code>/home/wen/myNote</code>我们将要让Nginx采用8077端口与uWSGI通讯，请确保此端口没有被其它程序采用。<br>新建一个XML文件：<code>djangochina_socket.xml</code>，将它放在 <code>/home/wen/myNote</code><br>内容如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;uwsgi&gt;</span><br><span class=\"line\">    &lt;socket&gt;:8077&lt;/socket&gt;</span><br><span class=\"line\">    &lt;chdir&gt;/home/wen/myNote&lt;/chdir&gt;</span><br><span class=\"line\">    &lt;module&gt;django_wsgi&lt;/module&gt;</span><br><span class=\"line\">    &lt;processes&gt;4&lt;/processes&gt; &lt;!-- 进程数 --&gt; </span><br><span class=\"line\">    &lt;daemonize&gt;uwsgi.log&lt;/daemonize&gt;</span><br><span class=\"line\">&lt;/uwsgi&gt;</span><br></pre></td></tr></table></figure>\n\n<p>在上面的配置中，我们使用 <code>uwsgi.log</code> 来记录日志，开启4个进程来处理请求。这样，我们就配置好uWSGI了。</p>\n<h2 id=\"配置Nginx\"><a href=\"#配置Nginx\" class=\"headerlink\" title=\"配置Nginx\"></a>配置Nginx</h2><p>我们假设你将会把Nginx程序日志放到你的目录下<code>/var/log/error.log</code>，请确保该目录存在。</p>\n<p>我们假设你的Django的static目录是<code>/home/wen/myNote/webStatic/</code>，<br>我们假设你的域名是 <code>127.0.0.1</code> （在调试时你可以设置成你的机器IP）<br>我们假设你的域名端口是 <code>8001</code>（在调试时你可以设置一些特殊端口如 8070）</p>\n<p>基于上面的假设，我们为<code>/etc/nginx/nginx.conf</code>添加以下配置(命令locate nginx.conf可以找到conf文件的路径)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen   8001;</span><br><span class=\"line\">    server_name 127.0.0.1;</span><br><span class=\"line\">    access_log /var/log/access.log;</span><br><span class=\"line\">    error_log /var/log/error.log;</span><br><span class=\"line\">    #charset koi8-r;</span><br><span class=\"line\">    #access_log  logs/host.access.log  main;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">     include        uwsgi_params;</span><br><span class=\"line\">     uwsgi_pass     127.0.0.1:8077;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    #error_page  404              /404.html;</span><br><span class=\"line\">    # redirect server error pages to the static page /50x.html</span><br><span class=\"line\">    #</span><br><span class=\"line\">    error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">    location = /50x.html &#123;</span><br><span class=\"line\">        root   html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    location /static/ &#123;</span><br><span class=\"line\">    alias  /home/wen/myNote/webStatic/;</span><br><span class=\"line\">    index  index.html index.htm;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Nginx-uWSGI-Django的实现方式\"><a href=\"#Nginx-uWSGI-Django的实现方式\" class=\"headerlink\" title=\"Nginx+uWSGI+Django的实现方式\"></a>Nginx+uWSGI+Django的实现方式</h2><p>在完成上面配置后，需要按以下步骤来做：</p>\n<h3 id=\"重启Nginx服务器，以使Nginx的配置生效。\"><a href=\"#重启Nginx服务器，以使Nginx的配置生效。\" class=\"headerlink\" title=\"重启Nginx服务器，以使Nginx的配置生效。\"></a>重启Nginx服务器，以使Nginx的配置生效。</h3><pre><code>nginx -s  reload\n</code></pre>\n<h3 id=\"重启后检查Nginx日志是否有异常。\"><a href=\"#重启后检查Nginx日志是否有异常。\" class=\"headerlink\" title=\"重启后检查Nginx日志是否有异常。\"></a>重启后检查Nginx日志是否有异常。</h3><p>启动uWSGI服务器</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /home/wen/myNote/</span><br><span class=\"line\">uwsgi -x djangochina_socket.xml</span><br></pre></td></tr></table></figure>\n\n<p>检查日志 uwsgi.log 是否有异常发现。</p>\n<h3 id=\"访问服务\"><a href=\"#访问服务\" class=\"headerlink\" title=\"访问服务\"></a>访问服务</h3><p>因此，我们访问 <code>127.0.0.1:8001</code>，如果发现程序与 单独使用Django启动的程序一模一样时，就说明成功啦！</p>\n<p><strong>如果打不开网页，可能是端口被占用，或者防火墙的问题</strong></p>\n<h3 id=\"关闭服务的方法\"><a href=\"#关闭服务的方法\" class=\"headerlink\" title=\"关闭服务的方法\"></a>关闭服务的方法</h3><p>将uWSGi进程杀死即可。</p>\n<p>su进入root </p>\n<p>命令<code>killall -9 nginx</code></p>\n<p>命令<code>killall -9 uwsgi</code></p>\n","site":{"data":{}},"excerpt":"<p>这篇文章很早以前就自己整理出来了，当然也是参考网上的教程，但是当时也是费劲了千辛万苦，在此做一份记录。</p>\n<h2 id=\"ubuntu下配置nginx-uwsgi-参考这篇文章nginx-uwsgi部署odoo服务\"><a href=\"#ubuntu下配置nginx-uwsgi-参考这篇文章nginx-uwsgi部署odoo服务\" class=\"headerlink\" title=\"ubuntu下配置nginx + uwsgi 参考这篇文章nginx+uwsgi部署odoo服务\"></a>ubuntu下配置nginx + uwsgi 参考这篇文章<a href=\"https://suadminwen.github.io/2017/05/29/nginx%20+%20uwsgi%E9%83%A8%E7%BD%B2odoo%E6%9C%8D%E5%8A%A1/\">nginx+uwsgi部署odoo服务</a></h2><h2 id=\"配置django：\"><a href=\"#配置django：\" class=\"headerlink\" title=\"配置django：\"></a>配置django：</h2><p>编写django_wsgi.py文件，将其放在与文件manage.py同一个目录下。<br>注意：<br>编写文件时需要注意语句<code>os.environ.setdefault</code>比如，如果你的项目为myNote，则你的语句应该是</p>","more":"<pre><code>os.environ.setdefault(&quot;DJANGO_SETTINGS_MODULE&quot;, &quot;myNote.settings&quot;)\n</code></pre>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/env python</span><br><span class=\"line\"># coding: utf-8</span><br><span class=\"line\">import os</span><br><span class=\"line\">import sys</span><br><span class=\"line\"># 将系统的编码设置为UTF8</span><br><span class=\"line\">reload(sys)</span><br><span class=\"line\">sys.setdefaultencoding(&#x27;utf8&#x27;)</span><br><span class=\"line\">os.environ.setdefault(&quot;DJANGO_SETTINGS_MODULE&quot;, &quot;myNote.settings&quot;)</span><br><span class=\"line\">from django.core.wsgi import get_wsgi_application</span><br><span class=\"line\">application = get_wsgi_application()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"连接django和uwsgi，实现简单的WEB服务器：\"><a href=\"#连接django和uwsgi，实现简单的WEB服务器：\" class=\"headerlink\" title=\"连接django和uwsgi，实现简单的WEB服务器：\"></a>连接django和uwsgi，实现简单的WEB服务器：</h2><p>假设你的Django项目的地址是&#x2F;home&#x2F;wen&#x2F;myNote，可以执行以下命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uwsgi --http-socket :8000 --chdir /home/wen/myNote --plugin python --module django_wsgi</span><br></pre></td></tr></table></figure>\n\n<p>这是可以通过访问<code>127.0.0.1:8000</code>来查看服务是否正常。</p>\n<p>为了实现Nginx与uWSGI的连接，两者之间将采用soket来通讯方式。在本节中，我们将使用uWSGI配置文件的方式来改进uWSGI的启动方式。假定你的程序目录是<code>/home/wen/myNote</code>我们将要让Nginx采用8077端口与uWSGI通讯，请确保此端口没有被其它程序采用。<br>新建一个XML文件：<code>djangochina_socket.xml</code>，将它放在 <code>/home/wen/myNote</code><br>内容如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;uwsgi&gt;</span><br><span class=\"line\">    &lt;socket&gt;:8077&lt;/socket&gt;</span><br><span class=\"line\">    &lt;chdir&gt;/home/wen/myNote&lt;/chdir&gt;</span><br><span class=\"line\">    &lt;module&gt;django_wsgi&lt;/module&gt;</span><br><span class=\"line\">    &lt;processes&gt;4&lt;/processes&gt; &lt;!-- 进程数 --&gt; </span><br><span class=\"line\">    &lt;daemonize&gt;uwsgi.log&lt;/daemonize&gt;</span><br><span class=\"line\">&lt;/uwsgi&gt;</span><br></pre></td></tr></table></figure>\n\n<p>在上面的配置中，我们使用 <code>uwsgi.log</code> 来记录日志，开启4个进程来处理请求。这样，我们就配置好uWSGI了。</p>\n<h2 id=\"配置Nginx\"><a href=\"#配置Nginx\" class=\"headerlink\" title=\"配置Nginx\"></a>配置Nginx</h2><p>我们假设你将会把Nginx程序日志放到你的目录下<code>/var/log/error.log</code>，请确保该目录存在。</p>\n<p>我们假设你的Django的static目录是<code>/home/wen/myNote/webStatic/</code>，<br>我们假设你的域名是 <code>127.0.0.1</code> （在调试时你可以设置成你的机器IP）<br>我们假设你的域名端口是 <code>8001</code>（在调试时你可以设置一些特殊端口如 8070）</p>\n<p>基于上面的假设，我们为<code>/etc/nginx/nginx.conf</code>添加以下配置(命令locate nginx.conf可以找到conf文件的路径)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen   8001;</span><br><span class=\"line\">    server_name 127.0.0.1;</span><br><span class=\"line\">    access_log /var/log/access.log;</span><br><span class=\"line\">    error_log /var/log/error.log;</span><br><span class=\"line\">    #charset koi8-r;</span><br><span class=\"line\">    #access_log  logs/host.access.log  main;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">     include        uwsgi_params;</span><br><span class=\"line\">     uwsgi_pass     127.0.0.1:8077;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    #error_page  404              /404.html;</span><br><span class=\"line\">    # redirect server error pages to the static page /50x.html</span><br><span class=\"line\">    #</span><br><span class=\"line\">    error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">    location = /50x.html &#123;</span><br><span class=\"line\">        root   html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    location /static/ &#123;</span><br><span class=\"line\">    alias  /home/wen/myNote/webStatic/;</span><br><span class=\"line\">    index  index.html index.htm;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Nginx-uWSGI-Django的实现方式\"><a href=\"#Nginx-uWSGI-Django的实现方式\" class=\"headerlink\" title=\"Nginx+uWSGI+Django的实现方式\"></a>Nginx+uWSGI+Django的实现方式</h2><p>在完成上面配置后，需要按以下步骤来做：</p>\n<h3 id=\"重启Nginx服务器，以使Nginx的配置生效。\"><a href=\"#重启Nginx服务器，以使Nginx的配置生效。\" class=\"headerlink\" title=\"重启Nginx服务器，以使Nginx的配置生效。\"></a>重启Nginx服务器，以使Nginx的配置生效。</h3><pre><code>nginx -s  reload\n</code></pre>\n<h3 id=\"重启后检查Nginx日志是否有异常。\"><a href=\"#重启后检查Nginx日志是否有异常。\" class=\"headerlink\" title=\"重启后检查Nginx日志是否有异常。\"></a>重启后检查Nginx日志是否有异常。</h3><p>启动uWSGI服务器</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /home/wen/myNote/</span><br><span class=\"line\">uwsgi -x djangochina_socket.xml</span><br></pre></td></tr></table></figure>\n\n<p>检查日志 uwsgi.log 是否有异常发现。</p>\n<h3 id=\"访问服务\"><a href=\"#访问服务\" class=\"headerlink\" title=\"访问服务\"></a>访问服务</h3><p>因此，我们访问 <code>127.0.0.1:8001</code>，如果发现程序与 单独使用Django启动的程序一模一样时，就说明成功啦！</p>\n<p><strong>如果打不开网页，可能是端口被占用，或者防火墙的问题</strong></p>\n<h3 id=\"关闭服务的方法\"><a href=\"#关闭服务的方法\" class=\"headerlink\" title=\"关闭服务的方法\"></a>关闭服务的方法</h3><p>将uWSGi进程杀死即可。</p>\n<p>su进入root </p>\n<p>命令<code>killall -9 nginx</code></p>\n<p>命令<code>killall -9 uwsgi</code></p>"},{"title":"nginx+uwsgi部署odoo服务","date":"2017-05-28T16:00:00.000Z","_content":"\n> 说明：\n> - 用nginx和uwsgi部署odoo的前提是odoo的项目本身服务跑起来没有错误，这里不再介绍odoo的环境搭建\n> - 文章中，我的项目名为 odoo-10,项目绝对路径为/home/odoo-10\n> - 注意ubuntu用户类型，一般是直接进入root用户，如果不是，请执行命令的时候全程带着sudo\n\n## 安装配置uwsgi\n\n### 下载安装uwsgi\n\n     sudo apt-get install uwsgi uwsgi-plugin-python\n\n<!--more-->\n\n### 测试uwsgi安装成功\n\n在你的机器上写一个test.py\n\n```python\ndef application(env, start_response):\n    start_response('200 OK', [('Content-Type','text/html')])\n    return \"Hello World\"\n```\n\n然后执行shell命令：\n\n    uwsgi --http :8001 --wsgi-file test.py\n\n访问网页：\n\n    http://127.0.0.1:8001/\n\n看在网页上是否有Hello World\n\n\n### 报错\n\n#### 如果报chdir() nosuch file or directory[core/uwsgi.c line 2581]之类的错：\n\n执行一下命令：\n\n    sudo apt-get install build-essential python-dev\n\n#### 报错：\n\n```\nuwsgi: option '--http' is ambiguous; possibilities: '--http-socket' '--http-socket-modifier2' '--http-socket-modifier1'\ngetopt_long() error\n```\n\n将命令改为\n\n    uwsgi --http-socket :8001 --plugin python --wsgi-file test.py\n\n原因：使用 uwsgi 时都会碰到uwsgi: unrecognized option '--uwsgi-file'如 --module , --wsgi-file , --callable 等，需要在上面那些未识别选项前加上 --plugin python 来告诉 uWSGI 我在使用 python 插件，后面那些选项你 用python 插件去解析。\n\n### 编写odoo_wsgi.py，将其放在项目根目录下，比如这里，我放的路径就是/home/odoo-10/odoo_wsgi.py\n\n```python\nimport odoo\nodoo.multi_process = True\nodoo.conf.server_wide_modules = ['web']\nconf = odoo.tools.config\nconf['addons_path'] = '/home/odoo-10/odoo/addons'  # 这里路径为odoo目录下addons的路径\nconf['proxy_mode'] = 'True'\nconf['debug_mode'] = 'False'\napplication = odoo.service.wsgi_server.application\nodoo.service.server.load_server_wide_modules()\n```\n\n### 连接odoo和uwsgi，实现简单的WEB服务器\n\n    uwsgi --http-socket :8001 --chdir /home/odoo-10 --plugin python --wsgi-file odoo_wsgi.py\n\n访问网页：\n\n    http://127.0.0.1:8001/\n\n\n看看是否和单跑odoo时提供相同的服务，祝你好运\n\n### 为了实现Nginx与uWSGI的连接，两者之间将采用soket来通讯方式。\n\n本文我们将使用uWSGI配置文件的方式来改进uWSGI的启动方式。\n\n我们将要让Nginx采用8077端口与uWSGI通讯，请确保此端口没有被其它程序采用。\n\n新建一个XML文件：\nodoochina_socket.xml，将它放在 odoo_wsgi.py同级目录下\n\n内容如下：\n\n```\n<uwsgi>\n    <socket>:8077</socket>\n    <chdir>/home/odoo-10</chdir>\n    <module>django_wsgi</module>\n    <processes>4</processes> <!-- 进程数 -->\n    <daemonize>uwsgi.log</daemonize>\n</uwsgi>\n```\n\n在上面的配置中，我们使用 uwsgi.log 来记录日志，开启4个进程来处理请求。\n\n这样，我们就配置好uWSGI了。\n\n## 安装配置nginx\n\n### 安装nginx\n\n    sudo apt-get install nginx\n\n### 配置nginx\n\n打开nginx.conft添加如下内容到 http{\n}的最后\n\n```\nserver {\n    listen   8001;\n    server_name 127.0.0.1;\n    access_log /var/log/access.log;\n    error_log /var/log/error.log;\n    #charset koi8-r;\n    #access_log  logs/host.access.log  main;\n    location / {\n      include        uwsgi_params;\n      uwsgi_pass     127.0.0.1:8077;\n      uwsgi_param UWSGI_SCRIPT home.odoo-10.wsgi-odoo;\n      uwsgi_param UWSGI_CHDIR /home/odoo-10 ;\n   }\n }\n```\n\n### 检查配置文件有没有错误\n\n    nginx -t\n\n结果如下：\n\n```\nnginx: the configuration file /etc/nginx/nginx.conf syntax is ok\nnginx: configuration file /etc/nginx/nginx.conf test is successful\n```\n\n则，nginx无语法错误，至于有没有其他的错误，那就要看运气了\n\n## Nginx+uWSGI+odoo的实现方式\n\n### 重启Nginx服务器，以使Nginx的配置生效\n\n    nginx -s  reload\n\n### 启动uWSGI服务器\n\n    cd /home/odoo-10\n    uwsgi --plugin python -x odoochina_socket.xml\n\n### 访问服务\n\n基于上面的假设你的域名是127.0.0.1\n\n因此，我们访问 127.0.0.1:8001，如果发现程序与 单独使用odoo启动的程序一模一样时，就说明成功啦！\n\n### 关闭服务\n\n    killall -9 nginx\n    killall -9 uwsgi\n","source":"_posts/nginx+uwsgi部署odoo服务.md","raw":"---\ntitle: nginx+uwsgi部署odoo服务\ndate: 2017-05-29\ntags: [Linux, nginx]\n---\n\n> 说明：\n> - 用nginx和uwsgi部署odoo的前提是odoo的项目本身服务跑起来没有错误，这里不再介绍odoo的环境搭建\n> - 文章中，我的项目名为 odoo-10,项目绝对路径为/home/odoo-10\n> - 注意ubuntu用户类型，一般是直接进入root用户，如果不是，请执行命令的时候全程带着sudo\n\n## 安装配置uwsgi\n\n### 下载安装uwsgi\n\n     sudo apt-get install uwsgi uwsgi-plugin-python\n\n<!--more-->\n\n### 测试uwsgi安装成功\n\n在你的机器上写一个test.py\n\n```python\ndef application(env, start_response):\n    start_response('200 OK', [('Content-Type','text/html')])\n    return \"Hello World\"\n```\n\n然后执行shell命令：\n\n    uwsgi --http :8001 --wsgi-file test.py\n\n访问网页：\n\n    http://127.0.0.1:8001/\n\n看在网页上是否有Hello World\n\n\n### 报错\n\n#### 如果报chdir() nosuch file or directory[core/uwsgi.c line 2581]之类的错：\n\n执行一下命令：\n\n    sudo apt-get install build-essential python-dev\n\n#### 报错：\n\n```\nuwsgi: option '--http' is ambiguous; possibilities: '--http-socket' '--http-socket-modifier2' '--http-socket-modifier1'\ngetopt_long() error\n```\n\n将命令改为\n\n    uwsgi --http-socket :8001 --plugin python --wsgi-file test.py\n\n原因：使用 uwsgi 时都会碰到uwsgi: unrecognized option '--uwsgi-file'如 --module , --wsgi-file , --callable 等，需要在上面那些未识别选项前加上 --plugin python 来告诉 uWSGI 我在使用 python 插件，后面那些选项你 用python 插件去解析。\n\n### 编写odoo_wsgi.py，将其放在项目根目录下，比如这里，我放的路径就是/home/odoo-10/odoo_wsgi.py\n\n```python\nimport odoo\nodoo.multi_process = True\nodoo.conf.server_wide_modules = ['web']\nconf = odoo.tools.config\nconf['addons_path'] = '/home/odoo-10/odoo/addons'  # 这里路径为odoo目录下addons的路径\nconf['proxy_mode'] = 'True'\nconf['debug_mode'] = 'False'\napplication = odoo.service.wsgi_server.application\nodoo.service.server.load_server_wide_modules()\n```\n\n### 连接odoo和uwsgi，实现简单的WEB服务器\n\n    uwsgi --http-socket :8001 --chdir /home/odoo-10 --plugin python --wsgi-file odoo_wsgi.py\n\n访问网页：\n\n    http://127.0.0.1:8001/\n\n\n看看是否和单跑odoo时提供相同的服务，祝你好运\n\n### 为了实现Nginx与uWSGI的连接，两者之间将采用soket来通讯方式。\n\n本文我们将使用uWSGI配置文件的方式来改进uWSGI的启动方式。\n\n我们将要让Nginx采用8077端口与uWSGI通讯，请确保此端口没有被其它程序采用。\n\n新建一个XML文件：\nodoochina_socket.xml，将它放在 odoo_wsgi.py同级目录下\n\n内容如下：\n\n```\n<uwsgi>\n    <socket>:8077</socket>\n    <chdir>/home/odoo-10</chdir>\n    <module>django_wsgi</module>\n    <processes>4</processes> <!-- 进程数 -->\n    <daemonize>uwsgi.log</daemonize>\n</uwsgi>\n```\n\n在上面的配置中，我们使用 uwsgi.log 来记录日志，开启4个进程来处理请求。\n\n这样，我们就配置好uWSGI了。\n\n## 安装配置nginx\n\n### 安装nginx\n\n    sudo apt-get install nginx\n\n### 配置nginx\n\n打开nginx.conft添加如下内容到 http{\n}的最后\n\n```\nserver {\n    listen   8001;\n    server_name 127.0.0.1;\n    access_log /var/log/access.log;\n    error_log /var/log/error.log;\n    #charset koi8-r;\n    #access_log  logs/host.access.log  main;\n    location / {\n      include        uwsgi_params;\n      uwsgi_pass     127.0.0.1:8077;\n      uwsgi_param UWSGI_SCRIPT home.odoo-10.wsgi-odoo;\n      uwsgi_param UWSGI_CHDIR /home/odoo-10 ;\n   }\n }\n```\n\n### 检查配置文件有没有错误\n\n    nginx -t\n\n结果如下：\n\n```\nnginx: the configuration file /etc/nginx/nginx.conf syntax is ok\nnginx: configuration file /etc/nginx/nginx.conf test is successful\n```\n\n则，nginx无语法错误，至于有没有其他的错误，那就要看运气了\n\n## Nginx+uWSGI+odoo的实现方式\n\n### 重启Nginx服务器，以使Nginx的配置生效\n\n    nginx -s  reload\n\n### 启动uWSGI服务器\n\n    cd /home/odoo-10\n    uwsgi --plugin python -x odoochina_socket.xml\n\n### 访问服务\n\n基于上面的假设你的域名是127.0.0.1\n\n因此，我们访问 127.0.0.1:8001，如果发现程序与 单独使用odoo启动的程序一模一样时，就说明成功啦！\n\n### 关闭服务\n\n    killall -9 nginx\n    killall -9 uwsgi\n","slug":"nginx+uwsgi部署odoo服务","published":1,"updated":"2021-06-20T10:25:20.127Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluqa1hj1002srlogaseqauen","content":"<blockquote>\n<p>说明：</p>\n<ul>\n<li>用nginx和uwsgi部署odoo的前提是odoo的项目本身服务跑起来没有错误，这里不再介绍odoo的环境搭建</li>\n<li>文章中，我的项目名为 odoo-10,项目绝对路径为&#x2F;home&#x2F;odoo-10</li>\n<li>注意ubuntu用户类型，一般是直接进入root用户，如果不是，请执行命令的时候全程带着sudo</li>\n</ul>\n</blockquote>\n<h2 id=\"安装配置uwsgi\"><a href=\"#安装配置uwsgi\" class=\"headerlink\" title=\"安装配置uwsgi\"></a>安装配置uwsgi</h2><h3 id=\"下载安装uwsgi\"><a href=\"#下载安装uwsgi\" class=\"headerlink\" title=\"下载安装uwsgi\"></a>下载安装uwsgi</h3><pre><code> sudo apt-get install uwsgi uwsgi-plugin-python\n</code></pre>\n<span id=\"more\"></span>\n\n<h3 id=\"测试uwsgi安装成功\"><a href=\"#测试uwsgi安装成功\" class=\"headerlink\" title=\"测试uwsgi安装成功\"></a>测试uwsgi安装成功</h3><p>在你的机器上写一个test.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">application</span>(<span class=\"params\">env, start_response</span>):</span><br><span class=\"line\">    start_response(<span class=\"string\">&#x27;200 OK&#x27;</span>, [(<span class=\"string\">&#x27;Content-Type&#x27;</span>,<span class=\"string\">&#x27;text/html&#x27;</span>)])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;Hello World&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>然后执行shell命令：</p>\n<pre><code>uwsgi --http :8001 --wsgi-file test.py\n</code></pre>\n<p>访问网页：</p>\n<pre><code>http://127.0.0.1:8001/\n</code></pre>\n<p>看在网页上是否有Hello World</p>\n<h3 id=\"报错\"><a href=\"#报错\" class=\"headerlink\" title=\"报错\"></a>报错</h3><h4 id=\"如果报chdir-nosuch-file-or-directory-core-x2F-uwsgi-c-line-2581-之类的错：\"><a href=\"#如果报chdir-nosuch-file-or-directory-core-x2F-uwsgi-c-line-2581-之类的错：\" class=\"headerlink\" title=\"如果报chdir() nosuch file or directory[core&#x2F;uwsgi.c line 2581]之类的错：\"></a>如果报chdir() nosuch file or directory[core&#x2F;uwsgi.c line 2581]之类的错：</h4><p>执行一下命令：</p>\n<pre><code>sudo apt-get install build-essential python-dev\n</code></pre>\n<h4 id=\"报错：\"><a href=\"#报错：\" class=\"headerlink\" title=\"报错：\"></a>报错：</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uwsgi: option &#x27;--http&#x27; is ambiguous; possibilities: &#x27;--http-socket&#x27; &#x27;--http-socket-modifier2&#x27; &#x27;--http-socket-modifier1&#x27;</span><br><span class=\"line\">getopt_long() error</span><br></pre></td></tr></table></figure>\n\n<p>将命令改为</p>\n<pre><code>uwsgi --http-socket :8001 --plugin python --wsgi-file test.py\n</code></pre>\n<p>原因：使用 uwsgi 时都会碰到uwsgi: unrecognized option ‘–uwsgi-file’如 –module , –wsgi-file , –callable 等，需要在上面那些未识别选项前加上 –plugin python 来告诉 uWSGI 我在使用 python 插件，后面那些选项你 用python 插件去解析。</p>\n<h3 id=\"编写odoo-wsgi-py，将其放在项目根目录下，比如这里，我放的路径就是-x2F-home-x2F-odoo-10-x2F-odoo-wsgi-py\"><a href=\"#编写odoo-wsgi-py，将其放在项目根目录下，比如这里，我放的路径就是-x2F-home-x2F-odoo-10-x2F-odoo-wsgi-py\" class=\"headerlink\" title=\"编写odoo_wsgi.py，将其放在项目根目录下，比如这里，我放的路径就是&#x2F;home&#x2F;odoo-10&#x2F;odoo_wsgi.py\"></a>编写odoo_wsgi.py，将其放在项目根目录下，比如这里，我放的路径就是&#x2F;home&#x2F;odoo-10&#x2F;odoo_wsgi.py</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> odoo</span><br><span class=\"line\">odoo.multi_process = <span class=\"literal\">True</span></span><br><span class=\"line\">odoo.conf.server_wide_modules = [<span class=\"string\">&#x27;web&#x27;</span>]</span><br><span class=\"line\">conf = odoo.tools.config</span><br><span class=\"line\">conf[<span class=\"string\">&#x27;addons_path&#x27;</span>] = <span class=\"string\">&#x27;/home/odoo-10/odoo/addons&#x27;</span>  <span class=\"comment\"># 这里路径为odoo目录下addons的路径</span></span><br><span class=\"line\">conf[<span class=\"string\">&#x27;proxy_mode&#x27;</span>] = <span class=\"string\">&#x27;True&#x27;</span></span><br><span class=\"line\">conf[<span class=\"string\">&#x27;debug_mode&#x27;</span>] = <span class=\"string\">&#x27;False&#x27;</span></span><br><span class=\"line\">application = odoo.service.wsgi_server.application</span><br><span class=\"line\">odoo.service.server.load_server_wide_modules()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"连接odoo和uwsgi，实现简单的WEB服务器\"><a href=\"#连接odoo和uwsgi，实现简单的WEB服务器\" class=\"headerlink\" title=\"连接odoo和uwsgi，实现简单的WEB服务器\"></a>连接odoo和uwsgi，实现简单的WEB服务器</h3><pre><code>uwsgi --http-socket :8001 --chdir /home/odoo-10 --plugin python --wsgi-file odoo_wsgi.py\n</code></pre>\n<p>访问网页：</p>\n<pre><code>http://127.0.0.1:8001/\n</code></pre>\n<p>看看是否和单跑odoo时提供相同的服务，祝你好运</p>\n<h3 id=\"为了实现Nginx与uWSGI的连接，两者之间将采用soket来通讯方式。\"><a href=\"#为了实现Nginx与uWSGI的连接，两者之间将采用soket来通讯方式。\" class=\"headerlink\" title=\"为了实现Nginx与uWSGI的连接，两者之间将采用soket来通讯方式。\"></a>为了实现Nginx与uWSGI的连接，两者之间将采用soket来通讯方式。</h3><p>本文我们将使用uWSGI配置文件的方式来改进uWSGI的启动方式。</p>\n<p>我们将要让Nginx采用8077端口与uWSGI通讯，请确保此端口没有被其它程序采用。</p>\n<p>新建一个XML文件：<br>odoochina_socket.xml，将它放在 odoo_wsgi.py同级目录下</p>\n<p>内容如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;uwsgi&gt;</span><br><span class=\"line\">    &lt;socket&gt;:8077&lt;/socket&gt;</span><br><span class=\"line\">    &lt;chdir&gt;/home/odoo-10&lt;/chdir&gt;</span><br><span class=\"line\">    &lt;module&gt;django_wsgi&lt;/module&gt;</span><br><span class=\"line\">    &lt;processes&gt;4&lt;/processes&gt; &lt;!-- 进程数 --&gt;</span><br><span class=\"line\">    &lt;daemonize&gt;uwsgi.log&lt;/daemonize&gt;</span><br><span class=\"line\">&lt;/uwsgi&gt;</span><br></pre></td></tr></table></figure>\n\n<p>在上面的配置中，我们使用 uwsgi.log 来记录日志，开启4个进程来处理请求。</p>\n<p>这样，我们就配置好uWSGI了。</p>\n<h2 id=\"安装配置nginx\"><a href=\"#安装配置nginx\" class=\"headerlink\" title=\"安装配置nginx\"></a>安装配置nginx</h2><h3 id=\"安装nginx\"><a href=\"#安装nginx\" class=\"headerlink\" title=\"安装nginx\"></a>安装nginx</h3><pre><code>sudo apt-get install nginx\n</code></pre>\n<h3 id=\"配置nginx\"><a href=\"#配置nginx\" class=\"headerlink\" title=\"配置nginx\"></a>配置nginx</h3><p>打开nginx.conft添加如下内容到 http{<br>}的最后</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen   8001;</span><br><span class=\"line\">    server_name 127.0.0.1;</span><br><span class=\"line\">    access_log /var/log/access.log;</span><br><span class=\"line\">    error_log /var/log/error.log;</span><br><span class=\"line\">    #charset koi8-r;</span><br><span class=\"line\">    #access_log  logs/host.access.log  main;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">      include        uwsgi_params;</span><br><span class=\"line\">      uwsgi_pass     127.0.0.1:8077;</span><br><span class=\"line\">      uwsgi_param UWSGI_SCRIPT home.odoo-10.wsgi-odoo;</span><br><span class=\"line\">      uwsgi_param UWSGI_CHDIR /home/odoo-10 ;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"检查配置文件有没有错误\"><a href=\"#检查配置文件有没有错误\" class=\"headerlink\" title=\"检查配置文件有没有错误\"></a>检查配置文件有没有错误</h3><pre><code>nginx -t\n</code></pre>\n<p>结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class=\"line\">nginx: configuration file /etc/nginx/nginx.conf test is successful</span><br></pre></td></tr></table></figure>\n\n<p>则，nginx无语法错误，至于有没有其他的错误，那就要看运气了</p>\n<h2 id=\"Nginx-uWSGI-odoo的实现方式\"><a href=\"#Nginx-uWSGI-odoo的实现方式\" class=\"headerlink\" title=\"Nginx+uWSGI+odoo的实现方式\"></a>Nginx+uWSGI+odoo的实现方式</h2><h3 id=\"重启Nginx服务器，以使Nginx的配置生效\"><a href=\"#重启Nginx服务器，以使Nginx的配置生效\" class=\"headerlink\" title=\"重启Nginx服务器，以使Nginx的配置生效\"></a>重启Nginx服务器，以使Nginx的配置生效</h3><pre><code>nginx -s  reload\n</code></pre>\n<h3 id=\"启动uWSGI服务器\"><a href=\"#启动uWSGI服务器\" class=\"headerlink\" title=\"启动uWSGI服务器\"></a>启动uWSGI服务器</h3><pre><code>cd /home/odoo-10\nuwsgi --plugin python -x odoochina_socket.xml\n</code></pre>\n<h3 id=\"访问服务\"><a href=\"#访问服务\" class=\"headerlink\" title=\"访问服务\"></a>访问服务</h3><p>基于上面的假设你的域名是127.0.0.1</p>\n<p>因此，我们访问 127.0.0.1:8001，如果发现程序与 单独使用odoo启动的程序一模一样时，就说明成功啦！</p>\n<h3 id=\"关闭服务\"><a href=\"#关闭服务\" class=\"headerlink\" title=\"关闭服务\"></a>关闭服务</h3><pre><code>killall -9 nginx\nkillall -9 uwsgi\n</code></pre>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>说明：</p>\n<ul>\n<li>用nginx和uwsgi部署odoo的前提是odoo的项目本身服务跑起来没有错误，这里不再介绍odoo的环境搭建</li>\n<li>文章中，我的项目名为 odoo-10,项目绝对路径为&#x2F;home&#x2F;odoo-10</li>\n<li>注意ubuntu用户类型，一般是直接进入root用户，如果不是，请执行命令的时候全程带着sudo</li>\n</ul>\n</blockquote>\n<h2 id=\"安装配置uwsgi\"><a href=\"#安装配置uwsgi\" class=\"headerlink\" title=\"安装配置uwsgi\"></a>安装配置uwsgi</h2><h3 id=\"下载安装uwsgi\"><a href=\"#下载安装uwsgi\" class=\"headerlink\" title=\"下载安装uwsgi\"></a>下载安装uwsgi</h3><pre><code> sudo apt-get install uwsgi uwsgi-plugin-python\n</code></pre>","more":"<h3 id=\"测试uwsgi安装成功\"><a href=\"#测试uwsgi安装成功\" class=\"headerlink\" title=\"测试uwsgi安装成功\"></a>测试uwsgi安装成功</h3><p>在你的机器上写一个test.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">application</span>(<span class=\"params\">env, start_response</span>):</span><br><span class=\"line\">    start_response(<span class=\"string\">&#x27;200 OK&#x27;</span>, [(<span class=\"string\">&#x27;Content-Type&#x27;</span>,<span class=\"string\">&#x27;text/html&#x27;</span>)])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;Hello World&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>然后执行shell命令：</p>\n<pre><code>uwsgi --http :8001 --wsgi-file test.py\n</code></pre>\n<p>访问网页：</p>\n<pre><code>http://127.0.0.1:8001/\n</code></pre>\n<p>看在网页上是否有Hello World</p>\n<h3 id=\"报错\"><a href=\"#报错\" class=\"headerlink\" title=\"报错\"></a>报错</h3><h4 id=\"如果报chdir-nosuch-file-or-directory-core-x2F-uwsgi-c-line-2581-之类的错：\"><a href=\"#如果报chdir-nosuch-file-or-directory-core-x2F-uwsgi-c-line-2581-之类的错：\" class=\"headerlink\" title=\"如果报chdir() nosuch file or directory[core&#x2F;uwsgi.c line 2581]之类的错：\"></a>如果报chdir() nosuch file or directory[core&#x2F;uwsgi.c line 2581]之类的错：</h4><p>执行一下命令：</p>\n<pre><code>sudo apt-get install build-essential python-dev\n</code></pre>\n<h4 id=\"报错：\"><a href=\"#报错：\" class=\"headerlink\" title=\"报错：\"></a>报错：</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uwsgi: option &#x27;--http&#x27; is ambiguous; possibilities: &#x27;--http-socket&#x27; &#x27;--http-socket-modifier2&#x27; &#x27;--http-socket-modifier1&#x27;</span><br><span class=\"line\">getopt_long() error</span><br></pre></td></tr></table></figure>\n\n<p>将命令改为</p>\n<pre><code>uwsgi --http-socket :8001 --plugin python --wsgi-file test.py\n</code></pre>\n<p>原因：使用 uwsgi 时都会碰到uwsgi: unrecognized option ‘–uwsgi-file’如 –module , –wsgi-file , –callable 等，需要在上面那些未识别选项前加上 –plugin python 来告诉 uWSGI 我在使用 python 插件，后面那些选项你 用python 插件去解析。</p>\n<h3 id=\"编写odoo-wsgi-py，将其放在项目根目录下，比如这里，我放的路径就是-x2F-home-x2F-odoo-10-x2F-odoo-wsgi-py\"><a href=\"#编写odoo-wsgi-py，将其放在项目根目录下，比如这里，我放的路径就是-x2F-home-x2F-odoo-10-x2F-odoo-wsgi-py\" class=\"headerlink\" title=\"编写odoo_wsgi.py，将其放在项目根目录下，比如这里，我放的路径就是&#x2F;home&#x2F;odoo-10&#x2F;odoo_wsgi.py\"></a>编写odoo_wsgi.py，将其放在项目根目录下，比如这里，我放的路径就是&#x2F;home&#x2F;odoo-10&#x2F;odoo_wsgi.py</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> odoo</span><br><span class=\"line\">odoo.multi_process = <span class=\"literal\">True</span></span><br><span class=\"line\">odoo.conf.server_wide_modules = [<span class=\"string\">&#x27;web&#x27;</span>]</span><br><span class=\"line\">conf = odoo.tools.config</span><br><span class=\"line\">conf[<span class=\"string\">&#x27;addons_path&#x27;</span>] = <span class=\"string\">&#x27;/home/odoo-10/odoo/addons&#x27;</span>  <span class=\"comment\"># 这里路径为odoo目录下addons的路径</span></span><br><span class=\"line\">conf[<span class=\"string\">&#x27;proxy_mode&#x27;</span>] = <span class=\"string\">&#x27;True&#x27;</span></span><br><span class=\"line\">conf[<span class=\"string\">&#x27;debug_mode&#x27;</span>] = <span class=\"string\">&#x27;False&#x27;</span></span><br><span class=\"line\">application = odoo.service.wsgi_server.application</span><br><span class=\"line\">odoo.service.server.load_server_wide_modules()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"连接odoo和uwsgi，实现简单的WEB服务器\"><a href=\"#连接odoo和uwsgi，实现简单的WEB服务器\" class=\"headerlink\" title=\"连接odoo和uwsgi，实现简单的WEB服务器\"></a>连接odoo和uwsgi，实现简单的WEB服务器</h3><pre><code>uwsgi --http-socket :8001 --chdir /home/odoo-10 --plugin python --wsgi-file odoo_wsgi.py\n</code></pre>\n<p>访问网页：</p>\n<pre><code>http://127.0.0.1:8001/\n</code></pre>\n<p>看看是否和单跑odoo时提供相同的服务，祝你好运</p>\n<h3 id=\"为了实现Nginx与uWSGI的连接，两者之间将采用soket来通讯方式。\"><a href=\"#为了实现Nginx与uWSGI的连接，两者之间将采用soket来通讯方式。\" class=\"headerlink\" title=\"为了实现Nginx与uWSGI的连接，两者之间将采用soket来通讯方式。\"></a>为了实现Nginx与uWSGI的连接，两者之间将采用soket来通讯方式。</h3><p>本文我们将使用uWSGI配置文件的方式来改进uWSGI的启动方式。</p>\n<p>我们将要让Nginx采用8077端口与uWSGI通讯，请确保此端口没有被其它程序采用。</p>\n<p>新建一个XML文件：<br>odoochina_socket.xml，将它放在 odoo_wsgi.py同级目录下</p>\n<p>内容如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;uwsgi&gt;</span><br><span class=\"line\">    &lt;socket&gt;:8077&lt;/socket&gt;</span><br><span class=\"line\">    &lt;chdir&gt;/home/odoo-10&lt;/chdir&gt;</span><br><span class=\"line\">    &lt;module&gt;django_wsgi&lt;/module&gt;</span><br><span class=\"line\">    &lt;processes&gt;4&lt;/processes&gt; &lt;!-- 进程数 --&gt;</span><br><span class=\"line\">    &lt;daemonize&gt;uwsgi.log&lt;/daemonize&gt;</span><br><span class=\"line\">&lt;/uwsgi&gt;</span><br></pre></td></tr></table></figure>\n\n<p>在上面的配置中，我们使用 uwsgi.log 来记录日志，开启4个进程来处理请求。</p>\n<p>这样，我们就配置好uWSGI了。</p>\n<h2 id=\"安装配置nginx\"><a href=\"#安装配置nginx\" class=\"headerlink\" title=\"安装配置nginx\"></a>安装配置nginx</h2><h3 id=\"安装nginx\"><a href=\"#安装nginx\" class=\"headerlink\" title=\"安装nginx\"></a>安装nginx</h3><pre><code>sudo apt-get install nginx\n</code></pre>\n<h3 id=\"配置nginx\"><a href=\"#配置nginx\" class=\"headerlink\" title=\"配置nginx\"></a>配置nginx</h3><p>打开nginx.conft添加如下内容到 http{<br>}的最后</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen   8001;</span><br><span class=\"line\">    server_name 127.0.0.1;</span><br><span class=\"line\">    access_log /var/log/access.log;</span><br><span class=\"line\">    error_log /var/log/error.log;</span><br><span class=\"line\">    #charset koi8-r;</span><br><span class=\"line\">    #access_log  logs/host.access.log  main;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">      include        uwsgi_params;</span><br><span class=\"line\">      uwsgi_pass     127.0.0.1:8077;</span><br><span class=\"line\">      uwsgi_param UWSGI_SCRIPT home.odoo-10.wsgi-odoo;</span><br><span class=\"line\">      uwsgi_param UWSGI_CHDIR /home/odoo-10 ;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"检查配置文件有没有错误\"><a href=\"#检查配置文件有没有错误\" class=\"headerlink\" title=\"检查配置文件有没有错误\"></a>检查配置文件有没有错误</h3><pre><code>nginx -t\n</code></pre>\n<p>结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class=\"line\">nginx: configuration file /etc/nginx/nginx.conf test is successful</span><br></pre></td></tr></table></figure>\n\n<p>则，nginx无语法错误，至于有没有其他的错误，那就要看运气了</p>\n<h2 id=\"Nginx-uWSGI-odoo的实现方式\"><a href=\"#Nginx-uWSGI-odoo的实现方式\" class=\"headerlink\" title=\"Nginx+uWSGI+odoo的实现方式\"></a>Nginx+uWSGI+odoo的实现方式</h2><h3 id=\"重启Nginx服务器，以使Nginx的配置生效\"><a href=\"#重启Nginx服务器，以使Nginx的配置生效\" class=\"headerlink\" title=\"重启Nginx服务器，以使Nginx的配置生效\"></a>重启Nginx服务器，以使Nginx的配置生效</h3><pre><code>nginx -s  reload\n</code></pre>\n<h3 id=\"启动uWSGI服务器\"><a href=\"#启动uWSGI服务器\" class=\"headerlink\" title=\"启动uWSGI服务器\"></a>启动uWSGI服务器</h3><pre><code>cd /home/odoo-10\nuwsgi --plugin python -x odoochina_socket.xml\n</code></pre>\n<h3 id=\"访问服务\"><a href=\"#访问服务\" class=\"headerlink\" title=\"访问服务\"></a>访问服务</h3><p>基于上面的假设你的域名是127.0.0.1</p>\n<p>因此，我们访问 127.0.0.1:8001，如果发现程序与 单独使用odoo启动的程序一模一样时，就说明成功啦！</p>\n<h3 id=\"关闭服务\"><a href=\"#关闭服务\" class=\"headerlink\" title=\"关闭服务\"></a>关闭服务</h3><pre><code>killall -9 nginx\nkillall -9 uwsgi\n</code></pre>"},{"title":"pyenv的安装使用和问题解决","date":"2019-08-23T16:00:00.000Z","_content":"\n使用`pyenv`和`pyenv-virtualenv`可以轻松的管理不同版本的Python，而且各个版本的环境完全独立，互不干扰，在Linux下结合shell，是十分推荐的。\n这里记录Ubuntu系统下的安装、使用的一些步骤，同时也记录一些使用Pyenv的一些比较复杂的问题的解决方案。\n\n## 安装\n\n### 依赖安装\n\n为了避免一些不必要的麻烦，这里建议是提前安装一些依赖：\n\n```shell\nsudo apt install -y git make wget curl build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev libncurses5-dev libncursesw5-dev llvm \n```\n\n### 安装pyenv\n\n- clone项目到当前用户目录下\n````\ngit clone https://github.com/pyenv/pyenv.git ~/.pyenv\n````\n\n注：如果使用zsh则将下面 `~/.bash_profile` 改为 `~/.zshrc`\n\n- 添加环境环境变量\n```\necho 'export PYENV_ROOT=\"$HOME/.pyenv\"' >> ~/.bash_profile\necho 'export PATH=\"$PYENV_ROOT/bin:$PATH\"' >> ~/.bash_profile\n```\n\n- 添加 `pyenv init` 到shell中\n```\necho -e 'if command -v pyenv 1>/dev/null 2>&1; then\\n  eval \"$(pyenv init -)\"\\nfi' >> ~/.bash_profile\n```\n\n- 重启shell\n```\nexec \"$SHELL\"\n```\n- 查看pyenv安装版本，可以查看本机安装Python版本\n```\npyenv verson\n```\n\n<!--more-->\n\n### 安装pyenv-virtualenv\n\n- clone插件到pyenv的安装路径\n```\ngit clone https://github.com/pyenv/pyenv-virtualenv.git $(pyenv root)/plugins/pyenv-virtualenv\n```\n\n- 添加`pyenv virtualenv-init`到shell中\n```\necho 'eval \"$(pyenv virtualenv-init -)\"' >> ~/.bash_profile\n```\n注：如果使用zsh则将下面 `~/.bash_profile` 改为 `~/.zshrc`\n\n- 重启shell\n```\nexec \"$SHELL\"\n```\n\n## 使用\n\n- 查看当前版本\n```\npyenv version\n```\n- 查看所有版本\n```\npyenv versions\n```\n- 查看所有可安装的版本\n```\npyenv install --list\n```\n- 安装指定版本\n```\npyenv install 3.6.5\n```\n- 安装新版本后rehash一下\n```\npyenv rehash\n```\n- 删除指定版本\n```\npyenv uninstall 3.6.5\n```\n- 指定全局版本\n```\npyenv global 3.6.5\n```\n\n- 创建一个3.6.5版本的虚拟环境, 命名为v365env\n```\npyenv virtualenv 3.6.5 v365env\n```\n- 激活虚拟环境\n```\npyenv activate v365env\n```\n- 关闭虚拟环境\n```\npyenv deactivate v365env\n```\n- 指定局部版本，会在当前目录下创建 `.python-version`，如果是git仓库，请记得将该文件添加到`.gitignore`，下次再进入当前目录是，会自动激活该虚拟环境。\n```\npyenv local v365env\n```\n\n## 问题\n\n### python3.6使用tkinter提示 `No module named ‘_tkinter’` 问题：\n\n```\nimport _tkinter # If this fails your Python may not be configured for Tk\nModuleNotFoundError: No module named ‘_tkinter’\n```\n\n解决方法如下：\n\n```bash\nsudo apt update\nsudo apt install python3-tk  # （如果是python2.x，安装sudo apt-get install python-tk即可）\nsudo apt install tk-dev\n```\n\n安装完成之后，重新安装Python：\n\n```\npyenv uninstall 3.6.6  # 卸载原来安装的版本\npyenv install 3.6.6  # 重新安装\n```\n","source":"_posts/pyenv的使用和问题解决.md","raw":"---\ntitle: pyenv的安装使用和问题解决\ndate: 2019-08-24\ntags: [Ubuntu, Python, pyenv]\n---\n\n使用`pyenv`和`pyenv-virtualenv`可以轻松的管理不同版本的Python，而且各个版本的环境完全独立，互不干扰，在Linux下结合shell，是十分推荐的。\n这里记录Ubuntu系统下的安装、使用的一些步骤，同时也记录一些使用Pyenv的一些比较复杂的问题的解决方案。\n\n## 安装\n\n### 依赖安装\n\n为了避免一些不必要的麻烦，这里建议是提前安装一些依赖：\n\n```shell\nsudo apt install -y git make wget curl build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev libncurses5-dev libncursesw5-dev llvm \n```\n\n### 安装pyenv\n\n- clone项目到当前用户目录下\n````\ngit clone https://github.com/pyenv/pyenv.git ~/.pyenv\n````\n\n注：如果使用zsh则将下面 `~/.bash_profile` 改为 `~/.zshrc`\n\n- 添加环境环境变量\n```\necho 'export PYENV_ROOT=\"$HOME/.pyenv\"' >> ~/.bash_profile\necho 'export PATH=\"$PYENV_ROOT/bin:$PATH\"' >> ~/.bash_profile\n```\n\n- 添加 `pyenv init` 到shell中\n```\necho -e 'if command -v pyenv 1>/dev/null 2>&1; then\\n  eval \"$(pyenv init -)\"\\nfi' >> ~/.bash_profile\n```\n\n- 重启shell\n```\nexec \"$SHELL\"\n```\n- 查看pyenv安装版本，可以查看本机安装Python版本\n```\npyenv verson\n```\n\n<!--more-->\n\n### 安装pyenv-virtualenv\n\n- clone插件到pyenv的安装路径\n```\ngit clone https://github.com/pyenv/pyenv-virtualenv.git $(pyenv root)/plugins/pyenv-virtualenv\n```\n\n- 添加`pyenv virtualenv-init`到shell中\n```\necho 'eval \"$(pyenv virtualenv-init -)\"' >> ~/.bash_profile\n```\n注：如果使用zsh则将下面 `~/.bash_profile` 改为 `~/.zshrc`\n\n- 重启shell\n```\nexec \"$SHELL\"\n```\n\n## 使用\n\n- 查看当前版本\n```\npyenv version\n```\n- 查看所有版本\n```\npyenv versions\n```\n- 查看所有可安装的版本\n```\npyenv install --list\n```\n- 安装指定版本\n```\npyenv install 3.6.5\n```\n- 安装新版本后rehash一下\n```\npyenv rehash\n```\n- 删除指定版本\n```\npyenv uninstall 3.6.5\n```\n- 指定全局版本\n```\npyenv global 3.6.5\n```\n\n- 创建一个3.6.5版本的虚拟环境, 命名为v365env\n```\npyenv virtualenv 3.6.5 v365env\n```\n- 激活虚拟环境\n```\npyenv activate v365env\n```\n- 关闭虚拟环境\n```\npyenv deactivate v365env\n```\n- 指定局部版本，会在当前目录下创建 `.python-version`，如果是git仓库，请记得将该文件添加到`.gitignore`，下次再进入当前目录是，会自动激活该虚拟环境。\n```\npyenv local v365env\n```\n\n## 问题\n\n### python3.6使用tkinter提示 `No module named ‘_tkinter’` 问题：\n\n```\nimport _tkinter # If this fails your Python may not be configured for Tk\nModuleNotFoundError: No module named ‘_tkinter’\n```\n\n解决方法如下：\n\n```bash\nsudo apt update\nsudo apt install python3-tk  # （如果是python2.x，安装sudo apt-get install python-tk即可）\nsudo apt install tk-dev\n```\n\n安装完成之后，重新安装Python：\n\n```\npyenv uninstall 3.6.6  # 卸载原来安装的版本\npyenv install 3.6.6  # 重新安装\n```\n","slug":"pyenv的使用和问题解决","published":1,"updated":"2021-06-20T10:25:20.127Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluqa1hj1002urlogbwyvch7w","content":"<p>使用<code>pyenv</code>和<code>pyenv-virtualenv</code>可以轻松的管理不同版本的Python，而且各个版本的环境完全独立，互不干扰，在Linux下结合shell，是十分推荐的。<br>这里记录Ubuntu系统下的安装、使用的一些步骤，同时也记录一些使用Pyenv的一些比较复杂的问题的解决方案。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><h3 id=\"依赖安装\"><a href=\"#依赖安装\" class=\"headerlink\" title=\"依赖安装\"></a>依赖安装</h3><p>为了避免一些不必要的麻烦，这里建议是提前安装一些依赖：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install -y git make wget curl build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev libncurses5-dev libncursesw5-dev llvm </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装pyenv\"><a href=\"#安装pyenv\" class=\"headerlink\" title=\"安装pyenv\"></a>安装pyenv</h3><ul>\n<li>clone项目到当前用户目录下<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/pyenv/pyenv.git ~/.pyenv</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>注：如果使用zsh则将下面 <code>~/.bash_profile</code> 改为 <code>~/.zshrc</code></p>\n<ul>\n<li><p>添加环境环境变量</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &#x27;export PYENV_ROOT=&quot;$HOME/.pyenv&quot;&#x27; &gt;&gt; ~/.bash_profile</span><br><span class=\"line\">echo &#x27;export PATH=&quot;$PYENV_ROOT/bin:$PATH&quot;&#x27; &gt;&gt; ~/.bash_profile</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>添加 <code>pyenv init</code> 到shell中</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo -e &#x27;if command -v pyenv 1&gt;/dev/null 2&gt;&amp;1; then\\n  eval &quot;$(pyenv init -)&quot;\\nfi&#x27; &gt;&gt; ~/.bash_profile</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重启shell</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exec &quot;$SHELL&quot;</span><br></pre></td></tr></table></figure></li>\n<li><p>查看pyenv安装版本，可以查看本机安装Python版本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pyenv verson</span><br></pre></td></tr></table></figure></li>\n</ul>\n<span id=\"more\"></span>\n\n<h3 id=\"安装pyenv-virtualenv\"><a href=\"#安装pyenv-virtualenv\" class=\"headerlink\" title=\"安装pyenv-virtualenv\"></a>安装pyenv-virtualenv</h3><ul>\n<li><p>clone插件到pyenv的安装路径</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/pyenv/pyenv-virtualenv.git $(pyenv root)/plugins/pyenv-virtualenv</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>添加<code>pyenv virtualenv-init</code>到shell中</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &#x27;eval &quot;$(pyenv virtualenv-init -)&quot;&#x27; &gt;&gt; ~/.bash_profile</span><br></pre></td></tr></table></figure>\n<p>注：如果使用zsh则将下面 <code>~/.bash_profile</code> 改为 <code>~/.zshrc</code></p>\n</li>\n<li><p>重启shell</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exec &quot;$SHELL&quot;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><ul>\n<li><p>查看当前版本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pyenv version</span><br></pre></td></tr></table></figure></li>\n<li><p>查看所有版本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pyenv versions</span><br></pre></td></tr></table></figure></li>\n<li><p>查看所有可安装的版本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pyenv install --list</span><br></pre></td></tr></table></figure></li>\n<li><p>安装指定版本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pyenv install 3.6.5</span><br></pre></td></tr></table></figure></li>\n<li><p>安装新版本后rehash一下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pyenv rehash</span><br></pre></td></tr></table></figure></li>\n<li><p>删除指定版本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pyenv uninstall 3.6.5</span><br></pre></td></tr></table></figure></li>\n<li><p>指定全局版本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pyenv global 3.6.5</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建一个3.6.5版本的虚拟环境, 命名为v365env</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pyenv virtualenv 3.6.5 v365env</span><br></pre></td></tr></table></figure></li>\n<li><p>激活虚拟环境</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pyenv activate v365env</span><br></pre></td></tr></table></figure></li>\n<li><p>关闭虚拟环境</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pyenv deactivate v365env</span><br></pre></td></tr></table></figure></li>\n<li><p>指定局部版本，会在当前目录下创建 <code>.python-version</code>，如果是git仓库，请记得将该文件添加到<code>.gitignore</code>，下次再进入当前目录是，会自动激活该虚拟环境。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pyenv local v365env</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><h3 id=\"python3-6使用tkinter提示-No-module-named-‘-tkinter’-问题：\"><a href=\"#python3-6使用tkinter提示-No-module-named-‘-tkinter’-问题：\" class=\"headerlink\" title=\"python3.6使用tkinter提示 No module named ‘_tkinter’ 问题：\"></a>python3.6使用tkinter提示 <code>No module named ‘_tkinter’</code> 问题：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import _tkinter # If this fails your Python may not be configured for Tk</span><br><span class=\"line\">ModuleNotFoundError: No module named ‘_tkinter’</span><br></pre></td></tr></table></figure>\n\n<p>解决方法如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt update</span><br><span class=\"line\">sudo apt install python3-tk  <span class=\"comment\"># （如果是python2.x，安装sudo apt-get install python-tk即可）</span></span><br><span class=\"line\">sudo apt install tk-dev</span><br></pre></td></tr></table></figure>\n\n<p>安装完成之后，重新安装Python：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pyenv uninstall 3.6.6  # 卸载原来安装的版本</span><br><span class=\"line\">pyenv install 3.6.6  # 重新安装</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>使用<code>pyenv</code>和<code>pyenv-virtualenv</code>可以轻松的管理不同版本的Python，而且各个版本的环境完全独立，互不干扰，在Linux下结合shell，是十分推荐的。<br>这里记录Ubuntu系统下的安装、使用的一些步骤，同时也记录一些使用Pyenv的一些比较复杂的问题的解决方案。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><h3 id=\"依赖安装\"><a href=\"#依赖安装\" class=\"headerlink\" title=\"依赖安装\"></a>依赖安装</h3><p>为了避免一些不必要的麻烦，这里建议是提前安装一些依赖：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install -y git make wget curl build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev libncurses5-dev libncursesw5-dev llvm </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装pyenv\"><a href=\"#安装pyenv\" class=\"headerlink\" title=\"安装pyenv\"></a>安装pyenv</h3><ul>\n<li>clone项目到当前用户目录下<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/pyenv/pyenv.git ~/.pyenv</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>注：如果使用zsh则将下面 <code>~/.bash_profile</code> 改为 <code>~/.zshrc</code></p>\n<ul>\n<li><p>添加环境环境变量</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &#x27;export PYENV_ROOT=&quot;$HOME/.pyenv&quot;&#x27; &gt;&gt; ~/.bash_profile</span><br><span class=\"line\">echo &#x27;export PATH=&quot;$PYENV_ROOT/bin:$PATH&quot;&#x27; &gt;&gt; ~/.bash_profile</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>添加 <code>pyenv init</code> 到shell中</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo -e &#x27;if command -v pyenv 1&gt;/dev/null 2&gt;&amp;1; then\\n  eval &quot;$(pyenv init -)&quot;\\nfi&#x27; &gt;&gt; ~/.bash_profile</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重启shell</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exec &quot;$SHELL&quot;</span><br></pre></td></tr></table></figure></li>\n<li><p>查看pyenv安装版本，可以查看本机安装Python版本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pyenv verson</span><br></pre></td></tr></table></figure></li>\n</ul>","more":"<h3 id=\"安装pyenv-virtualenv\"><a href=\"#安装pyenv-virtualenv\" class=\"headerlink\" title=\"安装pyenv-virtualenv\"></a>安装pyenv-virtualenv</h3><ul>\n<li><p>clone插件到pyenv的安装路径</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/pyenv/pyenv-virtualenv.git $(pyenv root)/plugins/pyenv-virtualenv</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>添加<code>pyenv virtualenv-init</code>到shell中</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &#x27;eval &quot;$(pyenv virtualenv-init -)&quot;&#x27; &gt;&gt; ~/.bash_profile</span><br></pre></td></tr></table></figure>\n<p>注：如果使用zsh则将下面 <code>~/.bash_profile</code> 改为 <code>~/.zshrc</code></p>\n</li>\n<li><p>重启shell</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exec &quot;$SHELL&quot;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><ul>\n<li><p>查看当前版本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pyenv version</span><br></pre></td></tr></table></figure></li>\n<li><p>查看所有版本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pyenv versions</span><br></pre></td></tr></table></figure></li>\n<li><p>查看所有可安装的版本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pyenv install --list</span><br></pre></td></tr></table></figure></li>\n<li><p>安装指定版本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pyenv install 3.6.5</span><br></pre></td></tr></table></figure></li>\n<li><p>安装新版本后rehash一下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pyenv rehash</span><br></pre></td></tr></table></figure></li>\n<li><p>删除指定版本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pyenv uninstall 3.6.5</span><br></pre></td></tr></table></figure></li>\n<li><p>指定全局版本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pyenv global 3.6.5</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建一个3.6.5版本的虚拟环境, 命名为v365env</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pyenv virtualenv 3.6.5 v365env</span><br></pre></td></tr></table></figure></li>\n<li><p>激活虚拟环境</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pyenv activate v365env</span><br></pre></td></tr></table></figure></li>\n<li><p>关闭虚拟环境</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pyenv deactivate v365env</span><br></pre></td></tr></table></figure></li>\n<li><p>指定局部版本，会在当前目录下创建 <code>.python-version</code>，如果是git仓库，请记得将该文件添加到<code>.gitignore</code>，下次再进入当前目录是，会自动激活该虚拟环境。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pyenv local v365env</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><h3 id=\"python3-6使用tkinter提示-No-module-named-‘-tkinter’-问题：\"><a href=\"#python3-6使用tkinter提示-No-module-named-‘-tkinter’-问题：\" class=\"headerlink\" title=\"python3.6使用tkinter提示 No module named ‘_tkinter’ 问题：\"></a>python3.6使用tkinter提示 <code>No module named ‘_tkinter’</code> 问题：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import _tkinter # If this fails your Python may not be configured for Tk</span><br><span class=\"line\">ModuleNotFoundError: No module named ‘_tkinter’</span><br></pre></td></tr></table></figure>\n\n<p>解决方法如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt update</span><br><span class=\"line\">sudo apt install python3-tk  <span class=\"comment\"># （如果是python2.x，安装sudo apt-get install python-tk即可）</span></span><br><span class=\"line\">sudo apt install tk-dev</span><br></pre></td></tr></table></figure>\n\n<p>安装完成之后，重新安装Python：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pyenv uninstall 3.6.6  # 卸载原来安装的版本</span><br><span class=\"line\">pyenv install 3.6.6  # 重新安装</span><br></pre></td></tr></table></figure>"},{"title":"pymongo的基本使用","date":"2018-03-12T16:00:00.000Z","_content":"\n本文参考最新的 [pymongo 官方文档](http://api.mongodb.com/python/current/tutorial.html)进行整理，至文档更新时，**PyMongo的版本号为3.6.1**\n\n## 先决条件\n\n开始之前，请确保你的`pymongo`被正确安装，在 **Python shell** 中，应该运行以下代码而不会引发异常：\n\n    import pymongo\n\n另外一个条件就是确保MongoDB实例正在默认主机和端口上运行(如果你的操作系统是windows，可以参考[这篇文章](https://suadminwen.github.io/2018/01/25/mongodb%E7%9A%84windows%E6%9C%8D%E5%8A%A1%E5%AE%89%E8%A3%85/)进行mongodb的安装和运行)\n\n<!--more-->\n\n## 与MongoClient建立连接\n\n使用 `PyMongo` 时的第一步是创建一个 `MongoClient`正在运行的 `mongod` 实例。这样做很简单：\n\n```python\nfrom pymongo import MongoClient\nclient = MongoClient()\n```\n\n上面的代码将连接到默认主机和端口。我们也可以明确指定主机和端口，如下所示：\n\n    client = MongoClient(\"localhost\", \"27017\")\n\n或者使用MongoDB URI格式：\n\n    client = MongoClient('mongodb://localhost:27017/')\n\n## 获取数据库\n\n一个 `MongoDB` 实例可以支持多个独立的 数据库。在使用 `PyMongo` 时，您可以使用 `MongoClient` 实例上的属性样式访问来访问数据库：\n\n    db = client.test_database\n\n如果您的数据库名称使用属性样式访问不起作用，则可以使用字典样式访问：\n\n    db = client[\"test_database\"]\n\n## 获取集合\n\n一个集合是一组存储在MongoDB中的文档，相当于关系型数据库中的表。在PyMongo中获取集合与获取数据库的工作方式相同：\n\n    collection = db.test_collection\n    collection = db[\"test_collection\"]\n\n**关于MongoDB中的集合（和数据库）的一个重要注意事项是它们是懒惰地创建的————上述命令都没有在MongoDB服务器上实际执行过任何操作。集合和数据库在第一个文档被插入时创建。**\n\n## 文档的表示\n\nMongoDB中的数据使用JSON样式的文档来表示（并存储）。在PyMongo中，我们使用字典来表示文档。例如，以下字典可能用于表示博客文章：\n\n```python\nimport datetime\npost = {\"author\": \"Mike\",\n        \"text\": \"My first blog post!\",\n        \"tags\": [\"mongodb\", \"python\", \"pymongo\"],\n        \"date\": datetime.datetime.utcnow()}\n```\n\n请注意，文档可以包含Python类型（如datetime.datetime实例），这些类型 将自动转换为适当的 **BSON** 类型并从其中转换。\n\n## 插入文档\n\n要将文档插入到集合中，我们可以使用以下 `insert_one()` 方法：\n\n```python\nfrom pymongo import MongoClient\nclient = MongoClient()  # 连接数据库\ndb = client.blog  # 获取数据库\nposts = db.posts  # 获取集合\npost_id = posts.insert_one(post).inserted_id\nprint post_id  # ObjectId('...')\n```\n\n如果文档 \"`_id`\" 尚未包含密钥，则在插入文档时会自动添加一个特殊 \"`_id`\" 键。\"`_id`\"集合中的值必须是唯一的。`insert_one()` 返回一个实例 `InsertOneResult`。\n\n插入第一个文档后，`posts` 集合实际上已经在服务器上创建。我们可以通过列出数据库中的所有集合来验证这一点：\n\n    print db.collection_names(include_system_collections=False)  # [u'posts']\n\n## 获取文档\n\n可以在MongoDB中执行的最基本的查询类型是 find_one()。此方法返回与查询匹配的单个文档（或者None如果没有匹配项）。当您知道只有一个匹配的文档，或者只对第一个匹配感兴趣时，它非常有用。这里我们用来 find_one()从帖子集合中获取第一个文档：\n\n    print posts.find_one()\n\n结果是一个匹配我们先前插入的字典。\n\n**注意 返回的文档包含一个\"`_id`\"插入时自动添加的文档。**\n\n`find_one()`同时支持根据特定条件的查询。为了限制结果，我们现在只查询作者author为 **Mike** 的文档:\n\n```python\nprint posts.find_one({\"author\": \"Mike\"})\n# {u'date': datetime.datetime(2018, 3, 13, 6, 23, 51, 273000), u'text': u'My first blog post!', u'_id': ObjectId('5aa76e7d733f2d338cba01b5'), u'author': u'Mike', u'tags': [u'mongodb', u'python', u'pymongo']}\n```\n\n## 通过ObjectId查询\n\n我们也可以通过它找到一个帖子_id，在我们的例子中是一个ObjectId:\n\n```python\n# 上面演示插入的时候，返回了一个post_id这个post_id的类型为 <class 'bson.objectid.ObjectId'>\nprint posts.find_one({\"_id\": post_id})\n\n```\n\n**请注意，ObjectId与其字符串表示形式不同：**\n\n```python\npost_id_as_str = str(post_id)\nposts.find_one({\"_id\": post_id_as_str}) # No result\n```\n\nWeb应用程序中的一项常见任务是从请求 URL 获取 ObjectId 并查找匹配的文档。在这种情况下，必须先将 ObjectId **从字符串转换为 ObjectId**，然后才能将其传递到 find_one()\n\n```python\nfrom bson.objectid import ObjectId\n# The web framework gets post_id from the URL and passes it as a string\ndef get(post_id):\n    # Convert from string to ObjectId:\n    document = client.db.collection.find_one({'_id': ObjectId(post_id)})\n```\n## Unicode字符串\n\n你可能会注意到返回结果的字符串与Python中默认的字符串有些不同(比如用u'Mike来代替'Mike')。这里简短说明一下。\nMongoDB 以 BSON 格式存储数据，而 BSON 字符串使用的是 UTF-8 编码，所以 PyMongo 必须确保它存储的字符串为 UTF-8 格式。普通字符串( str )的存储不变，unicode 字符串会被 PyMongo 自动转为 UTF-8 格式。\n\n## 批量插入\n\n为了让查询更有趣，让我们插入更多的文档。除了插入单个文档之外，我们还可以通过将列表作为第一个参数传递给批量插入操作insert_many()。这会将每个文档插入列表中，只向服务器发送一个命令：\n\n```python\nnew_posts = [{\"author\": \"Mike\",\n              \"text\": \"Another post!\",\n              \"tags\": [\"bulk\", \"insert\"],\n              \"date\": datetime.datetime(2009, 11, 12, 11, 14)},\n             {\"author\": \"Eliot\",\n              \"title\": \"MongoDB is fun\",\n              \"text\": \"and pretty easy too!\",\n              \"date\": datetime.datetime(2009, 11, 10, 10, 45)}]\nresult = posts.insert_many(new_posts)\nprint result.inserted_ids  # [ObjectId('...'), ObjectId('...')]\n```\n\n有一下几点比较有趣的事情需要注意:\n- 1. insert()的返回值包含了两个ObjectId对象，每个都对应上面批量插入的文档\n- 2. new_posts[1] 与其他的posts看起来不一样:没有tags，并且增加了一个新的title。这里也证明了为什么我们一直说MongoDB是没有模式的\n\n## 查询多个文档\n\n作为查询的结果，我们使用该 find() 方法获取多个文档 。find()返回一个 Cursor实例，它允许我们迭代所有匹配的文档。例如，我们可以迭代posts集合中的每个文档：\n\n```python\nfor post in posts.find():\n    print post\n```\n\nfind()也可以像find_one()那样来进行条件查询。现在，我们来查询所有作者author为Mike的文档:\n\n```python\nfor post in posts.find({\"author\": \"Mike\"}):\n    print post\n```\n\n## 计数\n\n如果我们只想知道有多少文档匹配查询，我们可以执行count()操作而不是完整的查询。我们可以统计一个集合中的所有文档：\n\n    posts.count()\n\n或者只统计符合条件的:\n\n    posts.find({\"author\": \"Mike\"}).count()\n\n## 范围查询\n\nMongoDB支持许多不同类型的高级查询。例如，让我们执行查询，将结果限制为比特定日期更早的帖子，还可以按作者对结果进行排序：\n\n```python\nd = datetime.datetime(2009, 11, 12, 12)\nfor post in posts.find({\"date\": {\"$lt\": d}}).sort(\"author\"):\n    print post\n```\n\n上面的代码中，我们使用了特殊操作符$lt来限制条件，并且使用了sort()方法来将结果以作者排序。\n\n\n## 索引\n\n添加索引可以帮助加速某些查询，还可以添加其他功能来查询和存储文档。在这个例子中，我们将演示如何在一个关键字上创建一个唯一的索引,该关键字拒绝该索引中已存在该关键字的文档。\n\n首先，我们需要创建索引：\n\n```python\nresult = db.profiles.create_index([('user_id', pymongo.ASCENDING)],unique=True)\nprint sorted(list(db.profiles.index_information()))\n# [u'_id_', u'user_id_1']\n```\n\n请注意，我们现在有两个索引：一个是_id MongoDB自动创建的索引，另一个是user_id我们刚刚创建的索引。\n\n现在让我们设置一些用户配置文件：\n\n```python\nuser_profiles = [\n    {'user_id': 211, 'name': 'Luke'},\n    {'user_id': 212, 'name': 'Ziltoid'}]\nresult = db.profiles.insert_many(user_profiles)\n```\n\n索引阻止我们插入user_id已经在集合中的文档：\n\n```python\nnew_profile = {'user_id': 213, 'name': 'Drew'}\nduplicate_profile = {'user_id': 212, 'name': 'Tommy'}\nresult = db.profiles.insert_one(new_profile)  # This is fine.\nresult = db.profiles.insert_one(duplicate_profile)  # pymongo.errors.DuplicateKeyError: E11000 duplicate key error collection: blog.profiles index: user_id_1 dup key: { : 212 }\n```\n\n## 总结\n\n其实pymongo的基本操作通mongodb类似，文档中只提到新增和查询。\n","source":"_posts/pymongo的基本使用.md","raw":"---\ntitle: pymongo的基本使用\ndate: 2018-3-13\ntags: [数据库, mongodb, python]\n---\n\n本文参考最新的 [pymongo 官方文档](http://api.mongodb.com/python/current/tutorial.html)进行整理，至文档更新时，**PyMongo的版本号为3.6.1**\n\n## 先决条件\n\n开始之前，请确保你的`pymongo`被正确安装，在 **Python shell** 中，应该运行以下代码而不会引发异常：\n\n    import pymongo\n\n另外一个条件就是确保MongoDB实例正在默认主机和端口上运行(如果你的操作系统是windows，可以参考[这篇文章](https://suadminwen.github.io/2018/01/25/mongodb%E7%9A%84windows%E6%9C%8D%E5%8A%A1%E5%AE%89%E8%A3%85/)进行mongodb的安装和运行)\n\n<!--more-->\n\n## 与MongoClient建立连接\n\n使用 `PyMongo` 时的第一步是创建一个 `MongoClient`正在运行的 `mongod` 实例。这样做很简单：\n\n```python\nfrom pymongo import MongoClient\nclient = MongoClient()\n```\n\n上面的代码将连接到默认主机和端口。我们也可以明确指定主机和端口，如下所示：\n\n    client = MongoClient(\"localhost\", \"27017\")\n\n或者使用MongoDB URI格式：\n\n    client = MongoClient('mongodb://localhost:27017/')\n\n## 获取数据库\n\n一个 `MongoDB` 实例可以支持多个独立的 数据库。在使用 `PyMongo` 时，您可以使用 `MongoClient` 实例上的属性样式访问来访问数据库：\n\n    db = client.test_database\n\n如果您的数据库名称使用属性样式访问不起作用，则可以使用字典样式访问：\n\n    db = client[\"test_database\"]\n\n## 获取集合\n\n一个集合是一组存储在MongoDB中的文档，相当于关系型数据库中的表。在PyMongo中获取集合与获取数据库的工作方式相同：\n\n    collection = db.test_collection\n    collection = db[\"test_collection\"]\n\n**关于MongoDB中的集合（和数据库）的一个重要注意事项是它们是懒惰地创建的————上述命令都没有在MongoDB服务器上实际执行过任何操作。集合和数据库在第一个文档被插入时创建。**\n\n## 文档的表示\n\nMongoDB中的数据使用JSON样式的文档来表示（并存储）。在PyMongo中，我们使用字典来表示文档。例如，以下字典可能用于表示博客文章：\n\n```python\nimport datetime\npost = {\"author\": \"Mike\",\n        \"text\": \"My first blog post!\",\n        \"tags\": [\"mongodb\", \"python\", \"pymongo\"],\n        \"date\": datetime.datetime.utcnow()}\n```\n\n请注意，文档可以包含Python类型（如datetime.datetime实例），这些类型 将自动转换为适当的 **BSON** 类型并从其中转换。\n\n## 插入文档\n\n要将文档插入到集合中，我们可以使用以下 `insert_one()` 方法：\n\n```python\nfrom pymongo import MongoClient\nclient = MongoClient()  # 连接数据库\ndb = client.blog  # 获取数据库\nposts = db.posts  # 获取集合\npost_id = posts.insert_one(post).inserted_id\nprint post_id  # ObjectId('...')\n```\n\n如果文档 \"`_id`\" 尚未包含密钥，则在插入文档时会自动添加一个特殊 \"`_id`\" 键。\"`_id`\"集合中的值必须是唯一的。`insert_one()` 返回一个实例 `InsertOneResult`。\n\n插入第一个文档后，`posts` 集合实际上已经在服务器上创建。我们可以通过列出数据库中的所有集合来验证这一点：\n\n    print db.collection_names(include_system_collections=False)  # [u'posts']\n\n## 获取文档\n\n可以在MongoDB中执行的最基本的查询类型是 find_one()。此方法返回与查询匹配的单个文档（或者None如果没有匹配项）。当您知道只有一个匹配的文档，或者只对第一个匹配感兴趣时，它非常有用。这里我们用来 find_one()从帖子集合中获取第一个文档：\n\n    print posts.find_one()\n\n结果是一个匹配我们先前插入的字典。\n\n**注意 返回的文档包含一个\"`_id`\"插入时自动添加的文档。**\n\n`find_one()`同时支持根据特定条件的查询。为了限制结果，我们现在只查询作者author为 **Mike** 的文档:\n\n```python\nprint posts.find_one({\"author\": \"Mike\"})\n# {u'date': datetime.datetime(2018, 3, 13, 6, 23, 51, 273000), u'text': u'My first blog post!', u'_id': ObjectId('5aa76e7d733f2d338cba01b5'), u'author': u'Mike', u'tags': [u'mongodb', u'python', u'pymongo']}\n```\n\n## 通过ObjectId查询\n\n我们也可以通过它找到一个帖子_id，在我们的例子中是一个ObjectId:\n\n```python\n# 上面演示插入的时候，返回了一个post_id这个post_id的类型为 <class 'bson.objectid.ObjectId'>\nprint posts.find_one({\"_id\": post_id})\n\n```\n\n**请注意，ObjectId与其字符串表示形式不同：**\n\n```python\npost_id_as_str = str(post_id)\nposts.find_one({\"_id\": post_id_as_str}) # No result\n```\n\nWeb应用程序中的一项常见任务是从请求 URL 获取 ObjectId 并查找匹配的文档。在这种情况下，必须先将 ObjectId **从字符串转换为 ObjectId**，然后才能将其传递到 find_one()\n\n```python\nfrom bson.objectid import ObjectId\n# The web framework gets post_id from the URL and passes it as a string\ndef get(post_id):\n    # Convert from string to ObjectId:\n    document = client.db.collection.find_one({'_id': ObjectId(post_id)})\n```\n## Unicode字符串\n\n你可能会注意到返回结果的字符串与Python中默认的字符串有些不同(比如用u'Mike来代替'Mike')。这里简短说明一下。\nMongoDB 以 BSON 格式存储数据，而 BSON 字符串使用的是 UTF-8 编码，所以 PyMongo 必须确保它存储的字符串为 UTF-8 格式。普通字符串( str )的存储不变，unicode 字符串会被 PyMongo 自动转为 UTF-8 格式。\n\n## 批量插入\n\n为了让查询更有趣，让我们插入更多的文档。除了插入单个文档之外，我们还可以通过将列表作为第一个参数传递给批量插入操作insert_many()。这会将每个文档插入列表中，只向服务器发送一个命令：\n\n```python\nnew_posts = [{\"author\": \"Mike\",\n              \"text\": \"Another post!\",\n              \"tags\": [\"bulk\", \"insert\"],\n              \"date\": datetime.datetime(2009, 11, 12, 11, 14)},\n             {\"author\": \"Eliot\",\n              \"title\": \"MongoDB is fun\",\n              \"text\": \"and pretty easy too!\",\n              \"date\": datetime.datetime(2009, 11, 10, 10, 45)}]\nresult = posts.insert_many(new_posts)\nprint result.inserted_ids  # [ObjectId('...'), ObjectId('...')]\n```\n\n有一下几点比较有趣的事情需要注意:\n- 1. insert()的返回值包含了两个ObjectId对象，每个都对应上面批量插入的文档\n- 2. new_posts[1] 与其他的posts看起来不一样:没有tags，并且增加了一个新的title。这里也证明了为什么我们一直说MongoDB是没有模式的\n\n## 查询多个文档\n\n作为查询的结果，我们使用该 find() 方法获取多个文档 。find()返回一个 Cursor实例，它允许我们迭代所有匹配的文档。例如，我们可以迭代posts集合中的每个文档：\n\n```python\nfor post in posts.find():\n    print post\n```\n\nfind()也可以像find_one()那样来进行条件查询。现在，我们来查询所有作者author为Mike的文档:\n\n```python\nfor post in posts.find({\"author\": \"Mike\"}):\n    print post\n```\n\n## 计数\n\n如果我们只想知道有多少文档匹配查询，我们可以执行count()操作而不是完整的查询。我们可以统计一个集合中的所有文档：\n\n    posts.count()\n\n或者只统计符合条件的:\n\n    posts.find({\"author\": \"Mike\"}).count()\n\n## 范围查询\n\nMongoDB支持许多不同类型的高级查询。例如，让我们执行查询，将结果限制为比特定日期更早的帖子，还可以按作者对结果进行排序：\n\n```python\nd = datetime.datetime(2009, 11, 12, 12)\nfor post in posts.find({\"date\": {\"$lt\": d}}).sort(\"author\"):\n    print post\n```\n\n上面的代码中，我们使用了特殊操作符$lt来限制条件，并且使用了sort()方法来将结果以作者排序。\n\n\n## 索引\n\n添加索引可以帮助加速某些查询，还可以添加其他功能来查询和存储文档。在这个例子中，我们将演示如何在一个关键字上创建一个唯一的索引,该关键字拒绝该索引中已存在该关键字的文档。\n\n首先，我们需要创建索引：\n\n```python\nresult = db.profiles.create_index([('user_id', pymongo.ASCENDING)],unique=True)\nprint sorted(list(db.profiles.index_information()))\n# [u'_id_', u'user_id_1']\n```\n\n请注意，我们现在有两个索引：一个是_id MongoDB自动创建的索引，另一个是user_id我们刚刚创建的索引。\n\n现在让我们设置一些用户配置文件：\n\n```python\nuser_profiles = [\n    {'user_id': 211, 'name': 'Luke'},\n    {'user_id': 212, 'name': 'Ziltoid'}]\nresult = db.profiles.insert_many(user_profiles)\n```\n\n索引阻止我们插入user_id已经在集合中的文档：\n\n```python\nnew_profile = {'user_id': 213, 'name': 'Drew'}\nduplicate_profile = {'user_id': 212, 'name': 'Tommy'}\nresult = db.profiles.insert_one(new_profile)  # This is fine.\nresult = db.profiles.insert_one(duplicate_profile)  # pymongo.errors.DuplicateKeyError: E11000 duplicate key error collection: blog.profiles index: user_id_1 dup key: { : 212 }\n```\n\n## 总结\n\n其实pymongo的基本操作通mongodb类似，文档中只提到新增和查询。\n","slug":"pymongo的基本使用","published":1,"updated":"2021-06-20T10:25:20.128Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluqa1hj2002wrlog80e8gew1","content":"<p>本文参考最新的 <a href=\"http://api.mongodb.com/python/current/tutorial.html\">pymongo 官方文档</a>进行整理，至文档更新时，<strong>PyMongo的版本号为3.6.1</strong></p>\n<h2 id=\"先决条件\"><a href=\"#先决条件\" class=\"headerlink\" title=\"先决条件\"></a>先决条件</h2><p>开始之前，请确保你的<code>pymongo</code>被正确安装，在 <strong>Python shell</strong> 中，应该运行以下代码而不会引发异常：</p>\n<pre><code>import pymongo\n</code></pre>\n<p>另外一个条件就是确保MongoDB实例正在默认主机和端口上运行(如果你的操作系统是windows，可以参考<a href=\"https://suadminwen.github.io/2018/01/25/mongodb%E7%9A%84windows%E6%9C%8D%E5%8A%A1%E5%AE%89%E8%A3%85/\">这篇文章</a>进行mongodb的安装和运行)</p>\n<span id=\"more\"></span>\n\n<h2 id=\"与MongoClient建立连接\"><a href=\"#与MongoClient建立连接\" class=\"headerlink\" title=\"与MongoClient建立连接\"></a>与MongoClient建立连接</h2><p>使用 <code>PyMongo</code> 时的第一步是创建一个 <code>MongoClient</code>正在运行的 <code>mongod</code> 实例。这样做很简单：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pymongo <span class=\"keyword\">import</span> MongoClient</span><br><span class=\"line\">client = MongoClient()</span><br></pre></td></tr></table></figure>\n\n<p>上面的代码将连接到默认主机和端口。我们也可以明确指定主机和端口，如下所示：</p>\n<pre><code>client = MongoClient(&quot;localhost&quot;, &quot;27017&quot;)\n</code></pre>\n<p>或者使用MongoDB URI格式：</p>\n<pre><code>client = MongoClient(&#39;mongodb://localhost:27017/&#39;)\n</code></pre>\n<h2 id=\"获取数据库\"><a href=\"#获取数据库\" class=\"headerlink\" title=\"获取数据库\"></a>获取数据库</h2><p>一个 <code>MongoDB</code> 实例可以支持多个独立的 数据库。在使用 <code>PyMongo</code> 时，您可以使用 <code>MongoClient</code> 实例上的属性样式访问来访问数据库：</p>\n<pre><code>db = client.test_database\n</code></pre>\n<p>如果您的数据库名称使用属性样式访问不起作用，则可以使用字典样式访问：</p>\n<pre><code>db = client[&quot;test_database&quot;]\n</code></pre>\n<h2 id=\"获取集合\"><a href=\"#获取集合\" class=\"headerlink\" title=\"获取集合\"></a>获取集合</h2><p>一个集合是一组存储在MongoDB中的文档，相当于关系型数据库中的表。在PyMongo中获取集合与获取数据库的工作方式相同：</p>\n<pre><code>collection = db.test_collection\ncollection = db[&quot;test_collection&quot;]\n</code></pre>\n<p><strong>关于MongoDB中的集合（和数据库）的一个重要注意事项是它们是懒惰地创建的————上述命令都没有在MongoDB服务器上实际执行过任何操作。集合和数据库在第一个文档被插入时创建。</strong></p>\n<h2 id=\"文档的表示\"><a href=\"#文档的表示\" class=\"headerlink\" title=\"文档的表示\"></a>文档的表示</h2><p>MongoDB中的数据使用JSON样式的文档来表示（并存储）。在PyMongo中，我们使用字典来表示文档。例如，以下字典可能用于表示博客文章：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> datetime</span><br><span class=\"line\">post = &#123;<span class=\"string\">&quot;author&quot;</span>: <span class=\"string\">&quot;Mike&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;text&quot;</span>: <span class=\"string\">&quot;My first blog post!&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;tags&quot;</span>: [<span class=\"string\">&quot;mongodb&quot;</span>, <span class=\"string\">&quot;python&quot;</span>, <span class=\"string\">&quot;pymongo&quot;</span>],</span><br><span class=\"line\">        <span class=\"string\">&quot;date&quot;</span>: datetime.datetime.utcnow()&#125;</span><br></pre></td></tr></table></figure>\n\n<p>请注意，文档可以包含Python类型（如datetime.datetime实例），这些类型 将自动转换为适当的 <strong>BSON</strong> 类型并从其中转换。</p>\n<h2 id=\"插入文档\"><a href=\"#插入文档\" class=\"headerlink\" title=\"插入文档\"></a>插入文档</h2><p>要将文档插入到集合中，我们可以使用以下 <code>insert_one()</code> 方法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pymongo <span class=\"keyword\">import</span> MongoClient</span><br><span class=\"line\">client = MongoClient()  <span class=\"comment\"># 连接数据库</span></span><br><span class=\"line\">db = client.blog  <span class=\"comment\"># 获取数据库</span></span><br><span class=\"line\">posts = db.posts  <span class=\"comment\"># 获取集合</span></span><br><span class=\"line\">post_id = posts.insert_one(post).inserted_id</span><br><span class=\"line\"><span class=\"built_in\">print</span> post_id  <span class=\"comment\"># ObjectId(&#x27;...&#x27;)</span></span><br></pre></td></tr></table></figure>\n\n<p>如果文档 “<code>_id</code>“ 尚未包含密钥，则在插入文档时会自动添加一个特殊 “<code>_id</code>“ 键。”<code>_id</code>“集合中的值必须是唯一的。<code>insert_one()</code> 返回一个实例 <code>InsertOneResult</code>。</p>\n<p>插入第一个文档后，<code>posts</code> 集合实际上已经在服务器上创建。我们可以通过列出数据库中的所有集合来验证这一点：</p>\n<pre><code>print db.collection_names(include_system_collections=False)  # [u&#39;posts&#39;]\n</code></pre>\n<h2 id=\"获取文档\"><a href=\"#获取文档\" class=\"headerlink\" title=\"获取文档\"></a>获取文档</h2><p>可以在MongoDB中执行的最基本的查询类型是 find_one()。此方法返回与查询匹配的单个文档（或者None如果没有匹配项）。当您知道只有一个匹配的文档，或者只对第一个匹配感兴趣时，它非常有用。这里我们用来 find_one()从帖子集合中获取第一个文档：</p>\n<pre><code>print posts.find_one()\n</code></pre>\n<p>结果是一个匹配我们先前插入的字典。</p>\n<p><strong>注意 返回的文档包含一个”<code>_id</code>“插入时自动添加的文档。</strong></p>\n<p><code>find_one()</code>同时支持根据特定条件的查询。为了限制结果，我们现在只查询作者author为 <strong>Mike</strong> 的文档:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span> posts.find_one(&#123;<span class=\"string\">&quot;author&quot;</span>: <span class=\"string\">&quot;Mike&quot;</span>&#125;)</span><br><span class=\"line\"><span class=\"comment\"># &#123;u&#x27;date&#x27;: datetime.datetime(2018, 3, 13, 6, 23, 51, 273000), u&#x27;text&#x27;: u&#x27;My first blog post!&#x27;, u&#x27;_id&#x27;: ObjectId(&#x27;5aa76e7d733f2d338cba01b5&#x27;), u&#x27;author&#x27;: u&#x27;Mike&#x27;, u&#x27;tags&#x27;: [u&#x27;mongodb&#x27;, u&#x27;python&#x27;, u&#x27;pymongo&#x27;]&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"通过ObjectId查询\"><a href=\"#通过ObjectId查询\" class=\"headerlink\" title=\"通过ObjectId查询\"></a>通过ObjectId查询</h2><p>我们也可以通过它找到一个帖子_id，在我们的例子中是一个ObjectId:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 上面演示插入的时候，返回了一个post_id这个post_id的类型为 &lt;class &#x27;bson.objectid.ObjectId&#x27;&gt;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span> posts.find_one(&#123;<span class=\"string\">&quot;_id&quot;</span>: post_id&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>请注意，ObjectId与其字符串表示形式不同：</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">post_id_as_str = <span class=\"built_in\">str</span>(post_id)</span><br><span class=\"line\">posts.find_one(&#123;<span class=\"string\">&quot;_id&quot;</span>: post_id_as_str&#125;) <span class=\"comment\"># No result</span></span><br></pre></td></tr></table></figure>\n\n<p>Web应用程序中的一项常见任务是从请求 URL 获取 ObjectId 并查找匹配的文档。在这种情况下，必须先将 ObjectId <strong>从字符串转换为 ObjectId</strong>，然后才能将其传递到 find_one()</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> bson.objectid <span class=\"keyword\">import</span> ObjectId</span><br><span class=\"line\"><span class=\"comment\"># The web framework gets post_id from the URL and passes it as a string</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get</span>(<span class=\"params\">post_id</span>):</span><br><span class=\"line\">    <span class=\"comment\"># Convert from string to ObjectId:</span></span><br><span class=\"line\">    document = client.db.collection.find_one(&#123;<span class=\"string\">&#x27;_id&#x27;</span>: ObjectId(post_id)&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"Unicode字符串\"><a href=\"#Unicode字符串\" class=\"headerlink\" title=\"Unicode字符串\"></a>Unicode字符串</h2><p>你可能会注意到返回结果的字符串与Python中默认的字符串有些不同(比如用u’Mike来代替’Mike’)。这里简短说明一下。<br>MongoDB 以 BSON 格式存储数据，而 BSON 字符串使用的是 UTF-8 编码，所以 PyMongo 必须确保它存储的字符串为 UTF-8 格式。普通字符串( str )的存储不变，unicode 字符串会被 PyMongo 自动转为 UTF-8 格式。</p>\n<h2 id=\"批量插入\"><a href=\"#批量插入\" class=\"headerlink\" title=\"批量插入\"></a>批量插入</h2><p>为了让查询更有趣，让我们插入更多的文档。除了插入单个文档之外，我们还可以通过将列表作为第一个参数传递给批量插入操作insert_many()。这会将每个文档插入列表中，只向服务器发送一个命令：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new_posts = [&#123;<span class=\"string\">&quot;author&quot;</span>: <span class=\"string\">&quot;Mike&quot;</span>,</span><br><span class=\"line\">              <span class=\"string\">&quot;text&quot;</span>: <span class=\"string\">&quot;Another post!&quot;</span>,</span><br><span class=\"line\">              <span class=\"string\">&quot;tags&quot;</span>: [<span class=\"string\">&quot;bulk&quot;</span>, <span class=\"string\">&quot;insert&quot;</span>],</span><br><span class=\"line\">              <span class=\"string\">&quot;date&quot;</span>: datetime.datetime(<span class=\"number\">2009</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span>, <span class=\"number\">11</span>, <span class=\"number\">14</span>)&#125;,</span><br><span class=\"line\">             &#123;<span class=\"string\">&quot;author&quot;</span>: <span class=\"string\">&quot;Eliot&quot;</span>,</span><br><span class=\"line\">              <span class=\"string\">&quot;title&quot;</span>: <span class=\"string\">&quot;MongoDB is fun&quot;</span>,</span><br><span class=\"line\">              <span class=\"string\">&quot;text&quot;</span>: <span class=\"string\">&quot;and pretty easy too!&quot;</span>,</span><br><span class=\"line\">              <span class=\"string\">&quot;date&quot;</span>: datetime.datetime(<span class=\"number\">2009</span>, <span class=\"number\">11</span>, <span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">45</span>)&#125;]</span><br><span class=\"line\">result = posts.insert_many(new_posts)</span><br><span class=\"line\"><span class=\"built_in\">print</span> result.inserted_ids  <span class=\"comment\"># [ObjectId(&#x27;...&#x27;), ObjectId(&#x27;...&#x27;)]</span></span><br></pre></td></tr></table></figure>\n\n<p>有一下几点比较有趣的事情需要注意:</p>\n<ul>\n<li><ol>\n<li>insert()的返回值包含了两个ObjectId对象，每个都对应上面批量插入的文档</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>new_posts[1] 与其他的posts看起来不一样:没有tags，并且增加了一个新的title。这里也证明了为什么我们一直说MongoDB是没有模式的</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"查询多个文档\"><a href=\"#查询多个文档\" class=\"headerlink\" title=\"查询多个文档\"></a>查询多个文档</h2><p>作为查询的结果，我们使用该 find() 方法获取多个文档 。find()返回一个 Cursor实例，它允许我们迭代所有匹配的文档。例如，我们可以迭代posts集合中的每个文档：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> post <span class=\"keyword\">in</span> posts.find():</span><br><span class=\"line\">    <span class=\"built_in\">print</span> post</span><br></pre></td></tr></table></figure>\n\n<p>find()也可以像find_one()那样来进行条件查询。现在，我们来查询所有作者author为Mike的文档:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> post <span class=\"keyword\">in</span> posts.find(&#123;<span class=\"string\">&quot;author&quot;</span>: <span class=\"string\">&quot;Mike&quot;</span>&#125;):</span><br><span class=\"line\">    <span class=\"built_in\">print</span> post</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"计数\"><a href=\"#计数\" class=\"headerlink\" title=\"计数\"></a>计数</h2><p>如果我们只想知道有多少文档匹配查询，我们可以执行count()操作而不是完整的查询。我们可以统计一个集合中的所有文档：</p>\n<pre><code>posts.count()\n</code></pre>\n<p>或者只统计符合条件的:</p>\n<pre><code>posts.find(&#123;&quot;author&quot;: &quot;Mike&quot;&#125;).count()\n</code></pre>\n<h2 id=\"范围查询\"><a href=\"#范围查询\" class=\"headerlink\" title=\"范围查询\"></a>范围查询</h2><p>MongoDB支持许多不同类型的高级查询。例如，让我们执行查询，将结果限制为比特定日期更早的帖子，还可以按作者对结果进行排序：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d = datetime.datetime(<span class=\"number\">2009</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span>, <span class=\"number\">12</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> post <span class=\"keyword\">in</span> posts.find(&#123;<span class=\"string\">&quot;date&quot;</span>: &#123;<span class=\"string\">&quot;$lt&quot;</span>: d&#125;&#125;).sort(<span class=\"string\">&quot;author&quot;</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span> post</span><br></pre></td></tr></table></figure>\n\n<p>上面的代码中，我们使用了特殊操作符$lt来限制条件，并且使用了sort()方法来将结果以作者排序。</p>\n<h2 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h2><p>添加索引可以帮助加速某些查询，还可以添加其他功能来查询和存储文档。在这个例子中，我们将演示如何在一个关键字上创建一个唯一的索引,该关键字拒绝该索引中已存在该关键字的文档。</p>\n<p>首先，我们需要创建索引：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">result = db.profiles.create_index([(<span class=\"string\">&#x27;user_id&#x27;</span>, pymongo.ASCENDING)],unique=<span class=\"literal\">True</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"built_in\">sorted</span>(<span class=\"built_in\">list</span>(db.profiles.index_information()))</span><br><span class=\"line\"><span class=\"comment\"># [u&#x27;_id_&#x27;, u&#x27;user_id_1&#x27;]</span></span><br></pre></td></tr></table></figure>\n\n<p>请注意，我们现在有两个索引：一个是_id MongoDB自动创建的索引，另一个是user_id我们刚刚创建的索引。</p>\n<p>现在让我们设置一些用户配置文件：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user_profiles = [</span><br><span class=\"line\">    &#123;<span class=\"string\">&#x27;user_id&#x27;</span>: <span class=\"number\">211</span>, <span class=\"string\">&#x27;name&#x27;</span>: <span class=\"string\">&#x27;Luke&#x27;</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">&#x27;user_id&#x27;</span>: <span class=\"number\">212</span>, <span class=\"string\">&#x27;name&#x27;</span>: <span class=\"string\">&#x27;Ziltoid&#x27;</span>&#125;]</span><br><span class=\"line\">result = db.profiles.insert_many(user_profiles)</span><br></pre></td></tr></table></figure>\n\n<p>索引阻止我们插入user_id已经在集合中的文档：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new_profile = &#123;<span class=\"string\">&#x27;user_id&#x27;</span>: <span class=\"number\">213</span>, <span class=\"string\">&#x27;name&#x27;</span>: <span class=\"string\">&#x27;Drew&#x27;</span>&#125;</span><br><span class=\"line\">duplicate_profile = &#123;<span class=\"string\">&#x27;user_id&#x27;</span>: <span class=\"number\">212</span>, <span class=\"string\">&#x27;name&#x27;</span>: <span class=\"string\">&#x27;Tommy&#x27;</span>&#125;</span><br><span class=\"line\">result = db.profiles.insert_one(new_profile)  <span class=\"comment\"># This is fine.</span></span><br><span class=\"line\">result = db.profiles.insert_one(duplicate_profile)  <span class=\"comment\"># pymongo.errors.DuplicateKeyError: E11000 duplicate key error collection: blog.profiles index: user_id_1 dup key: &#123; : 212 &#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>其实pymongo的基本操作通mongodb类似，文档中只提到新增和查询。</p>\n","site":{"data":{}},"excerpt":"<p>本文参考最新的 <a href=\"http://api.mongodb.com/python/current/tutorial.html\">pymongo 官方文档</a>进行整理，至文档更新时，<strong>PyMongo的版本号为3.6.1</strong></p>\n<h2 id=\"先决条件\"><a href=\"#先决条件\" class=\"headerlink\" title=\"先决条件\"></a>先决条件</h2><p>开始之前，请确保你的<code>pymongo</code>被正确安装，在 <strong>Python shell</strong> 中，应该运行以下代码而不会引发异常：</p>\n<pre><code>import pymongo\n</code></pre>\n<p>另外一个条件就是确保MongoDB实例正在默认主机和端口上运行(如果你的操作系统是windows，可以参考<a href=\"https://suadminwen.github.io/2018/01/25/mongodb%E7%9A%84windows%E6%9C%8D%E5%8A%A1%E5%AE%89%E8%A3%85/\">这篇文章</a>进行mongodb的安装和运行)</p>","more":"<h2 id=\"与MongoClient建立连接\"><a href=\"#与MongoClient建立连接\" class=\"headerlink\" title=\"与MongoClient建立连接\"></a>与MongoClient建立连接</h2><p>使用 <code>PyMongo</code> 时的第一步是创建一个 <code>MongoClient</code>正在运行的 <code>mongod</code> 实例。这样做很简单：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pymongo <span class=\"keyword\">import</span> MongoClient</span><br><span class=\"line\">client = MongoClient()</span><br></pre></td></tr></table></figure>\n\n<p>上面的代码将连接到默认主机和端口。我们也可以明确指定主机和端口，如下所示：</p>\n<pre><code>client = MongoClient(&quot;localhost&quot;, &quot;27017&quot;)\n</code></pre>\n<p>或者使用MongoDB URI格式：</p>\n<pre><code>client = MongoClient(&#39;mongodb://localhost:27017/&#39;)\n</code></pre>\n<h2 id=\"获取数据库\"><a href=\"#获取数据库\" class=\"headerlink\" title=\"获取数据库\"></a>获取数据库</h2><p>一个 <code>MongoDB</code> 实例可以支持多个独立的 数据库。在使用 <code>PyMongo</code> 时，您可以使用 <code>MongoClient</code> 实例上的属性样式访问来访问数据库：</p>\n<pre><code>db = client.test_database\n</code></pre>\n<p>如果您的数据库名称使用属性样式访问不起作用，则可以使用字典样式访问：</p>\n<pre><code>db = client[&quot;test_database&quot;]\n</code></pre>\n<h2 id=\"获取集合\"><a href=\"#获取集合\" class=\"headerlink\" title=\"获取集合\"></a>获取集合</h2><p>一个集合是一组存储在MongoDB中的文档，相当于关系型数据库中的表。在PyMongo中获取集合与获取数据库的工作方式相同：</p>\n<pre><code>collection = db.test_collection\ncollection = db[&quot;test_collection&quot;]\n</code></pre>\n<p><strong>关于MongoDB中的集合（和数据库）的一个重要注意事项是它们是懒惰地创建的————上述命令都没有在MongoDB服务器上实际执行过任何操作。集合和数据库在第一个文档被插入时创建。</strong></p>\n<h2 id=\"文档的表示\"><a href=\"#文档的表示\" class=\"headerlink\" title=\"文档的表示\"></a>文档的表示</h2><p>MongoDB中的数据使用JSON样式的文档来表示（并存储）。在PyMongo中，我们使用字典来表示文档。例如，以下字典可能用于表示博客文章：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> datetime</span><br><span class=\"line\">post = &#123;<span class=\"string\">&quot;author&quot;</span>: <span class=\"string\">&quot;Mike&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;text&quot;</span>: <span class=\"string\">&quot;My first blog post!&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;tags&quot;</span>: [<span class=\"string\">&quot;mongodb&quot;</span>, <span class=\"string\">&quot;python&quot;</span>, <span class=\"string\">&quot;pymongo&quot;</span>],</span><br><span class=\"line\">        <span class=\"string\">&quot;date&quot;</span>: datetime.datetime.utcnow()&#125;</span><br></pre></td></tr></table></figure>\n\n<p>请注意，文档可以包含Python类型（如datetime.datetime实例），这些类型 将自动转换为适当的 <strong>BSON</strong> 类型并从其中转换。</p>\n<h2 id=\"插入文档\"><a href=\"#插入文档\" class=\"headerlink\" title=\"插入文档\"></a>插入文档</h2><p>要将文档插入到集合中，我们可以使用以下 <code>insert_one()</code> 方法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pymongo <span class=\"keyword\">import</span> MongoClient</span><br><span class=\"line\">client = MongoClient()  <span class=\"comment\"># 连接数据库</span></span><br><span class=\"line\">db = client.blog  <span class=\"comment\"># 获取数据库</span></span><br><span class=\"line\">posts = db.posts  <span class=\"comment\"># 获取集合</span></span><br><span class=\"line\">post_id = posts.insert_one(post).inserted_id</span><br><span class=\"line\"><span class=\"built_in\">print</span> post_id  <span class=\"comment\"># ObjectId(&#x27;...&#x27;)</span></span><br></pre></td></tr></table></figure>\n\n<p>如果文档 “<code>_id</code>“ 尚未包含密钥，则在插入文档时会自动添加一个特殊 “<code>_id</code>“ 键。”<code>_id</code>“集合中的值必须是唯一的。<code>insert_one()</code> 返回一个实例 <code>InsertOneResult</code>。</p>\n<p>插入第一个文档后，<code>posts</code> 集合实际上已经在服务器上创建。我们可以通过列出数据库中的所有集合来验证这一点：</p>\n<pre><code>print db.collection_names(include_system_collections=False)  # [u&#39;posts&#39;]\n</code></pre>\n<h2 id=\"获取文档\"><a href=\"#获取文档\" class=\"headerlink\" title=\"获取文档\"></a>获取文档</h2><p>可以在MongoDB中执行的最基本的查询类型是 find_one()。此方法返回与查询匹配的单个文档（或者None如果没有匹配项）。当您知道只有一个匹配的文档，或者只对第一个匹配感兴趣时，它非常有用。这里我们用来 find_one()从帖子集合中获取第一个文档：</p>\n<pre><code>print posts.find_one()\n</code></pre>\n<p>结果是一个匹配我们先前插入的字典。</p>\n<p><strong>注意 返回的文档包含一个”<code>_id</code>“插入时自动添加的文档。</strong></p>\n<p><code>find_one()</code>同时支持根据特定条件的查询。为了限制结果，我们现在只查询作者author为 <strong>Mike</strong> 的文档:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span> posts.find_one(&#123;<span class=\"string\">&quot;author&quot;</span>: <span class=\"string\">&quot;Mike&quot;</span>&#125;)</span><br><span class=\"line\"><span class=\"comment\"># &#123;u&#x27;date&#x27;: datetime.datetime(2018, 3, 13, 6, 23, 51, 273000), u&#x27;text&#x27;: u&#x27;My first blog post!&#x27;, u&#x27;_id&#x27;: ObjectId(&#x27;5aa76e7d733f2d338cba01b5&#x27;), u&#x27;author&#x27;: u&#x27;Mike&#x27;, u&#x27;tags&#x27;: [u&#x27;mongodb&#x27;, u&#x27;python&#x27;, u&#x27;pymongo&#x27;]&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"通过ObjectId查询\"><a href=\"#通过ObjectId查询\" class=\"headerlink\" title=\"通过ObjectId查询\"></a>通过ObjectId查询</h2><p>我们也可以通过它找到一个帖子_id，在我们的例子中是一个ObjectId:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 上面演示插入的时候，返回了一个post_id这个post_id的类型为 &lt;class &#x27;bson.objectid.ObjectId&#x27;&gt;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span> posts.find_one(&#123;<span class=\"string\">&quot;_id&quot;</span>: post_id&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>请注意，ObjectId与其字符串表示形式不同：</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">post_id_as_str = <span class=\"built_in\">str</span>(post_id)</span><br><span class=\"line\">posts.find_one(&#123;<span class=\"string\">&quot;_id&quot;</span>: post_id_as_str&#125;) <span class=\"comment\"># No result</span></span><br></pre></td></tr></table></figure>\n\n<p>Web应用程序中的一项常见任务是从请求 URL 获取 ObjectId 并查找匹配的文档。在这种情况下，必须先将 ObjectId <strong>从字符串转换为 ObjectId</strong>，然后才能将其传递到 find_one()</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> bson.objectid <span class=\"keyword\">import</span> ObjectId</span><br><span class=\"line\"><span class=\"comment\"># The web framework gets post_id from the URL and passes it as a string</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get</span>(<span class=\"params\">post_id</span>):</span><br><span class=\"line\">    <span class=\"comment\"># Convert from string to ObjectId:</span></span><br><span class=\"line\">    document = client.db.collection.find_one(&#123;<span class=\"string\">&#x27;_id&#x27;</span>: ObjectId(post_id)&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"Unicode字符串\"><a href=\"#Unicode字符串\" class=\"headerlink\" title=\"Unicode字符串\"></a>Unicode字符串</h2><p>你可能会注意到返回结果的字符串与Python中默认的字符串有些不同(比如用u’Mike来代替’Mike’)。这里简短说明一下。<br>MongoDB 以 BSON 格式存储数据，而 BSON 字符串使用的是 UTF-8 编码，所以 PyMongo 必须确保它存储的字符串为 UTF-8 格式。普通字符串( str )的存储不变，unicode 字符串会被 PyMongo 自动转为 UTF-8 格式。</p>\n<h2 id=\"批量插入\"><a href=\"#批量插入\" class=\"headerlink\" title=\"批量插入\"></a>批量插入</h2><p>为了让查询更有趣，让我们插入更多的文档。除了插入单个文档之外，我们还可以通过将列表作为第一个参数传递给批量插入操作insert_many()。这会将每个文档插入列表中，只向服务器发送一个命令：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new_posts = [&#123;<span class=\"string\">&quot;author&quot;</span>: <span class=\"string\">&quot;Mike&quot;</span>,</span><br><span class=\"line\">              <span class=\"string\">&quot;text&quot;</span>: <span class=\"string\">&quot;Another post!&quot;</span>,</span><br><span class=\"line\">              <span class=\"string\">&quot;tags&quot;</span>: [<span class=\"string\">&quot;bulk&quot;</span>, <span class=\"string\">&quot;insert&quot;</span>],</span><br><span class=\"line\">              <span class=\"string\">&quot;date&quot;</span>: datetime.datetime(<span class=\"number\">2009</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span>, <span class=\"number\">11</span>, <span class=\"number\">14</span>)&#125;,</span><br><span class=\"line\">             &#123;<span class=\"string\">&quot;author&quot;</span>: <span class=\"string\">&quot;Eliot&quot;</span>,</span><br><span class=\"line\">              <span class=\"string\">&quot;title&quot;</span>: <span class=\"string\">&quot;MongoDB is fun&quot;</span>,</span><br><span class=\"line\">              <span class=\"string\">&quot;text&quot;</span>: <span class=\"string\">&quot;and pretty easy too!&quot;</span>,</span><br><span class=\"line\">              <span class=\"string\">&quot;date&quot;</span>: datetime.datetime(<span class=\"number\">2009</span>, <span class=\"number\">11</span>, <span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">45</span>)&#125;]</span><br><span class=\"line\">result = posts.insert_many(new_posts)</span><br><span class=\"line\"><span class=\"built_in\">print</span> result.inserted_ids  <span class=\"comment\"># [ObjectId(&#x27;...&#x27;), ObjectId(&#x27;...&#x27;)]</span></span><br></pre></td></tr></table></figure>\n\n<p>有一下几点比较有趣的事情需要注意:</p>\n<ul>\n<li><ol>\n<li>insert()的返回值包含了两个ObjectId对象，每个都对应上面批量插入的文档</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>new_posts[1] 与其他的posts看起来不一样:没有tags，并且增加了一个新的title。这里也证明了为什么我们一直说MongoDB是没有模式的</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"查询多个文档\"><a href=\"#查询多个文档\" class=\"headerlink\" title=\"查询多个文档\"></a>查询多个文档</h2><p>作为查询的结果，我们使用该 find() 方法获取多个文档 。find()返回一个 Cursor实例，它允许我们迭代所有匹配的文档。例如，我们可以迭代posts集合中的每个文档：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> post <span class=\"keyword\">in</span> posts.find():</span><br><span class=\"line\">    <span class=\"built_in\">print</span> post</span><br></pre></td></tr></table></figure>\n\n<p>find()也可以像find_one()那样来进行条件查询。现在，我们来查询所有作者author为Mike的文档:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> post <span class=\"keyword\">in</span> posts.find(&#123;<span class=\"string\">&quot;author&quot;</span>: <span class=\"string\">&quot;Mike&quot;</span>&#125;):</span><br><span class=\"line\">    <span class=\"built_in\">print</span> post</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"计数\"><a href=\"#计数\" class=\"headerlink\" title=\"计数\"></a>计数</h2><p>如果我们只想知道有多少文档匹配查询，我们可以执行count()操作而不是完整的查询。我们可以统计一个集合中的所有文档：</p>\n<pre><code>posts.count()\n</code></pre>\n<p>或者只统计符合条件的:</p>\n<pre><code>posts.find(&#123;&quot;author&quot;: &quot;Mike&quot;&#125;).count()\n</code></pre>\n<h2 id=\"范围查询\"><a href=\"#范围查询\" class=\"headerlink\" title=\"范围查询\"></a>范围查询</h2><p>MongoDB支持许多不同类型的高级查询。例如，让我们执行查询，将结果限制为比特定日期更早的帖子，还可以按作者对结果进行排序：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d = datetime.datetime(<span class=\"number\">2009</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span>, <span class=\"number\">12</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> post <span class=\"keyword\">in</span> posts.find(&#123;<span class=\"string\">&quot;date&quot;</span>: &#123;<span class=\"string\">&quot;$lt&quot;</span>: d&#125;&#125;).sort(<span class=\"string\">&quot;author&quot;</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span> post</span><br></pre></td></tr></table></figure>\n\n<p>上面的代码中，我们使用了特殊操作符$lt来限制条件，并且使用了sort()方法来将结果以作者排序。</p>\n<h2 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h2><p>添加索引可以帮助加速某些查询，还可以添加其他功能来查询和存储文档。在这个例子中，我们将演示如何在一个关键字上创建一个唯一的索引,该关键字拒绝该索引中已存在该关键字的文档。</p>\n<p>首先，我们需要创建索引：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">result = db.profiles.create_index([(<span class=\"string\">&#x27;user_id&#x27;</span>, pymongo.ASCENDING)],unique=<span class=\"literal\">True</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"built_in\">sorted</span>(<span class=\"built_in\">list</span>(db.profiles.index_information()))</span><br><span class=\"line\"><span class=\"comment\"># [u&#x27;_id_&#x27;, u&#x27;user_id_1&#x27;]</span></span><br></pre></td></tr></table></figure>\n\n<p>请注意，我们现在有两个索引：一个是_id MongoDB自动创建的索引，另一个是user_id我们刚刚创建的索引。</p>\n<p>现在让我们设置一些用户配置文件：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user_profiles = [</span><br><span class=\"line\">    &#123;<span class=\"string\">&#x27;user_id&#x27;</span>: <span class=\"number\">211</span>, <span class=\"string\">&#x27;name&#x27;</span>: <span class=\"string\">&#x27;Luke&#x27;</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">&#x27;user_id&#x27;</span>: <span class=\"number\">212</span>, <span class=\"string\">&#x27;name&#x27;</span>: <span class=\"string\">&#x27;Ziltoid&#x27;</span>&#125;]</span><br><span class=\"line\">result = db.profiles.insert_many(user_profiles)</span><br></pre></td></tr></table></figure>\n\n<p>索引阻止我们插入user_id已经在集合中的文档：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new_profile = &#123;<span class=\"string\">&#x27;user_id&#x27;</span>: <span class=\"number\">213</span>, <span class=\"string\">&#x27;name&#x27;</span>: <span class=\"string\">&#x27;Drew&#x27;</span>&#125;</span><br><span class=\"line\">duplicate_profile = &#123;<span class=\"string\">&#x27;user_id&#x27;</span>: <span class=\"number\">212</span>, <span class=\"string\">&#x27;name&#x27;</span>: <span class=\"string\">&#x27;Tommy&#x27;</span>&#125;</span><br><span class=\"line\">result = db.profiles.insert_one(new_profile)  <span class=\"comment\"># This is fine.</span></span><br><span class=\"line\">result = db.profiles.insert_one(duplicate_profile)  <span class=\"comment\"># pymongo.errors.DuplicateKeyError: E11000 duplicate key error collection: blog.profiles index: user_id_1 dup key: &#123; : 212 &#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>其实pymongo的基本操作通mongodb类似，文档中只提到新增和查询。</p>"},{"title":"python使用的一些小技巧和面试中遇到的问题整理","date":"2018-03-11T16:00:00.000Z","_content":"\n> 2018年，新的开始，所以我用Python3.x啦，除了原有项目的维护外，全面升级到python3，人生苦短，就用python\n\n## 7月3日\n\n记住一句话：\n\n>当我们叠加装饰器的时候，**最上层的装饰器会首先运行**，接着调用下一行的下一个函数：要么是视图函数，要么就是装饰器。\n\n## 6月26日\n\n值得参考的python[点击这里](https://taizilongxu.gitbooks.io/stackoverflow-about-python/content/1/README.html)\n\n### 字符串格式化：% 和.format\n\n.format 在很多方便看起来更便利，对于 % 最烦人的是它无法同时传递一个变量和元祖，例如以下：\n\n```\n\"hi there %s\" % name \n```\n但是，如果name恰好是(1, 2, 3）,它会抛出一个TypeError异常.为了保证它总是正确的,你必须这样做:\n\n```\n\"hi there %s\" % (name,)   # 提供一个单元素的数组而不是一个参数\n```\n但是有点丑..format就没有这些问题.你给的第二个问题也是这样,.format好看多了.\n\n### 字典推导式\n\n```\nd = {key: value for (key, value) in iterable}\n```\n\n<!--more-->\n\n## 3月12日\n\n### ubuntu系统中不同版本pythoh存在的应用问题\n\n``` \npython3 -m pip install xxx \n```\n\n### windows系统中不同版本python存在的应用问题\n\n- 在windows系统中，同时存在python3.x和python2.x：\n\n命令：`py -2` 启动python2.7的交互解释器；`py -3` 启动python3.x的交互解释器\n\n- 如何使用不同版本的pip：\n\n命令：`py -2 -m pip` 使用2.x的pip；`py -3 -m pip` 使用3.x的pip\n\n- pycharm使用不同版本的python\n\n<!--more-->\n\n\n## 2月28日\n\n补充：\n\n### `__new__`和`__init__`的区别\n\n- `__init__`为初始化方法，`__new__`方法是真正的构造函数。\n- `__new__`是实例创建之前被调用，它的任务是创建并返回该实例，是静态方法\n- `__init__`是实例创建之后被调用的，然后设置对象属性的一些初始值。\n\n总结：`__new__`方法在`__init__`方法之前被调用，并且`__new__`方法的返回值将传递给`__init__`方法作为第一个参数，最后`__init__`给这个实例设置一些参数。\n\n\n### python的自省\n\n自省就是面向对象的语言所写的程序在运行时，所能知道对象的类型。简单一句话就是运行时能够获得对象的类型。比如：`type()`、`dir()`、`getattr()`、`hasattr()`、`isinstance()`\n\n## 1月26日\n\n以下是根据面试的[笔试题](https://suadminwen.github.io/2018/02/26/%E5%B0%8F%E4%BD%99%E6%95%99%E8%82%B2%E9%9D%A2%E7%BB%8F%E5%8F%8A%E6%95%B4%E7%90%86/)整理的部分相关知识：\n\n### 字符串前添加的`r`、`u`、`b`的含义。\n\n- `u/U`: 表示unicode字符串。\n- `r/R`: 非转义的原始字符串。以r开头的字符，常用于正则表达式，对应着re模块。\n- `b`: bytes\n\n\n**注意：**\n\npython3里默认的`str`是(py2.x里的)`unicode`, `bytes`是(py2.x)的`str`, `b\"\"`前缀代表的就是`bytes`\npython2里, `b`前缀没什么具体意义。\n\n### 生成器和迭代器[参看这里](https://suadminwen.github.io/2017/09/09/%E5%B0%8F%E8%AE%BApython%E7%9A%84%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%92%8C%E7%94%9F%E6%88%90%E5%99%A8/)\n\n### 切片和切片步长的问题。\n\n对于具有序列结构的数据来说，切片操作的方法是：consequence[start_index: end_index: step]\n\n- start_index：表示是第一个元素对象，正索引位置默认为0；负索引位置默认为 -len(consequence)\n- end_index：表示是最后一个元素对象，正索引位置默认为 len(consequence)－1；负索引位置默认为 -1。\n- step：表示取值的步长，默认为1，步长值不能为0。\n\n利用步长对序列进行倒序取值：\n```\na=[1,2,3,4,5,6,7]\nprint(a[::-1])  # 这里不会改变a的结构\na.reverse()  # 这里a的结构被改变了\nprint(a)\n```\n\n### 垃圾回收机制和循环引用问题\n\nPython的GC模块主要运用了 **“引用计数”（reference counting）** 来跟踪和回收垃圾。在引用计数的基础上，还可以通过 **“标记-清除”（mark and sweep）** 解决容器对象可能产生的循环引用的问题。通过 **“分代回收”（generation collection）** 以空间换取时间来进一步提高垃圾回收的效率。[详细参考这里](http://python.jobbole.com/82061/)\n\n#### 引用计数\n\nPyObject是每个对象必有的内容，其中ob_refcnt就是做为引用计数。当一个对象有新的引用时，它的ob_refcnt就会增加，当引用它的对象被删除，它的ob_refcnt就会减少.引用计数为0时，该对象生命就结束了。\n\n#### 标记-清除机制\n\n基本思路是先按需分配，等到没有空闲内存的时候从寄存器和程序栈上的引用出发，遍历以对象为节点、以引用为边构成的图，把所有可以访问到的对象打上标记，然后清扫一遍内存空间，把所有没标记的对象释放。\n\n#### 分代技术\n\n分代回收的整体思想是：将系统中的所有内存块根据其存活时间划分为不同的集合，每个集合就成为一个“代”，垃圾收集频率随着“代”的存活时间的增大而减小，存活时间通常利用经过几次垃圾回收来度量。\n\nPython默认定义了三代对象集合，索引数越大，对象存活时间越长。\n\n举例： 当某些内存块M经过了3次垃圾收集的清洗之后还存活时，我们就将内存块M划到一个集合A中去，而新分配的内存都划分到集合B中去。当垃圾收集开始工作时，大多数情况都只对集合B进行垃圾回收，而对集合A进行垃圾回收要隔相当长一段时间后才进行，这就使得垃圾收集机制需要处理的内存少了，效率自然就提高了。在这个过程中，集合B中的某些内存块由于存活时间长而会被转移到集合A中，当然，集合A中实际上也存在一些垃圾，这些垃圾的回收会因为这种分代的机制而被延迟。\n\n### `staticmethod()`与`classmethod()`的区别\n\n一般来说，要使用某个类的方法，需要先实例化一个对象再调用方法。而使用`@staticmethod`或`@classmethod`，就可以不需要实例化，直接类名.方法名()来调用。\n\n- `@staticmethod`不需要表示自身对象的`self`和自身类的`cls`参数，就跟使用函数一样。\n- `@classmethod也`不需要`self`参数，但第一个参数需要是表示自身类的`cls`参数。(`cls`:它表示这个类本身。)\n\n如果在`@staticmethod`中要调用到这个类的一些属性方法，只能直接类名.属性名或类名.方法名。而`@classmethod`因为持有`cls`参数，可以来调用类的属性，类的方法，实例化对象等，避免硬编码。\n\n```python\nclass A(object):  \n    bar = 1  \n    def foo(self):  \n        print 'foo'  \n\n    @staticmethod  \n    def static_foo():  \n        print 'static_foo'  \n        print A.bar  \n\n    @classmethod  \n    def class_foo(cls):  \n        print 'class_foo'  \n        print cls.bar  \n        cls().foo()    # 这里需要注意的是cls()\n###执行  \nA.static_foo()  \nA.class_foo()  \n```\n\n### python中的单例模式\n\n**单例模式（Singleton Pattern）** 是一种常用的软件设计模式，该模式的主要目的是确保某一个类只有一个实例存在。[]参考](https://funhacks.net/2017/01/17/singleton/)\n\n#### 使用模块\n\n**Python 的模块就是天然的单例模式，因为模块在第一次导入时，会生成 .pyc 文件，当第二次导入时，就会直接加载 .pyc 文件，而不会再次执行模块代码。** 因此，我们只需把相关的函数和数据定义在一个模块中，就可以获得一个单例对象了。如果我们真的想要一个单例类，可以考虑这样做：\n\n```python\n# mysingleton.py\nclass My_Singleton(object):\n    def foo(self):\n        pass\n\nmy_singleton = My_Singleton()\n\n\n# test.py\nfrom mysingleton import my_singleton\n\nmy_singleton.foo()\n```\n\n#### 使用 `__new__`\n\n使用 `__new__` 来控制实例的创建过程\n\n```python\nclass Singleton(object):\n    _instance = None\n    def __new__(cls, *args, **kw):\n        if not cls._instance:\n            cls._instance = super(Singleton, cls).__new__(cls, *args, **kw)  \n        return cls._instance  \n\nclass MyClass(Singleton):  \n    a = 1\n\n```\n\n#### 使用装饰器\n\n装饰器（decorator）可以动态地修改一个类或函数的功能。\n\n```python\ndef singleton(cls, *args, **kw):\n    instance = {}\n    def get_singleton():\n        if cls not in instance:\n            instance[cls] = cls(*args, **kw)\n        return instance[cls]\n    return get_singleton\n\n\n@singleton\nclass TT(object):\n    def __init__(self):\n        self.num = 0\n    def add(self):\n        self.num = 100\n\n\nif __name__ == '__main__':\n    a = TT()\n    print(a.num)  # 0\n    a.add()\n    b = TT()\n    print(b.num)  # 100\n```\n\n虽然进行了两次实例化，但仍为同一个实例\n\n#### 使用 元类(metaclass)\n\n后面会有专门的一部分来整理元类的问题\n\n\n### 浅拷贝和深拷贝的区别\n\n这篇[文章](http://songlee24.github.io/2014/08/15/python-FAQ-02/)很好理解!\n\n#### 浅拷贝\n\n浅拷贝（shallow copy）指创建一个新的对象，其内容是原对象中元素的引用。（拷贝父对象，不拷贝子对象）\n\n常见的浅拷贝有：**切片操作**、**工厂函数**、**对象的copy()** 方法、**copy模块中的copy函数**。\n\n```python\na = [1, 2, 3]\nb = list(a)  # 这里是浅拷贝\nc = a  # 这里为赋值\nprint(id(a), id(b), id(c))  # 2130788487752 2130788487880 2130788487752 a与c指向相同\na.append(4)\nprint(a, b, c)  # [1, 2, 3, 4] [1, 2, 3] [1, 2, 3]\n```\n\n#### 深拷贝\n\n深拷贝（deep copy）是指创建一个新的对象，然后递归的拷贝父对象和子对象。深拷贝出来的对象与原对象没有任何关联。\n\n深拷贝只有一种方式：copy模块中的deepcopy函数。\n\n```python\nimport copy\n\na = [1, 2, 3]\nb = copy.deepcopy(a)\nprint(id(a), id(b))\n```\n\n对于不可变对象，当需要一个新的对象时，python可能会返回已经存在的某个类型和值都一致的对象的引用。而且这种机制并不会影响 a 和 b 的相互独立性，因为当两个元素指向同一个不可变对象时，对其中一个赋值不会影响另外一个。\n\n\n#### 用一个包含可变对象的列表来确切地展示“浅拷贝”与“深拷贝”的区别：\n\n```python\nimport copy\na = [[1, 2], [5, 6], [8, 9]]\nb = copy.copy(a)\nc = copy.deepcopy(a)\nprint(id(a), id(b), id(c))\n\nfor x, y in zip(a, b):\n    print(id(x), id(y))  # 输出的id相同\n\nfor x, y in zip(a, c):\n    print(id(x), id(y))  # 输出的id不同\n\n```\n\n#### 总结\n\n- 1、赋值：简单地拷贝对象的引用，两个对象的id相同。\n- 2、浅拷贝：创建一个新的组合对象，这个新对象与原对象共享内存中的子对象。\n- 3、深拷贝：创建一个新的组合对象，同时递归地拷贝所有子对象，新的组合对象与原对象没有任何关联。虽然实际上会共享不可变的子对象，但不影响它们的相互独立性。\n- 4、浅拷贝和深拷贝的不同仅仅是对组合对象来说，所谓的组合对象就是包含了其它对象的对象，如列表，类实例。而对于数字、字符串以及其它“原子”类型，没有拷贝一说，产生的都是原对象的引用。\n\n### 继承和实现的问题\n\n题目：类A、B、C、D、E，C继承于A，D继承于B，E继承于C、D，C中和B中都有demo()方法，问，调用E中的demo()，C和B中谁的demo()会被调用？\n\n```python\nclass A(object):\n    def __init__(self):\n        print('init A...')\n\n    def getoo(self):\n        print(\"getoo\")\n\n\nclass B(object):\n    def __init__(self):\n        print('init B...')\n\n    def demo(self):\n        print(\"B\")\n\n\nclass C(A):\n    def __init__(self):\n        super(C, self).__init__()\n        print('init C...')\n\n    def demo(self):\n        print(\"C\")\n\n\nclass D(B):\n    def __init__(self):\n        super(D, self).__init__()\n        print('init D...')\n\n\nclass E(D,C):  # 继承的先后顺序不一样，则输出结果是不一样的\n    def __init__(self):\n        super(E, self).__init__()\n        print('init E...')\n\n\nif __name__ == '__main__':\n    e = E()\n    e.demo()\n    e.getoo()\n'''\n输出：\ninit B...\ninit D...\ninit E...\nB\ngetoo\n'''\n```\n\n### 元类的问题（metaclass）\n\n元类就是用来创建这些类（对象）的，元类就是类的类。函数`type`实际上是一个元类。`type`就是Python在背后用来创建所有类的元类。`str`是用来创建字符串对象的类，而`int`是用来创建整数对象的类。`type`就是创建类对象的类。\n\n```python\na = 12\nprint(a.__class__)  # <class 'int'>\nprint(a.__class__.__class__)  # <class 'type'>\n```\n\n你可以在写一个类的时候为其添加`__metaclass__`属性,定义了`__metaclass__`就定义了这个类的元类。\n\n\n---\n## 1月25之前\n\n### 1. 需要在循环中使用索引，可以使用 `enumerate()` ：\n\n```python\nfor index, value in enumerate(alist):\n    print(index, value)\n```\n\n### 2.  需要同时迭代两个循环，用同一个索引来获取两个值，可以用 `zip()`\n\n```python\nfor word, number in zip(words, numbers):\n    print word, number  # 其中一个迭代结束，就结束迭代了\n```\n\n### 3. python3中xrange()已经不存在了，range()已经实现了xrange的功能。range的一个重要用法是当你真正想要生成一个数字序列而不是用来生成索引。\n\n```python\nfor i in range(100):\n    print(i, end=\" \")  # 打印 0 - 99\n```\n\n### 4. 正确使用列表解析\n\n```python\nnumbers = [i for i in range(10)]\n```\n\n### 5. Python中set的元素和dict的键值是可哈希的，因此查找起来时间复杂度为O(1)。\n\n创建set引入的是一次性开销，创建过程将花费线性时间即使成员检查花费常数时间。因此如果你需要在循环里检查成员，最好先花时间创建set，因为你只需要创建一次。\n\n```python\nnlist = [1, 5, 4, 6]\n\nnset = set(nlist)\nfor i in range(10):\n    if i in nset:\n        print(i)\n```\n\n### 6. 测试是否为空\n\n```python\nnumber = [1, 2, 3]\nl_number = [i for i in number if i > 3]\nif l_number:\n    # Do something awesome\n```\n\n### 7. 测试是否为None \n\n```python\nif x is not None:\n    # Do something awesome\n```\n\n### 8. 测试变量是否为一些有用的值\n\n```python\nif x:\n    # Do something awesome\n```\n\n### 9. 逻辑判断（比如if）时，Python当中等于False的值:\n\n- 布尔型，False表示False，其他为True\n- 整数和浮点数，0表示False，其他为True\n- 字符串和类字符串类型（包括bytes和unicode），空字符串表示False，其他为True序列类型（包括tuple，list，dict，set等），空表示False，非空表示True\n- None永远表示False\n\n\n### 10. 到底什么是Python？你可以在回答中与其他技术进行对比（也鼓励这样做）。\n\n\n下面是一些关键点：\n\n- **Python是一种解释型语言**。这就是说，与C语言和C的衍生语言不同，Python代码在运行之前不需要编译。其他解释型语言还包括PHP和Ruby。\n- **Python是动态类型语言**。指的是你在声明变量时，不需要说明变量的类型。你可以直接编写类似x=111和x=\"I'm a string\"这样的代码，程序不会报错。\n- **Python非常适合面向对象的编程（OOP）。** 因为它支持通过组合（composition）与继承（inheritance）的方式定义类（class）。Python中没有访问说明符（access specifier，类似C++中的public和private），这么设计的依据是“大家都是成年人了”。\n- **函数是第一类对象（first-class objects）。** 这指的是它们可以被指定给变量，函数既能返回函数类型，也可以接受函数作为输入。**类（class）也是第一类对象**。\n- **Python代码编写快，但是运行速度比编译语言通常要慢。** 好在Python允许加入基于C语言编写的扩展，因此我们能够优化代码，消除瓶颈，这点通常是可以实现的。numpy就是一个很好地例子，它的运行速度真的非常快，因为很多算术运算其实并不是通过Python实现的。\n- Python用途非常广泛——网络应用，自动化，科学建模，大数据应用，等等。它也常被用作“胶水语言”，帮助其他语言和组件改善运行状况。\n- Python让困难的事情变得容易，因此程序员可以专注于算法和数据结构的设计，而不用处理底层的细节\n\n### dict的get():\n\n```python\nsum = {}\nvalue = 'a'\nsum[value] = sum.get(value, 0) + 1\n```\n\n### 其他的零碎\n\n- 字符串切片，迭代器，with as  结构，in is关键字\n- a = 1 if c else 2  等同其他语言的三元运算符。\n\n\n---\n","source":"_posts/python使用的一些小技巧.md","raw":"---\ntitle: python使用的一些小技巧和面试中遇到的问题整理\ndate: 2018-3-12\ntags: [python]\n---\n\n> 2018年，新的开始，所以我用Python3.x啦，除了原有项目的维护外，全面升级到python3，人生苦短，就用python\n\n## 7月3日\n\n记住一句话：\n\n>当我们叠加装饰器的时候，**最上层的装饰器会首先运行**，接着调用下一行的下一个函数：要么是视图函数，要么就是装饰器。\n\n## 6月26日\n\n值得参考的python[点击这里](https://taizilongxu.gitbooks.io/stackoverflow-about-python/content/1/README.html)\n\n### 字符串格式化：% 和.format\n\n.format 在很多方便看起来更便利，对于 % 最烦人的是它无法同时传递一个变量和元祖，例如以下：\n\n```\n\"hi there %s\" % name \n```\n但是，如果name恰好是(1, 2, 3）,它会抛出一个TypeError异常.为了保证它总是正确的,你必须这样做:\n\n```\n\"hi there %s\" % (name,)   # 提供一个单元素的数组而不是一个参数\n```\n但是有点丑..format就没有这些问题.你给的第二个问题也是这样,.format好看多了.\n\n### 字典推导式\n\n```\nd = {key: value for (key, value) in iterable}\n```\n\n<!--more-->\n\n## 3月12日\n\n### ubuntu系统中不同版本pythoh存在的应用问题\n\n``` \npython3 -m pip install xxx \n```\n\n### windows系统中不同版本python存在的应用问题\n\n- 在windows系统中，同时存在python3.x和python2.x：\n\n命令：`py -2` 启动python2.7的交互解释器；`py -3` 启动python3.x的交互解释器\n\n- 如何使用不同版本的pip：\n\n命令：`py -2 -m pip` 使用2.x的pip；`py -3 -m pip` 使用3.x的pip\n\n- pycharm使用不同版本的python\n\n<!--more-->\n\n\n## 2月28日\n\n补充：\n\n### `__new__`和`__init__`的区别\n\n- `__init__`为初始化方法，`__new__`方法是真正的构造函数。\n- `__new__`是实例创建之前被调用，它的任务是创建并返回该实例，是静态方法\n- `__init__`是实例创建之后被调用的，然后设置对象属性的一些初始值。\n\n总结：`__new__`方法在`__init__`方法之前被调用，并且`__new__`方法的返回值将传递给`__init__`方法作为第一个参数，最后`__init__`给这个实例设置一些参数。\n\n\n### python的自省\n\n自省就是面向对象的语言所写的程序在运行时，所能知道对象的类型。简单一句话就是运行时能够获得对象的类型。比如：`type()`、`dir()`、`getattr()`、`hasattr()`、`isinstance()`\n\n## 1月26日\n\n以下是根据面试的[笔试题](https://suadminwen.github.io/2018/02/26/%E5%B0%8F%E4%BD%99%E6%95%99%E8%82%B2%E9%9D%A2%E7%BB%8F%E5%8F%8A%E6%95%B4%E7%90%86/)整理的部分相关知识：\n\n### 字符串前添加的`r`、`u`、`b`的含义。\n\n- `u/U`: 表示unicode字符串。\n- `r/R`: 非转义的原始字符串。以r开头的字符，常用于正则表达式，对应着re模块。\n- `b`: bytes\n\n\n**注意：**\n\npython3里默认的`str`是(py2.x里的)`unicode`, `bytes`是(py2.x)的`str`, `b\"\"`前缀代表的就是`bytes`\npython2里, `b`前缀没什么具体意义。\n\n### 生成器和迭代器[参看这里](https://suadminwen.github.io/2017/09/09/%E5%B0%8F%E8%AE%BApython%E7%9A%84%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%92%8C%E7%94%9F%E6%88%90%E5%99%A8/)\n\n### 切片和切片步长的问题。\n\n对于具有序列结构的数据来说，切片操作的方法是：consequence[start_index: end_index: step]\n\n- start_index：表示是第一个元素对象，正索引位置默认为0；负索引位置默认为 -len(consequence)\n- end_index：表示是最后一个元素对象，正索引位置默认为 len(consequence)－1；负索引位置默认为 -1。\n- step：表示取值的步长，默认为1，步长值不能为0。\n\n利用步长对序列进行倒序取值：\n```\na=[1,2,3,4,5,6,7]\nprint(a[::-1])  # 这里不会改变a的结构\na.reverse()  # 这里a的结构被改变了\nprint(a)\n```\n\n### 垃圾回收机制和循环引用问题\n\nPython的GC模块主要运用了 **“引用计数”（reference counting）** 来跟踪和回收垃圾。在引用计数的基础上，还可以通过 **“标记-清除”（mark and sweep）** 解决容器对象可能产生的循环引用的问题。通过 **“分代回收”（generation collection）** 以空间换取时间来进一步提高垃圾回收的效率。[详细参考这里](http://python.jobbole.com/82061/)\n\n#### 引用计数\n\nPyObject是每个对象必有的内容，其中ob_refcnt就是做为引用计数。当一个对象有新的引用时，它的ob_refcnt就会增加，当引用它的对象被删除，它的ob_refcnt就会减少.引用计数为0时，该对象生命就结束了。\n\n#### 标记-清除机制\n\n基本思路是先按需分配，等到没有空闲内存的时候从寄存器和程序栈上的引用出发，遍历以对象为节点、以引用为边构成的图，把所有可以访问到的对象打上标记，然后清扫一遍内存空间，把所有没标记的对象释放。\n\n#### 分代技术\n\n分代回收的整体思想是：将系统中的所有内存块根据其存活时间划分为不同的集合，每个集合就成为一个“代”，垃圾收集频率随着“代”的存活时间的增大而减小，存活时间通常利用经过几次垃圾回收来度量。\n\nPython默认定义了三代对象集合，索引数越大，对象存活时间越长。\n\n举例： 当某些内存块M经过了3次垃圾收集的清洗之后还存活时，我们就将内存块M划到一个集合A中去，而新分配的内存都划分到集合B中去。当垃圾收集开始工作时，大多数情况都只对集合B进行垃圾回收，而对集合A进行垃圾回收要隔相当长一段时间后才进行，这就使得垃圾收集机制需要处理的内存少了，效率自然就提高了。在这个过程中，集合B中的某些内存块由于存活时间长而会被转移到集合A中，当然，集合A中实际上也存在一些垃圾，这些垃圾的回收会因为这种分代的机制而被延迟。\n\n### `staticmethod()`与`classmethod()`的区别\n\n一般来说，要使用某个类的方法，需要先实例化一个对象再调用方法。而使用`@staticmethod`或`@classmethod`，就可以不需要实例化，直接类名.方法名()来调用。\n\n- `@staticmethod`不需要表示自身对象的`self`和自身类的`cls`参数，就跟使用函数一样。\n- `@classmethod也`不需要`self`参数，但第一个参数需要是表示自身类的`cls`参数。(`cls`:它表示这个类本身。)\n\n如果在`@staticmethod`中要调用到这个类的一些属性方法，只能直接类名.属性名或类名.方法名。而`@classmethod`因为持有`cls`参数，可以来调用类的属性，类的方法，实例化对象等，避免硬编码。\n\n```python\nclass A(object):  \n    bar = 1  \n    def foo(self):  \n        print 'foo'  \n\n    @staticmethod  \n    def static_foo():  \n        print 'static_foo'  \n        print A.bar  \n\n    @classmethod  \n    def class_foo(cls):  \n        print 'class_foo'  \n        print cls.bar  \n        cls().foo()    # 这里需要注意的是cls()\n###执行  \nA.static_foo()  \nA.class_foo()  \n```\n\n### python中的单例模式\n\n**单例模式（Singleton Pattern）** 是一种常用的软件设计模式，该模式的主要目的是确保某一个类只有一个实例存在。[]参考](https://funhacks.net/2017/01/17/singleton/)\n\n#### 使用模块\n\n**Python 的模块就是天然的单例模式，因为模块在第一次导入时，会生成 .pyc 文件，当第二次导入时，就会直接加载 .pyc 文件，而不会再次执行模块代码。** 因此，我们只需把相关的函数和数据定义在一个模块中，就可以获得一个单例对象了。如果我们真的想要一个单例类，可以考虑这样做：\n\n```python\n# mysingleton.py\nclass My_Singleton(object):\n    def foo(self):\n        pass\n\nmy_singleton = My_Singleton()\n\n\n# test.py\nfrom mysingleton import my_singleton\n\nmy_singleton.foo()\n```\n\n#### 使用 `__new__`\n\n使用 `__new__` 来控制实例的创建过程\n\n```python\nclass Singleton(object):\n    _instance = None\n    def __new__(cls, *args, **kw):\n        if not cls._instance:\n            cls._instance = super(Singleton, cls).__new__(cls, *args, **kw)  \n        return cls._instance  \n\nclass MyClass(Singleton):  \n    a = 1\n\n```\n\n#### 使用装饰器\n\n装饰器（decorator）可以动态地修改一个类或函数的功能。\n\n```python\ndef singleton(cls, *args, **kw):\n    instance = {}\n    def get_singleton():\n        if cls not in instance:\n            instance[cls] = cls(*args, **kw)\n        return instance[cls]\n    return get_singleton\n\n\n@singleton\nclass TT(object):\n    def __init__(self):\n        self.num = 0\n    def add(self):\n        self.num = 100\n\n\nif __name__ == '__main__':\n    a = TT()\n    print(a.num)  # 0\n    a.add()\n    b = TT()\n    print(b.num)  # 100\n```\n\n虽然进行了两次实例化，但仍为同一个实例\n\n#### 使用 元类(metaclass)\n\n后面会有专门的一部分来整理元类的问题\n\n\n### 浅拷贝和深拷贝的区别\n\n这篇[文章](http://songlee24.github.io/2014/08/15/python-FAQ-02/)很好理解!\n\n#### 浅拷贝\n\n浅拷贝（shallow copy）指创建一个新的对象，其内容是原对象中元素的引用。（拷贝父对象，不拷贝子对象）\n\n常见的浅拷贝有：**切片操作**、**工厂函数**、**对象的copy()** 方法、**copy模块中的copy函数**。\n\n```python\na = [1, 2, 3]\nb = list(a)  # 这里是浅拷贝\nc = a  # 这里为赋值\nprint(id(a), id(b), id(c))  # 2130788487752 2130788487880 2130788487752 a与c指向相同\na.append(4)\nprint(a, b, c)  # [1, 2, 3, 4] [1, 2, 3] [1, 2, 3]\n```\n\n#### 深拷贝\n\n深拷贝（deep copy）是指创建一个新的对象，然后递归的拷贝父对象和子对象。深拷贝出来的对象与原对象没有任何关联。\n\n深拷贝只有一种方式：copy模块中的deepcopy函数。\n\n```python\nimport copy\n\na = [1, 2, 3]\nb = copy.deepcopy(a)\nprint(id(a), id(b))\n```\n\n对于不可变对象，当需要一个新的对象时，python可能会返回已经存在的某个类型和值都一致的对象的引用。而且这种机制并不会影响 a 和 b 的相互独立性，因为当两个元素指向同一个不可变对象时，对其中一个赋值不会影响另外一个。\n\n\n#### 用一个包含可变对象的列表来确切地展示“浅拷贝”与“深拷贝”的区别：\n\n```python\nimport copy\na = [[1, 2], [5, 6], [8, 9]]\nb = copy.copy(a)\nc = copy.deepcopy(a)\nprint(id(a), id(b), id(c))\n\nfor x, y in zip(a, b):\n    print(id(x), id(y))  # 输出的id相同\n\nfor x, y in zip(a, c):\n    print(id(x), id(y))  # 输出的id不同\n\n```\n\n#### 总结\n\n- 1、赋值：简单地拷贝对象的引用，两个对象的id相同。\n- 2、浅拷贝：创建一个新的组合对象，这个新对象与原对象共享内存中的子对象。\n- 3、深拷贝：创建一个新的组合对象，同时递归地拷贝所有子对象，新的组合对象与原对象没有任何关联。虽然实际上会共享不可变的子对象，但不影响它们的相互独立性。\n- 4、浅拷贝和深拷贝的不同仅仅是对组合对象来说，所谓的组合对象就是包含了其它对象的对象，如列表，类实例。而对于数字、字符串以及其它“原子”类型，没有拷贝一说，产生的都是原对象的引用。\n\n### 继承和实现的问题\n\n题目：类A、B、C、D、E，C继承于A，D继承于B，E继承于C、D，C中和B中都有demo()方法，问，调用E中的demo()，C和B中谁的demo()会被调用？\n\n```python\nclass A(object):\n    def __init__(self):\n        print('init A...')\n\n    def getoo(self):\n        print(\"getoo\")\n\n\nclass B(object):\n    def __init__(self):\n        print('init B...')\n\n    def demo(self):\n        print(\"B\")\n\n\nclass C(A):\n    def __init__(self):\n        super(C, self).__init__()\n        print('init C...')\n\n    def demo(self):\n        print(\"C\")\n\n\nclass D(B):\n    def __init__(self):\n        super(D, self).__init__()\n        print('init D...')\n\n\nclass E(D,C):  # 继承的先后顺序不一样，则输出结果是不一样的\n    def __init__(self):\n        super(E, self).__init__()\n        print('init E...')\n\n\nif __name__ == '__main__':\n    e = E()\n    e.demo()\n    e.getoo()\n'''\n输出：\ninit B...\ninit D...\ninit E...\nB\ngetoo\n'''\n```\n\n### 元类的问题（metaclass）\n\n元类就是用来创建这些类（对象）的，元类就是类的类。函数`type`实际上是一个元类。`type`就是Python在背后用来创建所有类的元类。`str`是用来创建字符串对象的类，而`int`是用来创建整数对象的类。`type`就是创建类对象的类。\n\n```python\na = 12\nprint(a.__class__)  # <class 'int'>\nprint(a.__class__.__class__)  # <class 'type'>\n```\n\n你可以在写一个类的时候为其添加`__metaclass__`属性,定义了`__metaclass__`就定义了这个类的元类。\n\n\n---\n## 1月25之前\n\n### 1. 需要在循环中使用索引，可以使用 `enumerate()` ：\n\n```python\nfor index, value in enumerate(alist):\n    print(index, value)\n```\n\n### 2.  需要同时迭代两个循环，用同一个索引来获取两个值，可以用 `zip()`\n\n```python\nfor word, number in zip(words, numbers):\n    print word, number  # 其中一个迭代结束，就结束迭代了\n```\n\n### 3. python3中xrange()已经不存在了，range()已经实现了xrange的功能。range的一个重要用法是当你真正想要生成一个数字序列而不是用来生成索引。\n\n```python\nfor i in range(100):\n    print(i, end=\" \")  # 打印 0 - 99\n```\n\n### 4. 正确使用列表解析\n\n```python\nnumbers = [i for i in range(10)]\n```\n\n### 5. Python中set的元素和dict的键值是可哈希的，因此查找起来时间复杂度为O(1)。\n\n创建set引入的是一次性开销，创建过程将花费线性时间即使成员检查花费常数时间。因此如果你需要在循环里检查成员，最好先花时间创建set，因为你只需要创建一次。\n\n```python\nnlist = [1, 5, 4, 6]\n\nnset = set(nlist)\nfor i in range(10):\n    if i in nset:\n        print(i)\n```\n\n### 6. 测试是否为空\n\n```python\nnumber = [1, 2, 3]\nl_number = [i for i in number if i > 3]\nif l_number:\n    # Do something awesome\n```\n\n### 7. 测试是否为None \n\n```python\nif x is not None:\n    # Do something awesome\n```\n\n### 8. 测试变量是否为一些有用的值\n\n```python\nif x:\n    # Do something awesome\n```\n\n### 9. 逻辑判断（比如if）时，Python当中等于False的值:\n\n- 布尔型，False表示False，其他为True\n- 整数和浮点数，0表示False，其他为True\n- 字符串和类字符串类型（包括bytes和unicode），空字符串表示False，其他为True序列类型（包括tuple，list，dict，set等），空表示False，非空表示True\n- None永远表示False\n\n\n### 10. 到底什么是Python？你可以在回答中与其他技术进行对比（也鼓励这样做）。\n\n\n下面是一些关键点：\n\n- **Python是一种解释型语言**。这就是说，与C语言和C的衍生语言不同，Python代码在运行之前不需要编译。其他解释型语言还包括PHP和Ruby。\n- **Python是动态类型语言**。指的是你在声明变量时，不需要说明变量的类型。你可以直接编写类似x=111和x=\"I'm a string\"这样的代码，程序不会报错。\n- **Python非常适合面向对象的编程（OOP）。** 因为它支持通过组合（composition）与继承（inheritance）的方式定义类（class）。Python中没有访问说明符（access specifier，类似C++中的public和private），这么设计的依据是“大家都是成年人了”。\n- **函数是第一类对象（first-class objects）。** 这指的是它们可以被指定给变量，函数既能返回函数类型，也可以接受函数作为输入。**类（class）也是第一类对象**。\n- **Python代码编写快，但是运行速度比编译语言通常要慢。** 好在Python允许加入基于C语言编写的扩展，因此我们能够优化代码，消除瓶颈，这点通常是可以实现的。numpy就是一个很好地例子，它的运行速度真的非常快，因为很多算术运算其实并不是通过Python实现的。\n- Python用途非常广泛——网络应用，自动化，科学建模，大数据应用，等等。它也常被用作“胶水语言”，帮助其他语言和组件改善运行状况。\n- Python让困难的事情变得容易，因此程序员可以专注于算法和数据结构的设计，而不用处理底层的细节\n\n### dict的get():\n\n```python\nsum = {}\nvalue = 'a'\nsum[value] = sum.get(value, 0) + 1\n```\n\n### 其他的零碎\n\n- 字符串切片，迭代器，with as  结构，in is关键字\n- a = 1 if c else 2  等同其他语言的三元运算符。\n\n\n---\n","slug":"python使用的一些小技巧","published":1,"updated":"2021-06-20T10:25:20.128Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluqa1hj2002yrlogd6iwec9j","content":"<blockquote>\n<p>2018年，新的开始，所以我用Python3.x啦，除了原有项目的维护外，全面升级到python3，人生苦短，就用python</p>\n</blockquote>\n<h2 id=\"7月3日\"><a href=\"#7月3日\" class=\"headerlink\" title=\"7月3日\"></a>7月3日</h2><p>记住一句话：</p>\n<blockquote>\n<p>当我们叠加装饰器的时候，<strong>最上层的装饰器会首先运行</strong>，接着调用下一行的下一个函数：要么是视图函数，要么就是装饰器。</p>\n</blockquote>\n<h2 id=\"6月26日\"><a href=\"#6月26日\" class=\"headerlink\" title=\"6月26日\"></a>6月26日</h2><p>值得参考的python<a href=\"https://taizilongxu.gitbooks.io/stackoverflow-about-python/content/1/README.html\">点击这里</a></p>\n<h3 id=\"字符串格式化：-和-format\"><a href=\"#字符串格式化：-和-format\" class=\"headerlink\" title=\"字符串格式化：% 和.format\"></a>字符串格式化：% 和.format</h3><p>.format 在很多方便看起来更便利，对于 % 最烦人的是它无法同时传递一个变量和元祖，例如以下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;hi there %s&quot; % name </span><br></pre></td></tr></table></figure>\n<p>但是，如果name恰好是(1, 2, 3）,它会抛出一个TypeError异常.为了保证它总是正确的,你必须这样做:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;hi there %s&quot; % (name,)   # 提供一个单元素的数组而不是一个参数</span><br></pre></td></tr></table></figure>\n<p>但是有点丑..format就没有这些问题.你给的第二个问题也是这样,.format好看多了.</p>\n<h3 id=\"字典推导式\"><a href=\"#字典推导式\" class=\"headerlink\" title=\"字典推导式\"></a>字典推导式</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d = &#123;key: value for (key, value) in iterable&#125;</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"3月12日\"><a href=\"#3月12日\" class=\"headerlink\" title=\"3月12日\"></a>3月12日</h2><h3 id=\"ubuntu系统中不同版本pythoh存在的应用问题\"><a href=\"#ubuntu系统中不同版本pythoh存在的应用问题\" class=\"headerlink\" title=\"ubuntu系统中不同版本pythoh存在的应用问题\"></a>ubuntu系统中不同版本pythoh存在的应用问题</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 -m pip install xxx </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"windows系统中不同版本python存在的应用问题\"><a href=\"#windows系统中不同版本python存在的应用问题\" class=\"headerlink\" title=\"windows系统中不同版本python存在的应用问题\"></a>windows系统中不同版本python存在的应用问题</h3><ul>\n<li>在windows系统中，同时存在python3.x和python2.x：</li>\n</ul>\n<p>命令：<code>py -2</code> 启动python2.7的交互解释器；<code>py -3</code> 启动python3.x的交互解释器</p>\n<ul>\n<li>如何使用不同版本的pip：</li>\n</ul>\n<p>命令：<code>py -2 -m pip</code> 使用2.x的pip；<code>py -3 -m pip</code> 使用3.x的pip</p>\n<ul>\n<li>pycharm使用不同版本的python</li>\n</ul>\n<!--more-->\n\n\n<h2 id=\"2月28日\"><a href=\"#2月28日\" class=\"headerlink\" title=\"2月28日\"></a>2月28日</h2><p>补充：</p>\n<h3 id=\"new-和-init-的区别\"><a href=\"#new-和-init-的区别\" class=\"headerlink\" title=\"__new__和__init__的区别\"></a><code>__new__</code>和<code>__init__</code>的区别</h3><ul>\n<li><code>__init__</code>为初始化方法，<code>__new__</code>方法是真正的构造函数。</li>\n<li><code>__new__</code>是实例创建之前被调用，它的任务是创建并返回该实例，是静态方法</li>\n<li><code>__init__</code>是实例创建之后被调用的，然后设置对象属性的一些初始值。</li>\n</ul>\n<p>总结：<code>__new__</code>方法在<code>__init__</code>方法之前被调用，并且<code>__new__</code>方法的返回值将传递给<code>__init__</code>方法作为第一个参数，最后<code>__init__</code>给这个实例设置一些参数。</p>\n<h3 id=\"python的自省\"><a href=\"#python的自省\" class=\"headerlink\" title=\"python的自省\"></a>python的自省</h3><p>自省就是面向对象的语言所写的程序在运行时，所能知道对象的类型。简单一句话就是运行时能够获得对象的类型。比如：<code>type()</code>、<code>dir()</code>、<code>getattr()</code>、<code>hasattr()</code>、<code>isinstance()</code></p>\n<h2 id=\"1月26日\"><a href=\"#1月26日\" class=\"headerlink\" title=\"1月26日\"></a>1月26日</h2><p>以下是根据面试的<a href=\"https://suadminwen.github.io/2018/02/26/%E5%B0%8F%E4%BD%99%E6%95%99%E8%82%B2%E9%9D%A2%E7%BB%8F%E5%8F%8A%E6%95%B4%E7%90%86/\">笔试题</a>整理的部分相关知识：</p>\n<h3 id=\"字符串前添加的r、u、b的含义。\"><a href=\"#字符串前添加的r、u、b的含义。\" class=\"headerlink\" title=\"字符串前添加的r、u、b的含义。\"></a>字符串前添加的<code>r</code>、<code>u</code>、<code>b</code>的含义。</h3><ul>\n<li><code>u/U</code>: 表示unicode字符串。</li>\n<li><code>r/R</code>: 非转义的原始字符串。以r开头的字符，常用于正则表达式，对应着re模块。</li>\n<li><code>b</code>: bytes</li>\n</ul>\n<p><strong>注意：</strong></p>\n<p>python3里默认的<code>str</code>是(py2.x里的)<code>unicode</code>, <code>bytes</code>是(py2.x)的<code>str</code>, <code>b&quot;&quot;</code>前缀代表的就是<code>bytes</code><br>python2里, <code>b</code>前缀没什么具体意义。</p>\n<h3 id=\"生成器和迭代器参看这里\"><a href=\"#生成器和迭代器参看这里\" class=\"headerlink\" title=\"生成器和迭代器参看这里\"></a>生成器和迭代器<a href=\"https://suadminwen.github.io/2017/09/09/%E5%B0%8F%E8%AE%BApython%E7%9A%84%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%92%8C%E7%94%9F%E6%88%90%E5%99%A8/\">参看这里</a></h3><h3 id=\"切片和切片步长的问题。\"><a href=\"#切片和切片步长的问题。\" class=\"headerlink\" title=\"切片和切片步长的问题。\"></a>切片和切片步长的问题。</h3><p>对于具有序列结构的数据来说，切片操作的方法是：consequence[start_index: end_index: step]</p>\n<ul>\n<li>start_index：表示是第一个元素对象，正索引位置默认为0；负索引位置默认为 -len(consequence)</li>\n<li>end_index：表示是最后一个元素对象，正索引位置默认为 len(consequence)－1；负索引位置默认为 -1。</li>\n<li>step：表示取值的步长，默认为1，步长值不能为0。</li>\n</ul>\n<p>利用步长对序列进行倒序取值：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=[1,2,3,4,5,6,7]</span><br><span class=\"line\">print(a[::-1])  # 这里不会改变a的结构</span><br><span class=\"line\">a.reverse()  # 这里a的结构被改变了</span><br><span class=\"line\">print(a)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"垃圾回收机制和循环引用问题\"><a href=\"#垃圾回收机制和循环引用问题\" class=\"headerlink\" title=\"垃圾回收机制和循环引用问题\"></a>垃圾回收机制和循环引用问题</h3><p>Python的GC模块主要运用了 <strong>“引用计数”（reference counting）</strong> 来跟踪和回收垃圾。在引用计数的基础上，还可以通过 <strong>“标记-清除”（mark and sweep）</strong> 解决容器对象可能产生的循环引用的问题。通过 <strong>“分代回收”（generation collection）</strong> 以空间换取时间来进一步提高垃圾回收的效率。<a href=\"http://python.jobbole.com/82061/\">详细参考这里</a></p>\n<h4 id=\"引用计数\"><a href=\"#引用计数\" class=\"headerlink\" title=\"引用计数\"></a>引用计数</h4><p>PyObject是每个对象必有的内容，其中ob_refcnt就是做为引用计数。当一个对象有新的引用时，它的ob_refcnt就会增加，当引用它的对象被删除，它的ob_refcnt就会减少.引用计数为0时，该对象生命就结束了。</p>\n<h4 id=\"标记-清除机制\"><a href=\"#标记-清除机制\" class=\"headerlink\" title=\"标记-清除机制\"></a>标记-清除机制</h4><p>基本思路是先按需分配，等到没有空闲内存的时候从寄存器和程序栈上的引用出发，遍历以对象为节点、以引用为边构成的图，把所有可以访问到的对象打上标记，然后清扫一遍内存空间，把所有没标记的对象释放。</p>\n<h4 id=\"分代技术\"><a href=\"#分代技术\" class=\"headerlink\" title=\"分代技术\"></a>分代技术</h4><p>分代回收的整体思想是：将系统中的所有内存块根据其存活时间划分为不同的集合，每个集合就成为一个“代”，垃圾收集频率随着“代”的存活时间的增大而减小，存活时间通常利用经过几次垃圾回收来度量。</p>\n<p>Python默认定义了三代对象集合，索引数越大，对象存活时间越长。</p>\n<p>举例： 当某些内存块M经过了3次垃圾收集的清洗之后还存活时，我们就将内存块M划到一个集合A中去，而新分配的内存都划分到集合B中去。当垃圾收集开始工作时，大多数情况都只对集合B进行垃圾回收，而对集合A进行垃圾回收要隔相当长一段时间后才进行，这就使得垃圾收集机制需要处理的内存少了，效率自然就提高了。在这个过程中，集合B中的某些内存块由于存活时间长而会被转移到集合A中，当然，集合A中实际上也存在一些垃圾，这些垃圾的回收会因为这种分代的机制而被延迟。</p>\n<h3 id=\"staticmethod-与classmethod-的区别\"><a href=\"#staticmethod-与classmethod-的区别\" class=\"headerlink\" title=\"staticmethod()与classmethod()的区别\"></a><code>staticmethod()</code>与<code>classmethod()</code>的区别</h3><p>一般来说，要使用某个类的方法，需要先实例化一个对象再调用方法。而使用<code>@staticmethod</code>或<code>@classmethod</code>，就可以不需要实例化，直接类名.方法名()来调用。</p>\n<ul>\n<li><code>@staticmethod</code>不需要表示自身对象的<code>self</code>和自身类的<code>cls</code>参数，就跟使用函数一样。</li>\n<li><code>@classmethod也</code>不需要<code>self</code>参数，但第一个参数需要是表示自身类的<code>cls</code>参数。(<code>cls</code>:它表示这个类本身。)</li>\n</ul>\n<p>如果在<code>@staticmethod</code>中要调用到这个类的一些属性方法，只能直接类名.属性名或类名.方法名。而<code>@classmethod</code>因为持有<code>cls</code>参数，可以来调用类的属性，类的方法，实例化对象等，避免硬编码。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span>(<span class=\"title class_ inherited__\">object</span>):  </span><br><span class=\"line\">    bar = <span class=\"number\">1</span>  </span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">foo</span>(<span class=\"params\">self</span>):  </span><br><span class=\"line\">        <span class=\"built_in\">print</span> <span class=\"string\">&#x27;foo&#x27;</span>  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @staticmethod  </span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">static_foo</span>():  </span><br><span class=\"line\">        <span class=\"built_in\">print</span> <span class=\"string\">&#x27;static_foo&#x27;</span>  </span><br><span class=\"line\">        <span class=\"built_in\">print</span> A.bar  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @classmethod  </span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">class_foo</span>(<span class=\"params\">cls</span>):  </span><br><span class=\"line\">        <span class=\"built_in\">print</span> <span class=\"string\">&#x27;class_foo&#x27;</span>  </span><br><span class=\"line\">        <span class=\"built_in\">print</span> cls.bar  </span><br><span class=\"line\">        cls().foo()    <span class=\"comment\"># 这里需要注意的是cls()</span></span><br><span class=\"line\"><span class=\"comment\">###执行  </span></span><br><span class=\"line\">A.static_foo()  </span><br><span class=\"line\">A.class_foo()  </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"python中的单例模式\"><a href=\"#python中的单例模式\" class=\"headerlink\" title=\"python中的单例模式\"></a>python中的单例模式</h3><p><strong>单例模式（Singleton Pattern）</strong> 是一种常用的软件设计模式，该模式的主要目的是确保某一个类只有一个实例存在。[]参考](<a href=\"https://funhacks.net/2017/01/17/singleton/\">https://funhacks.net/2017/01/17/singleton/</a>)</p>\n<h4 id=\"使用模块\"><a href=\"#使用模块\" class=\"headerlink\" title=\"使用模块\"></a>使用模块</h4><p><strong>Python 的模块就是天然的单例模式，因为模块在第一次导入时，会生成 .pyc 文件，当第二次导入时，就会直接加载 .pyc 文件，而不会再次执行模块代码。</strong> 因此，我们只需把相关的函数和数据定义在一个模块中，就可以获得一个单例对象了。如果我们真的想要一个单例类，可以考虑这样做：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># mysingleton.py</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">My_Singleton</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">foo</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">my_singleton = My_Singleton()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># test.py</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> mysingleton <span class=\"keyword\">import</span> my_singleton</span><br><span class=\"line\"></span><br><span class=\"line\">my_singleton.foo()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用-new\"><a href=\"#使用-new\" class=\"headerlink\" title=\"使用 __new__\"></a>使用 <code>__new__</code></h4><p>使用 <code>__new__</code> 来控制实例的创建过程</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Singleton</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">    _instance = <span class=\"literal\">None</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__new__</span>(<span class=\"params\">cls, *args, **kw</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> cls._instance:</span><br><span class=\"line\">            cls._instance = <span class=\"built_in\">super</span>(Singleton, cls).__new__(cls, *args, **kw)  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> cls._instance  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span>(<span class=\"title class_ inherited__\">Singleton</span>):  </span><br><span class=\"line\">    a = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用装饰器\"><a href=\"#使用装饰器\" class=\"headerlink\" title=\"使用装饰器\"></a>使用装饰器</h4><p>装饰器（decorator）可以动态地修改一个类或函数的功能。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">singleton</span>(<span class=\"params\">cls, *args, **kw</span>):</span><br><span class=\"line\">    instance = &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get_singleton</span>():</span><br><span class=\"line\">        <span class=\"keyword\">if</span> cls <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> instance:</span><br><span class=\"line\">            instance[cls] = cls(*args, **kw)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance[cls]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> get_singleton</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@singleton</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TT</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.num = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">add</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.num = <span class=\"number\">100</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    a = TT()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(a.num)  <span class=\"comment\"># 0</span></span><br><span class=\"line\">    a.add()</span><br><span class=\"line\">    b = TT()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(b.num)  <span class=\"comment\"># 100</span></span><br></pre></td></tr></table></figure>\n\n<p>虽然进行了两次实例化，但仍为同一个实例</p>\n<h4 id=\"使用-元类-metaclass\"><a href=\"#使用-元类-metaclass\" class=\"headerlink\" title=\"使用 元类(metaclass)\"></a>使用 元类(metaclass)</h4><p>后面会有专门的一部分来整理元类的问题</p>\n<h3 id=\"浅拷贝和深拷贝的区别\"><a href=\"#浅拷贝和深拷贝的区别\" class=\"headerlink\" title=\"浅拷贝和深拷贝的区别\"></a>浅拷贝和深拷贝的区别</h3><p>这篇<a href=\"http://songlee24.github.io/2014/08/15/python-FAQ-02/\">文章</a>很好理解!</p>\n<h4 id=\"浅拷贝\"><a href=\"#浅拷贝\" class=\"headerlink\" title=\"浅拷贝\"></a>浅拷贝</h4><p>浅拷贝（shallow copy）指创建一个新的对象，其内容是原对象中元素的引用。（拷贝父对象，不拷贝子对象）</p>\n<p>常见的浅拷贝有：<strong>切片操作</strong>、<strong>工厂函数</strong>、<strong>对象的copy()</strong> 方法、<strong>copy模块中的copy函数</strong>。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">b = <span class=\"built_in\">list</span>(a)  <span class=\"comment\"># 这里是浅拷贝</span></span><br><span class=\"line\">c = a  <span class=\"comment\"># 这里为赋值</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">id</span>(a), <span class=\"built_in\">id</span>(b), <span class=\"built_in\">id</span>(c))  <span class=\"comment\"># 2130788487752 2130788487880 2130788487752 a与c指向相同</span></span><br><span class=\"line\">a.append(<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(a, b, c)  <span class=\"comment\"># [1, 2, 3, 4] [1, 2, 3] [1, 2, 3]</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"深拷贝\"><a href=\"#深拷贝\" class=\"headerlink\" title=\"深拷贝\"></a>深拷贝</h4><p>深拷贝（deep copy）是指创建一个新的对象，然后递归的拷贝父对象和子对象。深拷贝出来的对象与原对象没有任何关联。</p>\n<p>深拷贝只有一种方式：copy模块中的deepcopy函数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> copy</span><br><span class=\"line\"></span><br><span class=\"line\">a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">b = copy.deepcopy(a)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">id</span>(a), <span class=\"built_in\">id</span>(b))</span><br></pre></td></tr></table></figure>\n\n<p>对于不可变对象，当需要一个新的对象时，python可能会返回已经存在的某个类型和值都一致的对象的引用。而且这种机制并不会影响 a 和 b 的相互独立性，因为当两个元素指向同一个不可变对象时，对其中一个赋值不会影响另外一个。</p>\n<h4 id=\"用一个包含可变对象的列表来确切地展示“浅拷贝”与“深拷贝”的区别：\"><a href=\"#用一个包含可变对象的列表来确切地展示“浅拷贝”与“深拷贝”的区别：\" class=\"headerlink\" title=\"用一个包含可变对象的列表来确切地展示“浅拷贝”与“深拷贝”的区别：\"></a>用一个包含可变对象的列表来确切地展示“浅拷贝”与“深拷贝”的区别：</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> copy</span><br><span class=\"line\">a = [[<span class=\"number\">1</span>, <span class=\"number\">2</span>], [<span class=\"number\">5</span>, <span class=\"number\">6</span>], [<span class=\"number\">8</span>, <span class=\"number\">9</span>]]</span><br><span class=\"line\">b = copy.copy(a)</span><br><span class=\"line\">c = copy.deepcopy(a)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">id</span>(a), <span class=\"built_in\">id</span>(b), <span class=\"built_in\">id</span>(c))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> x, y <span class=\"keyword\">in</span> <span class=\"built_in\">zip</span>(a, b):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">id</span>(x), <span class=\"built_in\">id</span>(y))  <span class=\"comment\"># 输出的id相同</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> x, y <span class=\"keyword\">in</span> <span class=\"built_in\">zip</span>(a, c):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">id</span>(x), <span class=\"built_in\">id</span>(y))  <span class=\"comment\"># 输出的id不同</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><ul>\n<li>1、赋值：简单地拷贝对象的引用，两个对象的id相同。</li>\n<li>2、浅拷贝：创建一个新的组合对象，这个新对象与原对象共享内存中的子对象。</li>\n<li>3、深拷贝：创建一个新的组合对象，同时递归地拷贝所有子对象，新的组合对象与原对象没有任何关联。虽然实际上会共享不可变的子对象，但不影响它们的相互独立性。</li>\n<li>4、浅拷贝和深拷贝的不同仅仅是对组合对象来说，所谓的组合对象就是包含了其它对象的对象，如列表，类实例。而对于数字、字符串以及其它“原子”类型，没有拷贝一说，产生的都是原对象的引用。</li>\n</ul>\n<h3 id=\"继承和实现的问题\"><a href=\"#继承和实现的问题\" class=\"headerlink\" title=\"继承和实现的问题\"></a>继承和实现的问题</h3><p>题目：类A、B、C、D、E，C继承于A，D继承于B，E继承于C、D，C中和B中都有demo()方法，问，调用E中的demo()，C和B中谁的demo()会被调用？</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;init A...&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">getoo</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;getoo&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;init B...&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">demo</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;B&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">C</span>(<span class=\"title class_ inherited__\">A</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(C, self).__init__()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;init C...&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">demo</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;C&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">D</span>(<span class=\"title class_ inherited__\">B</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(D, self).__init__()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;init D...&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">E</span>(D,C):  <span class=\"comment\"># 继承的先后顺序不一样，则输出结果是不一样的</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(E, self).__init__()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;init E...&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    e = E()</span><br><span class=\"line\">    e.demo()</span><br><span class=\"line\">    e.getoo()</span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">输出：</span></span><br><span class=\"line\"><span class=\"string\">init B...</span></span><br><span class=\"line\"><span class=\"string\">init D...</span></span><br><span class=\"line\"><span class=\"string\">init E...</span></span><br><span class=\"line\"><span class=\"string\">B</span></span><br><span class=\"line\"><span class=\"string\">getoo</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"元类的问题（metaclass）\"><a href=\"#元类的问题（metaclass）\" class=\"headerlink\" title=\"元类的问题（metaclass）\"></a>元类的问题（metaclass）</h3><p>元类就是用来创建这些类（对象）的，元类就是类的类。函数<code>type</code>实际上是一个元类。<code>type</code>就是Python在背后用来创建所有类的元类。<code>str</code>是用来创建字符串对象的类，而<code>int</code>是用来创建整数对象的类。<code>type</code>就是创建类对象的类。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">12</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(a.__class__)  <span class=\"comment\"># &lt;class &#x27;int&#x27;&gt;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(a.__class__.__class__)  <span class=\"comment\"># &lt;class &#x27;type&#x27;&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>你可以在写一个类的时候为其添加<code>__metaclass__</code>属性,定义了<code>__metaclass__</code>就定义了这个类的元类。</p>\n<hr>\n<h2 id=\"1月25之前\"><a href=\"#1月25之前\" class=\"headerlink\" title=\"1月25之前\"></a>1月25之前</h2><h3 id=\"1-需要在循环中使用索引，可以使用-enumerate-：\"><a href=\"#1-需要在循环中使用索引，可以使用-enumerate-：\" class=\"headerlink\" title=\"1. 需要在循环中使用索引，可以使用 enumerate() ：\"></a>1. 需要在循环中使用索引，可以使用 <code>enumerate()</code> ：</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> index, value <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(alist):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(index, value)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-需要同时迭代两个循环，用同一个索引来获取两个值，可以用-zip\"><a href=\"#2-需要同时迭代两个循环，用同一个索引来获取两个值，可以用-zip\" class=\"headerlink\" title=\"2.  需要同时迭代两个循环，用同一个索引来获取两个值，可以用 zip()\"></a>2.  需要同时迭代两个循环，用同一个索引来获取两个值，可以用 <code>zip()</code></h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> word, number <span class=\"keyword\">in</span> <span class=\"built_in\">zip</span>(words, numbers):</span><br><span class=\"line\">    <span class=\"built_in\">print</span> word, number  <span class=\"comment\"># 其中一个迭代结束，就结束迭代了</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-python3中xrange-已经不存在了，range-已经实现了xrange的功能。range的一个重要用法是当你真正想要生成一个数字序列而不是用来生成索引。\"><a href=\"#3-python3中xrange-已经不存在了，range-已经实现了xrange的功能。range的一个重要用法是当你真正想要生成一个数字序列而不是用来生成索引。\" class=\"headerlink\" title=\"3. python3中xrange()已经不存在了，range()已经实现了xrange的功能。range的一个重要用法是当你真正想要生成一个数字序列而不是用来生成索引。\"></a>3. python3中xrange()已经不存在了，range()已经实现了xrange的功能。range的一个重要用法是当你真正想要生成一个数字序列而不是用来生成索引。</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">100</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(i, end=<span class=\"string\">&quot; &quot;</span>)  <span class=\"comment\"># 打印 0 - 99</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-正确使用列表解析\"><a href=\"#4-正确使用列表解析\" class=\"headerlink\" title=\"4. 正确使用列表解析\"></a>4. 正确使用列表解析</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">numbers = [i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>)]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-Python中set的元素和dict的键值是可哈希的，因此查找起来时间复杂度为O-1-。\"><a href=\"#5-Python中set的元素和dict的键值是可哈希的，因此查找起来时间复杂度为O-1-。\" class=\"headerlink\" title=\"5. Python中set的元素和dict的键值是可哈希的，因此查找起来时间复杂度为O(1)。\"></a>5. Python中set的元素和dict的键值是可哈希的，因此查找起来时间复杂度为O(1)。</h3><p>创建set引入的是一次性开销，创建过程将花费线性时间即使成员检查花费常数时间。因此如果你需要在循环里检查成员，最好先花时间创建set，因为你只需要创建一次。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nlist = [<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">nset = <span class=\"built_in\">set</span>(nlist)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> i <span class=\"keyword\">in</span> nset:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(i)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-测试是否为空\"><a href=\"#6-测试是否为空\" class=\"headerlink\" title=\"6. 测试是否为空\"></a>6. 测试是否为空</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">number = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">l_number = [i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> number <span class=\"keyword\">if</span> i &gt; <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"keyword\">if</span> l_number:</span><br><span class=\"line\">    <span class=\"comment\"># Do something awesome</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-测试是否为None-\"><a href=\"#7-测试是否为None-\" class=\"headerlink\" title=\"7. 测试是否为None \"></a>7. 测试是否为None </h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> x <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"comment\"># Do something awesome</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8-测试变量是否为一些有用的值\"><a href=\"#8-测试变量是否为一些有用的值\" class=\"headerlink\" title=\"8. 测试变量是否为一些有用的值\"></a>8. 测试变量是否为一些有用的值</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> x:</span><br><span class=\"line\">    <span class=\"comment\"># Do something awesome</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9-逻辑判断（比如if）时，Python当中等于False的值\"><a href=\"#9-逻辑判断（比如if）时，Python当中等于False的值\" class=\"headerlink\" title=\"9. 逻辑判断（比如if）时，Python当中等于False的值:\"></a>9. 逻辑判断（比如if）时，Python当中等于False的值:</h3><ul>\n<li>布尔型，False表示False，其他为True</li>\n<li>整数和浮点数，0表示False，其他为True</li>\n<li>字符串和类字符串类型（包括bytes和unicode），空字符串表示False，其他为True序列类型（包括tuple，list，dict，set等），空表示False，非空表示True</li>\n<li>None永远表示False</li>\n</ul>\n<h3 id=\"10-到底什么是Python？你可以在回答中与其他技术进行对比（也鼓励这样做）。\"><a href=\"#10-到底什么是Python？你可以在回答中与其他技术进行对比（也鼓励这样做）。\" class=\"headerlink\" title=\"10. 到底什么是Python？你可以在回答中与其他技术进行对比（也鼓励这样做）。\"></a>10. 到底什么是Python？你可以在回答中与其他技术进行对比（也鼓励这样做）。</h3><p>下面是一些关键点：</p>\n<ul>\n<li><strong>Python是一种解释型语言</strong>。这就是说，与C语言和C的衍生语言不同，Python代码在运行之前不需要编译。其他解释型语言还包括PHP和Ruby。</li>\n<li><strong>Python是动态类型语言</strong>。指的是你在声明变量时，不需要说明变量的类型。你可以直接编写类似x&#x3D;111和x&#x3D;”I’m a string”这样的代码，程序不会报错。</li>\n<li><strong>Python非常适合面向对象的编程（OOP）。</strong> 因为它支持通过组合（composition）与继承（inheritance）的方式定义类（class）。Python中没有访问说明符（access specifier，类似C++中的public和private），这么设计的依据是“大家都是成年人了”。</li>\n<li><strong>函数是第一类对象（first-class objects）。</strong> 这指的是它们可以被指定给变量，函数既能返回函数类型，也可以接受函数作为输入。<strong>类（class）也是第一类对象</strong>。</li>\n<li><strong>Python代码编写快，但是运行速度比编译语言通常要慢。</strong> 好在Python允许加入基于C语言编写的扩展，因此我们能够优化代码，消除瓶颈，这点通常是可以实现的。numpy就是一个很好地例子，它的运行速度真的非常快，因为很多算术运算其实并不是通过Python实现的。</li>\n<li>Python用途非常广泛——网络应用，自动化，科学建模，大数据应用，等等。它也常被用作“胶水语言”，帮助其他语言和组件改善运行状况。</li>\n<li>Python让困难的事情变得容易，因此程序员可以专注于算法和数据结构的设计，而不用处理底层的细节</li>\n</ul>\n<h3 id=\"dict的get\"><a href=\"#dict的get\" class=\"headerlink\" title=\"dict的get():\"></a>dict的get():</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sum</span> = &#123;&#125;</span><br><span class=\"line\">value = <span class=\"string\">&#x27;a&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">sum</span>[value] = <span class=\"built_in\">sum</span>.get(value, <span class=\"number\">0</span>) + <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"其他的零碎\"><a href=\"#其他的零碎\" class=\"headerlink\" title=\"其他的零碎\"></a>其他的零碎</h3><ul>\n<li>字符串切片，迭代器，with as  结构，in is关键字</li>\n<li>a &#x3D; 1 if c else 2  等同其他语言的三元运算符。</li>\n</ul>\n<hr>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>2018年，新的开始，所以我用Python3.x啦，除了原有项目的维护外，全面升级到python3，人生苦短，就用python</p>\n</blockquote>\n<h2 id=\"7月3日\"><a href=\"#7月3日\" class=\"headerlink\" title=\"7月3日\"></a>7月3日</h2><p>记住一句话：</p>\n<blockquote>\n<p>当我们叠加装饰器的时候，<strong>最上层的装饰器会首先运行</strong>，接着调用下一行的下一个函数：要么是视图函数，要么就是装饰器。</p>\n</blockquote>\n<h2 id=\"6月26日\"><a href=\"#6月26日\" class=\"headerlink\" title=\"6月26日\"></a>6月26日</h2><p>值得参考的python<a href=\"https://taizilongxu.gitbooks.io/stackoverflow-about-python/content/1/README.html\">点击这里</a></p>\n<h3 id=\"字符串格式化：-和-format\"><a href=\"#字符串格式化：-和-format\" class=\"headerlink\" title=\"字符串格式化：% 和.format\"></a>字符串格式化：% 和.format</h3><p>.format 在很多方便看起来更便利，对于 % 最烦人的是它无法同时传递一个变量和元祖，例如以下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;hi there %s&quot; % name </span><br></pre></td></tr></table></figure>\n<p>但是，如果name恰好是(1, 2, 3）,它会抛出一个TypeError异常.为了保证它总是正确的,你必须这样做:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;hi there %s&quot; % (name,)   # 提供一个单元素的数组而不是一个参数</span><br></pre></td></tr></table></figure>\n<p>但是有点丑..format就没有这些问题.你给的第二个问题也是这样,.format好看多了.</p>\n<h3 id=\"字典推导式\"><a href=\"#字典推导式\" class=\"headerlink\" title=\"字典推导式\"></a>字典推导式</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d = &#123;key: value for (key, value) in iterable&#125;</span><br></pre></td></tr></table></figure>","more":"<h2 id=\"3月12日\"><a href=\"#3月12日\" class=\"headerlink\" title=\"3月12日\"></a>3月12日</h2><h3 id=\"ubuntu系统中不同版本pythoh存在的应用问题\"><a href=\"#ubuntu系统中不同版本pythoh存在的应用问题\" class=\"headerlink\" title=\"ubuntu系统中不同版本pythoh存在的应用问题\"></a>ubuntu系统中不同版本pythoh存在的应用问题</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 -m pip install xxx </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"windows系统中不同版本python存在的应用问题\"><a href=\"#windows系统中不同版本python存在的应用问题\" class=\"headerlink\" title=\"windows系统中不同版本python存在的应用问题\"></a>windows系统中不同版本python存在的应用问题</h3><ul>\n<li>在windows系统中，同时存在python3.x和python2.x：</li>\n</ul>\n<p>命令：<code>py -2</code> 启动python2.7的交互解释器；<code>py -3</code> 启动python3.x的交互解释器</p>\n<ul>\n<li>如何使用不同版本的pip：</li>\n</ul>\n<p>命令：<code>py -2 -m pip</code> 使用2.x的pip；<code>py -3 -m pip</code> 使用3.x的pip</p>\n<ul>\n<li>pycharm使用不同版本的python</li>\n</ul>\n<!--more-->\n\n\n<h2 id=\"2月28日\"><a href=\"#2月28日\" class=\"headerlink\" title=\"2月28日\"></a>2月28日</h2><p>补充：</p>\n<h3 id=\"new-和-init-的区别\"><a href=\"#new-和-init-的区别\" class=\"headerlink\" title=\"__new__和__init__的区别\"></a><code>__new__</code>和<code>__init__</code>的区别</h3><ul>\n<li><code>__init__</code>为初始化方法，<code>__new__</code>方法是真正的构造函数。</li>\n<li><code>__new__</code>是实例创建之前被调用，它的任务是创建并返回该实例，是静态方法</li>\n<li><code>__init__</code>是实例创建之后被调用的，然后设置对象属性的一些初始值。</li>\n</ul>\n<p>总结：<code>__new__</code>方法在<code>__init__</code>方法之前被调用，并且<code>__new__</code>方法的返回值将传递给<code>__init__</code>方法作为第一个参数，最后<code>__init__</code>给这个实例设置一些参数。</p>\n<h3 id=\"python的自省\"><a href=\"#python的自省\" class=\"headerlink\" title=\"python的自省\"></a>python的自省</h3><p>自省就是面向对象的语言所写的程序在运行时，所能知道对象的类型。简单一句话就是运行时能够获得对象的类型。比如：<code>type()</code>、<code>dir()</code>、<code>getattr()</code>、<code>hasattr()</code>、<code>isinstance()</code></p>\n<h2 id=\"1月26日\"><a href=\"#1月26日\" class=\"headerlink\" title=\"1月26日\"></a>1月26日</h2><p>以下是根据面试的<a href=\"https://suadminwen.github.io/2018/02/26/%E5%B0%8F%E4%BD%99%E6%95%99%E8%82%B2%E9%9D%A2%E7%BB%8F%E5%8F%8A%E6%95%B4%E7%90%86/\">笔试题</a>整理的部分相关知识：</p>\n<h3 id=\"字符串前添加的r、u、b的含义。\"><a href=\"#字符串前添加的r、u、b的含义。\" class=\"headerlink\" title=\"字符串前添加的r、u、b的含义。\"></a>字符串前添加的<code>r</code>、<code>u</code>、<code>b</code>的含义。</h3><ul>\n<li><code>u/U</code>: 表示unicode字符串。</li>\n<li><code>r/R</code>: 非转义的原始字符串。以r开头的字符，常用于正则表达式，对应着re模块。</li>\n<li><code>b</code>: bytes</li>\n</ul>\n<p><strong>注意：</strong></p>\n<p>python3里默认的<code>str</code>是(py2.x里的)<code>unicode</code>, <code>bytes</code>是(py2.x)的<code>str</code>, <code>b&quot;&quot;</code>前缀代表的就是<code>bytes</code><br>python2里, <code>b</code>前缀没什么具体意义。</p>\n<h3 id=\"生成器和迭代器参看这里\"><a href=\"#生成器和迭代器参看这里\" class=\"headerlink\" title=\"生成器和迭代器参看这里\"></a>生成器和迭代器<a href=\"https://suadminwen.github.io/2017/09/09/%E5%B0%8F%E8%AE%BApython%E7%9A%84%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%92%8C%E7%94%9F%E6%88%90%E5%99%A8/\">参看这里</a></h3><h3 id=\"切片和切片步长的问题。\"><a href=\"#切片和切片步长的问题。\" class=\"headerlink\" title=\"切片和切片步长的问题。\"></a>切片和切片步长的问题。</h3><p>对于具有序列结构的数据来说，切片操作的方法是：consequence[start_index: end_index: step]</p>\n<ul>\n<li>start_index：表示是第一个元素对象，正索引位置默认为0；负索引位置默认为 -len(consequence)</li>\n<li>end_index：表示是最后一个元素对象，正索引位置默认为 len(consequence)－1；负索引位置默认为 -1。</li>\n<li>step：表示取值的步长，默认为1，步长值不能为0。</li>\n</ul>\n<p>利用步长对序列进行倒序取值：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=[1,2,3,4,5,6,7]</span><br><span class=\"line\">print(a[::-1])  # 这里不会改变a的结构</span><br><span class=\"line\">a.reverse()  # 这里a的结构被改变了</span><br><span class=\"line\">print(a)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"垃圾回收机制和循环引用问题\"><a href=\"#垃圾回收机制和循环引用问题\" class=\"headerlink\" title=\"垃圾回收机制和循环引用问题\"></a>垃圾回收机制和循环引用问题</h3><p>Python的GC模块主要运用了 <strong>“引用计数”（reference counting）</strong> 来跟踪和回收垃圾。在引用计数的基础上，还可以通过 <strong>“标记-清除”（mark and sweep）</strong> 解决容器对象可能产生的循环引用的问题。通过 <strong>“分代回收”（generation collection）</strong> 以空间换取时间来进一步提高垃圾回收的效率。<a href=\"http://python.jobbole.com/82061/\">详细参考这里</a></p>\n<h4 id=\"引用计数\"><a href=\"#引用计数\" class=\"headerlink\" title=\"引用计数\"></a>引用计数</h4><p>PyObject是每个对象必有的内容，其中ob_refcnt就是做为引用计数。当一个对象有新的引用时，它的ob_refcnt就会增加，当引用它的对象被删除，它的ob_refcnt就会减少.引用计数为0时，该对象生命就结束了。</p>\n<h4 id=\"标记-清除机制\"><a href=\"#标记-清除机制\" class=\"headerlink\" title=\"标记-清除机制\"></a>标记-清除机制</h4><p>基本思路是先按需分配，等到没有空闲内存的时候从寄存器和程序栈上的引用出发，遍历以对象为节点、以引用为边构成的图，把所有可以访问到的对象打上标记，然后清扫一遍内存空间，把所有没标记的对象释放。</p>\n<h4 id=\"分代技术\"><a href=\"#分代技术\" class=\"headerlink\" title=\"分代技术\"></a>分代技术</h4><p>分代回收的整体思想是：将系统中的所有内存块根据其存活时间划分为不同的集合，每个集合就成为一个“代”，垃圾收集频率随着“代”的存活时间的增大而减小，存活时间通常利用经过几次垃圾回收来度量。</p>\n<p>Python默认定义了三代对象集合，索引数越大，对象存活时间越长。</p>\n<p>举例： 当某些内存块M经过了3次垃圾收集的清洗之后还存活时，我们就将内存块M划到一个集合A中去，而新分配的内存都划分到集合B中去。当垃圾收集开始工作时，大多数情况都只对集合B进行垃圾回收，而对集合A进行垃圾回收要隔相当长一段时间后才进行，这就使得垃圾收集机制需要处理的内存少了，效率自然就提高了。在这个过程中，集合B中的某些内存块由于存活时间长而会被转移到集合A中，当然，集合A中实际上也存在一些垃圾，这些垃圾的回收会因为这种分代的机制而被延迟。</p>\n<h3 id=\"staticmethod-与classmethod-的区别\"><a href=\"#staticmethod-与classmethod-的区别\" class=\"headerlink\" title=\"staticmethod()与classmethod()的区别\"></a><code>staticmethod()</code>与<code>classmethod()</code>的区别</h3><p>一般来说，要使用某个类的方法，需要先实例化一个对象再调用方法。而使用<code>@staticmethod</code>或<code>@classmethod</code>，就可以不需要实例化，直接类名.方法名()来调用。</p>\n<ul>\n<li><code>@staticmethod</code>不需要表示自身对象的<code>self</code>和自身类的<code>cls</code>参数，就跟使用函数一样。</li>\n<li><code>@classmethod也</code>不需要<code>self</code>参数，但第一个参数需要是表示自身类的<code>cls</code>参数。(<code>cls</code>:它表示这个类本身。)</li>\n</ul>\n<p>如果在<code>@staticmethod</code>中要调用到这个类的一些属性方法，只能直接类名.属性名或类名.方法名。而<code>@classmethod</code>因为持有<code>cls</code>参数，可以来调用类的属性，类的方法，实例化对象等，避免硬编码。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span>(<span class=\"title class_ inherited__\">object</span>):  </span><br><span class=\"line\">    bar = <span class=\"number\">1</span>  </span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">foo</span>(<span class=\"params\">self</span>):  </span><br><span class=\"line\">        <span class=\"built_in\">print</span> <span class=\"string\">&#x27;foo&#x27;</span>  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @staticmethod  </span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">static_foo</span>():  </span><br><span class=\"line\">        <span class=\"built_in\">print</span> <span class=\"string\">&#x27;static_foo&#x27;</span>  </span><br><span class=\"line\">        <span class=\"built_in\">print</span> A.bar  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @classmethod  </span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">class_foo</span>(<span class=\"params\">cls</span>):  </span><br><span class=\"line\">        <span class=\"built_in\">print</span> <span class=\"string\">&#x27;class_foo&#x27;</span>  </span><br><span class=\"line\">        <span class=\"built_in\">print</span> cls.bar  </span><br><span class=\"line\">        cls().foo()    <span class=\"comment\"># 这里需要注意的是cls()</span></span><br><span class=\"line\"><span class=\"comment\">###执行  </span></span><br><span class=\"line\">A.static_foo()  </span><br><span class=\"line\">A.class_foo()  </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"python中的单例模式\"><a href=\"#python中的单例模式\" class=\"headerlink\" title=\"python中的单例模式\"></a>python中的单例模式</h3><p><strong>单例模式（Singleton Pattern）</strong> 是一种常用的软件设计模式，该模式的主要目的是确保某一个类只有一个实例存在。[]参考](<a href=\"https://funhacks.net/2017/01/17/singleton/\">https://funhacks.net/2017/01/17/singleton/</a>)</p>\n<h4 id=\"使用模块\"><a href=\"#使用模块\" class=\"headerlink\" title=\"使用模块\"></a>使用模块</h4><p><strong>Python 的模块就是天然的单例模式，因为模块在第一次导入时，会生成 .pyc 文件，当第二次导入时，就会直接加载 .pyc 文件，而不会再次执行模块代码。</strong> 因此，我们只需把相关的函数和数据定义在一个模块中，就可以获得一个单例对象了。如果我们真的想要一个单例类，可以考虑这样做：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># mysingleton.py</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">My_Singleton</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">foo</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">my_singleton = My_Singleton()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># test.py</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> mysingleton <span class=\"keyword\">import</span> my_singleton</span><br><span class=\"line\"></span><br><span class=\"line\">my_singleton.foo()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用-new\"><a href=\"#使用-new\" class=\"headerlink\" title=\"使用 __new__\"></a>使用 <code>__new__</code></h4><p>使用 <code>__new__</code> 来控制实例的创建过程</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Singleton</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">    _instance = <span class=\"literal\">None</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__new__</span>(<span class=\"params\">cls, *args, **kw</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> cls._instance:</span><br><span class=\"line\">            cls._instance = <span class=\"built_in\">super</span>(Singleton, cls).__new__(cls, *args, **kw)  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> cls._instance  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span>(<span class=\"title class_ inherited__\">Singleton</span>):  </span><br><span class=\"line\">    a = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用装饰器\"><a href=\"#使用装饰器\" class=\"headerlink\" title=\"使用装饰器\"></a>使用装饰器</h4><p>装饰器（decorator）可以动态地修改一个类或函数的功能。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">singleton</span>(<span class=\"params\">cls, *args, **kw</span>):</span><br><span class=\"line\">    instance = &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get_singleton</span>():</span><br><span class=\"line\">        <span class=\"keyword\">if</span> cls <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> instance:</span><br><span class=\"line\">            instance[cls] = cls(*args, **kw)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance[cls]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> get_singleton</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@singleton</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TT</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.num = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">add</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.num = <span class=\"number\">100</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    a = TT()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(a.num)  <span class=\"comment\"># 0</span></span><br><span class=\"line\">    a.add()</span><br><span class=\"line\">    b = TT()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(b.num)  <span class=\"comment\"># 100</span></span><br></pre></td></tr></table></figure>\n\n<p>虽然进行了两次实例化，但仍为同一个实例</p>\n<h4 id=\"使用-元类-metaclass\"><a href=\"#使用-元类-metaclass\" class=\"headerlink\" title=\"使用 元类(metaclass)\"></a>使用 元类(metaclass)</h4><p>后面会有专门的一部分来整理元类的问题</p>\n<h3 id=\"浅拷贝和深拷贝的区别\"><a href=\"#浅拷贝和深拷贝的区别\" class=\"headerlink\" title=\"浅拷贝和深拷贝的区别\"></a>浅拷贝和深拷贝的区别</h3><p>这篇<a href=\"http://songlee24.github.io/2014/08/15/python-FAQ-02/\">文章</a>很好理解!</p>\n<h4 id=\"浅拷贝\"><a href=\"#浅拷贝\" class=\"headerlink\" title=\"浅拷贝\"></a>浅拷贝</h4><p>浅拷贝（shallow copy）指创建一个新的对象，其内容是原对象中元素的引用。（拷贝父对象，不拷贝子对象）</p>\n<p>常见的浅拷贝有：<strong>切片操作</strong>、<strong>工厂函数</strong>、<strong>对象的copy()</strong> 方法、<strong>copy模块中的copy函数</strong>。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">b = <span class=\"built_in\">list</span>(a)  <span class=\"comment\"># 这里是浅拷贝</span></span><br><span class=\"line\">c = a  <span class=\"comment\"># 这里为赋值</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">id</span>(a), <span class=\"built_in\">id</span>(b), <span class=\"built_in\">id</span>(c))  <span class=\"comment\"># 2130788487752 2130788487880 2130788487752 a与c指向相同</span></span><br><span class=\"line\">a.append(<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(a, b, c)  <span class=\"comment\"># [1, 2, 3, 4] [1, 2, 3] [1, 2, 3]</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"深拷贝\"><a href=\"#深拷贝\" class=\"headerlink\" title=\"深拷贝\"></a>深拷贝</h4><p>深拷贝（deep copy）是指创建一个新的对象，然后递归的拷贝父对象和子对象。深拷贝出来的对象与原对象没有任何关联。</p>\n<p>深拷贝只有一种方式：copy模块中的deepcopy函数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> copy</span><br><span class=\"line\"></span><br><span class=\"line\">a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">b = copy.deepcopy(a)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">id</span>(a), <span class=\"built_in\">id</span>(b))</span><br></pre></td></tr></table></figure>\n\n<p>对于不可变对象，当需要一个新的对象时，python可能会返回已经存在的某个类型和值都一致的对象的引用。而且这种机制并不会影响 a 和 b 的相互独立性，因为当两个元素指向同一个不可变对象时，对其中一个赋值不会影响另外一个。</p>\n<h4 id=\"用一个包含可变对象的列表来确切地展示“浅拷贝”与“深拷贝”的区别：\"><a href=\"#用一个包含可变对象的列表来确切地展示“浅拷贝”与“深拷贝”的区别：\" class=\"headerlink\" title=\"用一个包含可变对象的列表来确切地展示“浅拷贝”与“深拷贝”的区别：\"></a>用一个包含可变对象的列表来确切地展示“浅拷贝”与“深拷贝”的区别：</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> copy</span><br><span class=\"line\">a = [[<span class=\"number\">1</span>, <span class=\"number\">2</span>], [<span class=\"number\">5</span>, <span class=\"number\">6</span>], [<span class=\"number\">8</span>, <span class=\"number\">9</span>]]</span><br><span class=\"line\">b = copy.copy(a)</span><br><span class=\"line\">c = copy.deepcopy(a)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">id</span>(a), <span class=\"built_in\">id</span>(b), <span class=\"built_in\">id</span>(c))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> x, y <span class=\"keyword\">in</span> <span class=\"built_in\">zip</span>(a, b):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">id</span>(x), <span class=\"built_in\">id</span>(y))  <span class=\"comment\"># 输出的id相同</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> x, y <span class=\"keyword\">in</span> <span class=\"built_in\">zip</span>(a, c):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"built_in\">id</span>(x), <span class=\"built_in\">id</span>(y))  <span class=\"comment\"># 输出的id不同</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><ul>\n<li>1、赋值：简单地拷贝对象的引用，两个对象的id相同。</li>\n<li>2、浅拷贝：创建一个新的组合对象，这个新对象与原对象共享内存中的子对象。</li>\n<li>3、深拷贝：创建一个新的组合对象，同时递归地拷贝所有子对象，新的组合对象与原对象没有任何关联。虽然实际上会共享不可变的子对象，但不影响它们的相互独立性。</li>\n<li>4、浅拷贝和深拷贝的不同仅仅是对组合对象来说，所谓的组合对象就是包含了其它对象的对象，如列表，类实例。而对于数字、字符串以及其它“原子”类型，没有拷贝一说，产生的都是原对象的引用。</li>\n</ul>\n<h3 id=\"继承和实现的问题\"><a href=\"#继承和实现的问题\" class=\"headerlink\" title=\"继承和实现的问题\"></a>继承和实现的问题</h3><p>题目：类A、B、C、D、E，C继承于A，D继承于B，E继承于C、D，C中和B中都有demo()方法，问，调用E中的demo()，C和B中谁的demo()会被调用？</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;init A...&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">getoo</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;getoo&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;init B...&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">demo</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;B&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">C</span>(<span class=\"title class_ inherited__\">A</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(C, self).__init__()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;init C...&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">demo</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;C&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">D</span>(<span class=\"title class_ inherited__\">B</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(D, self).__init__()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;init D...&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">E</span>(D,C):  <span class=\"comment\"># 继承的先后顺序不一样，则输出结果是不一样的</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(E, self).__init__()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;init E...&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    e = E()</span><br><span class=\"line\">    e.demo()</span><br><span class=\"line\">    e.getoo()</span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">输出：</span></span><br><span class=\"line\"><span class=\"string\">init B...</span></span><br><span class=\"line\"><span class=\"string\">init D...</span></span><br><span class=\"line\"><span class=\"string\">init E...</span></span><br><span class=\"line\"><span class=\"string\">B</span></span><br><span class=\"line\"><span class=\"string\">getoo</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"元类的问题（metaclass）\"><a href=\"#元类的问题（metaclass）\" class=\"headerlink\" title=\"元类的问题（metaclass）\"></a>元类的问题（metaclass）</h3><p>元类就是用来创建这些类（对象）的，元类就是类的类。函数<code>type</code>实际上是一个元类。<code>type</code>就是Python在背后用来创建所有类的元类。<code>str</code>是用来创建字符串对象的类，而<code>int</code>是用来创建整数对象的类。<code>type</code>就是创建类对象的类。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">12</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(a.__class__)  <span class=\"comment\"># &lt;class &#x27;int&#x27;&gt;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(a.__class__.__class__)  <span class=\"comment\"># &lt;class &#x27;type&#x27;&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>你可以在写一个类的时候为其添加<code>__metaclass__</code>属性,定义了<code>__metaclass__</code>就定义了这个类的元类。</p>\n<hr>\n<h2 id=\"1月25之前\"><a href=\"#1月25之前\" class=\"headerlink\" title=\"1月25之前\"></a>1月25之前</h2><h3 id=\"1-需要在循环中使用索引，可以使用-enumerate-：\"><a href=\"#1-需要在循环中使用索引，可以使用-enumerate-：\" class=\"headerlink\" title=\"1. 需要在循环中使用索引，可以使用 enumerate() ：\"></a>1. 需要在循环中使用索引，可以使用 <code>enumerate()</code> ：</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> index, value <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(alist):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(index, value)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-需要同时迭代两个循环，用同一个索引来获取两个值，可以用-zip\"><a href=\"#2-需要同时迭代两个循环，用同一个索引来获取两个值，可以用-zip\" class=\"headerlink\" title=\"2.  需要同时迭代两个循环，用同一个索引来获取两个值，可以用 zip()\"></a>2.  需要同时迭代两个循环，用同一个索引来获取两个值，可以用 <code>zip()</code></h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> word, number <span class=\"keyword\">in</span> <span class=\"built_in\">zip</span>(words, numbers):</span><br><span class=\"line\">    <span class=\"built_in\">print</span> word, number  <span class=\"comment\"># 其中一个迭代结束，就结束迭代了</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-python3中xrange-已经不存在了，range-已经实现了xrange的功能。range的一个重要用法是当你真正想要生成一个数字序列而不是用来生成索引。\"><a href=\"#3-python3中xrange-已经不存在了，range-已经实现了xrange的功能。range的一个重要用法是当你真正想要生成一个数字序列而不是用来生成索引。\" class=\"headerlink\" title=\"3. python3中xrange()已经不存在了，range()已经实现了xrange的功能。range的一个重要用法是当你真正想要生成一个数字序列而不是用来生成索引。\"></a>3. python3中xrange()已经不存在了，range()已经实现了xrange的功能。range的一个重要用法是当你真正想要生成一个数字序列而不是用来生成索引。</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">100</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(i, end=<span class=\"string\">&quot; &quot;</span>)  <span class=\"comment\"># 打印 0 - 99</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-正确使用列表解析\"><a href=\"#4-正确使用列表解析\" class=\"headerlink\" title=\"4. 正确使用列表解析\"></a>4. 正确使用列表解析</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">numbers = [i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>)]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-Python中set的元素和dict的键值是可哈希的，因此查找起来时间复杂度为O-1-。\"><a href=\"#5-Python中set的元素和dict的键值是可哈希的，因此查找起来时间复杂度为O-1-。\" class=\"headerlink\" title=\"5. Python中set的元素和dict的键值是可哈希的，因此查找起来时间复杂度为O(1)。\"></a>5. Python中set的元素和dict的键值是可哈希的，因此查找起来时间复杂度为O(1)。</h3><p>创建set引入的是一次性开销，创建过程将花费线性时间即使成员检查花费常数时间。因此如果你需要在循环里检查成员，最好先花时间创建set，因为你只需要创建一次。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nlist = [<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">nset = <span class=\"built_in\">set</span>(nlist)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> i <span class=\"keyword\">in</span> nset:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(i)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-测试是否为空\"><a href=\"#6-测试是否为空\" class=\"headerlink\" title=\"6. 测试是否为空\"></a>6. 测试是否为空</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">number = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">l_number = [i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> number <span class=\"keyword\">if</span> i &gt; <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"keyword\">if</span> l_number:</span><br><span class=\"line\">    <span class=\"comment\"># Do something awesome</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-测试是否为None-\"><a href=\"#7-测试是否为None-\" class=\"headerlink\" title=\"7. 测试是否为None \"></a>7. 测试是否为None </h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> x <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"comment\"># Do something awesome</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8-测试变量是否为一些有用的值\"><a href=\"#8-测试变量是否为一些有用的值\" class=\"headerlink\" title=\"8. 测试变量是否为一些有用的值\"></a>8. 测试变量是否为一些有用的值</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> x:</span><br><span class=\"line\">    <span class=\"comment\"># Do something awesome</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9-逻辑判断（比如if）时，Python当中等于False的值\"><a href=\"#9-逻辑判断（比如if）时，Python当中等于False的值\" class=\"headerlink\" title=\"9. 逻辑判断（比如if）时，Python当中等于False的值:\"></a>9. 逻辑判断（比如if）时，Python当中等于False的值:</h3><ul>\n<li>布尔型，False表示False，其他为True</li>\n<li>整数和浮点数，0表示False，其他为True</li>\n<li>字符串和类字符串类型（包括bytes和unicode），空字符串表示False，其他为True序列类型（包括tuple，list，dict，set等），空表示False，非空表示True</li>\n<li>None永远表示False</li>\n</ul>\n<h3 id=\"10-到底什么是Python？你可以在回答中与其他技术进行对比（也鼓励这样做）。\"><a href=\"#10-到底什么是Python？你可以在回答中与其他技术进行对比（也鼓励这样做）。\" class=\"headerlink\" title=\"10. 到底什么是Python？你可以在回答中与其他技术进行对比（也鼓励这样做）。\"></a>10. 到底什么是Python？你可以在回答中与其他技术进行对比（也鼓励这样做）。</h3><p>下面是一些关键点：</p>\n<ul>\n<li><strong>Python是一种解释型语言</strong>。这就是说，与C语言和C的衍生语言不同，Python代码在运行之前不需要编译。其他解释型语言还包括PHP和Ruby。</li>\n<li><strong>Python是动态类型语言</strong>。指的是你在声明变量时，不需要说明变量的类型。你可以直接编写类似x&#x3D;111和x&#x3D;”I’m a string”这样的代码，程序不会报错。</li>\n<li><strong>Python非常适合面向对象的编程（OOP）。</strong> 因为它支持通过组合（composition）与继承（inheritance）的方式定义类（class）。Python中没有访问说明符（access specifier，类似C++中的public和private），这么设计的依据是“大家都是成年人了”。</li>\n<li><strong>函数是第一类对象（first-class objects）。</strong> 这指的是它们可以被指定给变量，函数既能返回函数类型，也可以接受函数作为输入。<strong>类（class）也是第一类对象</strong>。</li>\n<li><strong>Python代码编写快，但是运行速度比编译语言通常要慢。</strong> 好在Python允许加入基于C语言编写的扩展，因此我们能够优化代码，消除瓶颈，这点通常是可以实现的。numpy就是一个很好地例子，它的运行速度真的非常快，因为很多算术运算其实并不是通过Python实现的。</li>\n<li>Python用途非常广泛——网络应用，自动化，科学建模，大数据应用，等等。它也常被用作“胶水语言”，帮助其他语言和组件改善运行状况。</li>\n<li>Python让困难的事情变得容易，因此程序员可以专注于算法和数据结构的设计，而不用处理底层的细节</li>\n</ul>\n<h3 id=\"dict的get\"><a href=\"#dict的get\" class=\"headerlink\" title=\"dict的get():\"></a>dict的get():</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sum</span> = &#123;&#125;</span><br><span class=\"line\">value = <span class=\"string\">&#x27;a&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">sum</span>[value] = <span class=\"built_in\">sum</span>.get(value, <span class=\"number\">0</span>) + <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"其他的零碎\"><a href=\"#其他的零碎\" class=\"headerlink\" title=\"其他的零碎\"></a>其他的零碎</h3><ul>\n<li>字符串切片，迭代器，with as  结构，in is关键字</li>\n<li>a &#x3D; 1 if c else 2  等同其他语言的三元运算符。</li>\n</ul>\n<hr>"},{"title":"python持续集成之尝鲜","date":"2018-02-09T16:00:00.000Z","_content":"\n**驱动测试** 和 **持续集成** 的概念正在一点一点的“腐蚀”我的思想，不去尝尝鲜便发现坐立不安。这不，这日，来了。环境是用两台虚拟机，一台用作gitlab的服务器，另外一台为jenkins的服务器，这就happy起来啦！\n\n以下是正文，学习参考自：[这里](http://www.cnblogs.com/beer/p/5083653.html)\n---\n\n**持续集成（Continuous integration）** 是一种软件开发实践，即团队开发成员经常集成它们的工作，通过每个成员每天至少集成一次，也就意味着每天可能会发生多次集成。每次集成都通过自动化的构建（包括编译，发布，自动化测试）来验证，从而尽早地发现集成错误.\n\n<!--more-->\n\n## 持续集成的角色划分：\n\n- 开发人员\n  + 编写开发相关代码\n- 测试人员\n  + 设计自动化测试用例\n  + 编写自动化测试相关代码\n- 发布人员\n  + 设置自动化发布方案\n  + 编写自动化发布相关代码\n- 运维人员\n  + 设置自动化运维方案\n  + 编写自动化运维相关代码\n\n持续集成的典型的工具就是开源系统 Jenkins。\n\n## 后期迭代工作流：\n\n- 开发人员向git服务器指定分支提交了新的代码\n- git服务器的 webhook 接收到提交事件后向 Jenkins 服务器指定接口发起请求，执行构建脚本\n- Jenkins 服务器顺序执行构建脚本\n  + 从git服务器上面同步代码\n  + 执行自动构建脚本，生成交付物\n  + 自动搭建测试环境\n- Jenkins 执行自动化测试脚本\n- Jenkins 向 自动化发布 系统发起请求\n- 自动化发布系统 进行自动灰度发布\n- 触发 自动化测试系统\n- 逐步全网发布\n\n## 实际操作：\n![这是本地图片测试，图床一段时间之后就失效了](/blog-img/2018021001.png)\n","source":"_posts/python持续集成之尝鲜.md","raw":"---\ntitle: python持续集成之尝鲜\ndate: 2018-2-10\ntags: [python, TDD]\n---\n\n**驱动测试** 和 **持续集成** 的概念正在一点一点的“腐蚀”我的思想，不去尝尝鲜便发现坐立不安。这不，这日，来了。环境是用两台虚拟机，一台用作gitlab的服务器，另外一台为jenkins的服务器，这就happy起来啦！\n\n以下是正文，学习参考自：[这里](http://www.cnblogs.com/beer/p/5083653.html)\n---\n\n**持续集成（Continuous integration）** 是一种软件开发实践，即团队开发成员经常集成它们的工作，通过每个成员每天至少集成一次，也就意味着每天可能会发生多次集成。每次集成都通过自动化的构建（包括编译，发布，自动化测试）来验证，从而尽早地发现集成错误.\n\n<!--more-->\n\n## 持续集成的角色划分：\n\n- 开发人员\n  + 编写开发相关代码\n- 测试人员\n  + 设计自动化测试用例\n  + 编写自动化测试相关代码\n- 发布人员\n  + 设置自动化发布方案\n  + 编写自动化发布相关代码\n- 运维人员\n  + 设置自动化运维方案\n  + 编写自动化运维相关代码\n\n持续集成的典型的工具就是开源系统 Jenkins。\n\n## 后期迭代工作流：\n\n- 开发人员向git服务器指定分支提交了新的代码\n- git服务器的 webhook 接收到提交事件后向 Jenkins 服务器指定接口发起请求，执行构建脚本\n- Jenkins 服务器顺序执行构建脚本\n  + 从git服务器上面同步代码\n  + 执行自动构建脚本，生成交付物\n  + 自动搭建测试环境\n- Jenkins 执行自动化测试脚本\n- Jenkins 向 自动化发布 系统发起请求\n- 自动化发布系统 进行自动灰度发布\n- 触发 自动化测试系统\n- 逐步全网发布\n\n## 实际操作：\n![这是本地图片测试，图床一段时间之后就失效了](/blog-img/2018021001.png)\n","slug":"python持续集成之尝鲜","published":1,"updated":"2021-06-20T10:25:20.128Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluqa1hj30030rlogabjre3rp","content":"<p><strong>驱动测试</strong> 和 <strong>持续集成</strong> 的概念正在一点一点的“腐蚀”我的思想，不去尝尝鲜便发现坐立不安。这不，这日，来了。环境是用两台虚拟机，一台用作gitlab的服务器，另外一台为jenkins的服务器，这就happy起来啦！</p>\n<h2 id=\"以下是正文，学习参考自：这里\"><a href=\"#以下是正文，学习参考自：这里\" class=\"headerlink\" title=\"以下是正文，学习参考自：这里\"></a>以下是正文，学习参考自：<a href=\"http://www.cnblogs.com/beer/p/5083653.html\">这里</a></h2><p><strong>持续集成（Continuous integration）</strong> 是一种软件开发实践，即团队开发成员经常集成它们的工作，通过每个成员每天至少集成一次，也就意味着每天可能会发生多次集成。每次集成都通过自动化的构建（包括编译，发布，自动化测试）来验证，从而尽早地发现集成错误.</p>\n<span id=\"more\"></span>\n\n<h2 id=\"持续集成的角色划分：\"><a href=\"#持续集成的角色划分：\" class=\"headerlink\" title=\"持续集成的角色划分：\"></a>持续集成的角色划分：</h2><ul>\n<li>开发人员<ul>\n<li>编写开发相关代码</li>\n</ul>\n</li>\n<li>测试人员<ul>\n<li>设计自动化测试用例</li>\n<li>编写自动化测试相关代码</li>\n</ul>\n</li>\n<li>发布人员<ul>\n<li>设置自动化发布方案</li>\n<li>编写自动化发布相关代码</li>\n</ul>\n</li>\n<li>运维人员<ul>\n<li>设置自动化运维方案</li>\n<li>编写自动化运维相关代码</li>\n</ul>\n</li>\n</ul>\n<p>持续集成的典型的工具就是开源系统 Jenkins。</p>\n<h2 id=\"后期迭代工作流：\"><a href=\"#后期迭代工作流：\" class=\"headerlink\" title=\"后期迭代工作流：\"></a>后期迭代工作流：</h2><ul>\n<li>开发人员向git服务器指定分支提交了新的代码</li>\n<li>git服务器的 webhook 接收到提交事件后向 Jenkins 服务器指定接口发起请求，执行构建脚本</li>\n<li>Jenkins 服务器顺序执行构建脚本<ul>\n<li>从git服务器上面同步代码</li>\n<li>执行自动构建脚本，生成交付物</li>\n<li>自动搭建测试环境</li>\n</ul>\n</li>\n<li>Jenkins 执行自动化测试脚本</li>\n<li>Jenkins 向 自动化发布 系统发起请求</li>\n<li>自动化发布系统 进行自动灰度发布</li>\n<li>触发 自动化测试系统</li>\n<li>逐步全网发布</li>\n</ul>\n<h2 id=\"实际操作：\"><a href=\"#实际操作：\" class=\"headerlink\" title=\"实际操作：\"></a>实际操作：</h2><p><img src=\"/blog-img/2018021001.png\" alt=\"这是本地图片测试，图床一段时间之后就失效了\"></p>\n","site":{"data":{}},"excerpt":"<p><strong>驱动测试</strong> 和 <strong>持续集成</strong> 的概念正在一点一点的“腐蚀”我的思想，不去尝尝鲜便发现坐立不安。这不，这日，来了。环境是用两台虚拟机，一台用作gitlab的服务器，另外一台为jenkins的服务器，这就happy起来啦！</p>\n<h2 id=\"以下是正文，学习参考自：这里\"><a href=\"#以下是正文，学习参考自：这里\" class=\"headerlink\" title=\"以下是正文，学习参考自：这里\"></a>以下是正文，学习参考自：<a href=\"http://www.cnblogs.com/beer/p/5083653.html\">这里</a></h2><p><strong>持续集成（Continuous integration）</strong> 是一种软件开发实践，即团队开发成员经常集成它们的工作，通过每个成员每天至少集成一次，也就意味着每天可能会发生多次集成。每次集成都通过自动化的构建（包括编译，发布，自动化测试）来验证，从而尽早地发现集成错误.</p>","more":"<h2 id=\"持续集成的角色划分：\"><a href=\"#持续集成的角色划分：\" class=\"headerlink\" title=\"持续集成的角色划分：\"></a>持续集成的角色划分：</h2><ul>\n<li>开发人员<ul>\n<li>编写开发相关代码</li>\n</ul>\n</li>\n<li>测试人员<ul>\n<li>设计自动化测试用例</li>\n<li>编写自动化测试相关代码</li>\n</ul>\n</li>\n<li>发布人员<ul>\n<li>设置自动化发布方案</li>\n<li>编写自动化发布相关代码</li>\n</ul>\n</li>\n<li>运维人员<ul>\n<li>设置自动化运维方案</li>\n<li>编写自动化运维相关代码</li>\n</ul>\n</li>\n</ul>\n<p>持续集成的典型的工具就是开源系统 Jenkins。</p>\n<h2 id=\"后期迭代工作流：\"><a href=\"#后期迭代工作流：\" class=\"headerlink\" title=\"后期迭代工作流：\"></a>后期迭代工作流：</h2><ul>\n<li>开发人员向git服务器指定分支提交了新的代码</li>\n<li>git服务器的 webhook 接收到提交事件后向 Jenkins 服务器指定接口发起请求，执行构建脚本</li>\n<li>Jenkins 服务器顺序执行构建脚本<ul>\n<li>从git服务器上面同步代码</li>\n<li>执行自动构建脚本，生成交付物</li>\n<li>自动搭建测试环境</li>\n</ul>\n</li>\n<li>Jenkins 执行自动化测试脚本</li>\n<li>Jenkins 向 自动化发布 系统发起请求</li>\n<li>自动化发布系统 进行自动灰度发布</li>\n<li>触发 自动化测试系统</li>\n<li>逐步全网发布</li>\n</ul>\n<h2 id=\"实际操作：\"><a href=\"#实际操作：\" class=\"headerlink\" title=\"实际操作：\"></a>实际操作：</h2><p><img src=\"/blog-img/2018021001.png\" alt=\"这是本地图片测试，图床一段时间之后就失效了\"></p>"},{"title":"python数据结构及常用排序算法","date":"2017-12-02T16:00:00.000Z","_content":"\n这里总结些python中的数据结构和常用的排序算法。\n\n## 数据结构\n\n### 栈\n\n在python中并没有栈这个数据类型，所以需要自己进行定义和封装。其实也就是通过列表来实现栈的操作。这里就定义了一个栈和栈的基本操作。\n但是需要注意的是：这里使用list作为栈，是没有进行同步的，特别是在多线程中，可能会出现并发的问题，这里有待验证。\n\n<!--more-->\n\n```python\nclass Stack(objects):\n    def __init__(self):\n        self.value = []\n\n    def push(self, value):\n        self.value.append(value)\n\n    def pop(self):\n        if self.isEmpty():\n            raise Exception(\"Your stack is empty\")\n        return self.value.pop()\n\n    def peek(self):\n        # 返回栈顶元素\n        if self.isEmpty():\n            raise Exception(\"Your stack is empty\")\n        return self.value[0]\n\n    def isEmpty(self):\n        return self.size() == 0\n\n    def size(self):\n        return len(self.value)\n\n```\n\n### 树\n\n二叉树的创建：\n\n```python\n# -*- coding: utf-8 -*-\n\n\nclass Node(object):\n    def __init__(self, value):\n        self.value = value\n        self.lChild = None\n        self.rChild = None\n\n\ndef createBinaryTree():\n    # 先序递归的方式创建二叉树，\n    # 按先后次序输入二叉树中的节点，以#表示空树\n\n    value = raw_input(\"请输入当前节点的值（如果是空树，请用“#”表示）> \")\n    if value == \"#\":\n        root = None  # 当前节点为空\n    else:\n        root = Node(value)\n        root.lChild = createBinaryTree()\n        root.rChild = createBinaryTree()\n\n    return root\n\n\nif __name__ == \"__main__\":\n    root = createBinaryTree()\n    print \"先序创建二叉树完毕！\"\n\n```\n\n\n### 链表\n\n链表的创建和打印：\n\n```python\n# -*- coding:utf-8 -*-\nclass ListNode(objects):\n   def __init__(self, x):\n       self.value = x\n       self.next = None\n\n\ndef createList():\n    # 创建链表 9->8->7->6->5->4->3->2->1->0\n    head = None\n    for i in range(10):\n        node = ListNode(i)\n        node.next = head\n        head = node\n    return head\n\n\ndef printfList(head):\n    # 打印链表\n    while head:\n        print head.value\n        head = head.next\n```\n\n#### 算法题1\n\n输入两个 **单调递增** 的链表，输出两个链表合成后的链表，当然我们需要合成后的链表满足 **单调不减** 规则。[牛客网《剑指offer》](https://www.nowcoder.com/practice/d8b6b4358f774294a89de2a6ac4d9337?tpId=13&tqId=11169&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking)\n\n\n```python\n# 解体思路来自左程云《程序员代码面试指南》P84\ndef merge(pHead1, pHead2):\n\n    # 如果两个链表有一个是空的，那么就直接返回另外一个的头部\n    if pHead1 == None: return pHead2\n    if pHead2 == None: return pHead1\n\n    # 将链表中最小值的节点赋值给head\n    if pHead1.value > pHead2.value:\n        head = pHead2\n    else:\n        head = pHead1\n\n    # 领最小值节点所在的那个链表为cur1,另外一个为cur2\n    if head == pHead1:\n        cur1 = pHead1\n        cur2 = pHead2\n    else:\n        cur1 = pHead2\n        cur2 = pHead1\n\n    preNode = None  # 这个节点表示上一次比较中较小的值\n    nextNode = None  # 这个节点表示下一个要处理的节点\n\n    while cur1 and cur2:\n        if cur1.value <= cur2.value:\n            preNode = cur1\n            cur1 = cur1.next\n        else:\n            nextNode = cur2.next\n            preNode.next = cur2\n            cur2.next = cur1\n            preNode = cur2\n            cur2 = nextNode\n    preNode.next = cur1 or cur2\n    return head\n```\n\n\n## 算法\n\n### 常见排序算法\n\n- 冒泡排序(O^2): 冒泡排序是利用两层循环，不断地将数据中比较大或比较小的数字交换到最上面来，看上去就像水中的气泡冒出来一样。\n\n冒泡排序是稳定的。以下提供三种方法，第一种是将小数先冒出来，第二种是将大数先冒出来，第三种提供的是一种优化思路：设置了一个标志，某一趟排序时并没有进行数据交换，则说明所有数据已经有序。这样做是优化了当数组有序的时候，进行的不必要遍历\n\n\n```python\ndef bubble_soft_1(data):\n    \"\"\"冒泡排序（升序）\n    这个排序的过程是先排小数\n    :param data: 待排序的数组\n    :return: 排完序的数组\n    \"\"\"\n    length = len(data)\n    for i in range(length - 1):  # 这里结束的位置是减一的，因为最后一趟已经是有序的了，不需要再遍历\n        for j in range(i + 1, length):  # 这里是从下一个位置开始\n            if data[i] > data[j]:\n                data[j], data[i] = data[i], data[j]\n    return data\n\n\ndef bubble_soft_2(data):\n    \"\"\"冒泡排序（升序）\n    这个排序的过程是先排大数\n    :param data: 待排序的数组\n    :return: 排完序的数组\n    \"\"\"\n    length = len(data)\n    for i in range(length - 1):  # 注意这里的循环变量控制\n        for j in range(length - 1):  \n            if data[j + 1] < data[j]:\n                data[j], data[j + 1] = data[j + 1], data[j]\n    return data\n\n\ndef bubble_soft_3(data):\n    \"\"\"冒泡排序（升序）优化\n    这个排序的过程是先排大数，\n    设置了一个标志，某一趟排序时并没有进行数据交换，则说明所有数据已经有序\n    这样做是优化了当数组有序的时候，进行的不必要遍历\n    :param data: 待排序的数组\n    :return: 排完序的数组\n    \"\"\"\n    length = len(data)\n    for i in range(length - 1):\n        change = False  # 这是一个标识位\n        for j in range(length - 1):\n            if data[j + 1] < data[j]:\n                data[j], data[j + 1] = data[j + 1], data[j]\n                change = True\n        if not change:\n            break\n    return data\n\n```\n\n- 选择排序(O^2):每一次循环从乱序部分中寻找出最大的那个数字，交换到有序部分的最后去，直到列表都有序。\n\n```python\ndef selection_sort(data):\n    # 选择排序\n    length = len(data)\n\n    for i in range(length):\n        index = i\n        for j in range(i+1, length):\n            if data[index] < data[j]:\n                index = j  # 记录当前循环中最大的记录\n        if i == index: continue\n        data[index], data[i] = data[i], data[index]\n    return data\n```\n\n总共的运行次数和冒泡排序一样，n(n-1)/2次，但是由于交换次数少得多了，速度也就更快了。\n\n\n- 插入排序(O^2)： 将每一个无序部分的元素插入到有序部分中。\n\n```python\ndef insertion_sort1(data):\n    # 插入排序实现1\n    length = len(data)\n    for i in range(1, length):  # 默认第一个元素是有序的\n        now_num = data[i]\n        j = 0  # 从前面查找插入\n        while data[j] > now_num and j < i:\n            j += 1\n        if j == i: continue\n        data = data[:j] + [now_num] + data[j:i] + data[i + 1:]\n    return data\n\n\ndef insertion_sort2(data):\n    # 插入排序实现2\n    length = len(data)\n\n    for i in range(1, length):\n        now_num = data[i]\n        j = i -1  # 从后面查找插入\n        while j >= 0 and data[j] < now_num:\n            data[j+1] = data[j]\n            j -= 1\n        data[j + 1] = now_num\n    return data\n\n# 插入排序再考虑一种利用链表是的排序效率\n\n```\n\n在数组元素比较少的时候，用几行就能实现的这个算法看上去很简洁，但一旦数量上去了，每一轮插入需要比较的次数越来越多，拖慢了速度。\n\n插入排序的两种实现方式的时间复杂度相同，但是后面一种方法的代码复杂度比较低\n\n- 希尔排序(n^2)\n\n```python\ndef shell_sort(data):\n    \"\"\"\n    希尔(Shell)排序: 缩小增量排序，它是一种插入排序。\n    它是直接插入排序算法的一种威力加强版\n    :param data:\n    :return:\n    \"\"\"\n    length = len(data)\n    step = length // 2  # 初始步长\n    while step > 0:\n        # 其实下面执行的就是插入排序啦，只不过需要注意步长\n        for i in range(step, length):  # 每一列进行插入排序 , 从step 到 n-1\n            now_num = data[i]\n            j = i\n            while j >= step and data[j - step] > now_num:  # 插入排序\n                data[j] = data[j - step]\n                j -= step\n            data[j] = now_num\n        step //= 2  # 重新设置步长\n    return data\n```\n\n\n- 快速排序(nlogn)\n\n\n快速排序是对冒泡排序的一种改进。通过一趟排序将要排序的数据分割独立的两部分，一部分所有数据都比另一部分的所有数据都要小，然后再按照此方法对这两个部分分别进行快速排序，整个过程可以递归进行，以达到整个数据变成有序序列。\n\n\n首先选取一个数据(通常选用数组的第一个数作为关键数据)，然后所有比它小的数都放到它前面，所有比它大的数都放到它后面，这个过程成为一趟快速排序。\n\n\n```python\ndef quick_sort(data):\n  \tif len(data) <= 1: return data\n  \tpivot = data[0]\n\n  \tleft = quick_sort([x for x in data[1:] if x <= pivot])\n  \tright = quick_sort([x for x in data[1:] if x > pivot])\n\n  \treturn left + [pivot] + right\n```\n\n快速排序也不是稳定的。最坏的情况下复杂度也达到: O(n^2)\n","source":"_posts/python数据结构及常用排序算法.md","raw":"---\ntitle: python数据结构及常用排序算法\ndate: 2017-12-03\ntags: [python, 数据结构, 排序算法]\n---\n\n这里总结些python中的数据结构和常用的排序算法。\n\n## 数据结构\n\n### 栈\n\n在python中并没有栈这个数据类型，所以需要自己进行定义和封装。其实也就是通过列表来实现栈的操作。这里就定义了一个栈和栈的基本操作。\n但是需要注意的是：这里使用list作为栈，是没有进行同步的，特别是在多线程中，可能会出现并发的问题，这里有待验证。\n\n<!--more-->\n\n```python\nclass Stack(objects):\n    def __init__(self):\n        self.value = []\n\n    def push(self, value):\n        self.value.append(value)\n\n    def pop(self):\n        if self.isEmpty():\n            raise Exception(\"Your stack is empty\")\n        return self.value.pop()\n\n    def peek(self):\n        # 返回栈顶元素\n        if self.isEmpty():\n            raise Exception(\"Your stack is empty\")\n        return self.value[0]\n\n    def isEmpty(self):\n        return self.size() == 0\n\n    def size(self):\n        return len(self.value)\n\n```\n\n### 树\n\n二叉树的创建：\n\n```python\n# -*- coding: utf-8 -*-\n\n\nclass Node(object):\n    def __init__(self, value):\n        self.value = value\n        self.lChild = None\n        self.rChild = None\n\n\ndef createBinaryTree():\n    # 先序递归的方式创建二叉树，\n    # 按先后次序输入二叉树中的节点，以#表示空树\n\n    value = raw_input(\"请输入当前节点的值（如果是空树，请用“#”表示）> \")\n    if value == \"#\":\n        root = None  # 当前节点为空\n    else:\n        root = Node(value)\n        root.lChild = createBinaryTree()\n        root.rChild = createBinaryTree()\n\n    return root\n\n\nif __name__ == \"__main__\":\n    root = createBinaryTree()\n    print \"先序创建二叉树完毕！\"\n\n```\n\n\n### 链表\n\n链表的创建和打印：\n\n```python\n# -*- coding:utf-8 -*-\nclass ListNode(objects):\n   def __init__(self, x):\n       self.value = x\n       self.next = None\n\n\ndef createList():\n    # 创建链表 9->8->7->6->5->4->3->2->1->0\n    head = None\n    for i in range(10):\n        node = ListNode(i)\n        node.next = head\n        head = node\n    return head\n\n\ndef printfList(head):\n    # 打印链表\n    while head:\n        print head.value\n        head = head.next\n```\n\n#### 算法题1\n\n输入两个 **单调递增** 的链表，输出两个链表合成后的链表，当然我们需要合成后的链表满足 **单调不减** 规则。[牛客网《剑指offer》](https://www.nowcoder.com/practice/d8b6b4358f774294a89de2a6ac4d9337?tpId=13&tqId=11169&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking)\n\n\n```python\n# 解体思路来自左程云《程序员代码面试指南》P84\ndef merge(pHead1, pHead2):\n\n    # 如果两个链表有一个是空的，那么就直接返回另外一个的头部\n    if pHead1 == None: return pHead2\n    if pHead2 == None: return pHead1\n\n    # 将链表中最小值的节点赋值给head\n    if pHead1.value > pHead2.value:\n        head = pHead2\n    else:\n        head = pHead1\n\n    # 领最小值节点所在的那个链表为cur1,另外一个为cur2\n    if head == pHead1:\n        cur1 = pHead1\n        cur2 = pHead2\n    else:\n        cur1 = pHead2\n        cur2 = pHead1\n\n    preNode = None  # 这个节点表示上一次比较中较小的值\n    nextNode = None  # 这个节点表示下一个要处理的节点\n\n    while cur1 and cur2:\n        if cur1.value <= cur2.value:\n            preNode = cur1\n            cur1 = cur1.next\n        else:\n            nextNode = cur2.next\n            preNode.next = cur2\n            cur2.next = cur1\n            preNode = cur2\n            cur2 = nextNode\n    preNode.next = cur1 or cur2\n    return head\n```\n\n\n## 算法\n\n### 常见排序算法\n\n- 冒泡排序(O^2): 冒泡排序是利用两层循环，不断地将数据中比较大或比较小的数字交换到最上面来，看上去就像水中的气泡冒出来一样。\n\n冒泡排序是稳定的。以下提供三种方法，第一种是将小数先冒出来，第二种是将大数先冒出来，第三种提供的是一种优化思路：设置了一个标志，某一趟排序时并没有进行数据交换，则说明所有数据已经有序。这样做是优化了当数组有序的时候，进行的不必要遍历\n\n\n```python\ndef bubble_soft_1(data):\n    \"\"\"冒泡排序（升序）\n    这个排序的过程是先排小数\n    :param data: 待排序的数组\n    :return: 排完序的数组\n    \"\"\"\n    length = len(data)\n    for i in range(length - 1):  # 这里结束的位置是减一的，因为最后一趟已经是有序的了，不需要再遍历\n        for j in range(i + 1, length):  # 这里是从下一个位置开始\n            if data[i] > data[j]:\n                data[j], data[i] = data[i], data[j]\n    return data\n\n\ndef bubble_soft_2(data):\n    \"\"\"冒泡排序（升序）\n    这个排序的过程是先排大数\n    :param data: 待排序的数组\n    :return: 排完序的数组\n    \"\"\"\n    length = len(data)\n    for i in range(length - 1):  # 注意这里的循环变量控制\n        for j in range(length - 1):  \n            if data[j + 1] < data[j]:\n                data[j], data[j + 1] = data[j + 1], data[j]\n    return data\n\n\ndef bubble_soft_3(data):\n    \"\"\"冒泡排序（升序）优化\n    这个排序的过程是先排大数，\n    设置了一个标志，某一趟排序时并没有进行数据交换，则说明所有数据已经有序\n    这样做是优化了当数组有序的时候，进行的不必要遍历\n    :param data: 待排序的数组\n    :return: 排完序的数组\n    \"\"\"\n    length = len(data)\n    for i in range(length - 1):\n        change = False  # 这是一个标识位\n        for j in range(length - 1):\n            if data[j + 1] < data[j]:\n                data[j], data[j + 1] = data[j + 1], data[j]\n                change = True\n        if not change:\n            break\n    return data\n\n```\n\n- 选择排序(O^2):每一次循环从乱序部分中寻找出最大的那个数字，交换到有序部分的最后去，直到列表都有序。\n\n```python\ndef selection_sort(data):\n    # 选择排序\n    length = len(data)\n\n    for i in range(length):\n        index = i\n        for j in range(i+1, length):\n            if data[index] < data[j]:\n                index = j  # 记录当前循环中最大的记录\n        if i == index: continue\n        data[index], data[i] = data[i], data[index]\n    return data\n```\n\n总共的运行次数和冒泡排序一样，n(n-1)/2次，但是由于交换次数少得多了，速度也就更快了。\n\n\n- 插入排序(O^2)： 将每一个无序部分的元素插入到有序部分中。\n\n```python\ndef insertion_sort1(data):\n    # 插入排序实现1\n    length = len(data)\n    for i in range(1, length):  # 默认第一个元素是有序的\n        now_num = data[i]\n        j = 0  # 从前面查找插入\n        while data[j] > now_num and j < i:\n            j += 1\n        if j == i: continue\n        data = data[:j] + [now_num] + data[j:i] + data[i + 1:]\n    return data\n\n\ndef insertion_sort2(data):\n    # 插入排序实现2\n    length = len(data)\n\n    for i in range(1, length):\n        now_num = data[i]\n        j = i -1  # 从后面查找插入\n        while j >= 0 and data[j] < now_num:\n            data[j+1] = data[j]\n            j -= 1\n        data[j + 1] = now_num\n    return data\n\n# 插入排序再考虑一种利用链表是的排序效率\n\n```\n\n在数组元素比较少的时候，用几行就能实现的这个算法看上去很简洁，但一旦数量上去了，每一轮插入需要比较的次数越来越多，拖慢了速度。\n\n插入排序的两种实现方式的时间复杂度相同，但是后面一种方法的代码复杂度比较低\n\n- 希尔排序(n^2)\n\n```python\ndef shell_sort(data):\n    \"\"\"\n    希尔(Shell)排序: 缩小增量排序，它是一种插入排序。\n    它是直接插入排序算法的一种威力加强版\n    :param data:\n    :return:\n    \"\"\"\n    length = len(data)\n    step = length // 2  # 初始步长\n    while step > 0:\n        # 其实下面执行的就是插入排序啦，只不过需要注意步长\n        for i in range(step, length):  # 每一列进行插入排序 , 从step 到 n-1\n            now_num = data[i]\n            j = i\n            while j >= step and data[j - step] > now_num:  # 插入排序\n                data[j] = data[j - step]\n                j -= step\n            data[j] = now_num\n        step //= 2  # 重新设置步长\n    return data\n```\n\n\n- 快速排序(nlogn)\n\n\n快速排序是对冒泡排序的一种改进。通过一趟排序将要排序的数据分割独立的两部分，一部分所有数据都比另一部分的所有数据都要小，然后再按照此方法对这两个部分分别进行快速排序，整个过程可以递归进行，以达到整个数据变成有序序列。\n\n\n首先选取一个数据(通常选用数组的第一个数作为关键数据)，然后所有比它小的数都放到它前面，所有比它大的数都放到它后面，这个过程成为一趟快速排序。\n\n\n```python\ndef quick_sort(data):\n  \tif len(data) <= 1: return data\n  \tpivot = data[0]\n\n  \tleft = quick_sort([x for x in data[1:] if x <= pivot])\n  \tright = quick_sort([x for x in data[1:] if x > pivot])\n\n  \treturn left + [pivot] + right\n```\n\n快速排序也不是稳定的。最坏的情况下复杂度也达到: O(n^2)\n","slug":"python数据结构及常用排序算法","published":1,"updated":"2021-06-20T10:25:20.128Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluqa1hj30031rlog0b8m8njo","content":"<p>这里总结些python中的数据结构和常用的排序算法。</p>\n<h2 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h2><h3 id=\"栈\"><a href=\"#栈\" class=\"headerlink\" title=\"栈\"></a>栈</h3><p>在python中并没有栈这个数据类型，所以需要自己进行定义和封装。其实也就是通过列表来实现栈的操作。这里就定义了一个栈和栈的基本操作。<br>但是需要注意的是：这里使用list作为栈，是没有进行同步的，特别是在多线程中，可能会出现并发的问题，这里有待验证。</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Stack</span>(<span class=\"title class_ inherited__\">objects</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.value = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">push</span>(<span class=\"params\">self, value</span>):</span><br><span class=\"line\">        self.value.append(value)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">pop</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.isEmpty():</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> Exception(<span class=\"string\">&quot;Your stack is empty&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.value.pop()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">peek</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 返回栈顶元素</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.isEmpty():</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> Exception(<span class=\"string\">&quot;Your stack is empty&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.value[<span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">isEmpty</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.size() == <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">size</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">len</span>(self.value)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"树\"><a href=\"#树\" class=\"headerlink\" title=\"树\"></a>树</h3><p>二叉树的创建：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Node</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, value</span>):</span><br><span class=\"line\">        self.value = value</span><br><span class=\"line\">        self.lChild = <span class=\"literal\">None</span></span><br><span class=\"line\">        self.rChild = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">createBinaryTree</span>():</span><br><span class=\"line\">    <span class=\"comment\"># 先序递归的方式创建二叉树，</span></span><br><span class=\"line\">    <span class=\"comment\"># 按先后次序输入二叉树中的节点，以#表示空树</span></span><br><span class=\"line\"></span><br><span class=\"line\">    value = raw_input(<span class=\"string\">&quot;请输入当前节点的值（如果是空树，请用“#”表示）&gt; &quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> value == <span class=\"string\">&quot;#&quot;</span>:</span><br><span class=\"line\">        root = <span class=\"literal\">None</span>  <span class=\"comment\"># 当前节点为空</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        root = Node(value)</span><br><span class=\"line\">        root.lChild = createBinaryTree()</span><br><span class=\"line\">        root.rChild = createBinaryTree()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> root</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    root = createBinaryTree()</span><br><span class=\"line\">    <span class=\"built_in\">print</span> <span class=\"string\">&quot;先序创建二叉树完毕！&quot;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a>链表</h3><p>链表的创建和打印：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ListNode</span>(<span class=\"title class_ inherited__\">objects</span>):</span><br><span class=\"line\">   <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, x</span>):</span><br><span class=\"line\">       self.value = x</span><br><span class=\"line\">       self.<span class=\"built_in\">next</span> = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">createList</span>():</span><br><span class=\"line\">    <span class=\"comment\"># 创建链表 9-&gt;8-&gt;7-&gt;6-&gt;5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;0</span></span><br><span class=\"line\">    head = <span class=\"literal\">None</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>):</span><br><span class=\"line\">        node = ListNode(i)</span><br><span class=\"line\">        node.<span class=\"built_in\">next</span> = head</span><br><span class=\"line\">        head = node</span><br><span class=\"line\">    <span class=\"keyword\">return</span> head</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">printfList</span>(<span class=\"params\">head</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 打印链表</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> head:</span><br><span class=\"line\">        <span class=\"built_in\">print</span> head.value</span><br><span class=\"line\">        head = head.<span class=\"built_in\">next</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"算法题1\"><a href=\"#算法题1\" class=\"headerlink\" title=\"算法题1\"></a>算法题1</h4><p>输入两个 <strong>单调递增</strong> 的链表，输出两个链表合成后的链表，当然我们需要合成后的链表满足 <strong>单调不减</strong> 规则。<a href=\"https://www.nowcoder.com/practice/d8b6b4358f774294a89de2a6ac4d9337?tpId=13&tqId=11169&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking\">牛客网《剑指offer》</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 解体思路来自左程云《程序员代码面试指南》P84</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">merge</span>(<span class=\"params\">pHead1, pHead2</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 如果两个链表有一个是空的，那么就直接返回另外一个的头部</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> pHead1 == <span class=\"literal\">None</span>: <span class=\"keyword\">return</span> pHead2</span><br><span class=\"line\">    <span class=\"keyword\">if</span> pHead2 == <span class=\"literal\">None</span>: <span class=\"keyword\">return</span> pHead1</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 将链表中最小值的节点赋值给head</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> pHead1.value &gt; pHead2.value:</span><br><span class=\"line\">        head = pHead2</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        head = pHead1</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 领最小值节点所在的那个链表为cur1,另外一个为cur2</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> head == pHead1:</span><br><span class=\"line\">        cur1 = pHead1</span><br><span class=\"line\">        cur2 = pHead2</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        cur1 = pHead2</span><br><span class=\"line\">        cur2 = pHead1</span><br><span class=\"line\"></span><br><span class=\"line\">    preNode = <span class=\"literal\">None</span>  <span class=\"comment\"># 这个节点表示上一次比较中较小的值</span></span><br><span class=\"line\">    nextNode = <span class=\"literal\">None</span>  <span class=\"comment\"># 这个节点表示下一个要处理的节点</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> cur1 <span class=\"keyword\">and</span> cur2:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> cur1.value &lt;= cur2.value:</span><br><span class=\"line\">            preNode = cur1</span><br><span class=\"line\">            cur1 = cur1.<span class=\"built_in\">next</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            nextNode = cur2.<span class=\"built_in\">next</span></span><br><span class=\"line\">            preNode.<span class=\"built_in\">next</span> = cur2</span><br><span class=\"line\">            cur2.<span class=\"built_in\">next</span> = cur1</span><br><span class=\"line\">            preNode = cur2</span><br><span class=\"line\">            cur2 = nextNode</span><br><span class=\"line\">    preNode.<span class=\"built_in\">next</span> = cur1 <span class=\"keyword\">or</span> cur2</span><br><span class=\"line\">    <span class=\"keyword\">return</span> head</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h2><h3 id=\"常见排序算法\"><a href=\"#常见排序算法\" class=\"headerlink\" title=\"常见排序算法\"></a>常见排序算法</h3><ul>\n<li>冒泡排序(O^2): 冒泡排序是利用两层循环，不断地将数据中比较大或比较小的数字交换到最上面来，看上去就像水中的气泡冒出来一样。</li>\n</ul>\n<p>冒泡排序是稳定的。以下提供三种方法，第一种是将小数先冒出来，第二种是将大数先冒出来，第三种提供的是一种优化思路：设置了一个标志，某一趟排序时并没有进行数据交换，则说明所有数据已经有序。这样做是优化了当数组有序的时候，进行的不必要遍历</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">bubble_soft_1</span>(<span class=\"params\">data</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;冒泡排序（升序）</span></span><br><span class=\"line\"><span class=\"string\">    这个排序的过程是先排小数</span></span><br><span class=\"line\"><span class=\"string\">    :param data: 待排序的数组</span></span><br><span class=\"line\"><span class=\"string\">    :return: 排完序的数组</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    length = <span class=\"built_in\">len</span>(data)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(length - <span class=\"number\">1</span>):  <span class=\"comment\"># 这里结束的位置是减一的，因为最后一趟已经是有序的了，不需要再遍历</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(i + <span class=\"number\">1</span>, length):  <span class=\"comment\"># 这里是从下一个位置开始</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> data[i] &gt; data[j]:</span><br><span class=\"line\">                data[j], data[i] = data[i], data[j]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">bubble_soft_2</span>(<span class=\"params\">data</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;冒泡排序（升序）</span></span><br><span class=\"line\"><span class=\"string\">    这个排序的过程是先排大数</span></span><br><span class=\"line\"><span class=\"string\">    :param data: 待排序的数组</span></span><br><span class=\"line\"><span class=\"string\">    :return: 排完序的数组</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    length = <span class=\"built_in\">len</span>(data)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(length - <span class=\"number\">1</span>):  <span class=\"comment\"># 注意这里的循环变量控制</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(length - <span class=\"number\">1</span>):  </span><br><span class=\"line\">            <span class=\"keyword\">if</span> data[j + <span class=\"number\">1</span>] &lt; data[j]:</span><br><span class=\"line\">                data[j], data[j + <span class=\"number\">1</span>] = data[j + <span class=\"number\">1</span>], data[j]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">bubble_soft_3</span>(<span class=\"params\">data</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;冒泡排序（升序）优化</span></span><br><span class=\"line\"><span class=\"string\">    这个排序的过程是先排大数，</span></span><br><span class=\"line\"><span class=\"string\">    设置了一个标志，某一趟排序时并没有进行数据交换，则说明所有数据已经有序</span></span><br><span class=\"line\"><span class=\"string\">    这样做是优化了当数组有序的时候，进行的不必要遍历</span></span><br><span class=\"line\"><span class=\"string\">    :param data: 待排序的数组</span></span><br><span class=\"line\"><span class=\"string\">    :return: 排完序的数组</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    length = <span class=\"built_in\">len</span>(data)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(length - <span class=\"number\">1</span>):</span><br><span class=\"line\">        change = <span class=\"literal\">False</span>  <span class=\"comment\"># 这是一个标识位</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(length - <span class=\"number\">1</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> data[j + <span class=\"number\">1</span>] &lt; data[j]:</span><br><span class=\"line\">                data[j], data[j + <span class=\"number\">1</span>] = data[j + <span class=\"number\">1</span>], data[j]</span><br><span class=\"line\">                change = <span class=\"literal\">True</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> change:</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>选择排序(O^2):每一次循环从乱序部分中寻找出最大的那个数字，交换到有序部分的最后去，直到列表都有序。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">selection_sort</span>(<span class=\"params\">data</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 选择排序</span></span><br><span class=\"line\">    length = <span class=\"built_in\">len</span>(data)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(length):</span><br><span class=\"line\">        index = i</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(i+<span class=\"number\">1</span>, length):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> data[index] &lt; data[j]:</span><br><span class=\"line\">                index = j  <span class=\"comment\"># 记录当前循环中最大的记录</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> i == index: <span class=\"keyword\">continue</span></span><br><span class=\"line\">        data[index], data[i] = data[i], data[index]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br></pre></td></tr></table></figure>\n\n<p>总共的运行次数和冒泡排序一样，n(n-1)&#x2F;2次，但是由于交换次数少得多了，速度也就更快了。</p>\n<ul>\n<li>插入排序(O^2)： 将每一个无序部分的元素插入到有序部分中。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">insertion_sort1</span>(<span class=\"params\">data</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 插入排序实现1</span></span><br><span class=\"line\">    length = <span class=\"built_in\">len</span>(data)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, length):  <span class=\"comment\"># 默认第一个元素是有序的</span></span><br><span class=\"line\">        now_num = data[i]</span><br><span class=\"line\">        j = <span class=\"number\">0</span>  <span class=\"comment\"># 从前面查找插入</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> data[j] &gt; now_num <span class=\"keyword\">and</span> j &lt; i:</span><br><span class=\"line\">            j += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> j == i: <span class=\"keyword\">continue</span></span><br><span class=\"line\">        data = data[:j] + [now_num] + data[j:i] + data[i + <span class=\"number\">1</span>:]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">insertion_sort2</span>(<span class=\"params\">data</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 插入排序实现2</span></span><br><span class=\"line\">    length = <span class=\"built_in\">len</span>(data)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, length):</span><br><span class=\"line\">        now_num = data[i]</span><br><span class=\"line\">        j = i -<span class=\"number\">1</span>  <span class=\"comment\"># 从后面查找插入</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> j &gt;= <span class=\"number\">0</span> <span class=\"keyword\">and</span> data[j] &lt; now_num:</span><br><span class=\"line\">            data[j+<span class=\"number\">1</span>] = data[j]</span><br><span class=\"line\">            j -= <span class=\"number\">1</span></span><br><span class=\"line\">        data[j + <span class=\"number\">1</span>] = now_num</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 插入排序再考虑一种利用链表是的排序效率</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>在数组元素比较少的时候，用几行就能实现的这个算法看上去很简洁，但一旦数量上去了，每一轮插入需要比较的次数越来越多，拖慢了速度。</p>\n<p>插入排序的两种实现方式的时间复杂度相同，但是后面一种方法的代码复杂度比较低</p>\n<ul>\n<li>希尔排序(n^2)</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">shell_sort</span>(<span class=\"params\">data</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    希尔(Shell)排序: 缩小增量排序，它是一种插入排序。</span></span><br><span class=\"line\"><span class=\"string\">    它是直接插入排序算法的一种威力加强版</span></span><br><span class=\"line\"><span class=\"string\">    :param data:</span></span><br><span class=\"line\"><span class=\"string\">    :return:</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    length = <span class=\"built_in\">len</span>(data)</span><br><span class=\"line\">    step = length // <span class=\"number\">2</span>  <span class=\"comment\"># 初始步长</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> step &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"comment\"># 其实下面执行的就是插入排序啦，只不过需要注意步长</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(step, length):  <span class=\"comment\"># 每一列进行插入排序 , 从step 到 n-1</span></span><br><span class=\"line\">            now_num = data[i]</span><br><span class=\"line\">            j = i</span><br><span class=\"line\">            <span class=\"keyword\">while</span> j &gt;= step <span class=\"keyword\">and</span> data[j - step] &gt; now_num:  <span class=\"comment\"># 插入排序</span></span><br><span class=\"line\">                data[j] = data[j - step]</span><br><span class=\"line\">                j -= step</span><br><span class=\"line\">            data[j] = now_num</span><br><span class=\"line\">        step //= <span class=\"number\">2</span>  <span class=\"comment\"># 重新设置步长</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br></pre></td></tr></table></figure>\n\n\n<ul>\n<li>快速排序(nlogn)</li>\n</ul>\n<p>快速排序是对冒泡排序的一种改进。通过一趟排序将要排序的数据分割独立的两部分，一部分所有数据都比另一部分的所有数据都要小，然后再按照此方法对这两个部分分别进行快速排序，整个过程可以递归进行，以达到整个数据变成有序序列。</p>\n<p>首先选取一个数据(通常选用数组的第一个数作为关键数据)，然后所有比它小的数都放到它前面，所有比它大的数都放到它后面，这个过程成为一趟快速排序。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">quick_sort</span>(<span class=\"params\">data</span>):</span><br><span class=\"line\">  \t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(data) &lt;= <span class=\"number\">1</span>: <span class=\"keyword\">return</span> data</span><br><span class=\"line\">  \tpivot = data[<span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">  \tleft = quick_sort([x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> data[<span class=\"number\">1</span>:] <span class=\"keyword\">if</span> x &lt;= pivot])</span><br><span class=\"line\">  \tright = quick_sort([x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> data[<span class=\"number\">1</span>:] <span class=\"keyword\">if</span> x &gt; pivot])</span><br><span class=\"line\"></span><br><span class=\"line\">  \t<span class=\"keyword\">return</span> left + [pivot] + right</span><br></pre></td></tr></table></figure>\n\n<p>快速排序也不是稳定的。最坏的情况下复杂度也达到: O(n^2)</p>\n","site":{"data":{}},"excerpt":"<p>这里总结些python中的数据结构和常用的排序算法。</p>\n<h2 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h2><h3 id=\"栈\"><a href=\"#栈\" class=\"headerlink\" title=\"栈\"></a>栈</h3><p>在python中并没有栈这个数据类型，所以需要自己进行定义和封装。其实也就是通过列表来实现栈的操作。这里就定义了一个栈和栈的基本操作。<br>但是需要注意的是：这里使用list作为栈，是没有进行同步的，特别是在多线程中，可能会出现并发的问题，这里有待验证。</p>","more":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Stack</span>(<span class=\"title class_ inherited__\">objects</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.value = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">push</span>(<span class=\"params\">self, value</span>):</span><br><span class=\"line\">        self.value.append(value)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">pop</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.isEmpty():</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> Exception(<span class=\"string\">&quot;Your stack is empty&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.value.pop()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">peek</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 返回栈顶元素</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.isEmpty():</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> Exception(<span class=\"string\">&quot;Your stack is empty&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.value[<span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">isEmpty</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.size() == <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">size</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">len</span>(self.value)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"树\"><a href=\"#树\" class=\"headerlink\" title=\"树\"></a>树</h3><p>二叉树的创建：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Node</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, value</span>):</span><br><span class=\"line\">        self.value = value</span><br><span class=\"line\">        self.lChild = <span class=\"literal\">None</span></span><br><span class=\"line\">        self.rChild = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">createBinaryTree</span>():</span><br><span class=\"line\">    <span class=\"comment\"># 先序递归的方式创建二叉树，</span></span><br><span class=\"line\">    <span class=\"comment\"># 按先后次序输入二叉树中的节点，以#表示空树</span></span><br><span class=\"line\"></span><br><span class=\"line\">    value = raw_input(<span class=\"string\">&quot;请输入当前节点的值（如果是空树，请用“#”表示）&gt; &quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> value == <span class=\"string\">&quot;#&quot;</span>:</span><br><span class=\"line\">        root = <span class=\"literal\">None</span>  <span class=\"comment\"># 当前节点为空</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        root = Node(value)</span><br><span class=\"line\">        root.lChild = createBinaryTree()</span><br><span class=\"line\">        root.rChild = createBinaryTree()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> root</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    root = createBinaryTree()</span><br><span class=\"line\">    <span class=\"built_in\">print</span> <span class=\"string\">&quot;先序创建二叉树完毕！&quot;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a>链表</h3><p>链表的创建和打印：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ListNode</span>(<span class=\"title class_ inherited__\">objects</span>):</span><br><span class=\"line\">   <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, x</span>):</span><br><span class=\"line\">       self.value = x</span><br><span class=\"line\">       self.<span class=\"built_in\">next</span> = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">createList</span>():</span><br><span class=\"line\">    <span class=\"comment\"># 创建链表 9-&gt;8-&gt;7-&gt;6-&gt;5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;0</span></span><br><span class=\"line\">    head = <span class=\"literal\">None</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>):</span><br><span class=\"line\">        node = ListNode(i)</span><br><span class=\"line\">        node.<span class=\"built_in\">next</span> = head</span><br><span class=\"line\">        head = node</span><br><span class=\"line\">    <span class=\"keyword\">return</span> head</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">printfList</span>(<span class=\"params\">head</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 打印链表</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> head:</span><br><span class=\"line\">        <span class=\"built_in\">print</span> head.value</span><br><span class=\"line\">        head = head.<span class=\"built_in\">next</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"算法题1\"><a href=\"#算法题1\" class=\"headerlink\" title=\"算法题1\"></a>算法题1</h4><p>输入两个 <strong>单调递增</strong> 的链表，输出两个链表合成后的链表，当然我们需要合成后的链表满足 <strong>单调不减</strong> 规则。<a href=\"https://www.nowcoder.com/practice/d8b6b4358f774294a89de2a6ac4d9337?tpId=13&tqId=11169&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking\">牛客网《剑指offer》</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 解体思路来自左程云《程序员代码面试指南》P84</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">merge</span>(<span class=\"params\">pHead1, pHead2</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 如果两个链表有一个是空的，那么就直接返回另外一个的头部</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> pHead1 == <span class=\"literal\">None</span>: <span class=\"keyword\">return</span> pHead2</span><br><span class=\"line\">    <span class=\"keyword\">if</span> pHead2 == <span class=\"literal\">None</span>: <span class=\"keyword\">return</span> pHead1</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 将链表中最小值的节点赋值给head</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> pHead1.value &gt; pHead2.value:</span><br><span class=\"line\">        head = pHead2</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        head = pHead1</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 领最小值节点所在的那个链表为cur1,另外一个为cur2</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> head == pHead1:</span><br><span class=\"line\">        cur1 = pHead1</span><br><span class=\"line\">        cur2 = pHead2</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        cur1 = pHead2</span><br><span class=\"line\">        cur2 = pHead1</span><br><span class=\"line\"></span><br><span class=\"line\">    preNode = <span class=\"literal\">None</span>  <span class=\"comment\"># 这个节点表示上一次比较中较小的值</span></span><br><span class=\"line\">    nextNode = <span class=\"literal\">None</span>  <span class=\"comment\"># 这个节点表示下一个要处理的节点</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> cur1 <span class=\"keyword\">and</span> cur2:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> cur1.value &lt;= cur2.value:</span><br><span class=\"line\">            preNode = cur1</span><br><span class=\"line\">            cur1 = cur1.<span class=\"built_in\">next</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            nextNode = cur2.<span class=\"built_in\">next</span></span><br><span class=\"line\">            preNode.<span class=\"built_in\">next</span> = cur2</span><br><span class=\"line\">            cur2.<span class=\"built_in\">next</span> = cur1</span><br><span class=\"line\">            preNode = cur2</span><br><span class=\"line\">            cur2 = nextNode</span><br><span class=\"line\">    preNode.<span class=\"built_in\">next</span> = cur1 <span class=\"keyword\">or</span> cur2</span><br><span class=\"line\">    <span class=\"keyword\">return</span> head</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h2><h3 id=\"常见排序算法\"><a href=\"#常见排序算法\" class=\"headerlink\" title=\"常见排序算法\"></a>常见排序算法</h3><ul>\n<li>冒泡排序(O^2): 冒泡排序是利用两层循环，不断地将数据中比较大或比较小的数字交换到最上面来，看上去就像水中的气泡冒出来一样。</li>\n</ul>\n<p>冒泡排序是稳定的。以下提供三种方法，第一种是将小数先冒出来，第二种是将大数先冒出来，第三种提供的是一种优化思路：设置了一个标志，某一趟排序时并没有进行数据交换，则说明所有数据已经有序。这样做是优化了当数组有序的时候，进行的不必要遍历</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">bubble_soft_1</span>(<span class=\"params\">data</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;冒泡排序（升序）</span></span><br><span class=\"line\"><span class=\"string\">    这个排序的过程是先排小数</span></span><br><span class=\"line\"><span class=\"string\">    :param data: 待排序的数组</span></span><br><span class=\"line\"><span class=\"string\">    :return: 排完序的数组</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    length = <span class=\"built_in\">len</span>(data)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(length - <span class=\"number\">1</span>):  <span class=\"comment\"># 这里结束的位置是减一的，因为最后一趟已经是有序的了，不需要再遍历</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(i + <span class=\"number\">1</span>, length):  <span class=\"comment\"># 这里是从下一个位置开始</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> data[i] &gt; data[j]:</span><br><span class=\"line\">                data[j], data[i] = data[i], data[j]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">bubble_soft_2</span>(<span class=\"params\">data</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;冒泡排序（升序）</span></span><br><span class=\"line\"><span class=\"string\">    这个排序的过程是先排大数</span></span><br><span class=\"line\"><span class=\"string\">    :param data: 待排序的数组</span></span><br><span class=\"line\"><span class=\"string\">    :return: 排完序的数组</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    length = <span class=\"built_in\">len</span>(data)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(length - <span class=\"number\">1</span>):  <span class=\"comment\"># 注意这里的循环变量控制</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(length - <span class=\"number\">1</span>):  </span><br><span class=\"line\">            <span class=\"keyword\">if</span> data[j + <span class=\"number\">1</span>] &lt; data[j]:</span><br><span class=\"line\">                data[j], data[j + <span class=\"number\">1</span>] = data[j + <span class=\"number\">1</span>], data[j]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">bubble_soft_3</span>(<span class=\"params\">data</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;冒泡排序（升序）优化</span></span><br><span class=\"line\"><span class=\"string\">    这个排序的过程是先排大数，</span></span><br><span class=\"line\"><span class=\"string\">    设置了一个标志，某一趟排序时并没有进行数据交换，则说明所有数据已经有序</span></span><br><span class=\"line\"><span class=\"string\">    这样做是优化了当数组有序的时候，进行的不必要遍历</span></span><br><span class=\"line\"><span class=\"string\">    :param data: 待排序的数组</span></span><br><span class=\"line\"><span class=\"string\">    :return: 排完序的数组</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    length = <span class=\"built_in\">len</span>(data)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(length - <span class=\"number\">1</span>):</span><br><span class=\"line\">        change = <span class=\"literal\">False</span>  <span class=\"comment\"># 这是一个标识位</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(length - <span class=\"number\">1</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> data[j + <span class=\"number\">1</span>] &lt; data[j]:</span><br><span class=\"line\">                data[j], data[j + <span class=\"number\">1</span>] = data[j + <span class=\"number\">1</span>], data[j]</span><br><span class=\"line\">                change = <span class=\"literal\">True</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> change:</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>选择排序(O^2):每一次循环从乱序部分中寻找出最大的那个数字，交换到有序部分的最后去，直到列表都有序。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">selection_sort</span>(<span class=\"params\">data</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 选择排序</span></span><br><span class=\"line\">    length = <span class=\"built_in\">len</span>(data)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(length):</span><br><span class=\"line\">        index = i</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(i+<span class=\"number\">1</span>, length):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> data[index] &lt; data[j]:</span><br><span class=\"line\">                index = j  <span class=\"comment\"># 记录当前循环中最大的记录</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> i == index: <span class=\"keyword\">continue</span></span><br><span class=\"line\">        data[index], data[i] = data[i], data[index]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br></pre></td></tr></table></figure>\n\n<p>总共的运行次数和冒泡排序一样，n(n-1)&#x2F;2次，但是由于交换次数少得多了，速度也就更快了。</p>\n<ul>\n<li>插入排序(O^2)： 将每一个无序部分的元素插入到有序部分中。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">insertion_sort1</span>(<span class=\"params\">data</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 插入排序实现1</span></span><br><span class=\"line\">    length = <span class=\"built_in\">len</span>(data)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, length):  <span class=\"comment\"># 默认第一个元素是有序的</span></span><br><span class=\"line\">        now_num = data[i]</span><br><span class=\"line\">        j = <span class=\"number\">0</span>  <span class=\"comment\"># 从前面查找插入</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> data[j] &gt; now_num <span class=\"keyword\">and</span> j &lt; i:</span><br><span class=\"line\">            j += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> j == i: <span class=\"keyword\">continue</span></span><br><span class=\"line\">        data = data[:j] + [now_num] + data[j:i] + data[i + <span class=\"number\">1</span>:]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">insertion_sort2</span>(<span class=\"params\">data</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 插入排序实现2</span></span><br><span class=\"line\">    length = <span class=\"built_in\">len</span>(data)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, length):</span><br><span class=\"line\">        now_num = data[i]</span><br><span class=\"line\">        j = i -<span class=\"number\">1</span>  <span class=\"comment\"># 从后面查找插入</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> j &gt;= <span class=\"number\">0</span> <span class=\"keyword\">and</span> data[j] &lt; now_num:</span><br><span class=\"line\">            data[j+<span class=\"number\">1</span>] = data[j]</span><br><span class=\"line\">            j -= <span class=\"number\">1</span></span><br><span class=\"line\">        data[j + <span class=\"number\">1</span>] = now_num</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 插入排序再考虑一种利用链表是的排序效率</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>在数组元素比较少的时候，用几行就能实现的这个算法看上去很简洁，但一旦数量上去了，每一轮插入需要比较的次数越来越多，拖慢了速度。</p>\n<p>插入排序的两种实现方式的时间复杂度相同，但是后面一种方法的代码复杂度比较低</p>\n<ul>\n<li>希尔排序(n^2)</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">shell_sort</span>(<span class=\"params\">data</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    希尔(Shell)排序: 缩小增量排序，它是一种插入排序。</span></span><br><span class=\"line\"><span class=\"string\">    它是直接插入排序算法的一种威力加强版</span></span><br><span class=\"line\"><span class=\"string\">    :param data:</span></span><br><span class=\"line\"><span class=\"string\">    :return:</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    length = <span class=\"built_in\">len</span>(data)</span><br><span class=\"line\">    step = length // <span class=\"number\">2</span>  <span class=\"comment\"># 初始步长</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> step &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"comment\"># 其实下面执行的就是插入排序啦，只不过需要注意步长</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(step, length):  <span class=\"comment\"># 每一列进行插入排序 , 从step 到 n-1</span></span><br><span class=\"line\">            now_num = data[i]</span><br><span class=\"line\">            j = i</span><br><span class=\"line\">            <span class=\"keyword\">while</span> j &gt;= step <span class=\"keyword\">and</span> data[j - step] &gt; now_num:  <span class=\"comment\"># 插入排序</span></span><br><span class=\"line\">                data[j] = data[j - step]</span><br><span class=\"line\">                j -= step</span><br><span class=\"line\">            data[j] = now_num</span><br><span class=\"line\">        step //= <span class=\"number\">2</span>  <span class=\"comment\"># 重新设置步长</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br></pre></td></tr></table></figure>\n\n\n<ul>\n<li>快速排序(nlogn)</li>\n</ul>\n<p>快速排序是对冒泡排序的一种改进。通过一趟排序将要排序的数据分割独立的两部分，一部分所有数据都比另一部分的所有数据都要小，然后再按照此方法对这两个部分分别进行快速排序，整个过程可以递归进行，以达到整个数据变成有序序列。</p>\n<p>首先选取一个数据(通常选用数组的第一个数作为关键数据)，然后所有比它小的数都放到它前面，所有比它大的数都放到它后面，这个过程成为一趟快速排序。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">quick_sort</span>(<span class=\"params\">data</span>):</span><br><span class=\"line\">  \t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(data) &lt;= <span class=\"number\">1</span>: <span class=\"keyword\">return</span> data</span><br><span class=\"line\">  \tpivot = data[<span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">  \tleft = quick_sort([x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> data[<span class=\"number\">1</span>:] <span class=\"keyword\">if</span> x &lt;= pivot])</span><br><span class=\"line\">  \tright = quick_sort([x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> data[<span class=\"number\">1</span>:] <span class=\"keyword\">if</span> x &gt; pivot])</span><br><span class=\"line\"></span><br><span class=\"line\">  \t<span class=\"keyword\">return</span> left + [pivot] + right</span><br></pre></td></tr></table></figure>\n\n<p>快速排序也不是稳定的。最坏的情况下复杂度也达到: O(n^2)</p>"},{"title":"python核心编程阅读笔记","date":"2017-08-05T16:00:00.000Z","_content":"\n再读这本书，才发现自己当时是囫囵吞枣。利用这段时间，认真阅读，学习，每一行代码都手敲或写一遍，落实python的基础。\n\n![python基础知识脑图](http://oys3izcsg.bkt.clouddn.com/python%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9.jpg)\n\n\n## 第三章 python基础\n\n### 变量赋值\n\n\n#### 赋值操作符\n\n在python中，对象是通过引用传递的。在赋值时，不管这个对象是新创建的，还是已经存在的，都是将对该对象的引用（并不是值）赋值给变量。\n\n<!--more-->\n\n#### 多重赋值\n\n例：\n\n\n```python\nx = y =z = 1\nprint x, y, z\n```\n\n输出：\n\n`1, 1, 1`\n\n在上面的例子，一个值为 **1** 的整数对象被创建，该对象的同一个引用被赋值给x，y和z。也就是将一个对象赋值给多个变量。\n\n<!-- more -->\n\n#### 多元赋值\n\npython的多元赋值方式可以实现无需中间变量交换两个变量的值。\n例：\n\n```python\nx, y = 1, 2\nprint x, y\nx, y = y, x\nprint x, y\n```\n\n输出：\n\n```\n1, 2\n2, 1\n```\n\n\n### 标识符\n\n### 合法的python标识符\n\n- 第一个字符必须是字母或下划线(_)\n- 剩下的字符可以是字母和数字或下划线\n- 大小写敏感\n\n### 专用的下划线标识符\n\n- 以单一下划线开头的变量(`_x`)不会被 `from moudle import *` 语句导入。\n- 前后有双下划线的变量名(`__x__`) 是系统定义的变量名，对python解释器有特殊意义。\n- 以两个下划线开头但结尾没有下划线的变量名(`__x`)是类的本地变量。\n- 在交互模式下，变量名\"`_`\"用于保存最后表达式的结果。\n\n### 内存管理\n\n**python中不但变量名无需事先声明，而且也无需类型声明**\n\n## 第四章 python对象\n\n### python对象\n\n- python使用对象模型来存储数据，构造任何类型的值都是一个对象。\n- 所有的python对象都拥有三个特性：身份、类型和值\n- 除了值以外，其他两个特性都是只读的。\n- python用句点(`.`)标记法来访问属性。\n\n### 标准类型\n\n- 数字\n- Integer 整型\n- Boolean 布尔型\n- Long integer 长整型\n- Floating point real number 浮点型\n- Complex number 复数型\n- String 字符串\n- List 列表\n- Tuple 元组\n- Dictionary 字典\n\n### 其他内建类型\n\n- 类型\n- Null对象(None)\n- 文件\n- 集合(set)/固定集合(frozenset)\n- 函数/方法\n- 模块\n- 类\n\n**所有类型对象的类型都是`type`**\n\n### 标准类型操作符\n\n- 所有的内建类型均支持比较运算，比较运算返回布尔值True或False。\n- 数字类型根据数值的大小和符号比较，字符串按照字符序列值进行比较等。\n- 不同于很多语言，多个比较操作可以在同一行上进行，求值顺序为**从左到右**。\n- python提供 `is` 和 `is not` 操作符来测试两个变量是否指向同一个对象。\n\n标准类型内建函数：\n\n函数                    | 功能\n----                    |------\ncmp(obj1,obj2)          | 比较obj1和obj2，结果返回整型i\nrepr(obj)或\\`obj\\`      | 返回一个对象的字符串表示  \nstr(obj)                | 返回对象适合可读性好的字符串\ntype(obj)               | 得到一个对象的类型，并返回响应的tyoe对象\n\n```python\n\nprint type(4)  # <type 'int'>\nprint type(type(4))  # <type 'type'>\n\na, b = -4, 12\nprint cmp(a, b)  # -1\nprint cmp(b, a)  # 1\n```\n\n### 类型工厂函数\n\n- int(), long(), float(), comlex()\n- str(), unicode(), basestring()\n- list(), tuple()\n- type()\n\n---\n\n- dict()\n- bool()\n- set(), frozenset()\n- object()\n- classmethod()\n- staticmethod()\n- super()\n- property()\n- file()\n\n### 标准类型的分类\n\n所有python的容器对象都能够容纳不同类型的对象。\n\n标准类型分类\n\n数据类型 | 存储模型 | 更新模型 | 访问模型\n---      | ---      | ---      | ---\n数字     | 标量     | 不可更改 | 直接访问\n字符串   | 标量     | 不可更改 | 顺序访问\n列表     | 容器     | 可更改   | 顺序访问\n元组     | 容器     | 不可更改 | 顺序访问\n字典     | 容器     |   可更改 | 映射访问\n\n\n## 第五章 数字\n\n有关复数的几个概念\n\n- 虚数不能单独存在，他们总是和一个值为0.0的实数部分一起来构成一个复数\n- 复数由实数部分和虚数部分构成\n- 表示虚数的语法： real + imagj\n- 实数部分和虚数部分都是浮点型\n- 虚数部分必须有后缀j和J\n","source":"_posts/python核心编程阅读笔记.md","raw":"---\ntitle: python核心编程阅读笔记\ndate: 2017-08-06\ntags: [阅读笔记, python]\n---\n\n再读这本书，才发现自己当时是囫囵吞枣。利用这段时间，认真阅读，学习，每一行代码都手敲或写一遍，落实python的基础。\n\n![python基础知识脑图](http://oys3izcsg.bkt.clouddn.com/python%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9.jpg)\n\n\n## 第三章 python基础\n\n### 变量赋值\n\n\n#### 赋值操作符\n\n在python中，对象是通过引用传递的。在赋值时，不管这个对象是新创建的，还是已经存在的，都是将对该对象的引用（并不是值）赋值给变量。\n\n<!--more-->\n\n#### 多重赋值\n\n例：\n\n\n```python\nx = y =z = 1\nprint x, y, z\n```\n\n输出：\n\n`1, 1, 1`\n\n在上面的例子，一个值为 **1** 的整数对象被创建，该对象的同一个引用被赋值给x，y和z。也就是将一个对象赋值给多个变量。\n\n<!-- more -->\n\n#### 多元赋值\n\npython的多元赋值方式可以实现无需中间变量交换两个变量的值。\n例：\n\n```python\nx, y = 1, 2\nprint x, y\nx, y = y, x\nprint x, y\n```\n\n输出：\n\n```\n1, 2\n2, 1\n```\n\n\n### 标识符\n\n### 合法的python标识符\n\n- 第一个字符必须是字母或下划线(_)\n- 剩下的字符可以是字母和数字或下划线\n- 大小写敏感\n\n### 专用的下划线标识符\n\n- 以单一下划线开头的变量(`_x`)不会被 `from moudle import *` 语句导入。\n- 前后有双下划线的变量名(`__x__`) 是系统定义的变量名，对python解释器有特殊意义。\n- 以两个下划线开头但结尾没有下划线的变量名(`__x`)是类的本地变量。\n- 在交互模式下，变量名\"`_`\"用于保存最后表达式的结果。\n\n### 内存管理\n\n**python中不但变量名无需事先声明，而且也无需类型声明**\n\n## 第四章 python对象\n\n### python对象\n\n- python使用对象模型来存储数据，构造任何类型的值都是一个对象。\n- 所有的python对象都拥有三个特性：身份、类型和值\n- 除了值以外，其他两个特性都是只读的。\n- python用句点(`.`)标记法来访问属性。\n\n### 标准类型\n\n- 数字\n- Integer 整型\n- Boolean 布尔型\n- Long integer 长整型\n- Floating point real number 浮点型\n- Complex number 复数型\n- String 字符串\n- List 列表\n- Tuple 元组\n- Dictionary 字典\n\n### 其他内建类型\n\n- 类型\n- Null对象(None)\n- 文件\n- 集合(set)/固定集合(frozenset)\n- 函数/方法\n- 模块\n- 类\n\n**所有类型对象的类型都是`type`**\n\n### 标准类型操作符\n\n- 所有的内建类型均支持比较运算，比较运算返回布尔值True或False。\n- 数字类型根据数值的大小和符号比较，字符串按照字符序列值进行比较等。\n- 不同于很多语言，多个比较操作可以在同一行上进行，求值顺序为**从左到右**。\n- python提供 `is` 和 `is not` 操作符来测试两个变量是否指向同一个对象。\n\n标准类型内建函数：\n\n函数                    | 功能\n----                    |------\ncmp(obj1,obj2)          | 比较obj1和obj2，结果返回整型i\nrepr(obj)或\\`obj\\`      | 返回一个对象的字符串表示  \nstr(obj)                | 返回对象适合可读性好的字符串\ntype(obj)               | 得到一个对象的类型，并返回响应的tyoe对象\n\n```python\n\nprint type(4)  # <type 'int'>\nprint type(type(4))  # <type 'type'>\n\na, b = -4, 12\nprint cmp(a, b)  # -1\nprint cmp(b, a)  # 1\n```\n\n### 类型工厂函数\n\n- int(), long(), float(), comlex()\n- str(), unicode(), basestring()\n- list(), tuple()\n- type()\n\n---\n\n- dict()\n- bool()\n- set(), frozenset()\n- object()\n- classmethod()\n- staticmethod()\n- super()\n- property()\n- file()\n\n### 标准类型的分类\n\n所有python的容器对象都能够容纳不同类型的对象。\n\n标准类型分类\n\n数据类型 | 存储模型 | 更新模型 | 访问模型\n---      | ---      | ---      | ---\n数字     | 标量     | 不可更改 | 直接访问\n字符串   | 标量     | 不可更改 | 顺序访问\n列表     | 容器     | 可更改   | 顺序访问\n元组     | 容器     | 不可更改 | 顺序访问\n字典     | 容器     |   可更改 | 映射访问\n\n\n## 第五章 数字\n\n有关复数的几个概念\n\n- 虚数不能单独存在，他们总是和一个值为0.0的实数部分一起来构成一个复数\n- 复数由实数部分和虚数部分构成\n- 表示虚数的语法： real + imagj\n- 实数部分和虚数部分都是浮点型\n- 虚数部分必须有后缀j和J\n","slug":"python核心编程阅读笔记","published":1,"updated":"2021-06-20T10:25:20.128Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluqa1hj40033rlogcbi2794t","content":"<p>再读这本书，才发现自己当时是囫囵吞枣。利用这段时间，认真阅读，学习，每一行代码都手敲或写一遍，落实python的基础。</p>\n<p><img src=\"http://oys3izcsg.bkt.clouddn.com/python%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9.jpg\" alt=\"python基础知识脑图\"></p>\n<h2 id=\"第三章-python基础\"><a href=\"#第三章-python基础\" class=\"headerlink\" title=\"第三章 python基础\"></a>第三章 python基础</h2><h3 id=\"变量赋值\"><a href=\"#变量赋值\" class=\"headerlink\" title=\"变量赋值\"></a>变量赋值</h3><h4 id=\"赋值操作符\"><a href=\"#赋值操作符\" class=\"headerlink\" title=\"赋值操作符\"></a>赋值操作符</h4><p>在python中，对象是通过引用传递的。在赋值时，不管这个对象是新创建的，还是已经存在的，都是将对该对象的引用（并不是值）赋值给变量。</p>\n<span id=\"more\"></span>\n\n<h4 id=\"多重赋值\"><a href=\"#多重赋值\" class=\"headerlink\" title=\"多重赋值\"></a>多重赋值</h4><p>例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = y =z = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">print</span> x, y, z</span><br></pre></td></tr></table></figure>\n\n<p>输出：</p>\n<p><code>1, 1, 1</code></p>\n<p>在上面的例子，一个值为 <strong>1</strong> 的整数对象被创建，该对象的同一个引用被赋值给x，y和z。也就是将一个对象赋值给多个变量。</p>\n<!-- more -->\n\n<h4 id=\"多元赋值\"><a href=\"#多元赋值\" class=\"headerlink\" title=\"多元赋值\"></a>多元赋值</h4><p>python的多元赋值方式可以实现无需中间变量交换两个变量的值。<br>例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x, y = <span class=\"number\">1</span>, <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"built_in\">print</span> x, y</span><br><span class=\"line\">x, y = y, x</span><br><span class=\"line\"><span class=\"built_in\">print</span> x, y</span><br></pre></td></tr></table></figure>\n\n<p>输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1, 2</span><br><span class=\"line\">2, 1</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"标识符\"><a href=\"#标识符\" class=\"headerlink\" title=\"标识符\"></a>标识符</h3><h3 id=\"合法的python标识符\"><a href=\"#合法的python标识符\" class=\"headerlink\" title=\"合法的python标识符\"></a>合法的python标识符</h3><ul>\n<li>第一个字符必须是字母或下划线(_)</li>\n<li>剩下的字符可以是字母和数字或下划线</li>\n<li>大小写敏感</li>\n</ul>\n<h3 id=\"专用的下划线标识符\"><a href=\"#专用的下划线标识符\" class=\"headerlink\" title=\"专用的下划线标识符\"></a>专用的下划线标识符</h3><ul>\n<li>以单一下划线开头的变量(<code>_x</code>)不会被 <code>from moudle import *</code> 语句导入。</li>\n<li>前后有双下划线的变量名(<code>__x__</code>) 是系统定义的变量名，对python解释器有特殊意义。</li>\n<li>以两个下划线开头但结尾没有下划线的变量名(<code>__x</code>)是类的本地变量。</li>\n<li>在交互模式下，变量名”<code>_</code>“用于保存最后表达式的结果。</li>\n</ul>\n<h3 id=\"内存管理\"><a href=\"#内存管理\" class=\"headerlink\" title=\"内存管理\"></a>内存管理</h3><p><strong>python中不但变量名无需事先声明，而且也无需类型声明</strong></p>\n<h2 id=\"第四章-python对象\"><a href=\"#第四章-python对象\" class=\"headerlink\" title=\"第四章 python对象\"></a>第四章 python对象</h2><h3 id=\"python对象\"><a href=\"#python对象\" class=\"headerlink\" title=\"python对象\"></a>python对象</h3><ul>\n<li>python使用对象模型来存储数据，构造任何类型的值都是一个对象。</li>\n<li>所有的python对象都拥有三个特性：身份、类型和值</li>\n<li>除了值以外，其他两个特性都是只读的。</li>\n<li>python用句点(<code>.</code>)标记法来访问属性。</li>\n</ul>\n<h3 id=\"标准类型\"><a href=\"#标准类型\" class=\"headerlink\" title=\"标准类型\"></a>标准类型</h3><ul>\n<li>数字</li>\n<li>Integer 整型</li>\n<li>Boolean 布尔型</li>\n<li>Long integer 长整型</li>\n<li>Floating point real number 浮点型</li>\n<li>Complex number 复数型</li>\n<li>String 字符串</li>\n<li>List 列表</li>\n<li>Tuple 元组</li>\n<li>Dictionary 字典</li>\n</ul>\n<h3 id=\"其他内建类型\"><a href=\"#其他内建类型\" class=\"headerlink\" title=\"其他内建类型\"></a>其他内建类型</h3><ul>\n<li>类型</li>\n<li>Null对象(None)</li>\n<li>文件</li>\n<li>集合(set)&#x2F;固定集合(frozenset)</li>\n<li>函数&#x2F;方法</li>\n<li>模块</li>\n<li>类</li>\n</ul>\n<p><strong>所有类型对象的类型都是<code>type</code></strong></p>\n<h3 id=\"标准类型操作符\"><a href=\"#标准类型操作符\" class=\"headerlink\" title=\"标准类型操作符\"></a>标准类型操作符</h3><ul>\n<li>所有的内建类型均支持比较运算，比较运算返回布尔值True或False。</li>\n<li>数字类型根据数值的大小和符号比较，字符串按照字符序列值进行比较等。</li>\n<li>不同于很多语言，多个比较操作可以在同一行上进行，求值顺序为<strong>从左到右</strong>。</li>\n<li>python提供 <code>is</code> 和 <code>is not</code> 操作符来测试两个变量是否指向同一个对象。</li>\n</ul>\n<p>标准类型内建函数：</p>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>cmp(obj1,obj2)</td>\n<td>比较obj1和obj2，结果返回整型i</td>\n</tr>\n<tr>\n<td>repr(obj)或`obj`</td>\n<td>返回一个对象的字符串表示</td>\n</tr>\n<tr>\n<td>str(obj)</td>\n<td>返回对象适合可读性好的字符串</td>\n</tr>\n<tr>\n<td>type(obj)</td>\n<td>得到一个对象的类型，并返回响应的tyoe对象</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"built_in\">type</span>(<span class=\"number\">4</span>)  <span class=\"comment\"># &lt;type &#x27;int&#x27;&gt;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"built_in\">type</span>(<span class=\"built_in\">type</span>(<span class=\"number\">4</span>))  <span class=\"comment\"># &lt;type &#x27;type&#x27;&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">a, b = -<span class=\"number\">4</span>, <span class=\"number\">12</span></span><br><span class=\"line\"><span class=\"built_in\">print</span> cmp(a, b)  <span class=\"comment\"># -1</span></span><br><span class=\"line\"><span class=\"built_in\">print</span> cmp(b, a)  <span class=\"comment\"># 1</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"类型工厂函数\"><a href=\"#类型工厂函数\" class=\"headerlink\" title=\"类型工厂函数\"></a>类型工厂函数</h3><ul>\n<li>int(), long(), float(), comlex()</li>\n<li>str(), unicode(), basestring()</li>\n<li>list(), tuple()</li>\n<li>type()</li>\n</ul>\n<hr>\n<ul>\n<li>dict()</li>\n<li>bool()</li>\n<li>set(), frozenset()</li>\n<li>object()</li>\n<li>classmethod()</li>\n<li>staticmethod()</li>\n<li>super()</li>\n<li>property()</li>\n<li>file()</li>\n</ul>\n<h3 id=\"标准类型的分类\"><a href=\"#标准类型的分类\" class=\"headerlink\" title=\"标准类型的分类\"></a>标准类型的分类</h3><p>所有python的容器对象都能够容纳不同类型的对象。</p>\n<p>标准类型分类</p>\n<table>\n<thead>\n<tr>\n<th>数据类型</th>\n<th>存储模型</th>\n<th>更新模型</th>\n<th>访问模型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>数字</td>\n<td>标量</td>\n<td>不可更改</td>\n<td>直接访问</td>\n</tr>\n<tr>\n<td>字符串</td>\n<td>标量</td>\n<td>不可更改</td>\n<td>顺序访问</td>\n</tr>\n<tr>\n<td>列表</td>\n<td>容器</td>\n<td>可更改</td>\n<td>顺序访问</td>\n</tr>\n<tr>\n<td>元组</td>\n<td>容器</td>\n<td>不可更改</td>\n<td>顺序访问</td>\n</tr>\n<tr>\n<td>字典</td>\n<td>容器</td>\n<td>可更改</td>\n<td>映射访问</td>\n</tr>\n</tbody></table>\n<h2 id=\"第五章-数字\"><a href=\"#第五章-数字\" class=\"headerlink\" title=\"第五章 数字\"></a>第五章 数字</h2><p>有关复数的几个概念</p>\n<ul>\n<li>虚数不能单独存在，他们总是和一个值为0.0的实数部分一起来构成一个复数</li>\n<li>复数由实数部分和虚数部分构成</li>\n<li>表示虚数的语法： real + imagj</li>\n<li>实数部分和虚数部分都是浮点型</li>\n<li>虚数部分必须有后缀j和J</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>再读这本书，才发现自己当时是囫囵吞枣。利用这段时间，认真阅读，学习，每一行代码都手敲或写一遍，落实python的基础。</p>\n<p><img src=\"http://oys3izcsg.bkt.clouddn.com/python%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9.jpg\" alt=\"python基础知识脑图\"></p>\n<h2 id=\"第三章-python基础\"><a href=\"#第三章-python基础\" class=\"headerlink\" title=\"第三章 python基础\"></a>第三章 python基础</h2><h3 id=\"变量赋值\"><a href=\"#变量赋值\" class=\"headerlink\" title=\"变量赋值\"></a>变量赋值</h3><h4 id=\"赋值操作符\"><a href=\"#赋值操作符\" class=\"headerlink\" title=\"赋值操作符\"></a>赋值操作符</h4><p>在python中，对象是通过引用传递的。在赋值时，不管这个对象是新创建的，还是已经存在的，都是将对该对象的引用（并不是值）赋值给变量。</p>","more":"<h4 id=\"多重赋值\"><a href=\"#多重赋值\" class=\"headerlink\" title=\"多重赋值\"></a>多重赋值</h4><p>例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = y =z = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">print</span> x, y, z</span><br></pre></td></tr></table></figure>\n\n<p>输出：</p>\n<p><code>1, 1, 1</code></p>\n<p>在上面的例子，一个值为 <strong>1</strong> 的整数对象被创建，该对象的同一个引用被赋值给x，y和z。也就是将一个对象赋值给多个变量。</p>\n<!-- more -->\n\n<h4 id=\"多元赋值\"><a href=\"#多元赋值\" class=\"headerlink\" title=\"多元赋值\"></a>多元赋值</h4><p>python的多元赋值方式可以实现无需中间变量交换两个变量的值。<br>例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x, y = <span class=\"number\">1</span>, <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"built_in\">print</span> x, y</span><br><span class=\"line\">x, y = y, x</span><br><span class=\"line\"><span class=\"built_in\">print</span> x, y</span><br></pre></td></tr></table></figure>\n\n<p>输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1, 2</span><br><span class=\"line\">2, 1</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"标识符\"><a href=\"#标识符\" class=\"headerlink\" title=\"标识符\"></a>标识符</h3><h3 id=\"合法的python标识符\"><a href=\"#合法的python标识符\" class=\"headerlink\" title=\"合法的python标识符\"></a>合法的python标识符</h3><ul>\n<li>第一个字符必须是字母或下划线(_)</li>\n<li>剩下的字符可以是字母和数字或下划线</li>\n<li>大小写敏感</li>\n</ul>\n<h3 id=\"专用的下划线标识符\"><a href=\"#专用的下划线标识符\" class=\"headerlink\" title=\"专用的下划线标识符\"></a>专用的下划线标识符</h3><ul>\n<li>以单一下划线开头的变量(<code>_x</code>)不会被 <code>from moudle import *</code> 语句导入。</li>\n<li>前后有双下划线的变量名(<code>__x__</code>) 是系统定义的变量名，对python解释器有特殊意义。</li>\n<li>以两个下划线开头但结尾没有下划线的变量名(<code>__x</code>)是类的本地变量。</li>\n<li>在交互模式下，变量名”<code>_</code>“用于保存最后表达式的结果。</li>\n</ul>\n<h3 id=\"内存管理\"><a href=\"#内存管理\" class=\"headerlink\" title=\"内存管理\"></a>内存管理</h3><p><strong>python中不但变量名无需事先声明，而且也无需类型声明</strong></p>\n<h2 id=\"第四章-python对象\"><a href=\"#第四章-python对象\" class=\"headerlink\" title=\"第四章 python对象\"></a>第四章 python对象</h2><h3 id=\"python对象\"><a href=\"#python对象\" class=\"headerlink\" title=\"python对象\"></a>python对象</h3><ul>\n<li>python使用对象模型来存储数据，构造任何类型的值都是一个对象。</li>\n<li>所有的python对象都拥有三个特性：身份、类型和值</li>\n<li>除了值以外，其他两个特性都是只读的。</li>\n<li>python用句点(<code>.</code>)标记法来访问属性。</li>\n</ul>\n<h3 id=\"标准类型\"><a href=\"#标准类型\" class=\"headerlink\" title=\"标准类型\"></a>标准类型</h3><ul>\n<li>数字</li>\n<li>Integer 整型</li>\n<li>Boolean 布尔型</li>\n<li>Long integer 长整型</li>\n<li>Floating point real number 浮点型</li>\n<li>Complex number 复数型</li>\n<li>String 字符串</li>\n<li>List 列表</li>\n<li>Tuple 元组</li>\n<li>Dictionary 字典</li>\n</ul>\n<h3 id=\"其他内建类型\"><a href=\"#其他内建类型\" class=\"headerlink\" title=\"其他内建类型\"></a>其他内建类型</h3><ul>\n<li>类型</li>\n<li>Null对象(None)</li>\n<li>文件</li>\n<li>集合(set)&#x2F;固定集合(frozenset)</li>\n<li>函数&#x2F;方法</li>\n<li>模块</li>\n<li>类</li>\n</ul>\n<p><strong>所有类型对象的类型都是<code>type</code></strong></p>\n<h3 id=\"标准类型操作符\"><a href=\"#标准类型操作符\" class=\"headerlink\" title=\"标准类型操作符\"></a>标准类型操作符</h3><ul>\n<li>所有的内建类型均支持比较运算，比较运算返回布尔值True或False。</li>\n<li>数字类型根据数值的大小和符号比较，字符串按照字符序列值进行比较等。</li>\n<li>不同于很多语言，多个比较操作可以在同一行上进行，求值顺序为<strong>从左到右</strong>。</li>\n<li>python提供 <code>is</code> 和 <code>is not</code> 操作符来测试两个变量是否指向同一个对象。</li>\n</ul>\n<p>标准类型内建函数：</p>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>cmp(obj1,obj2)</td>\n<td>比较obj1和obj2，结果返回整型i</td>\n</tr>\n<tr>\n<td>repr(obj)或`obj`</td>\n<td>返回一个对象的字符串表示</td>\n</tr>\n<tr>\n<td>str(obj)</td>\n<td>返回对象适合可读性好的字符串</td>\n</tr>\n<tr>\n<td>type(obj)</td>\n<td>得到一个对象的类型，并返回响应的tyoe对象</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"built_in\">type</span>(<span class=\"number\">4</span>)  <span class=\"comment\"># &lt;type &#x27;int&#x27;&gt;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"built_in\">type</span>(<span class=\"built_in\">type</span>(<span class=\"number\">4</span>))  <span class=\"comment\"># &lt;type &#x27;type&#x27;&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">a, b = -<span class=\"number\">4</span>, <span class=\"number\">12</span></span><br><span class=\"line\"><span class=\"built_in\">print</span> cmp(a, b)  <span class=\"comment\"># -1</span></span><br><span class=\"line\"><span class=\"built_in\">print</span> cmp(b, a)  <span class=\"comment\"># 1</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"类型工厂函数\"><a href=\"#类型工厂函数\" class=\"headerlink\" title=\"类型工厂函数\"></a>类型工厂函数</h3><ul>\n<li>int(), long(), float(), comlex()</li>\n<li>str(), unicode(), basestring()</li>\n<li>list(), tuple()</li>\n<li>type()</li>\n</ul>\n<hr>\n<ul>\n<li>dict()</li>\n<li>bool()</li>\n<li>set(), frozenset()</li>\n<li>object()</li>\n<li>classmethod()</li>\n<li>staticmethod()</li>\n<li>super()</li>\n<li>property()</li>\n<li>file()</li>\n</ul>\n<h3 id=\"标准类型的分类\"><a href=\"#标准类型的分类\" class=\"headerlink\" title=\"标准类型的分类\"></a>标准类型的分类</h3><p>所有python的容器对象都能够容纳不同类型的对象。</p>\n<p>标准类型分类</p>\n<table>\n<thead>\n<tr>\n<th>数据类型</th>\n<th>存储模型</th>\n<th>更新模型</th>\n<th>访问模型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>数字</td>\n<td>标量</td>\n<td>不可更改</td>\n<td>直接访问</td>\n</tr>\n<tr>\n<td>字符串</td>\n<td>标量</td>\n<td>不可更改</td>\n<td>顺序访问</td>\n</tr>\n<tr>\n<td>列表</td>\n<td>容器</td>\n<td>可更改</td>\n<td>顺序访问</td>\n</tr>\n<tr>\n<td>元组</td>\n<td>容器</td>\n<td>不可更改</td>\n<td>顺序访问</td>\n</tr>\n<tr>\n<td>字典</td>\n<td>容器</td>\n<td>可更改</td>\n<td>映射访问</td>\n</tr>\n</tbody></table>\n<h2 id=\"第五章-数字\"><a href=\"#第五章-数字\" class=\"headerlink\" title=\"第五章 数字\"></a>第五章 数字</h2><p>有关复数的几个概念</p>\n<ul>\n<li>虚数不能单独存在，他们总是和一个值为0.0的实数部分一起来构成一个复数</li>\n<li>复数由实数部分和虚数部分构成</li>\n<li>表示虚数的语法： real + imagj</li>\n<li>实数部分和虚数部分都是浮点型</li>\n<li>虚数部分必须有后缀j和J</li>\n</ul>"},{"title":"python网络爬虫和信息提取(1)","date":"2017-12-14T16:00:00.000Z","_content":"\n## requests 库的安装和使用\n\n### 安装\n\n    pip install requests\n\n### 7个主要方法\n\n- requests.requests() 构造一个请求，支撑以下各方法的基础方法。\n- requests.get() 获取HTML网页的主要方法，对应于HTTP的GET\n- requests.head() 获取HTML网页头信息的方法，对应于HTTP的HEAD\n- requests.post() 向HTML网页提交POST请求的方法，对应于HTTP的POST\n- requests.put() 向HTML网页提交PUT请求的方法，对应于HTTP的PUT\n- requests.patch() 向网页提交局部修改请求，对应于HTTP的PATCH\n- requests.delete() 向HTML网页提交删除请求，对应HTTP的DELETE\n\n其中`requests.requests()`方法是基础方法，其他方法都可以说是对他的封装。可以这样理解 `requests` 库只有一个方法，就是 `requests.requests()` 方法。\n\n<!--more-->\n\n#### requests()方法\n\n`requests.requests()`方法是基础方法，其他方法都可以说是对他的封装。\n\n```python\nrequests.requests(method, url, **kwargs)\n```\n\n**method: 请求方式，对应get/post/put等7种**\n\n- `r = requests.requests('POST', url, **kwargs)`\n- `r = requests.requests('GET', url, **kwargs)`\n- `r = requests.requests('PUT', url, **kwargs)`\n- `r = requests.requests('HEAD', url, **kwargs)`\n- `r = requests.requests('PATCH', url, **kwargs)`\n- `r = requests.requests('DELETE', url, **kwargs)`\n- `r = requests.requests('OPTIONS', url, **kwargs)`\n\n与HTTP协议对于的请求功能。前6种分别对应`requests.post()`、`requests.get()`等\n\n**url: 拟获取页面的url链接**\n**\\*\\*kwargs: 控制访问的参数，共13个。均为可选项**\n\n- params: 字典或字节序列，作为参数增加到url中。\n\n```python\nkv = {'key1': 'value1', 'key2': 'value2'}\nr = requests.requests('GET', 'http://python123.io/ws', params=kv)\nprint r.url  # http://python123.io/ws?key1=value1&key2=value2\n```\n\n- data：字典、字节序列或文件对象，作为Reques内容\n\n```python\nkv = {'key1': 'value1', 'key2': 'value2'}\nr = requests.requests('POST', 'http://python123.io/ws', data=kv)\n```\n\n- json：JSON格式的数据，作为Request内容\n\n```python\nkv = {'key1': 'value1', 'key2': 'value2'}\nr = requests.requests('POST', 'http://python123.io/ws', json=kv)\n```\n\n- headers：字典，HTTP定制头\n\n```python\nhd = {'user-agent': 'Chrome/10'}\nr = requests.requests('POST', 'http://python123.io/ws', headers=hd)\n```\n\n- cookies：字典或CookieJar，Request中的cookie\n- auth：元组，支持HTTP认证功能\n- files：字典类型，传输文件\n\n```python\nfs = {'file': open('data.xls', 'rb')}\nr = requests.requests('POST', 'http://python123.io/ws', files=fs)\n```  \n\n- timeout：设定超时时间，秒为单位\n\n```python\nr = requests.requests('GET', 'http://python123.io/ws', timeout=10)\n```\n\n- proxies：字典类型，设定访问代理服务器，可以增加登录认证\n\n```python\npxs = {'http': 'http://user:pass@10.10.10.1:1234', 'https': 'https://10.10.10.1:4321'}\nr = requests.requests('GET', 'http://www.baidu.com', proxies=pxs)\n```\n\n- allow_redirects：True/False，默认为True，重定向开关\n- stream：True/Fasle，默认为True，获取内容立即下载开关\n- verify：True/False，默认为True，认证SSL证书开关\n- cert：本地SSL证书路径\n\n\n#### get()方法\n\n最简单的：`r = requests.get(url)`,构造一个向服务器请求资源的Requests对象。返回一个包含服务器资源的Response对象，包含爬虫返回的内容。\n\nget方法的完整用法：`requests.get(url, params=None, **kwargs)`。其中\n\n- url: 拟获取页面的url链接\n- params：url中的额外参数，字典或字节流格式，可选。\n- \\*\\*kwargs：12个控制访问的参数\n\n这里演示`requests.get()`，请求百度首页，返回200状态码：\n\n```python\nimport requests\nr = requests.get('http://www.baidu.com')\nprint r.status_code  # 200表示请求成功\ntype(r)  # <class 'requests.models.Response'>\n```\n\n爬取网页的通用代码框架\n\n```python\nimport requests\n\n\ndef getHtmlText(url):\n    try:\n        r = requests.get(url, timeout=30)\n        r.raise_for_status()\n        r.encoding = r.apparent_encoding\n        return r.text\n    except:\n        return '产生异常'\n\nif __name__ == '__main__':\n    url = 'http://www.baidu.com'\n    print getHtmlText(url)\n```\n\n#### post()方法\n\n通过`requests.post(url, data=None, json=None, **kwargs)`方法向服务器提交数据。如果我们提交的数据形式是键值对（字典）的形式时，会被自动放在`form`中，如果提交的是字符串时，则被存在`data`字段下。\n\n提交键值对：\n\n```python\npayload = {'key1': 'value1', 'key2': 'value2'}\nr = requests.post('http://httpbin.org/post', data=payload)\nprint r.text\n''' {\n  ...\n  'form': {\n    'key1': 'value1',\n    'key2': 'value2'\n  },\n  ...\n}\n'''\n```\n\n提交字段：\n\n```python\nplayload = '123456'\nr = requests.post('http://httpbin.org/post', data=playload)\nprint r.text\n'''\n{\n 'args': {},\n 'data': '123456',\n 'files': {},\n 'form': {},\n 'headers': {\n   'Accept': '*/*',\n   'Accept-Encoding': 'gzip, deflate',\n   'Connection': 'close',\n   'Content-Length': '6',\n   'Host': 'httpbin.org',\n   'User-Agent': 'python-requests/2.11.1'\n },\n 'json': 123456,\n 'origin': '183.199.3.79',\n 'url': 'http://httpbin.org/post'\n}\n'''\n```\n\n#### head()方法\n\n用`requests.head`获取一个链接，可以通过`r.headers`获取返回的头部信息内容，而 `r.text`发现是为空。通过该方法，可以用很少的网络流量获取网络资源的概要信息。\n例如：\n```python\nimport requests\n\nr = requests.head('http://www.baidu.com')\nprint r.headers\n# {'Content-Encoding': 'gzip', 'Server': 'bfe/1.0.8.18', 'Last-Modified': 'Mon, 13 Jun 2016 02:50:08 GMT', 'Connection': 'Keep-Alive', 'Pragma': 'no-cache', 'Cache-Control': 'private, no-cache, no-store, proxy-revalidate, no-transform', 'Date': 'Sat, 16 Dec 2017 03:26:25 GMT', 'Content-Type': 'text/html'}\nprint r.text  # ''\n```\n\n### Response对象的属性\n\n|属性|说明|\n| :------------------- | :----------------- |\n|r.status_code|HTTP请求的返回状态，200表示连接成功，404表示失败|\n|r.text|HTTP响应内容的字符串形式，即url对应的页面内容|\n|r.encoding|从HTTP header中猜测响应内容编码方式|\n|r.apparent_encoding|从内容中分析出的响应内容编码方式（备选编码方式）|\n|r.content|HTTP响应内容的二进制形式|\n| **r.raise_for_status()** | **如果不是200,产生异常requests.HTTPError** |\n\n\n### Requests库异常\n\n|异常|说明|\n| :------------------- | :----------------- |\n|requests.ConnectionError|网络连接错误异常，如DNS查询失败、拒绝连接等|\n|requests.HTTPError|HTTP错误异常|\n|requests.URLRequired|URL缺失异常|\n|requests.TooManyReqirects|超过最大重定向次数，产生重定向异常|\n|requests.ConnectTimeout|连接远程服务器超时异常|\n|requests.Timeout|请求URL超时，产生超时异常|\n\n---\n\n### requests爬虫实战\n\n这里通过以上的学习，掩饰几组使用requests库网络爬虫实战：\n\n#### 图片爬取\n\n```python\nimport requests\nimport os\n\nurl = \"http://www.sinaimg.cn/dy/slidenews/1_img/2017_29/88490_1334396_633374.jpg\"\nroot = \"./images/\"\npath = root + url.split(\"/\")[-1]\n\ntry:\n    if not os.path.exists(root):\n        os.makdir(root)\n    if not os.path.exists(path):\n        r = requests.get(url)\n        whith open(path, \"wb\") as f:\n            f.write(r.content)\n        print \"文件保存成功！\"\n    else:\n        print \"爬取失败！\"\nexcept:\n    print \"爬取失败\"\n```\n\n#### ip地址判断\n\n```python\nimport requests\n\nurl = \"http://m.ip138.com/ip.asp?ip=\"\ntry:\n    r = requests.get(url + \"202.204.80.112\")\n    r.raise_for_status()\n    r.encoding = r.apparent_encoding\n    print r.text[-500:]\nexcept:\n    print \"爬取失败！\"\n```\n---\n","source":"_posts/python网络爬虫和信息提取(1).md","raw":"---\ntitle: python网络爬虫和信息提取(1)\ndate: 2017-12-15\ntags: [python, 网络爬虫]\n---\n\n## requests 库的安装和使用\n\n### 安装\n\n    pip install requests\n\n### 7个主要方法\n\n- requests.requests() 构造一个请求，支撑以下各方法的基础方法。\n- requests.get() 获取HTML网页的主要方法，对应于HTTP的GET\n- requests.head() 获取HTML网页头信息的方法，对应于HTTP的HEAD\n- requests.post() 向HTML网页提交POST请求的方法，对应于HTTP的POST\n- requests.put() 向HTML网页提交PUT请求的方法，对应于HTTP的PUT\n- requests.patch() 向网页提交局部修改请求，对应于HTTP的PATCH\n- requests.delete() 向HTML网页提交删除请求，对应HTTP的DELETE\n\n其中`requests.requests()`方法是基础方法，其他方法都可以说是对他的封装。可以这样理解 `requests` 库只有一个方法，就是 `requests.requests()` 方法。\n\n<!--more-->\n\n#### requests()方法\n\n`requests.requests()`方法是基础方法，其他方法都可以说是对他的封装。\n\n```python\nrequests.requests(method, url, **kwargs)\n```\n\n**method: 请求方式，对应get/post/put等7种**\n\n- `r = requests.requests('POST', url, **kwargs)`\n- `r = requests.requests('GET', url, **kwargs)`\n- `r = requests.requests('PUT', url, **kwargs)`\n- `r = requests.requests('HEAD', url, **kwargs)`\n- `r = requests.requests('PATCH', url, **kwargs)`\n- `r = requests.requests('DELETE', url, **kwargs)`\n- `r = requests.requests('OPTIONS', url, **kwargs)`\n\n与HTTP协议对于的请求功能。前6种分别对应`requests.post()`、`requests.get()`等\n\n**url: 拟获取页面的url链接**\n**\\*\\*kwargs: 控制访问的参数，共13个。均为可选项**\n\n- params: 字典或字节序列，作为参数增加到url中。\n\n```python\nkv = {'key1': 'value1', 'key2': 'value2'}\nr = requests.requests('GET', 'http://python123.io/ws', params=kv)\nprint r.url  # http://python123.io/ws?key1=value1&key2=value2\n```\n\n- data：字典、字节序列或文件对象，作为Reques内容\n\n```python\nkv = {'key1': 'value1', 'key2': 'value2'}\nr = requests.requests('POST', 'http://python123.io/ws', data=kv)\n```\n\n- json：JSON格式的数据，作为Request内容\n\n```python\nkv = {'key1': 'value1', 'key2': 'value2'}\nr = requests.requests('POST', 'http://python123.io/ws', json=kv)\n```\n\n- headers：字典，HTTP定制头\n\n```python\nhd = {'user-agent': 'Chrome/10'}\nr = requests.requests('POST', 'http://python123.io/ws', headers=hd)\n```\n\n- cookies：字典或CookieJar，Request中的cookie\n- auth：元组，支持HTTP认证功能\n- files：字典类型，传输文件\n\n```python\nfs = {'file': open('data.xls', 'rb')}\nr = requests.requests('POST', 'http://python123.io/ws', files=fs)\n```  \n\n- timeout：设定超时时间，秒为单位\n\n```python\nr = requests.requests('GET', 'http://python123.io/ws', timeout=10)\n```\n\n- proxies：字典类型，设定访问代理服务器，可以增加登录认证\n\n```python\npxs = {'http': 'http://user:pass@10.10.10.1:1234', 'https': 'https://10.10.10.1:4321'}\nr = requests.requests('GET', 'http://www.baidu.com', proxies=pxs)\n```\n\n- allow_redirects：True/False，默认为True，重定向开关\n- stream：True/Fasle，默认为True，获取内容立即下载开关\n- verify：True/False，默认为True，认证SSL证书开关\n- cert：本地SSL证书路径\n\n\n#### get()方法\n\n最简单的：`r = requests.get(url)`,构造一个向服务器请求资源的Requests对象。返回一个包含服务器资源的Response对象，包含爬虫返回的内容。\n\nget方法的完整用法：`requests.get(url, params=None, **kwargs)`。其中\n\n- url: 拟获取页面的url链接\n- params：url中的额外参数，字典或字节流格式，可选。\n- \\*\\*kwargs：12个控制访问的参数\n\n这里演示`requests.get()`，请求百度首页，返回200状态码：\n\n```python\nimport requests\nr = requests.get('http://www.baidu.com')\nprint r.status_code  # 200表示请求成功\ntype(r)  # <class 'requests.models.Response'>\n```\n\n爬取网页的通用代码框架\n\n```python\nimport requests\n\n\ndef getHtmlText(url):\n    try:\n        r = requests.get(url, timeout=30)\n        r.raise_for_status()\n        r.encoding = r.apparent_encoding\n        return r.text\n    except:\n        return '产生异常'\n\nif __name__ == '__main__':\n    url = 'http://www.baidu.com'\n    print getHtmlText(url)\n```\n\n#### post()方法\n\n通过`requests.post(url, data=None, json=None, **kwargs)`方法向服务器提交数据。如果我们提交的数据形式是键值对（字典）的形式时，会被自动放在`form`中，如果提交的是字符串时，则被存在`data`字段下。\n\n提交键值对：\n\n```python\npayload = {'key1': 'value1', 'key2': 'value2'}\nr = requests.post('http://httpbin.org/post', data=payload)\nprint r.text\n''' {\n  ...\n  'form': {\n    'key1': 'value1',\n    'key2': 'value2'\n  },\n  ...\n}\n'''\n```\n\n提交字段：\n\n```python\nplayload = '123456'\nr = requests.post('http://httpbin.org/post', data=playload)\nprint r.text\n'''\n{\n 'args': {},\n 'data': '123456',\n 'files': {},\n 'form': {},\n 'headers': {\n   'Accept': '*/*',\n   'Accept-Encoding': 'gzip, deflate',\n   'Connection': 'close',\n   'Content-Length': '6',\n   'Host': 'httpbin.org',\n   'User-Agent': 'python-requests/2.11.1'\n },\n 'json': 123456,\n 'origin': '183.199.3.79',\n 'url': 'http://httpbin.org/post'\n}\n'''\n```\n\n#### head()方法\n\n用`requests.head`获取一个链接，可以通过`r.headers`获取返回的头部信息内容，而 `r.text`发现是为空。通过该方法，可以用很少的网络流量获取网络资源的概要信息。\n例如：\n```python\nimport requests\n\nr = requests.head('http://www.baidu.com')\nprint r.headers\n# {'Content-Encoding': 'gzip', 'Server': 'bfe/1.0.8.18', 'Last-Modified': 'Mon, 13 Jun 2016 02:50:08 GMT', 'Connection': 'Keep-Alive', 'Pragma': 'no-cache', 'Cache-Control': 'private, no-cache, no-store, proxy-revalidate, no-transform', 'Date': 'Sat, 16 Dec 2017 03:26:25 GMT', 'Content-Type': 'text/html'}\nprint r.text  # ''\n```\n\n### Response对象的属性\n\n|属性|说明|\n| :------------------- | :----------------- |\n|r.status_code|HTTP请求的返回状态，200表示连接成功，404表示失败|\n|r.text|HTTP响应内容的字符串形式，即url对应的页面内容|\n|r.encoding|从HTTP header中猜测响应内容编码方式|\n|r.apparent_encoding|从内容中分析出的响应内容编码方式（备选编码方式）|\n|r.content|HTTP响应内容的二进制形式|\n| **r.raise_for_status()** | **如果不是200,产生异常requests.HTTPError** |\n\n\n### Requests库异常\n\n|异常|说明|\n| :------------------- | :----------------- |\n|requests.ConnectionError|网络连接错误异常，如DNS查询失败、拒绝连接等|\n|requests.HTTPError|HTTP错误异常|\n|requests.URLRequired|URL缺失异常|\n|requests.TooManyReqirects|超过最大重定向次数，产生重定向异常|\n|requests.ConnectTimeout|连接远程服务器超时异常|\n|requests.Timeout|请求URL超时，产生超时异常|\n\n---\n\n### requests爬虫实战\n\n这里通过以上的学习，掩饰几组使用requests库网络爬虫实战：\n\n#### 图片爬取\n\n```python\nimport requests\nimport os\n\nurl = \"http://www.sinaimg.cn/dy/slidenews/1_img/2017_29/88490_1334396_633374.jpg\"\nroot = \"./images/\"\npath = root + url.split(\"/\")[-1]\n\ntry:\n    if not os.path.exists(root):\n        os.makdir(root)\n    if not os.path.exists(path):\n        r = requests.get(url)\n        whith open(path, \"wb\") as f:\n            f.write(r.content)\n        print \"文件保存成功！\"\n    else:\n        print \"爬取失败！\"\nexcept:\n    print \"爬取失败\"\n```\n\n#### ip地址判断\n\n```python\nimport requests\n\nurl = \"http://m.ip138.com/ip.asp?ip=\"\ntry:\n    r = requests.get(url + \"202.204.80.112\")\n    r.raise_for_status()\n    r.encoding = r.apparent_encoding\n    print r.text[-500:]\nexcept:\n    print \"爬取失败！\"\n```\n---\n","slug":"python网络爬虫和信息提取(1)","published":1,"updated":"2021-06-20T10:25:20.128Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluqa1hj40035rlogc27v4npm","content":"<h2 id=\"requests-库的安装和使用\"><a href=\"#requests-库的安装和使用\" class=\"headerlink\" title=\"requests 库的安装和使用\"></a>requests 库的安装和使用</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><pre><code>pip install requests\n</code></pre>\n<h3 id=\"7个主要方法\"><a href=\"#7个主要方法\" class=\"headerlink\" title=\"7个主要方法\"></a>7个主要方法</h3><ul>\n<li>requests.requests() 构造一个请求，支撑以下各方法的基础方法。</li>\n<li>requests.get() 获取HTML网页的主要方法，对应于HTTP的GET</li>\n<li>requests.head() 获取HTML网页头信息的方法，对应于HTTP的HEAD</li>\n<li>requests.post() 向HTML网页提交POST请求的方法，对应于HTTP的POST</li>\n<li>requests.put() 向HTML网页提交PUT请求的方法，对应于HTTP的PUT</li>\n<li>requests.patch() 向网页提交局部修改请求，对应于HTTP的PATCH</li>\n<li>requests.delete() 向HTML网页提交删除请求，对应HTTP的DELETE</li>\n</ul>\n<p>其中<code>requests.requests()</code>方法是基础方法，其他方法都可以说是对他的封装。可以这样理解 <code>requests</code> 库只有一个方法，就是 <code>requests.requests()</code> 方法。</p>\n<span id=\"more\"></span>\n\n<h4 id=\"requests-方法\"><a href=\"#requests-方法\" class=\"headerlink\" title=\"requests()方法\"></a>requests()方法</h4><p><code>requests.requests()</code>方法是基础方法，其他方法都可以说是对他的封装。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">requests.requests(method, url, **kwargs)</span><br></pre></td></tr></table></figure>\n\n<p><strong>method: 请求方式，对应get&#x2F;post&#x2F;put等7种</strong></p>\n<ul>\n<li><code>r = requests.requests(&#39;POST&#39;, url, **kwargs)</code></li>\n<li><code>r = requests.requests(&#39;GET&#39;, url, **kwargs)</code></li>\n<li><code>r = requests.requests(&#39;PUT&#39;, url, **kwargs)</code></li>\n<li><code>r = requests.requests(&#39;HEAD&#39;, url, **kwargs)</code></li>\n<li><code>r = requests.requests(&#39;PATCH&#39;, url, **kwargs)</code></li>\n<li><code>r = requests.requests(&#39;DELETE&#39;, url, **kwargs)</code></li>\n<li><code>r = requests.requests(&#39;OPTIONS&#39;, url, **kwargs)</code></li>\n</ul>\n<p>与HTTP协议对于的请求功能。前6种分别对应<code>requests.post()</code>、<code>requests.get()</code>等</p>\n<p><strong>url: 拟获取页面的url链接</strong><br><strong>**kwargs: 控制访问的参数，共13个。均为可选项</strong></p>\n<ul>\n<li>params: 字典或字节序列，作为参数增加到url中。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kv = &#123;<span class=\"string\">&#x27;key1&#x27;</span>: <span class=\"string\">&#x27;value1&#x27;</span>, <span class=\"string\">&#x27;key2&#x27;</span>: <span class=\"string\">&#x27;value2&#x27;</span>&#125;</span><br><span class=\"line\">r = requests.requests(<span class=\"string\">&#x27;GET&#x27;</span>, <span class=\"string\">&#x27;http://python123.io/ws&#x27;</span>, params=kv)</span><br><span class=\"line\"><span class=\"built_in\">print</span> r.url  <span class=\"comment\"># http://python123.io/ws?key1=value1&amp;key2=value2</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>data：字典、字节序列或文件对象，作为Reques内容</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kv = &#123;<span class=\"string\">&#x27;key1&#x27;</span>: <span class=\"string\">&#x27;value1&#x27;</span>, <span class=\"string\">&#x27;key2&#x27;</span>: <span class=\"string\">&#x27;value2&#x27;</span>&#125;</span><br><span class=\"line\">r = requests.requests(<span class=\"string\">&#x27;POST&#x27;</span>, <span class=\"string\">&#x27;http://python123.io/ws&#x27;</span>, data=kv)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>json：JSON格式的数据，作为Request内容</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kv = &#123;<span class=\"string\">&#x27;key1&#x27;</span>: <span class=\"string\">&#x27;value1&#x27;</span>, <span class=\"string\">&#x27;key2&#x27;</span>: <span class=\"string\">&#x27;value2&#x27;</span>&#125;</span><br><span class=\"line\">r = requests.requests(<span class=\"string\">&#x27;POST&#x27;</span>, <span class=\"string\">&#x27;http://python123.io/ws&#x27;</span>, json=kv)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>headers：字典，HTTP定制头</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hd = &#123;<span class=\"string\">&#x27;user-agent&#x27;</span>: <span class=\"string\">&#x27;Chrome/10&#x27;</span>&#125;</span><br><span class=\"line\">r = requests.requests(<span class=\"string\">&#x27;POST&#x27;</span>, <span class=\"string\">&#x27;http://python123.io/ws&#x27;</span>, headers=hd)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>cookies：字典或CookieJar，Request中的cookie</li>\n<li>auth：元组，支持HTTP认证功能</li>\n<li>files：字典类型，传输文件</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fs = &#123;<span class=\"string\">&#x27;file&#x27;</span>: <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;data.xls&#x27;</span>, <span class=\"string\">&#x27;rb&#x27;</span>)&#125;</span><br><span class=\"line\">r = requests.requests(<span class=\"string\">&#x27;POST&#x27;</span>, <span class=\"string\">&#x27;http://python123.io/ws&#x27;</span>, files=fs)</span><br><span class=\"line\">```  </span><br><span class=\"line\"></span><br><span class=\"line\">- timeout：设定超时时间，秒为单位</span><br><span class=\"line\"></span><br><span class=\"line\">```python</span><br><span class=\"line\">r = requests.requests(<span class=\"string\">&#x27;GET&#x27;</span>, <span class=\"string\">&#x27;http://python123.io/ws&#x27;</span>, timeout=<span class=\"number\">10</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>proxies：字典类型，设定访问代理服务器，可以增加登录认证</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pxs = &#123;<span class=\"string\">&#x27;http&#x27;</span>: <span class=\"string\">&#x27;http://user:pass@10.10.10.1:1234&#x27;</span>, <span class=\"string\">&#x27;https&#x27;</span>: <span class=\"string\">&#x27;https://10.10.10.1:4321&#x27;</span>&#125;</span><br><span class=\"line\">r = requests.requests(<span class=\"string\">&#x27;GET&#x27;</span>, <span class=\"string\">&#x27;http://www.baidu.com&#x27;</span>, proxies=pxs)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>allow_redirects：True&#x2F;False，默认为True，重定向开关</li>\n<li>stream：True&#x2F;Fasle，默认为True，获取内容立即下载开关</li>\n<li>verify：True&#x2F;False，默认为True，认证SSL证书开关</li>\n<li>cert：本地SSL证书路径</li>\n</ul>\n<h4 id=\"get-方法\"><a href=\"#get-方法\" class=\"headerlink\" title=\"get()方法\"></a>get()方法</h4><p>最简单的：<code>r = requests.get(url)</code>,构造一个向服务器请求资源的Requests对象。返回一个包含服务器资源的Response对象，包含爬虫返回的内容。</p>\n<p>get方法的完整用法：<code>requests.get(url, params=None, **kwargs)</code>。其中</p>\n<ul>\n<li>url: 拟获取页面的url链接</li>\n<li>params：url中的额外参数，字典或字节流格式，可选。</li>\n<li>**kwargs：12个控制访问的参数</li>\n</ul>\n<p>这里演示<code>requests.get()</code>，请求百度首页，返回200状态码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\">r = requests.get(<span class=\"string\">&#x27;http://www.baidu.com&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span> r.status_code  <span class=\"comment\"># 200表示请求成功</span></span><br><span class=\"line\"><span class=\"built_in\">type</span>(r)  <span class=\"comment\"># &lt;class &#x27;requests.models.Response&#x27;&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>爬取网页的通用代码框架</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">getHtmlText</span>(<span class=\"params\">url</span>):</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        r = requests.get(url, timeout=<span class=\"number\">30</span>)</span><br><span class=\"line\">        r.raise_for_status()</span><br><span class=\"line\">        r.encoding = r.apparent_encoding</span><br><span class=\"line\">        <span class=\"keyword\">return</span> r.text</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;产生异常&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    url = <span class=\"string\">&#x27;http://www.baidu.com&#x27;</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span> getHtmlText(url)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"post-方法\"><a href=\"#post-方法\" class=\"headerlink\" title=\"post()方法\"></a>post()方法</h4><p>通过<code>requests.post(url, data=None, json=None, **kwargs)</code>方法向服务器提交数据。如果我们提交的数据形式是键值对（字典）的形式时，会被自动放在<code>form</code>中，如果提交的是字符串时，则被存在<code>data</code>字段下。</p>\n<p>提交键值对：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">payload = &#123;<span class=\"string\">&#x27;key1&#x27;</span>: <span class=\"string\">&#x27;value1&#x27;</span>, <span class=\"string\">&#x27;key2&#x27;</span>: <span class=\"string\">&#x27;value2&#x27;</span>&#125;</span><br><span class=\"line\">r = requests.post(<span class=\"string\">&#x27;http://httpbin.org/post&#x27;</span>, data=payload)</span><br><span class=\"line\"><span class=\"built_in\">print</span> r.text</span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27; &#123;</span></span><br><span class=\"line\"><span class=\"string\">  ...</span></span><br><span class=\"line\"><span class=\"string\">  &#x27;form&#x27;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">    &#x27;key1&#x27;: &#x27;value1&#x27;,</span></span><br><span class=\"line\"><span class=\"string\">    &#x27;key2&#x27;: &#x27;value2&#x27;</span></span><br><span class=\"line\"><span class=\"string\">  &#125;,</span></span><br><span class=\"line\"><span class=\"string\">  ...</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>提交字段：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">playload = <span class=\"string\">&#x27;123456&#x27;</span></span><br><span class=\"line\">r = requests.post(<span class=\"string\">&#x27;http://httpbin.org/post&#x27;</span>, data=playload)</span><br><span class=\"line\"><span class=\"built_in\">print</span> r.text</span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"string\"> &#x27;args&#x27;: &#123;&#125;,</span></span><br><span class=\"line\"><span class=\"string\"> &#x27;data&#x27;: &#x27;123456&#x27;,</span></span><br><span class=\"line\"><span class=\"string\"> &#x27;files&#x27;: &#123;&#125;,</span></span><br><span class=\"line\"><span class=\"string\"> &#x27;form&#x27;: &#123;&#125;,</span></span><br><span class=\"line\"><span class=\"string\"> &#x27;headers&#x27;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">   &#x27;Accept&#x27;: &#x27;*/*&#x27;,</span></span><br><span class=\"line\"><span class=\"string\">   &#x27;Accept-Encoding&#x27;: &#x27;gzip, deflate&#x27;,</span></span><br><span class=\"line\"><span class=\"string\">   &#x27;Connection&#x27;: &#x27;close&#x27;,</span></span><br><span class=\"line\"><span class=\"string\">   &#x27;Content-Length&#x27;: &#x27;6&#x27;,</span></span><br><span class=\"line\"><span class=\"string\">   &#x27;Host&#x27;: &#x27;httpbin.org&#x27;,</span></span><br><span class=\"line\"><span class=\"string\">   &#x27;User-Agent&#x27;: &#x27;python-requests/2.11.1&#x27;</span></span><br><span class=\"line\"><span class=\"string\"> &#125;,</span></span><br><span class=\"line\"><span class=\"string\"> &#x27;json&#x27;: 123456,</span></span><br><span class=\"line\"><span class=\"string\"> &#x27;origin&#x27;: &#x27;183.199.3.79&#x27;,</span></span><br><span class=\"line\"><span class=\"string\"> &#x27;url&#x27;: &#x27;http://httpbin.org/post&#x27;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"head-方法\"><a href=\"#head-方法\" class=\"headerlink\" title=\"head()方法\"></a>head()方法</h4><p>用<code>requests.head</code>获取一个链接，可以通过<code>r.headers</code>获取返回的头部信息内容，而 <code>r.text</code>发现是为空。通过该方法，可以用很少的网络流量获取网络资源的概要信息。<br>例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\">r = requests.head(<span class=\"string\">&#x27;http://www.baidu.com&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span> r.headers</span><br><span class=\"line\"><span class=\"comment\"># &#123;&#x27;Content-Encoding&#x27;: &#x27;gzip&#x27;, &#x27;Server&#x27;: &#x27;bfe/1.0.8.18&#x27;, &#x27;Last-Modified&#x27;: &#x27;Mon, 13 Jun 2016 02:50:08 GMT&#x27;, &#x27;Connection&#x27;: &#x27;Keep-Alive&#x27;, &#x27;Pragma&#x27;: &#x27;no-cache&#x27;, &#x27;Cache-Control&#x27;: &#x27;private, no-cache, no-store, proxy-revalidate, no-transform&#x27;, &#x27;Date&#x27;: &#x27;Sat, 16 Dec 2017 03:26:25 GMT&#x27;, &#x27;Content-Type&#x27;: &#x27;text/html&#x27;&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span> r.text  <span class=\"comment\"># &#x27;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Response对象的属性\"><a href=\"#Response对象的属性\" class=\"headerlink\" title=\"Response对象的属性\"></a>Response对象的属性</h3><table>\n<thead>\n<tr>\n<th align=\"left\">属性</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">r.status_code</td>\n<td align=\"left\">HTTP请求的返回状态，200表示连接成功，404表示失败</td>\n</tr>\n<tr>\n<td align=\"left\">r.text</td>\n<td align=\"left\">HTTP响应内容的字符串形式，即url对应的页面内容</td>\n</tr>\n<tr>\n<td align=\"left\">r.encoding</td>\n<td align=\"left\">从HTTP header中猜测响应内容编码方式</td>\n</tr>\n<tr>\n<td align=\"left\">r.apparent_encoding</td>\n<td align=\"left\">从内容中分析出的响应内容编码方式（备选编码方式）</td>\n</tr>\n<tr>\n<td align=\"left\">r.content</td>\n<td align=\"left\">HTTP响应内容的二进制形式</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>r.raise_for_status()</strong></td>\n<td align=\"left\"><strong>如果不是200,产生异常requests.HTTPError</strong></td>\n</tr>\n</tbody></table>\n<h3 id=\"Requests库异常\"><a href=\"#Requests库异常\" class=\"headerlink\" title=\"Requests库异常\"></a>Requests库异常</h3><table>\n<thead>\n<tr>\n<th align=\"left\">异常</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">requests.ConnectionError</td>\n<td align=\"left\">网络连接错误异常，如DNS查询失败、拒绝连接等</td>\n</tr>\n<tr>\n<td align=\"left\">requests.HTTPError</td>\n<td align=\"left\">HTTP错误异常</td>\n</tr>\n<tr>\n<td align=\"left\">requests.URLRequired</td>\n<td align=\"left\">URL缺失异常</td>\n</tr>\n<tr>\n<td align=\"left\">requests.TooManyReqirects</td>\n<td align=\"left\">超过最大重定向次数，产生重定向异常</td>\n</tr>\n<tr>\n<td align=\"left\">requests.ConnectTimeout</td>\n<td align=\"left\">连接远程服务器超时异常</td>\n</tr>\n<tr>\n<td align=\"left\">requests.Timeout</td>\n<td align=\"left\">请求URL超时，产生超时异常</td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"requests爬虫实战\"><a href=\"#requests爬虫实战\" class=\"headerlink\" title=\"requests爬虫实战\"></a>requests爬虫实战</h3><p>这里通过以上的学习，掩饰几组使用requests库网络爬虫实战：</p>\n<h4 id=\"图片爬取\"><a href=\"#图片爬取\" class=\"headerlink\" title=\"图片爬取\"></a>图片爬取</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\">url = <span class=\"string\">&quot;http://www.sinaimg.cn/dy/slidenews/1_img/2017_29/88490_1334396_633374.jpg&quot;</span></span><br><span class=\"line\">root = <span class=\"string\">&quot;./images/&quot;</span></span><br><span class=\"line\">path = root + url.split(<span class=\"string\">&quot;/&quot;</span>)[-<span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(root):</span><br><span class=\"line\">        os.makdir(root)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(path):</span><br><span class=\"line\">        r = requests.get(url)</span><br><span class=\"line\">        whith <span class=\"built_in\">open</span>(path, <span class=\"string\">&quot;wb&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">            f.write(r.content)</span><br><span class=\"line\">        <span class=\"built_in\">print</span> <span class=\"string\">&quot;文件保存成功！&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span> <span class=\"string\">&quot;爬取失败！&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span> <span class=\"string\">&quot;爬取失败&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"ip地址判断\"><a href=\"#ip地址判断\" class=\"headerlink\" title=\"ip地址判断\"></a>ip地址判断</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\">url = <span class=\"string\">&quot;http://m.ip138.com/ip.asp?ip=&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    r = requests.get(url + <span class=\"string\">&quot;202.204.80.112&quot;</span>)</span><br><span class=\"line\">    r.raise_for_status()</span><br><span class=\"line\">    r.encoding = r.apparent_encoding</span><br><span class=\"line\">    <span class=\"built_in\">print</span> r.text[-<span class=\"number\">500</span>:]</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span> <span class=\"string\">&quot;爬取失败！&quot;</span></span><br></pre></td></tr></table></figure>\n<hr>\n","site":{"data":{}},"excerpt":"<h2 id=\"requests-库的安装和使用\"><a href=\"#requests-库的安装和使用\" class=\"headerlink\" title=\"requests 库的安装和使用\"></a>requests 库的安装和使用</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><pre><code>pip install requests\n</code></pre>\n<h3 id=\"7个主要方法\"><a href=\"#7个主要方法\" class=\"headerlink\" title=\"7个主要方法\"></a>7个主要方法</h3><ul>\n<li>requests.requests() 构造一个请求，支撑以下各方法的基础方法。</li>\n<li>requests.get() 获取HTML网页的主要方法，对应于HTTP的GET</li>\n<li>requests.head() 获取HTML网页头信息的方法，对应于HTTP的HEAD</li>\n<li>requests.post() 向HTML网页提交POST请求的方法，对应于HTTP的POST</li>\n<li>requests.put() 向HTML网页提交PUT请求的方法，对应于HTTP的PUT</li>\n<li>requests.patch() 向网页提交局部修改请求，对应于HTTP的PATCH</li>\n<li>requests.delete() 向HTML网页提交删除请求，对应HTTP的DELETE</li>\n</ul>\n<p>其中<code>requests.requests()</code>方法是基础方法，其他方法都可以说是对他的封装。可以这样理解 <code>requests</code> 库只有一个方法，就是 <code>requests.requests()</code> 方法。</p>","more":"<h4 id=\"requests-方法\"><a href=\"#requests-方法\" class=\"headerlink\" title=\"requests()方法\"></a>requests()方法</h4><p><code>requests.requests()</code>方法是基础方法，其他方法都可以说是对他的封装。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">requests.requests(method, url, **kwargs)</span><br></pre></td></tr></table></figure>\n\n<p><strong>method: 请求方式，对应get&#x2F;post&#x2F;put等7种</strong></p>\n<ul>\n<li><code>r = requests.requests(&#39;POST&#39;, url, **kwargs)</code></li>\n<li><code>r = requests.requests(&#39;GET&#39;, url, **kwargs)</code></li>\n<li><code>r = requests.requests(&#39;PUT&#39;, url, **kwargs)</code></li>\n<li><code>r = requests.requests(&#39;HEAD&#39;, url, **kwargs)</code></li>\n<li><code>r = requests.requests(&#39;PATCH&#39;, url, **kwargs)</code></li>\n<li><code>r = requests.requests(&#39;DELETE&#39;, url, **kwargs)</code></li>\n<li><code>r = requests.requests(&#39;OPTIONS&#39;, url, **kwargs)</code></li>\n</ul>\n<p>与HTTP协议对于的请求功能。前6种分别对应<code>requests.post()</code>、<code>requests.get()</code>等</p>\n<p><strong>url: 拟获取页面的url链接</strong><br><strong>**kwargs: 控制访问的参数，共13个。均为可选项</strong></p>\n<ul>\n<li>params: 字典或字节序列，作为参数增加到url中。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kv = &#123;<span class=\"string\">&#x27;key1&#x27;</span>: <span class=\"string\">&#x27;value1&#x27;</span>, <span class=\"string\">&#x27;key2&#x27;</span>: <span class=\"string\">&#x27;value2&#x27;</span>&#125;</span><br><span class=\"line\">r = requests.requests(<span class=\"string\">&#x27;GET&#x27;</span>, <span class=\"string\">&#x27;http://python123.io/ws&#x27;</span>, params=kv)</span><br><span class=\"line\"><span class=\"built_in\">print</span> r.url  <span class=\"comment\"># http://python123.io/ws?key1=value1&amp;key2=value2</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>data：字典、字节序列或文件对象，作为Reques内容</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kv = &#123;<span class=\"string\">&#x27;key1&#x27;</span>: <span class=\"string\">&#x27;value1&#x27;</span>, <span class=\"string\">&#x27;key2&#x27;</span>: <span class=\"string\">&#x27;value2&#x27;</span>&#125;</span><br><span class=\"line\">r = requests.requests(<span class=\"string\">&#x27;POST&#x27;</span>, <span class=\"string\">&#x27;http://python123.io/ws&#x27;</span>, data=kv)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>json：JSON格式的数据，作为Request内容</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kv = &#123;<span class=\"string\">&#x27;key1&#x27;</span>: <span class=\"string\">&#x27;value1&#x27;</span>, <span class=\"string\">&#x27;key2&#x27;</span>: <span class=\"string\">&#x27;value2&#x27;</span>&#125;</span><br><span class=\"line\">r = requests.requests(<span class=\"string\">&#x27;POST&#x27;</span>, <span class=\"string\">&#x27;http://python123.io/ws&#x27;</span>, json=kv)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>headers：字典，HTTP定制头</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hd = &#123;<span class=\"string\">&#x27;user-agent&#x27;</span>: <span class=\"string\">&#x27;Chrome/10&#x27;</span>&#125;</span><br><span class=\"line\">r = requests.requests(<span class=\"string\">&#x27;POST&#x27;</span>, <span class=\"string\">&#x27;http://python123.io/ws&#x27;</span>, headers=hd)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>cookies：字典或CookieJar，Request中的cookie</li>\n<li>auth：元组，支持HTTP认证功能</li>\n<li>files：字典类型，传输文件</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fs = &#123;<span class=\"string\">&#x27;file&#x27;</span>: <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;data.xls&#x27;</span>, <span class=\"string\">&#x27;rb&#x27;</span>)&#125;</span><br><span class=\"line\">r = requests.requests(<span class=\"string\">&#x27;POST&#x27;</span>, <span class=\"string\">&#x27;http://python123.io/ws&#x27;</span>, files=fs)</span><br><span class=\"line\">```  </span><br><span class=\"line\"></span><br><span class=\"line\">- timeout：设定超时时间，秒为单位</span><br><span class=\"line\"></span><br><span class=\"line\">```python</span><br><span class=\"line\">r = requests.requests(<span class=\"string\">&#x27;GET&#x27;</span>, <span class=\"string\">&#x27;http://python123.io/ws&#x27;</span>, timeout=<span class=\"number\">10</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>proxies：字典类型，设定访问代理服务器，可以增加登录认证</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pxs = &#123;<span class=\"string\">&#x27;http&#x27;</span>: <span class=\"string\">&#x27;http://user:pass@10.10.10.1:1234&#x27;</span>, <span class=\"string\">&#x27;https&#x27;</span>: <span class=\"string\">&#x27;https://10.10.10.1:4321&#x27;</span>&#125;</span><br><span class=\"line\">r = requests.requests(<span class=\"string\">&#x27;GET&#x27;</span>, <span class=\"string\">&#x27;http://www.baidu.com&#x27;</span>, proxies=pxs)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>allow_redirects：True&#x2F;False，默认为True，重定向开关</li>\n<li>stream：True&#x2F;Fasle，默认为True，获取内容立即下载开关</li>\n<li>verify：True&#x2F;False，默认为True，认证SSL证书开关</li>\n<li>cert：本地SSL证书路径</li>\n</ul>\n<h4 id=\"get-方法\"><a href=\"#get-方法\" class=\"headerlink\" title=\"get()方法\"></a>get()方法</h4><p>最简单的：<code>r = requests.get(url)</code>,构造一个向服务器请求资源的Requests对象。返回一个包含服务器资源的Response对象，包含爬虫返回的内容。</p>\n<p>get方法的完整用法：<code>requests.get(url, params=None, **kwargs)</code>。其中</p>\n<ul>\n<li>url: 拟获取页面的url链接</li>\n<li>params：url中的额外参数，字典或字节流格式，可选。</li>\n<li>**kwargs：12个控制访问的参数</li>\n</ul>\n<p>这里演示<code>requests.get()</code>，请求百度首页，返回200状态码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\">r = requests.get(<span class=\"string\">&#x27;http://www.baidu.com&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span> r.status_code  <span class=\"comment\"># 200表示请求成功</span></span><br><span class=\"line\"><span class=\"built_in\">type</span>(r)  <span class=\"comment\"># &lt;class &#x27;requests.models.Response&#x27;&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>爬取网页的通用代码框架</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">getHtmlText</span>(<span class=\"params\">url</span>):</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        r = requests.get(url, timeout=<span class=\"number\">30</span>)</span><br><span class=\"line\">        r.raise_for_status()</span><br><span class=\"line\">        r.encoding = r.apparent_encoding</span><br><span class=\"line\">        <span class=\"keyword\">return</span> r.text</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;产生异常&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    url = <span class=\"string\">&#x27;http://www.baidu.com&#x27;</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span> getHtmlText(url)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"post-方法\"><a href=\"#post-方法\" class=\"headerlink\" title=\"post()方法\"></a>post()方法</h4><p>通过<code>requests.post(url, data=None, json=None, **kwargs)</code>方法向服务器提交数据。如果我们提交的数据形式是键值对（字典）的形式时，会被自动放在<code>form</code>中，如果提交的是字符串时，则被存在<code>data</code>字段下。</p>\n<p>提交键值对：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">payload = &#123;<span class=\"string\">&#x27;key1&#x27;</span>: <span class=\"string\">&#x27;value1&#x27;</span>, <span class=\"string\">&#x27;key2&#x27;</span>: <span class=\"string\">&#x27;value2&#x27;</span>&#125;</span><br><span class=\"line\">r = requests.post(<span class=\"string\">&#x27;http://httpbin.org/post&#x27;</span>, data=payload)</span><br><span class=\"line\"><span class=\"built_in\">print</span> r.text</span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27; &#123;</span></span><br><span class=\"line\"><span class=\"string\">  ...</span></span><br><span class=\"line\"><span class=\"string\">  &#x27;form&#x27;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">    &#x27;key1&#x27;: &#x27;value1&#x27;,</span></span><br><span class=\"line\"><span class=\"string\">    &#x27;key2&#x27;: &#x27;value2&#x27;</span></span><br><span class=\"line\"><span class=\"string\">  &#125;,</span></span><br><span class=\"line\"><span class=\"string\">  ...</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>提交字段：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">playload = <span class=\"string\">&#x27;123456&#x27;</span></span><br><span class=\"line\">r = requests.post(<span class=\"string\">&#x27;http://httpbin.org/post&#x27;</span>, data=playload)</span><br><span class=\"line\"><span class=\"built_in\">print</span> r.text</span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">&#123;</span></span><br><span class=\"line\"><span class=\"string\"> &#x27;args&#x27;: &#123;&#125;,</span></span><br><span class=\"line\"><span class=\"string\"> &#x27;data&#x27;: &#x27;123456&#x27;,</span></span><br><span class=\"line\"><span class=\"string\"> &#x27;files&#x27;: &#123;&#125;,</span></span><br><span class=\"line\"><span class=\"string\"> &#x27;form&#x27;: &#123;&#125;,</span></span><br><span class=\"line\"><span class=\"string\"> &#x27;headers&#x27;: &#123;</span></span><br><span class=\"line\"><span class=\"string\">   &#x27;Accept&#x27;: &#x27;*/*&#x27;,</span></span><br><span class=\"line\"><span class=\"string\">   &#x27;Accept-Encoding&#x27;: &#x27;gzip, deflate&#x27;,</span></span><br><span class=\"line\"><span class=\"string\">   &#x27;Connection&#x27;: &#x27;close&#x27;,</span></span><br><span class=\"line\"><span class=\"string\">   &#x27;Content-Length&#x27;: &#x27;6&#x27;,</span></span><br><span class=\"line\"><span class=\"string\">   &#x27;Host&#x27;: &#x27;httpbin.org&#x27;,</span></span><br><span class=\"line\"><span class=\"string\">   &#x27;User-Agent&#x27;: &#x27;python-requests/2.11.1&#x27;</span></span><br><span class=\"line\"><span class=\"string\"> &#125;,</span></span><br><span class=\"line\"><span class=\"string\"> &#x27;json&#x27;: 123456,</span></span><br><span class=\"line\"><span class=\"string\"> &#x27;origin&#x27;: &#x27;183.199.3.79&#x27;,</span></span><br><span class=\"line\"><span class=\"string\"> &#x27;url&#x27;: &#x27;http://httpbin.org/post&#x27;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"head-方法\"><a href=\"#head-方法\" class=\"headerlink\" title=\"head()方法\"></a>head()方法</h4><p>用<code>requests.head</code>获取一个链接，可以通过<code>r.headers</code>获取返回的头部信息内容，而 <code>r.text</code>发现是为空。通过该方法，可以用很少的网络流量获取网络资源的概要信息。<br>例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\">r = requests.head(<span class=\"string\">&#x27;http://www.baidu.com&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span> r.headers</span><br><span class=\"line\"><span class=\"comment\"># &#123;&#x27;Content-Encoding&#x27;: &#x27;gzip&#x27;, &#x27;Server&#x27;: &#x27;bfe/1.0.8.18&#x27;, &#x27;Last-Modified&#x27;: &#x27;Mon, 13 Jun 2016 02:50:08 GMT&#x27;, &#x27;Connection&#x27;: &#x27;Keep-Alive&#x27;, &#x27;Pragma&#x27;: &#x27;no-cache&#x27;, &#x27;Cache-Control&#x27;: &#x27;private, no-cache, no-store, proxy-revalidate, no-transform&#x27;, &#x27;Date&#x27;: &#x27;Sat, 16 Dec 2017 03:26:25 GMT&#x27;, &#x27;Content-Type&#x27;: &#x27;text/html&#x27;&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span> r.text  <span class=\"comment\"># &#x27;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Response对象的属性\"><a href=\"#Response对象的属性\" class=\"headerlink\" title=\"Response对象的属性\"></a>Response对象的属性</h3><table>\n<thead>\n<tr>\n<th align=\"left\">属性</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">r.status_code</td>\n<td align=\"left\">HTTP请求的返回状态，200表示连接成功，404表示失败</td>\n</tr>\n<tr>\n<td align=\"left\">r.text</td>\n<td align=\"left\">HTTP响应内容的字符串形式，即url对应的页面内容</td>\n</tr>\n<tr>\n<td align=\"left\">r.encoding</td>\n<td align=\"left\">从HTTP header中猜测响应内容编码方式</td>\n</tr>\n<tr>\n<td align=\"left\">r.apparent_encoding</td>\n<td align=\"left\">从内容中分析出的响应内容编码方式（备选编码方式）</td>\n</tr>\n<tr>\n<td align=\"left\">r.content</td>\n<td align=\"left\">HTTP响应内容的二进制形式</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>r.raise_for_status()</strong></td>\n<td align=\"left\"><strong>如果不是200,产生异常requests.HTTPError</strong></td>\n</tr>\n</tbody></table>\n<h3 id=\"Requests库异常\"><a href=\"#Requests库异常\" class=\"headerlink\" title=\"Requests库异常\"></a>Requests库异常</h3><table>\n<thead>\n<tr>\n<th align=\"left\">异常</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">requests.ConnectionError</td>\n<td align=\"left\">网络连接错误异常，如DNS查询失败、拒绝连接等</td>\n</tr>\n<tr>\n<td align=\"left\">requests.HTTPError</td>\n<td align=\"left\">HTTP错误异常</td>\n</tr>\n<tr>\n<td align=\"left\">requests.URLRequired</td>\n<td align=\"left\">URL缺失异常</td>\n</tr>\n<tr>\n<td align=\"left\">requests.TooManyReqirects</td>\n<td align=\"left\">超过最大重定向次数，产生重定向异常</td>\n</tr>\n<tr>\n<td align=\"left\">requests.ConnectTimeout</td>\n<td align=\"left\">连接远程服务器超时异常</td>\n</tr>\n<tr>\n<td align=\"left\">requests.Timeout</td>\n<td align=\"left\">请求URL超时，产生超时异常</td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"requests爬虫实战\"><a href=\"#requests爬虫实战\" class=\"headerlink\" title=\"requests爬虫实战\"></a>requests爬虫实战</h3><p>这里通过以上的学习，掩饰几组使用requests库网络爬虫实战：</p>\n<h4 id=\"图片爬取\"><a href=\"#图片爬取\" class=\"headerlink\" title=\"图片爬取\"></a>图片爬取</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\">url = <span class=\"string\">&quot;http://www.sinaimg.cn/dy/slidenews/1_img/2017_29/88490_1334396_633374.jpg&quot;</span></span><br><span class=\"line\">root = <span class=\"string\">&quot;./images/&quot;</span></span><br><span class=\"line\">path = root + url.split(<span class=\"string\">&quot;/&quot;</span>)[-<span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(root):</span><br><span class=\"line\">        os.makdir(root)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(path):</span><br><span class=\"line\">        r = requests.get(url)</span><br><span class=\"line\">        whith <span class=\"built_in\">open</span>(path, <span class=\"string\">&quot;wb&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">            f.write(r.content)</span><br><span class=\"line\">        <span class=\"built_in\">print</span> <span class=\"string\">&quot;文件保存成功！&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span> <span class=\"string\">&quot;爬取失败！&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span> <span class=\"string\">&quot;爬取失败&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"ip地址判断\"><a href=\"#ip地址判断\" class=\"headerlink\" title=\"ip地址判断\"></a>ip地址判断</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\">url = <span class=\"string\">&quot;http://m.ip138.com/ip.asp?ip=&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    r = requests.get(url + <span class=\"string\">&quot;202.204.80.112&quot;</span>)</span><br><span class=\"line\">    r.raise_for_status()</span><br><span class=\"line\">    r.encoding = r.apparent_encoding</span><br><span class=\"line\">    <span class=\"built_in\">print</span> r.text[-<span class=\"number\">500</span>:]</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span> <span class=\"string\">&quot;爬取失败！&quot;</span></span><br></pre></td></tr></table></figure>\n<hr>"},{"title":"python网络爬虫和信息提取(2)","date":"2017-12-15T16:00:00.000Z","_content":"\n## Beautiful Soup库 安装和使用\n\nbeautifulsoup能够解析HTMl和XML格式文档，是解析、遍历、维护“标签树”的功能库。\n\n### 安装\n\n    pip install beautifulsoup4\n\n### 使用\n\n```python\nfrom bs4 import BeautifulSoup\n\nsoup = BeautifulSoup(\"<p>data</p>\", \"html.parser\")\n```\n\n<!--more-->\n\n#### Beautiful Soup库解析器\n\n|解析器|使用方法|条件|\n| :----- | :-------- | :------------ |\n|bs4的HTML解析器|BeautifulSoup(mk, 'html.parser')|安装bs4库|\n|lxml的HTML解析器|BeautifulSoup(mk, 'lxml')|pip install lxml|\n|lxml的xml解析器|BeautifulSoup(mk, 'xml')|pip install lxml|\n|html5lib的解析器|BeautifulSoup(mk, \"html5lib\")|pip install html5lib|\n\n#### BeautifulSoup类的基本元素\n\n| 基本元素 | 说明 |\n| :------------- | :------------- |\n| Tag | 标签，最基本的信息组织单元，分别用 `<>` he `</>` 标明开头和结尾 |\n| Name | 标签的名字，`<p>...</p>`的名字是'p', 格式：`<tag>.name` |\n| Attributes | 标签的属性，字典形式组织，格式：`<tag>.attrs` |\n| NavigableString | 标签内非属性字符串，`<>...</>`中的字符串，格式：`<tag>.string` |\n| Comment | 标签内字符串的注释部分，一种特殊的Comment类型 |\n\n\n```python\nfrom bs4 import BeautifulSoup\nimport requests\n\nurl = \"http://www.python123.io/ws/demo.html\"\nr = requests.get(url)\ndemo = r.text\n\nsoup = BeautifulSoup(demo, \"html.parser\")\nprint soup.title  # <title>This is a python demo page</title>\nprint soup.a.parent.name  # 'p'\nprint soup.a.attrs  # {u'href': u'http://www.icourse163.org/course/BIT-268001', u'class': [u'py1'], u'id': u'link1'}\nprint soup.a.attrs['href']  # http://www.icourse163.org/course/BIT-268001\n\nprint soup.a.string  # 'Basic Python'\nprint soup.p.string  # 'The demo python introduces several python courses.'\nprint type(soup.p.string)  # <class 'bs4.element.NavigableString'>  ### sting是跨标签的\n```\n\n#### 标签树的下行遍历\n\n| 属性 | 说明 |\n| :------------- | :------------- |\n| .contents | 字节点的列表，将<tag>所有儿子节点存入列表 |\n| .children | 字节点的迭代类型，与.contents类似，用于循环遍历儿子节点 |\n| .descendants | 子孙节点的迭代类型，包含所有子孙节点，用于循环遍历 |\n\n```python\nprint soup.head.contents  # [<title>This is a python demo page</title>]\nprint len(soup.body.contnets)  # 5\nfor child in soup.body.children:\n    print child  # 遍历儿子节点\n```\n\n#### 标签树的上行遍历\n\n| 属性 | 说明 |\n| :------------- | :------------- |\n| .parent | 节点的父亲标签 |\n| .parents | 节点先辈标签的迭代类型，用于循环遍历先辈节点 |\n\n```python\nprint soup.title.parent  # <head><title>This is a python demo page</title></head>\n\nfor parent in soup.a.parents:\n    if parent is None:  # 遍历到soup的时候，soup的parent不存在，则不能输入它的name\n        print parent\n    else:\n        print parent.name\n\n```\n\n#### 标签树的平行遍历\n\n平行遍历发生在同一个父亲节点下的各节点间。\n\n| 属性 | 说明 |\n| :------------- | :------------- |\n| .next_sibling | 返回按照HTML文本顺序的下一个平行节点标签 |\n| .previous_sibling | 返回按照HTML文本顺序的上一个平行节点标签 |\n| .next_siblings | 迭代类型，返回按照HTML文本顺序的后续所有平行节点标签 |\n| .previous_siblings | 迭代类型，返回按照HTML文本顺序的前续所有平行节点标签 |\n\n```python\nprint soup.a.next_sibling  # ' and '  \nprint soup.a.next_sibling.next_sibling  # <a class=\"py2\" href=\"http://www.icourse163.org/course/BIT-1001870001\" id=\"link2\">Advanced Python</a>\nprint soup.a.previous_sibling  # Python is a wonderful general-purpose programming language. You can learn Python from novice to professional by tracking the following courses:\\r\\n\n```\n\n#### prettify()方法\n\nprettify()方法可以使HTMl内容更加友好的显示。该方法为HTMl的标签添加换行符，也可以对每个标签进行处理。\n\n\n**注意： BeautifulSoup库将读入的HTML文件或字符串都转换成uhf-8编码。**\n\n## 信息标记\n\n- 标记后的信息可形成信息组织结构，增加了信息的维度。\n- 标记后的信息可用于通信、存储或展示。\n- 标记的结构与信息一样具有重要价值。\n- 标记后的信息更有利于程序理解和运用。\n\n例如HTML的信息标记：\n\nHTML通过预定义的`<>...</>`标签形式组织不同类型的信息。\n\n#### 信息标记的种类：\n\n- XML\n- JSON：有类型的键值对 `\"key\": \"value\"`\n- YAML：无类型的键值对 `key:value`,缩进表示所属关系;`-`表达并列关系;`|`表达整块数据;`#`表达注释\n\n```YAML\nname :\n    newName : 华北理工大学\n    oldName : 河北联合大学\naddr :  # 校区地址\n - 曹妃甸\n - 路南区\ntext : |\n华北理工大学自2015年3月正式更名，2016年10月正式搬迁到曹妃甸新校区。\n```\n\n**三种信息标记种类的比较：**\n\n- XML 最早的通用信息标记语言，可扩展性好，但繁琐。Internet信息交互和传递。\n- JSON 信息有类型，适合程序处理(js)，较XML简洁。移动应用云端和节点的信息通讯，无注释。\n- YAML 信息无类型，文本信息比例最高，可读性好。各类系统的配置文件，有注释易读。\n\n#### 信息提取的一般方法\n\n1、完整解析信息的标记形式，再提取关键信息。需要标记解析器\n优点：信息解析准确\n缺点：提取过程繁琐，速度慢\n\n2、无视标记形式，直接搜索关键信息。对信息文本查找函数即可\n优点：提取过程简洁，速度较快\n缺点：提取结果准确性和信息内容相关\n\n在使用的时候，最好是两者融合：结合形式解析与搜索方法，提取关键信息。需要标记解析器及文本查找函数。\n\n```python\nfrom bs4 import BeautifulSoup\n\nsoup = BeautifulSoup(demo, \"html.parser\")\n\nfor link in soup.find_all(\"a\"):\n    print link.get(\"href\")\n\n```\n\n#### 基于bs4库的HTML内容查找方法\n\n在BeautifulSoup变量中查找里面的信息。\n\n`<>.find_all(name, attrs, recursive, string, **kwargs)` 返回一个列表类型，存储查找的结果\n\n- name：对标签名称的检索字符串，可以为字符串、列表、正则表达式\n\n```python\nprint soup.find_all('a')  # [<a class=\"py1\" href=\"http://www.icourse163.org/course/BIT-268001\" id=\"link1\">Basic Python</a>, <a class=\"py2\" href=\"http://www.icourse163.org/course/BIT-1001870001\" id=\"link2\">Advanced Python</a>]\nprint soup.find_all(['a', 'b'])  # [<b>The demo python introduces several python courses.</b>, <a class=\"py1\" href=\"http://www.icourse163.org/course/BIT-268001\" id=\"link1\">Basic Python</a>, <a class=\"py2\" href=\"http://www.icourse163.org/course/BIT-1001870001\" id=\"link2\">Advanced Python</a>]\nimport re\nfor tag in soup.find_all(re.compile('b')):\n    print tag.name  # body      b\n```\n\n- attrs：对标签属性值的检索字符串，可标注属性检索。\n\n```python\nsoup.find_all('p', 'course')\nsoup.find_all(id='link1')\nsoup.find_all(id=re.compile('link'))\n```\n\n- recursive：是否对子孙全部检索，默认True\n\n```python\nsoup.find_all('a')\nsoup.find_all('a', recursive=False)\n```\n\n- string：`<>...</>`中字符串区域的检索字符串\n\n```python\nsoup.find_all(string=\"Basic Python\")\n\nsoup.find_all(string=re.compile(\"python\"))\n```\n\n`<tag>(..)` 等价于 `<tag>.find_all(..)`\n\n**find_all的七种扩展方法**\n\n| 方法 | 说明 |\n| :------------- | :------------- |\n| `<>.find` | 搜索且返回一个结果，字符串类型，同find_all()参数 |\n| `<>.find_parents()` | 在先辈节点中搜索，返回列表类型，同find_all()参数 |\n| `<>.find_parent()` | 在先辈节点中搜索，返回字符串类型，同find_all()参数 |\n| `<>.find_next_siblings()` | 在后续平行节点中搜索，返回列表类型，同find_all()参数 |\n| `<>.find_next_sibling()` | 在后续平行节点中搜索，返回字符串类型，同find_all()参数 |\n| `<>.find_previous_siblings()` | 在前序平行节点中搜索，返回列表类型，同find_all()参数 |\n| `<>.find_previous_siblings()` | 在前序平行节点中搜索，字符串类型，同find_all()参数 |\n\n---\n\n## 中国大学排名定向爬虫实战\n\n功能描述\n\n- 输入：大学排名url链接\n- 输出：大学排名信息的屏幕输出\n- 技术路线：requests+bs4\n- 定向爬虫：仅对输入的URL进行爬取，不扩展爬取\n\n```python\n# -*- coding: utf-8 -*-\nimport requests\nimport bs4\nfrom bs4 import BeautifulSoup\n\ndef getHTMLText(url):\n    try:\n        r = requests.get(url, timeout=30)\n        r.raise_for_status()\n        r.encoding = r.apparent_encoding\n        return r.text\n    except:\n        return \"\"\n\n\ndef fillUnivList(ulist, html):\n    soup = BeautifulSoup(html, \"html.parser\")\n    for tr in soup.find('tbody').children:\n        if isinstance(tr, bs4.element.Tag):  # 判断是否是标签\n            tds = tr('td')\n            ulist.append([tds[0].string, tds[1].string, tds[2].string])\n\n\ndef printUnivList(ulist, num):\n    tplt = \"{0:^10}\\t{1:{3}^10}\\t{2:^10}\"\n    print(tplt.format(\"排名\", \"学校名称\", \"总分\", chr(12288)))\n    for i in range(num):\n        u = ulist[i]\n        print(tplt.format(u[0], u[1], u[2], chr(12288)))\n\n\ndef main():\n    uinfo = []\n    url = \"http://www.zuihaodaxue.cn/zuihaodaxuepaiming2016.html\"\n    html = getHTMLText(url)\n    fillUnivList(uinfo, html)\n    printUnivList(uinfo, 20)  # 20\n\n\nif __name__ == '__main__':\n    main()\n\n```\n\n![13.jpg](https://i.loli.net/2017/12/17/5a361f0d9d071.jpg)\n\n\n---\n","source":"_posts/python网络爬虫和信息提取(2).md","raw":"---\ntitle: python网络爬虫和信息提取(2)\ndate: 2017-12-16\ntags: [python, 网络爬虫]\n---\n\n## Beautiful Soup库 安装和使用\n\nbeautifulsoup能够解析HTMl和XML格式文档，是解析、遍历、维护“标签树”的功能库。\n\n### 安装\n\n    pip install beautifulsoup4\n\n### 使用\n\n```python\nfrom bs4 import BeautifulSoup\n\nsoup = BeautifulSoup(\"<p>data</p>\", \"html.parser\")\n```\n\n<!--more-->\n\n#### Beautiful Soup库解析器\n\n|解析器|使用方法|条件|\n| :----- | :-------- | :------------ |\n|bs4的HTML解析器|BeautifulSoup(mk, 'html.parser')|安装bs4库|\n|lxml的HTML解析器|BeautifulSoup(mk, 'lxml')|pip install lxml|\n|lxml的xml解析器|BeautifulSoup(mk, 'xml')|pip install lxml|\n|html5lib的解析器|BeautifulSoup(mk, \"html5lib\")|pip install html5lib|\n\n#### BeautifulSoup类的基本元素\n\n| 基本元素 | 说明 |\n| :------------- | :------------- |\n| Tag | 标签，最基本的信息组织单元，分别用 `<>` he `</>` 标明开头和结尾 |\n| Name | 标签的名字，`<p>...</p>`的名字是'p', 格式：`<tag>.name` |\n| Attributes | 标签的属性，字典形式组织，格式：`<tag>.attrs` |\n| NavigableString | 标签内非属性字符串，`<>...</>`中的字符串，格式：`<tag>.string` |\n| Comment | 标签内字符串的注释部分，一种特殊的Comment类型 |\n\n\n```python\nfrom bs4 import BeautifulSoup\nimport requests\n\nurl = \"http://www.python123.io/ws/demo.html\"\nr = requests.get(url)\ndemo = r.text\n\nsoup = BeautifulSoup(demo, \"html.parser\")\nprint soup.title  # <title>This is a python demo page</title>\nprint soup.a.parent.name  # 'p'\nprint soup.a.attrs  # {u'href': u'http://www.icourse163.org/course/BIT-268001', u'class': [u'py1'], u'id': u'link1'}\nprint soup.a.attrs['href']  # http://www.icourse163.org/course/BIT-268001\n\nprint soup.a.string  # 'Basic Python'\nprint soup.p.string  # 'The demo python introduces several python courses.'\nprint type(soup.p.string)  # <class 'bs4.element.NavigableString'>  ### sting是跨标签的\n```\n\n#### 标签树的下行遍历\n\n| 属性 | 说明 |\n| :------------- | :------------- |\n| .contents | 字节点的列表，将<tag>所有儿子节点存入列表 |\n| .children | 字节点的迭代类型，与.contents类似，用于循环遍历儿子节点 |\n| .descendants | 子孙节点的迭代类型，包含所有子孙节点，用于循环遍历 |\n\n```python\nprint soup.head.contents  # [<title>This is a python demo page</title>]\nprint len(soup.body.contnets)  # 5\nfor child in soup.body.children:\n    print child  # 遍历儿子节点\n```\n\n#### 标签树的上行遍历\n\n| 属性 | 说明 |\n| :------------- | :------------- |\n| .parent | 节点的父亲标签 |\n| .parents | 节点先辈标签的迭代类型，用于循环遍历先辈节点 |\n\n```python\nprint soup.title.parent  # <head><title>This is a python demo page</title></head>\n\nfor parent in soup.a.parents:\n    if parent is None:  # 遍历到soup的时候，soup的parent不存在，则不能输入它的name\n        print parent\n    else:\n        print parent.name\n\n```\n\n#### 标签树的平行遍历\n\n平行遍历发生在同一个父亲节点下的各节点间。\n\n| 属性 | 说明 |\n| :------------- | :------------- |\n| .next_sibling | 返回按照HTML文本顺序的下一个平行节点标签 |\n| .previous_sibling | 返回按照HTML文本顺序的上一个平行节点标签 |\n| .next_siblings | 迭代类型，返回按照HTML文本顺序的后续所有平行节点标签 |\n| .previous_siblings | 迭代类型，返回按照HTML文本顺序的前续所有平行节点标签 |\n\n```python\nprint soup.a.next_sibling  # ' and '  \nprint soup.a.next_sibling.next_sibling  # <a class=\"py2\" href=\"http://www.icourse163.org/course/BIT-1001870001\" id=\"link2\">Advanced Python</a>\nprint soup.a.previous_sibling  # Python is a wonderful general-purpose programming language. You can learn Python from novice to professional by tracking the following courses:\\r\\n\n```\n\n#### prettify()方法\n\nprettify()方法可以使HTMl内容更加友好的显示。该方法为HTMl的标签添加换行符，也可以对每个标签进行处理。\n\n\n**注意： BeautifulSoup库将读入的HTML文件或字符串都转换成uhf-8编码。**\n\n## 信息标记\n\n- 标记后的信息可形成信息组织结构，增加了信息的维度。\n- 标记后的信息可用于通信、存储或展示。\n- 标记的结构与信息一样具有重要价值。\n- 标记后的信息更有利于程序理解和运用。\n\n例如HTML的信息标记：\n\nHTML通过预定义的`<>...</>`标签形式组织不同类型的信息。\n\n#### 信息标记的种类：\n\n- XML\n- JSON：有类型的键值对 `\"key\": \"value\"`\n- YAML：无类型的键值对 `key:value`,缩进表示所属关系;`-`表达并列关系;`|`表达整块数据;`#`表达注释\n\n```YAML\nname :\n    newName : 华北理工大学\n    oldName : 河北联合大学\naddr :  # 校区地址\n - 曹妃甸\n - 路南区\ntext : |\n华北理工大学自2015年3月正式更名，2016年10月正式搬迁到曹妃甸新校区。\n```\n\n**三种信息标记种类的比较：**\n\n- XML 最早的通用信息标记语言，可扩展性好，但繁琐。Internet信息交互和传递。\n- JSON 信息有类型，适合程序处理(js)，较XML简洁。移动应用云端和节点的信息通讯，无注释。\n- YAML 信息无类型，文本信息比例最高，可读性好。各类系统的配置文件，有注释易读。\n\n#### 信息提取的一般方法\n\n1、完整解析信息的标记形式，再提取关键信息。需要标记解析器\n优点：信息解析准确\n缺点：提取过程繁琐，速度慢\n\n2、无视标记形式，直接搜索关键信息。对信息文本查找函数即可\n优点：提取过程简洁，速度较快\n缺点：提取结果准确性和信息内容相关\n\n在使用的时候，最好是两者融合：结合形式解析与搜索方法，提取关键信息。需要标记解析器及文本查找函数。\n\n```python\nfrom bs4 import BeautifulSoup\n\nsoup = BeautifulSoup(demo, \"html.parser\")\n\nfor link in soup.find_all(\"a\"):\n    print link.get(\"href\")\n\n```\n\n#### 基于bs4库的HTML内容查找方法\n\n在BeautifulSoup变量中查找里面的信息。\n\n`<>.find_all(name, attrs, recursive, string, **kwargs)` 返回一个列表类型，存储查找的结果\n\n- name：对标签名称的检索字符串，可以为字符串、列表、正则表达式\n\n```python\nprint soup.find_all('a')  # [<a class=\"py1\" href=\"http://www.icourse163.org/course/BIT-268001\" id=\"link1\">Basic Python</a>, <a class=\"py2\" href=\"http://www.icourse163.org/course/BIT-1001870001\" id=\"link2\">Advanced Python</a>]\nprint soup.find_all(['a', 'b'])  # [<b>The demo python introduces several python courses.</b>, <a class=\"py1\" href=\"http://www.icourse163.org/course/BIT-268001\" id=\"link1\">Basic Python</a>, <a class=\"py2\" href=\"http://www.icourse163.org/course/BIT-1001870001\" id=\"link2\">Advanced Python</a>]\nimport re\nfor tag in soup.find_all(re.compile('b')):\n    print tag.name  # body      b\n```\n\n- attrs：对标签属性值的检索字符串，可标注属性检索。\n\n```python\nsoup.find_all('p', 'course')\nsoup.find_all(id='link1')\nsoup.find_all(id=re.compile('link'))\n```\n\n- recursive：是否对子孙全部检索，默认True\n\n```python\nsoup.find_all('a')\nsoup.find_all('a', recursive=False)\n```\n\n- string：`<>...</>`中字符串区域的检索字符串\n\n```python\nsoup.find_all(string=\"Basic Python\")\n\nsoup.find_all(string=re.compile(\"python\"))\n```\n\n`<tag>(..)` 等价于 `<tag>.find_all(..)`\n\n**find_all的七种扩展方法**\n\n| 方法 | 说明 |\n| :------------- | :------------- |\n| `<>.find` | 搜索且返回一个结果，字符串类型，同find_all()参数 |\n| `<>.find_parents()` | 在先辈节点中搜索，返回列表类型，同find_all()参数 |\n| `<>.find_parent()` | 在先辈节点中搜索，返回字符串类型，同find_all()参数 |\n| `<>.find_next_siblings()` | 在后续平行节点中搜索，返回列表类型，同find_all()参数 |\n| `<>.find_next_sibling()` | 在后续平行节点中搜索，返回字符串类型，同find_all()参数 |\n| `<>.find_previous_siblings()` | 在前序平行节点中搜索，返回列表类型，同find_all()参数 |\n| `<>.find_previous_siblings()` | 在前序平行节点中搜索，字符串类型，同find_all()参数 |\n\n---\n\n## 中国大学排名定向爬虫实战\n\n功能描述\n\n- 输入：大学排名url链接\n- 输出：大学排名信息的屏幕输出\n- 技术路线：requests+bs4\n- 定向爬虫：仅对输入的URL进行爬取，不扩展爬取\n\n```python\n# -*- coding: utf-8 -*-\nimport requests\nimport bs4\nfrom bs4 import BeautifulSoup\n\ndef getHTMLText(url):\n    try:\n        r = requests.get(url, timeout=30)\n        r.raise_for_status()\n        r.encoding = r.apparent_encoding\n        return r.text\n    except:\n        return \"\"\n\n\ndef fillUnivList(ulist, html):\n    soup = BeautifulSoup(html, \"html.parser\")\n    for tr in soup.find('tbody').children:\n        if isinstance(tr, bs4.element.Tag):  # 判断是否是标签\n            tds = tr('td')\n            ulist.append([tds[0].string, tds[1].string, tds[2].string])\n\n\ndef printUnivList(ulist, num):\n    tplt = \"{0:^10}\\t{1:{3}^10}\\t{2:^10}\"\n    print(tplt.format(\"排名\", \"学校名称\", \"总分\", chr(12288)))\n    for i in range(num):\n        u = ulist[i]\n        print(tplt.format(u[0], u[1], u[2], chr(12288)))\n\n\ndef main():\n    uinfo = []\n    url = \"http://www.zuihaodaxue.cn/zuihaodaxuepaiming2016.html\"\n    html = getHTMLText(url)\n    fillUnivList(uinfo, html)\n    printUnivList(uinfo, 20)  # 20\n\n\nif __name__ == '__main__':\n    main()\n\n```\n\n![13.jpg](https://i.loli.net/2017/12/17/5a361f0d9d071.jpg)\n\n\n---\n","slug":"python网络爬虫和信息提取(2)","published":1,"updated":"2021-06-20T10:25:20.129Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluqa1hj50038rlog1hle4now","content":"<h2 id=\"Beautiful-Soup库-安装和使用\"><a href=\"#Beautiful-Soup库-安装和使用\" class=\"headerlink\" title=\"Beautiful Soup库 安装和使用\"></a>Beautiful Soup库 安装和使用</h2><p>beautifulsoup能够解析HTMl和XML格式文档，是解析、遍历、维护“标签树”的功能库。</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><pre><code>pip install beautifulsoup4\n</code></pre>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup</span><br><span class=\"line\"></span><br><span class=\"line\">soup = BeautifulSoup(<span class=\"string\">&quot;&lt;p&gt;data&lt;/p&gt;&quot;</span>, <span class=\"string\">&quot;html.parser&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h4 id=\"Beautiful-Soup库解析器\"><a href=\"#Beautiful-Soup库解析器\" class=\"headerlink\" title=\"Beautiful Soup库解析器\"></a>Beautiful Soup库解析器</h4><table>\n<thead>\n<tr>\n<th align=\"left\">解析器</th>\n<th align=\"left\">使用方法</th>\n<th align=\"left\">条件</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">bs4的HTML解析器</td>\n<td align=\"left\">BeautifulSoup(mk, ‘html.parser’)</td>\n<td align=\"left\">安装bs4库</td>\n</tr>\n<tr>\n<td align=\"left\">lxml的HTML解析器</td>\n<td align=\"left\">BeautifulSoup(mk, ‘lxml’)</td>\n<td align=\"left\">pip install lxml</td>\n</tr>\n<tr>\n<td align=\"left\">lxml的xml解析器</td>\n<td align=\"left\">BeautifulSoup(mk, ‘xml’)</td>\n<td align=\"left\">pip install lxml</td>\n</tr>\n<tr>\n<td align=\"left\">html5lib的解析器</td>\n<td align=\"left\">BeautifulSoup(mk, “html5lib”)</td>\n<td align=\"left\">pip install html5lib</td>\n</tr>\n</tbody></table>\n<h4 id=\"BeautifulSoup类的基本元素\"><a href=\"#BeautifulSoup类的基本元素\" class=\"headerlink\" title=\"BeautifulSoup类的基本元素\"></a>BeautifulSoup类的基本元素</h4><table>\n<thead>\n<tr>\n<th align=\"left\">基本元素</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Tag</td>\n<td align=\"left\">标签，最基本的信息组织单元，分别用 <code>&lt;&gt;</code> he <code>&lt;/&gt;</code> 标明开头和结尾</td>\n</tr>\n<tr>\n<td align=\"left\">Name</td>\n<td align=\"left\">标签的名字，<code>&lt;p&gt;...&lt;/p&gt;</code>的名字是’p’, 格式：<code>&lt;tag&gt;.name</code></td>\n</tr>\n<tr>\n<td align=\"left\">Attributes</td>\n<td align=\"left\">标签的属性，字典形式组织，格式：<code>&lt;tag&gt;.attrs</code></td>\n</tr>\n<tr>\n<td align=\"left\">NavigableString</td>\n<td align=\"left\">标签内非属性字符串，<code>&lt;&gt;...&lt;/&gt;</code>中的字符串，格式：<code>&lt;tag&gt;.string</code></td>\n</tr>\n<tr>\n<td align=\"left\">Comment</td>\n<td align=\"left\">标签内字符串的注释部分，一种特殊的Comment类型</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\">url = <span class=\"string\">&quot;http://www.python123.io/ws/demo.html&quot;</span></span><br><span class=\"line\">r = requests.get(url)</span><br><span class=\"line\">demo = r.text</span><br><span class=\"line\"></span><br><span class=\"line\">soup = BeautifulSoup(demo, <span class=\"string\">&quot;html.parser&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span> soup.title  <span class=\"comment\"># &lt;title&gt;This is a python demo page&lt;/title&gt;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span> soup.a.parent.name  <span class=\"comment\"># &#x27;p&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span> soup.a.attrs  <span class=\"comment\"># &#123;u&#x27;href&#x27;: u&#x27;http://www.icourse163.org/course/BIT-268001&#x27;, u&#x27;class&#x27;: [u&#x27;py1&#x27;], u&#x27;id&#x27;: u&#x27;link1&#x27;&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span> soup.a.attrs[<span class=\"string\">&#x27;href&#x27;</span>]  <span class=\"comment\"># http://www.icourse163.org/course/BIT-268001</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span> soup.a.string  <span class=\"comment\"># &#x27;Basic Python&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span> soup.p.string  <span class=\"comment\"># &#x27;The demo python introduces several python courses.&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"built_in\">type</span>(soup.p.string)  <span class=\"comment\"># &lt;class &#x27;bs4.element.NavigableString&#x27;&gt;  ### sting是跨标签的</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"标签树的下行遍历\"><a href=\"#标签树的下行遍历\" class=\"headerlink\" title=\"标签树的下行遍历\"></a>标签树的下行遍历</h4><table>\n<thead>\n<tr>\n<th align=\"left\">属性</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">.contents</td>\n<td align=\"left\">字节点的列表，将<tag>所有儿子节点存入列表</td>\n</tr>\n<tr>\n<td align=\"left\">.children</td>\n<td align=\"left\">字节点的迭代类型，与.contents类似，用于循环遍历儿子节点</td>\n</tr>\n<tr>\n<td align=\"left\">.descendants</td>\n<td align=\"left\">子孙节点的迭代类型，包含所有子孙节点，用于循环遍历</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span> soup.head.contents  <span class=\"comment\"># [&lt;title&gt;This is a python demo page&lt;/title&gt;]</span></span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"built_in\">len</span>(soup.body.contnets)  <span class=\"comment\"># 5</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> child <span class=\"keyword\">in</span> soup.body.children:</span><br><span class=\"line\">    <span class=\"built_in\">print</span> child  <span class=\"comment\"># 遍历儿子节点</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"标签树的上行遍历\"><a href=\"#标签树的上行遍历\" class=\"headerlink\" title=\"标签树的上行遍历\"></a>标签树的上行遍历</h4><table>\n<thead>\n<tr>\n<th align=\"left\">属性</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">.parent</td>\n<td align=\"left\">节点的父亲标签</td>\n</tr>\n<tr>\n<td align=\"left\">.parents</td>\n<td align=\"left\">节点先辈标签的迭代类型，用于循环遍历先辈节点</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span> soup.title.parent  <span class=\"comment\"># &lt;head&gt;&lt;title&gt;This is a python demo page&lt;/title&gt;&lt;/head&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> parent <span class=\"keyword\">in</span> soup.a.parents:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> parent <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:  <span class=\"comment\"># 遍历到soup的时候，soup的parent不存在，则不能输入它的name</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span> parent</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span> parent.name</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"标签树的平行遍历\"><a href=\"#标签树的平行遍历\" class=\"headerlink\" title=\"标签树的平行遍历\"></a>标签树的平行遍历</h4><p>平行遍历发生在同一个父亲节点下的各节点间。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">属性</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">.next_sibling</td>\n<td align=\"left\">返回按照HTML文本顺序的下一个平行节点标签</td>\n</tr>\n<tr>\n<td align=\"left\">.previous_sibling</td>\n<td align=\"left\">返回按照HTML文本顺序的上一个平行节点标签</td>\n</tr>\n<tr>\n<td align=\"left\">.next_siblings</td>\n<td align=\"left\">迭代类型，返回按照HTML文本顺序的后续所有平行节点标签</td>\n</tr>\n<tr>\n<td align=\"left\">.previous_siblings</td>\n<td align=\"left\">迭代类型，返回按照HTML文本顺序的前续所有平行节点标签</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span> soup.a.next_sibling  <span class=\"comment\"># &#x27; and &#x27;  </span></span><br><span class=\"line\"><span class=\"built_in\">print</span> soup.a.next_sibling.next_sibling  <span class=\"comment\"># &lt;a class=&quot;py2&quot; href=&quot;http://www.icourse163.org/course/BIT-1001870001&quot; id=&quot;link2&quot;&gt;Advanced Python&lt;/a&gt;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span> soup.a.previous_sibling  <span class=\"comment\"># Python is a wonderful general-purpose programming language. You can learn Python from novice to professional by tracking the following courses:\\r\\n</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"prettify-方法\"><a href=\"#prettify-方法\" class=\"headerlink\" title=\"prettify()方法\"></a>prettify()方法</h4><p>prettify()方法可以使HTMl内容更加友好的显示。该方法为HTMl的标签添加换行符，也可以对每个标签进行处理。</p>\n<p><strong>注意： BeautifulSoup库将读入的HTML文件或字符串都转换成uhf-8编码。</strong></p>\n<h2 id=\"信息标记\"><a href=\"#信息标记\" class=\"headerlink\" title=\"信息标记\"></a>信息标记</h2><ul>\n<li>标记后的信息可形成信息组织结构，增加了信息的维度。</li>\n<li>标记后的信息可用于通信、存储或展示。</li>\n<li>标记的结构与信息一样具有重要价值。</li>\n<li>标记后的信息更有利于程序理解和运用。</li>\n</ul>\n<p>例如HTML的信息标记：</p>\n<p>HTML通过预定义的<code>&lt;&gt;...&lt;/&gt;</code>标签形式组织不同类型的信息。</p>\n<h4 id=\"信息标记的种类：\"><a href=\"#信息标记的种类：\" class=\"headerlink\" title=\"信息标记的种类：\"></a>信息标记的种类：</h4><ul>\n<li>XML</li>\n<li>JSON：有类型的键值对 <code>&quot;key&quot;: &quot;value&quot;</code></li>\n<li>YAML：无类型的键值对 <code>key:value</code>,缩进表示所属关系;<code>-</code>表达并列关系;<code>|</code>表达整块数据;<code>#</code>表达注释</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name :</span></span><br><span class=\"line\">    <span class=\"attr\">newName :</span> <span class=\"string\">华北理工大学</span></span><br><span class=\"line\">    <span class=\"attr\">oldName :</span> <span class=\"string\">河北联合大学</span></span><br><span class=\"line\"><span class=\"attr\">addr :</span>  <span class=\"comment\"># 校区地址</span></span><br><span class=\"line\"> <span class=\"bullet\">-</span> <span class=\"string\">曹妃甸</span></span><br><span class=\"line\"> <span class=\"bullet\">-</span> <span class=\"string\">路南区</span></span><br><span class=\"line\"><span class=\"attr\">text :</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">华北理工大学自2015年3月正式更名，2016年10月正式搬迁到曹妃甸新校区。</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>三种信息标记种类的比较：</strong></p>\n<ul>\n<li>XML 最早的通用信息标记语言，可扩展性好，但繁琐。Internet信息交互和传递。</li>\n<li>JSON 信息有类型，适合程序处理(js)，较XML简洁。移动应用云端和节点的信息通讯，无注释。</li>\n<li>YAML 信息无类型，文本信息比例最高，可读性好。各类系统的配置文件，有注释易读。</li>\n</ul>\n<h4 id=\"信息提取的一般方法\"><a href=\"#信息提取的一般方法\" class=\"headerlink\" title=\"信息提取的一般方法\"></a>信息提取的一般方法</h4><p>1、完整解析信息的标记形式，再提取关键信息。需要标记解析器<br>优点：信息解析准确<br>缺点：提取过程繁琐，速度慢</p>\n<p>2、无视标记形式，直接搜索关键信息。对信息文本查找函数即可<br>优点：提取过程简洁，速度较快<br>缺点：提取结果准确性和信息内容相关</p>\n<p>在使用的时候，最好是两者融合：结合形式解析与搜索方法，提取关键信息。需要标记解析器及文本查找函数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup</span><br><span class=\"line\"></span><br><span class=\"line\">soup = BeautifulSoup(demo, <span class=\"string\">&quot;html.parser&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> link <span class=\"keyword\">in</span> soup.find_all(<span class=\"string\">&quot;a&quot;</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span> link.get(<span class=\"string\">&quot;href&quot;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"基于bs4库的HTML内容查找方法\"><a href=\"#基于bs4库的HTML内容查找方法\" class=\"headerlink\" title=\"基于bs4库的HTML内容查找方法\"></a>基于bs4库的HTML内容查找方法</h4><p>在BeautifulSoup变量中查找里面的信息。</p>\n<p><code>&lt;&gt;.find_all(name, attrs, recursive, string, **kwargs)</code> 返回一个列表类型，存储查找的结果</p>\n<ul>\n<li>name：对标签名称的检索字符串，可以为字符串、列表、正则表达式</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span> soup.find_all(<span class=\"string\">&#x27;a&#x27;</span>)  <span class=\"comment\"># [&lt;a class=&quot;py1&quot; href=&quot;http://www.icourse163.org/course/BIT-268001&quot; id=&quot;link1&quot;&gt;Basic Python&lt;/a&gt;, &lt;a class=&quot;py2&quot; href=&quot;http://www.icourse163.org/course/BIT-1001870001&quot; id=&quot;link2&quot;&gt;Advanced Python&lt;/a&gt;]</span></span><br><span class=\"line\"><span class=\"built_in\">print</span> soup.find_all([<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>])  <span class=\"comment\"># [&lt;b&gt;The demo python introduces several python courses.&lt;/b&gt;, &lt;a class=&quot;py1&quot; href=&quot;http://www.icourse163.org/course/BIT-268001&quot; id=&quot;link1&quot;&gt;Basic Python&lt;/a&gt;, &lt;a class=&quot;py2&quot; href=&quot;http://www.icourse163.org/course/BIT-1001870001&quot; id=&quot;link2&quot;&gt;Advanced Python&lt;/a&gt;]</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">for</span> tag <span class=\"keyword\">in</span> soup.find_all(re.<span class=\"built_in\">compile</span>(<span class=\"string\">&#x27;b&#x27;</span>)):</span><br><span class=\"line\">    <span class=\"built_in\">print</span> tag.name  <span class=\"comment\"># body      b</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>attrs：对标签属性值的检索字符串，可标注属性检索。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">soup.find_all(<span class=\"string\">&#x27;p&#x27;</span>, <span class=\"string\">&#x27;course&#x27;</span>)</span><br><span class=\"line\">soup.find_all(<span class=\"built_in\">id</span>=<span class=\"string\">&#x27;link1&#x27;</span>)</span><br><span class=\"line\">soup.find_all(<span class=\"built_in\">id</span>=re.<span class=\"built_in\">compile</span>(<span class=\"string\">&#x27;link&#x27;</span>))</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>recursive：是否对子孙全部检索，默认True</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">soup.find_all(<span class=\"string\">&#x27;a&#x27;</span>)</span><br><span class=\"line\">soup.find_all(<span class=\"string\">&#x27;a&#x27;</span>, recursive=<span class=\"literal\">False</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>string：<code>&lt;&gt;...&lt;/&gt;</code>中字符串区域的检索字符串</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">soup.find_all(string=<span class=\"string\">&quot;Basic Python&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">soup.find_all(string=re.<span class=\"built_in\">compile</span>(<span class=\"string\">&quot;python&quot;</span>))</span><br></pre></td></tr></table></figure>\n\n<p><code>&lt;tag&gt;(..)</code> 等价于 <code>&lt;tag&gt;.find_all(..)</code></p>\n<p><strong>find_all的七种扩展方法</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">方法</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>&lt;&gt;.find</code></td>\n<td align=\"left\">搜索且返回一个结果，字符串类型，同find_all()参数</td>\n</tr>\n<tr>\n<td align=\"left\"><code>&lt;&gt;.find_parents()</code></td>\n<td align=\"left\">在先辈节点中搜索，返回列表类型，同find_all()参数</td>\n</tr>\n<tr>\n<td align=\"left\"><code>&lt;&gt;.find_parent()</code></td>\n<td align=\"left\">在先辈节点中搜索，返回字符串类型，同find_all()参数</td>\n</tr>\n<tr>\n<td align=\"left\"><code>&lt;&gt;.find_next_siblings()</code></td>\n<td align=\"left\">在后续平行节点中搜索，返回列表类型，同find_all()参数</td>\n</tr>\n<tr>\n<td align=\"left\"><code>&lt;&gt;.find_next_sibling()</code></td>\n<td align=\"left\">在后续平行节点中搜索，返回字符串类型，同find_all()参数</td>\n</tr>\n<tr>\n<td align=\"left\"><code>&lt;&gt;.find_previous_siblings()</code></td>\n<td align=\"left\">在前序平行节点中搜索，返回列表类型，同find_all()参数</td>\n</tr>\n<tr>\n<td align=\"left\"><code>&lt;&gt;.find_previous_siblings()</code></td>\n<td align=\"left\">在前序平行节点中搜索，字符串类型，同find_all()参数</td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"中国大学排名定向爬虫实战\"><a href=\"#中国大学排名定向爬虫实战\" class=\"headerlink\" title=\"中国大学排名定向爬虫实战\"></a>中国大学排名定向爬虫实战</h2><p>功能描述</p>\n<ul>\n<li>输入：大学排名url链接</li>\n<li>输出：大学排名信息的屏幕输出</li>\n<li>技术路线：requests+bs4</li>\n<li>定向爬虫：仅对输入的URL进行爬取，不扩展爬取</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> bs4</span><br><span class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">getHTMLText</span>(<span class=\"params\">url</span>):</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        r = requests.get(url, timeout=<span class=\"number\">30</span>)</span><br><span class=\"line\">        r.raise_for_status()</span><br><span class=\"line\">        r.encoding = r.apparent_encoding</span><br><span class=\"line\">        <span class=\"keyword\">return</span> r.text</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">fillUnivList</span>(<span class=\"params\">ulist, html</span>):</span><br><span class=\"line\">    soup = BeautifulSoup(html, <span class=\"string\">&quot;html.parser&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> tr <span class=\"keyword\">in</span> soup.find(<span class=\"string\">&#x27;tbody&#x27;</span>).children:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(tr, bs4.element.Tag):  <span class=\"comment\"># 判断是否是标签</span></span><br><span class=\"line\">            tds = tr(<span class=\"string\">&#x27;td&#x27;</span>)</span><br><span class=\"line\">            ulist.append([tds[<span class=\"number\">0</span>].string, tds[<span class=\"number\">1</span>].string, tds[<span class=\"number\">2</span>].string])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">printUnivList</span>(<span class=\"params\">ulist, num</span>):</span><br><span class=\"line\">    tplt = <span class=\"string\">&quot;&#123;0:^10&#125;\\t&#123;1:&#123;3&#125;^10&#125;\\t&#123;2:^10&#125;&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(tplt.<span class=\"built_in\">format</span>(<span class=\"string\">&quot;排名&quot;</span>, <span class=\"string\">&quot;学校名称&quot;</span>, <span class=\"string\">&quot;总分&quot;</span>, <span class=\"built_in\">chr</span>(<span class=\"number\">12288</span>)))</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(num):</span><br><span class=\"line\">        u = ulist[i]</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(tplt.<span class=\"built_in\">format</span>(u[<span class=\"number\">0</span>], u[<span class=\"number\">1</span>], u[<span class=\"number\">2</span>], <span class=\"built_in\">chr</span>(<span class=\"number\">12288</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    uinfo = []</span><br><span class=\"line\">    url = <span class=\"string\">&quot;http://www.zuihaodaxue.cn/zuihaodaxuepaiming2016.html&quot;</span></span><br><span class=\"line\">    html = getHTMLText(url)</span><br><span class=\"line\">    fillUnivList(uinfo, html)</span><br><span class=\"line\">    printUnivList(uinfo, <span class=\"number\">20</span>)  <span class=\"comment\"># 20</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.loli.net/2017/12/17/5a361f0d9d071.jpg\" alt=\"13.jpg\"></p>\n<hr>\n","site":{"data":{}},"excerpt":"<h2 id=\"Beautiful-Soup库-安装和使用\"><a href=\"#Beautiful-Soup库-安装和使用\" class=\"headerlink\" title=\"Beautiful Soup库 安装和使用\"></a>Beautiful Soup库 安装和使用</h2><p>beautifulsoup能够解析HTMl和XML格式文档，是解析、遍历、维护“标签树”的功能库。</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><pre><code>pip install beautifulsoup4\n</code></pre>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup</span><br><span class=\"line\"></span><br><span class=\"line\">soup = BeautifulSoup(<span class=\"string\">&quot;&lt;p&gt;data&lt;/p&gt;&quot;</span>, <span class=\"string\">&quot;html.parser&quot;</span>)</span><br></pre></td></tr></table></figure>","more":"<h4 id=\"Beautiful-Soup库解析器\"><a href=\"#Beautiful-Soup库解析器\" class=\"headerlink\" title=\"Beautiful Soup库解析器\"></a>Beautiful Soup库解析器</h4><table>\n<thead>\n<tr>\n<th align=\"left\">解析器</th>\n<th align=\"left\">使用方法</th>\n<th align=\"left\">条件</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">bs4的HTML解析器</td>\n<td align=\"left\">BeautifulSoup(mk, ‘html.parser’)</td>\n<td align=\"left\">安装bs4库</td>\n</tr>\n<tr>\n<td align=\"left\">lxml的HTML解析器</td>\n<td align=\"left\">BeautifulSoup(mk, ‘lxml’)</td>\n<td align=\"left\">pip install lxml</td>\n</tr>\n<tr>\n<td align=\"left\">lxml的xml解析器</td>\n<td align=\"left\">BeautifulSoup(mk, ‘xml’)</td>\n<td align=\"left\">pip install lxml</td>\n</tr>\n<tr>\n<td align=\"left\">html5lib的解析器</td>\n<td align=\"left\">BeautifulSoup(mk, “html5lib”)</td>\n<td align=\"left\">pip install html5lib</td>\n</tr>\n</tbody></table>\n<h4 id=\"BeautifulSoup类的基本元素\"><a href=\"#BeautifulSoup类的基本元素\" class=\"headerlink\" title=\"BeautifulSoup类的基本元素\"></a>BeautifulSoup类的基本元素</h4><table>\n<thead>\n<tr>\n<th align=\"left\">基本元素</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Tag</td>\n<td align=\"left\">标签，最基本的信息组织单元，分别用 <code>&lt;&gt;</code> he <code>&lt;/&gt;</code> 标明开头和结尾</td>\n</tr>\n<tr>\n<td align=\"left\">Name</td>\n<td align=\"left\">标签的名字，<code>&lt;p&gt;...&lt;/p&gt;</code>的名字是’p’, 格式：<code>&lt;tag&gt;.name</code></td>\n</tr>\n<tr>\n<td align=\"left\">Attributes</td>\n<td align=\"left\">标签的属性，字典形式组织，格式：<code>&lt;tag&gt;.attrs</code></td>\n</tr>\n<tr>\n<td align=\"left\">NavigableString</td>\n<td align=\"left\">标签内非属性字符串，<code>&lt;&gt;...&lt;/&gt;</code>中的字符串，格式：<code>&lt;tag&gt;.string</code></td>\n</tr>\n<tr>\n<td align=\"left\">Comment</td>\n<td align=\"left\">标签内字符串的注释部分，一种特殊的Comment类型</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\">url = <span class=\"string\">&quot;http://www.python123.io/ws/demo.html&quot;</span></span><br><span class=\"line\">r = requests.get(url)</span><br><span class=\"line\">demo = r.text</span><br><span class=\"line\"></span><br><span class=\"line\">soup = BeautifulSoup(demo, <span class=\"string\">&quot;html.parser&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span> soup.title  <span class=\"comment\"># &lt;title&gt;This is a python demo page&lt;/title&gt;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span> soup.a.parent.name  <span class=\"comment\"># &#x27;p&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span> soup.a.attrs  <span class=\"comment\"># &#123;u&#x27;href&#x27;: u&#x27;http://www.icourse163.org/course/BIT-268001&#x27;, u&#x27;class&#x27;: [u&#x27;py1&#x27;], u&#x27;id&#x27;: u&#x27;link1&#x27;&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span> soup.a.attrs[<span class=\"string\">&#x27;href&#x27;</span>]  <span class=\"comment\"># http://www.icourse163.org/course/BIT-268001</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span> soup.a.string  <span class=\"comment\"># &#x27;Basic Python&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span> soup.p.string  <span class=\"comment\"># &#x27;The demo python introduces several python courses.&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"built_in\">type</span>(soup.p.string)  <span class=\"comment\"># &lt;class &#x27;bs4.element.NavigableString&#x27;&gt;  ### sting是跨标签的</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"标签树的下行遍历\"><a href=\"#标签树的下行遍历\" class=\"headerlink\" title=\"标签树的下行遍历\"></a>标签树的下行遍历</h4><table>\n<thead>\n<tr>\n<th align=\"left\">属性</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">.contents</td>\n<td align=\"left\">字节点的列表，将<tag>所有儿子节点存入列表</td>\n</tr>\n<tr>\n<td align=\"left\">.children</td>\n<td align=\"left\">字节点的迭代类型，与.contents类似，用于循环遍历儿子节点</td>\n</tr>\n<tr>\n<td align=\"left\">.descendants</td>\n<td align=\"left\">子孙节点的迭代类型，包含所有子孙节点，用于循环遍历</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span> soup.head.contents  <span class=\"comment\"># [&lt;title&gt;This is a python demo page&lt;/title&gt;]</span></span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"built_in\">len</span>(soup.body.contnets)  <span class=\"comment\"># 5</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> child <span class=\"keyword\">in</span> soup.body.children:</span><br><span class=\"line\">    <span class=\"built_in\">print</span> child  <span class=\"comment\"># 遍历儿子节点</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"标签树的上行遍历\"><a href=\"#标签树的上行遍历\" class=\"headerlink\" title=\"标签树的上行遍历\"></a>标签树的上行遍历</h4><table>\n<thead>\n<tr>\n<th align=\"left\">属性</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">.parent</td>\n<td align=\"left\">节点的父亲标签</td>\n</tr>\n<tr>\n<td align=\"left\">.parents</td>\n<td align=\"left\">节点先辈标签的迭代类型，用于循环遍历先辈节点</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span> soup.title.parent  <span class=\"comment\"># &lt;head&gt;&lt;title&gt;This is a python demo page&lt;/title&gt;&lt;/head&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> parent <span class=\"keyword\">in</span> soup.a.parents:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> parent <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:  <span class=\"comment\"># 遍历到soup的时候，soup的parent不存在，则不能输入它的name</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span> parent</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span> parent.name</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"标签树的平行遍历\"><a href=\"#标签树的平行遍历\" class=\"headerlink\" title=\"标签树的平行遍历\"></a>标签树的平行遍历</h4><p>平行遍历发生在同一个父亲节点下的各节点间。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">属性</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">.next_sibling</td>\n<td align=\"left\">返回按照HTML文本顺序的下一个平行节点标签</td>\n</tr>\n<tr>\n<td align=\"left\">.previous_sibling</td>\n<td align=\"left\">返回按照HTML文本顺序的上一个平行节点标签</td>\n</tr>\n<tr>\n<td align=\"left\">.next_siblings</td>\n<td align=\"left\">迭代类型，返回按照HTML文本顺序的后续所有平行节点标签</td>\n</tr>\n<tr>\n<td align=\"left\">.previous_siblings</td>\n<td align=\"left\">迭代类型，返回按照HTML文本顺序的前续所有平行节点标签</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span> soup.a.next_sibling  <span class=\"comment\"># &#x27; and &#x27;  </span></span><br><span class=\"line\"><span class=\"built_in\">print</span> soup.a.next_sibling.next_sibling  <span class=\"comment\"># &lt;a class=&quot;py2&quot; href=&quot;http://www.icourse163.org/course/BIT-1001870001&quot; id=&quot;link2&quot;&gt;Advanced Python&lt;/a&gt;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span> soup.a.previous_sibling  <span class=\"comment\"># Python is a wonderful general-purpose programming language. You can learn Python from novice to professional by tracking the following courses:\\r\\n</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"prettify-方法\"><a href=\"#prettify-方法\" class=\"headerlink\" title=\"prettify()方法\"></a>prettify()方法</h4><p>prettify()方法可以使HTMl内容更加友好的显示。该方法为HTMl的标签添加换行符，也可以对每个标签进行处理。</p>\n<p><strong>注意： BeautifulSoup库将读入的HTML文件或字符串都转换成uhf-8编码。</strong></p>\n<h2 id=\"信息标记\"><a href=\"#信息标记\" class=\"headerlink\" title=\"信息标记\"></a>信息标记</h2><ul>\n<li>标记后的信息可形成信息组织结构，增加了信息的维度。</li>\n<li>标记后的信息可用于通信、存储或展示。</li>\n<li>标记的结构与信息一样具有重要价值。</li>\n<li>标记后的信息更有利于程序理解和运用。</li>\n</ul>\n<p>例如HTML的信息标记：</p>\n<p>HTML通过预定义的<code>&lt;&gt;...&lt;/&gt;</code>标签形式组织不同类型的信息。</p>\n<h4 id=\"信息标记的种类：\"><a href=\"#信息标记的种类：\" class=\"headerlink\" title=\"信息标记的种类：\"></a>信息标记的种类：</h4><ul>\n<li>XML</li>\n<li>JSON：有类型的键值对 <code>&quot;key&quot;: &quot;value&quot;</code></li>\n<li>YAML：无类型的键值对 <code>key:value</code>,缩进表示所属关系;<code>-</code>表达并列关系;<code>|</code>表达整块数据;<code>#</code>表达注释</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name :</span></span><br><span class=\"line\">    <span class=\"attr\">newName :</span> <span class=\"string\">华北理工大学</span></span><br><span class=\"line\">    <span class=\"attr\">oldName :</span> <span class=\"string\">河北联合大学</span></span><br><span class=\"line\"><span class=\"attr\">addr :</span>  <span class=\"comment\"># 校区地址</span></span><br><span class=\"line\"> <span class=\"bullet\">-</span> <span class=\"string\">曹妃甸</span></span><br><span class=\"line\"> <span class=\"bullet\">-</span> <span class=\"string\">路南区</span></span><br><span class=\"line\"><span class=\"attr\">text :</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">华北理工大学自2015年3月正式更名，2016年10月正式搬迁到曹妃甸新校区。</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>三种信息标记种类的比较：</strong></p>\n<ul>\n<li>XML 最早的通用信息标记语言，可扩展性好，但繁琐。Internet信息交互和传递。</li>\n<li>JSON 信息有类型，适合程序处理(js)，较XML简洁。移动应用云端和节点的信息通讯，无注释。</li>\n<li>YAML 信息无类型，文本信息比例最高，可读性好。各类系统的配置文件，有注释易读。</li>\n</ul>\n<h4 id=\"信息提取的一般方法\"><a href=\"#信息提取的一般方法\" class=\"headerlink\" title=\"信息提取的一般方法\"></a>信息提取的一般方法</h4><p>1、完整解析信息的标记形式，再提取关键信息。需要标记解析器<br>优点：信息解析准确<br>缺点：提取过程繁琐，速度慢</p>\n<p>2、无视标记形式，直接搜索关键信息。对信息文本查找函数即可<br>优点：提取过程简洁，速度较快<br>缺点：提取结果准确性和信息内容相关</p>\n<p>在使用的时候，最好是两者融合：结合形式解析与搜索方法，提取关键信息。需要标记解析器及文本查找函数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup</span><br><span class=\"line\"></span><br><span class=\"line\">soup = BeautifulSoup(demo, <span class=\"string\">&quot;html.parser&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> link <span class=\"keyword\">in</span> soup.find_all(<span class=\"string\">&quot;a&quot;</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span> link.get(<span class=\"string\">&quot;href&quot;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"基于bs4库的HTML内容查找方法\"><a href=\"#基于bs4库的HTML内容查找方法\" class=\"headerlink\" title=\"基于bs4库的HTML内容查找方法\"></a>基于bs4库的HTML内容查找方法</h4><p>在BeautifulSoup变量中查找里面的信息。</p>\n<p><code>&lt;&gt;.find_all(name, attrs, recursive, string, **kwargs)</code> 返回一个列表类型，存储查找的结果</p>\n<ul>\n<li>name：对标签名称的检索字符串，可以为字符串、列表、正则表达式</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span> soup.find_all(<span class=\"string\">&#x27;a&#x27;</span>)  <span class=\"comment\"># [&lt;a class=&quot;py1&quot; href=&quot;http://www.icourse163.org/course/BIT-268001&quot; id=&quot;link1&quot;&gt;Basic Python&lt;/a&gt;, &lt;a class=&quot;py2&quot; href=&quot;http://www.icourse163.org/course/BIT-1001870001&quot; id=&quot;link2&quot;&gt;Advanced Python&lt;/a&gt;]</span></span><br><span class=\"line\"><span class=\"built_in\">print</span> soup.find_all([<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>])  <span class=\"comment\"># [&lt;b&gt;The demo python introduces several python courses.&lt;/b&gt;, &lt;a class=&quot;py1&quot; href=&quot;http://www.icourse163.org/course/BIT-268001&quot; id=&quot;link1&quot;&gt;Basic Python&lt;/a&gt;, &lt;a class=&quot;py2&quot; href=&quot;http://www.icourse163.org/course/BIT-1001870001&quot; id=&quot;link2&quot;&gt;Advanced Python&lt;/a&gt;]</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">for</span> tag <span class=\"keyword\">in</span> soup.find_all(re.<span class=\"built_in\">compile</span>(<span class=\"string\">&#x27;b&#x27;</span>)):</span><br><span class=\"line\">    <span class=\"built_in\">print</span> tag.name  <span class=\"comment\"># body      b</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>attrs：对标签属性值的检索字符串，可标注属性检索。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">soup.find_all(<span class=\"string\">&#x27;p&#x27;</span>, <span class=\"string\">&#x27;course&#x27;</span>)</span><br><span class=\"line\">soup.find_all(<span class=\"built_in\">id</span>=<span class=\"string\">&#x27;link1&#x27;</span>)</span><br><span class=\"line\">soup.find_all(<span class=\"built_in\">id</span>=re.<span class=\"built_in\">compile</span>(<span class=\"string\">&#x27;link&#x27;</span>))</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>recursive：是否对子孙全部检索，默认True</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">soup.find_all(<span class=\"string\">&#x27;a&#x27;</span>)</span><br><span class=\"line\">soup.find_all(<span class=\"string\">&#x27;a&#x27;</span>, recursive=<span class=\"literal\">False</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>string：<code>&lt;&gt;...&lt;/&gt;</code>中字符串区域的检索字符串</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">soup.find_all(string=<span class=\"string\">&quot;Basic Python&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">soup.find_all(string=re.<span class=\"built_in\">compile</span>(<span class=\"string\">&quot;python&quot;</span>))</span><br></pre></td></tr></table></figure>\n\n<p><code>&lt;tag&gt;(..)</code> 等价于 <code>&lt;tag&gt;.find_all(..)</code></p>\n<p><strong>find_all的七种扩展方法</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">方法</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>&lt;&gt;.find</code></td>\n<td align=\"left\">搜索且返回一个结果，字符串类型，同find_all()参数</td>\n</tr>\n<tr>\n<td align=\"left\"><code>&lt;&gt;.find_parents()</code></td>\n<td align=\"left\">在先辈节点中搜索，返回列表类型，同find_all()参数</td>\n</tr>\n<tr>\n<td align=\"left\"><code>&lt;&gt;.find_parent()</code></td>\n<td align=\"left\">在先辈节点中搜索，返回字符串类型，同find_all()参数</td>\n</tr>\n<tr>\n<td align=\"left\"><code>&lt;&gt;.find_next_siblings()</code></td>\n<td align=\"left\">在后续平行节点中搜索，返回列表类型，同find_all()参数</td>\n</tr>\n<tr>\n<td align=\"left\"><code>&lt;&gt;.find_next_sibling()</code></td>\n<td align=\"left\">在后续平行节点中搜索，返回字符串类型，同find_all()参数</td>\n</tr>\n<tr>\n<td align=\"left\"><code>&lt;&gt;.find_previous_siblings()</code></td>\n<td align=\"left\">在前序平行节点中搜索，返回列表类型，同find_all()参数</td>\n</tr>\n<tr>\n<td align=\"left\"><code>&lt;&gt;.find_previous_siblings()</code></td>\n<td align=\"left\">在前序平行节点中搜索，字符串类型，同find_all()参数</td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"中国大学排名定向爬虫实战\"><a href=\"#中国大学排名定向爬虫实战\" class=\"headerlink\" title=\"中国大学排名定向爬虫实战\"></a>中国大学排名定向爬虫实战</h2><p>功能描述</p>\n<ul>\n<li>输入：大学排名url链接</li>\n<li>输出：大学排名信息的屏幕输出</li>\n<li>技术路线：requests+bs4</li>\n<li>定向爬虫：仅对输入的URL进行爬取，不扩展爬取</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> bs4</span><br><span class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">getHTMLText</span>(<span class=\"params\">url</span>):</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        r = requests.get(url, timeout=<span class=\"number\">30</span>)</span><br><span class=\"line\">        r.raise_for_status()</span><br><span class=\"line\">        r.encoding = r.apparent_encoding</span><br><span class=\"line\">        <span class=\"keyword\">return</span> r.text</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">fillUnivList</span>(<span class=\"params\">ulist, html</span>):</span><br><span class=\"line\">    soup = BeautifulSoup(html, <span class=\"string\">&quot;html.parser&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> tr <span class=\"keyword\">in</span> soup.find(<span class=\"string\">&#x27;tbody&#x27;</span>).children:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(tr, bs4.element.Tag):  <span class=\"comment\"># 判断是否是标签</span></span><br><span class=\"line\">            tds = tr(<span class=\"string\">&#x27;td&#x27;</span>)</span><br><span class=\"line\">            ulist.append([tds[<span class=\"number\">0</span>].string, tds[<span class=\"number\">1</span>].string, tds[<span class=\"number\">2</span>].string])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">printUnivList</span>(<span class=\"params\">ulist, num</span>):</span><br><span class=\"line\">    tplt = <span class=\"string\">&quot;&#123;0:^10&#125;\\t&#123;1:&#123;3&#125;^10&#125;\\t&#123;2:^10&#125;&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(tplt.<span class=\"built_in\">format</span>(<span class=\"string\">&quot;排名&quot;</span>, <span class=\"string\">&quot;学校名称&quot;</span>, <span class=\"string\">&quot;总分&quot;</span>, <span class=\"built_in\">chr</span>(<span class=\"number\">12288</span>)))</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(num):</span><br><span class=\"line\">        u = ulist[i]</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(tplt.<span class=\"built_in\">format</span>(u[<span class=\"number\">0</span>], u[<span class=\"number\">1</span>], u[<span class=\"number\">2</span>], <span class=\"built_in\">chr</span>(<span class=\"number\">12288</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    uinfo = []</span><br><span class=\"line\">    url = <span class=\"string\">&quot;http://www.zuihaodaxue.cn/zuihaodaxuepaiming2016.html&quot;</span></span><br><span class=\"line\">    html = getHTMLText(url)</span><br><span class=\"line\">    fillUnivList(uinfo, html)</span><br><span class=\"line\">    printUnivList(uinfo, <span class=\"number\">20</span>)  <span class=\"comment\"># 20</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.loli.net/2017/12/17/5a361f0d9d071.jpg\" alt=\"13.jpg\"></p>\n<hr>"},{"title":"python网络爬虫和信息提取(3)","date":"2017-12-16T16:00:00.000Z","_content":"\n## re库的使用和爬虫实战\n\n- 通用的字符串表达框架\n- 简洁表达一组字符串的表达式\n- 针对字符串表达“简洁”和“特征”思想的工具\n- 判断某字符串的特征归属\n\n正则表达式在 **文本处理中** 的应用：\n\n- 表达文本类型的特征（病毒、入侵等）\n- 同时查找或替换字符字符串\n- 匹配字符串的全部或部分\n\n**主要用在字符串匹配中**\n\n<!--more-->\n\n正则表达式的使用：\n\n编译：将符合正则表达式语法的字符串转换成正则表达式特征。编译之前的表达式只是一个符合正则表达式语法的字符串。\n\n\n### 正则表达式的语法\n\n- 正则表达式的常用操作符\n\n| 操作符 | 说明 | 实例 |\n| :------------- | :------------- | :------------- |\n| `.` | 表示任何单个字符 |  |\n| `[]` | 字符集，对单个字符给出取值范围 | `[abc]`表示a、b、c,`[a-z]`表示a到z单个字符 |\n| `[^ ]` | 非字符集，对单个字符给出排除范围 | `[^abc]`表示非a或b或c的单个字符 |\n| `*` | 前一个字符0次或无限次扩展 | `abc*`表示ab、abc、abcc、abccc等 |\n| `+` | 前一个字符1次或无限次扩展 | `abc+`表示abc、abcc、abccc等 |\n| `?` | 前一个字符0次或1次扩展 | `abc?`表示ab、abc |\n| `｜` | 左右表达式任意一个 | `abc｜def` 表示abc、def |\n| `{m}` | 扩展前一个字符m次 | `ab{2}c`表示abbc |\n| `{m, n}` | 扩展前一个字符m至n次（含n） | `ab{1, 2}c`表示abc、abbc |\n| `^` | 匹配字符串开头 | `^abc`表示abc且在一个字符串的开头 |\n| `$` | 匹配字符串结尾 | `abc$`表示abc且在一个字符串的结尾 |\n| `()` | 分组标记，内部只能只用｜操作符 | `(abc)`表示abc,`(abc｜def)`表示acb、def |\n| `\\d` | 数字，等价与`[0-9]` ||\n| `\\w` | 单词字符，等价于`[A-Za-z0-9]` ||\n\n- 语法实例：\n\n| 正则表达式 | 对应字符串 |\n| :------------- | :------------- |\n| `P(Y｜YT｜YTH｜YTHO)?N` | 'PN'、'PYN'、'PYTN'、'PYTHN'、'PYTHON' |\n| `PYTHON+` | 'PYTHON'、'PYTHONN'、'PYTHONNN'、…… |\n| `PY[TH]ON` | 'PYTON'、'PYTHON' |\n| `PY[^TH]?ON` | 'PYON'、'PYN'、'PYbN'、…… |\n| `PY{:3}N` | 'PN'、'PYN'、'PYYN'、'PYYYN' |\n\n- 经典正则表达式实例\n\n| 表达式 | 说明 |\n| :------------- | :------------- |\n| `^[A-Za-z]+$` | 由26个字母组成的字符串 |\n| `^-?\\d+$` | 整数形式的字符串 |\n| `[\\u4e00-\\u9fa5]` | 匹配中文字符 |\n| `^\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$` | Email地址 |\n| `(^\\d{15}$)｜(^\\d{18}$)｜(^\\d{17}(\\d｜X｜x)$)` | 身份证号 |\n\n- 正则表达式运算优先级\n\n![正则表达式运算优先级](https://i.loli.net/2017/12/18/5a3730644bf23.jpg)\n\n### Re使用\n\nre库是python的标准库，主要用于字符串匹配。调用方法很简单： `import re`。re库采用raw string(原生字符串，不包含转义符的字符串)类型表示正则表达式，表示为`r'text'`\n\n**re库主要功能函数**\n\n![re库主要功能函数](https://i.loli.net/2017/12/18/5a37306458664.jpg)\n\nflags：正则表达式使用时的控制标记\n\n| 常用标记 | 说明 |\n| :------------- | :------------- |\n| re.I re.IGNORECASE | 忽略正则表达式的大小写，｜A-Z｜能够匹配小写字符 |\n| re.M re.MULTILINE | 正则表达式中的^操作符能够将给定字符串的每行当作匹配开始 |\n| re.S re.DOTALL | 正则表达式中的.操作符能够匹配所有字符，默认匹配除换行外的所有字符 |\n\n**re库的最小匹配和贪婪匹配**\n\n```python\nmath = re.search(r'PY.*N', 'PYANBNCNDN')\nmath.group(0)  # PYANBNCNDN\n```\n\nre库默认使用贪婪匹配模式。如果想返回最小匹配结果：\n\n```python\nmath = re.search(r'PY.*?N', 'PYANBNCNDN')\nmath.group(0)  # PYAN\n```\n\n| 最小匹配 | 说明 |\n| :------------- | :------------- |\n| *? | 前一个字符0次或无限次扩展，最小匹配 |\n| +? | 前一个字符1次或无限次扩展，最小匹配 |\n| ?? | 前一个字符0次或1次扩展，最小匹配 |\n| {m, n} | 扩展前一个字符m至n次(含n)，最小匹配 |\n\n---\n\n### 淘宝商品比价定向爬虫\n\n**功能描述**\n\n- 目的：获取淘宝搜索页面的信息，提取其中的商品名称和价格\n- 理解：淘宝的搜索接口、翻页的处理\n- 技术路线：requests+re\n\n**url分析**\n\n首页提交搜索：\n\n`url = 'https://s.taobao.com/search?q=书包&imgfile=&commend=all&ssid=s5-e&search_type=item&sourceId=tb.index&spm=a21bo.2017.201856-taobao-item.1&ie=utf8&initiative_id=tbindexz_20170306'`\n\n搜索结果的第二页：\n\n`url = 'https://s.taobao.com/search?q=书包&imgfile=&commend=all&ssid=s5-e&search_type=item&sourceId=tb.index&spm=a21bo.2017.201856-taobao-item.1&ie=utf8&initiative_id=tbindexz_20170306&bcoffset=4&ntoffset=4&p4ppushleft=1%2C48&s=44'`\n\n**程序设计**\n\n- 步骤1：提交商品搜索请求，循环获取页面\n- 步骤2：对于每个页面，提取商品名称和价格信息\n- 步骤3：将信息输出到屏幕上\n\n---\n\n```python\n# -*- coding: utf-8 -*-\nimport requests\nimport re\n\ndef getHtmlText(url):\n    try:\n        r = requests.get(url, timeout=30)\n        r.raise_for_status()\n        r.encoding = r.apparent_encoding\n        return r.text\n    except:\n        return ''\n\n\ndef parsePage(ilt, html):\n    try:\n        plt = re.findall(r'\\\"view_price\\\"\\:\\\"[\\d\\.]*\\\"', html)\n        tlt = re.findall(r'\\\"raw_title\\\"\\:\\\".*?\\\"', html)\n        for i in range(len(plt)):\n            price = eval(plt[i].split(':')[1])\n            title = eval(tlt[i].split(':')[1])\n            ilt.append([price, title])\n    except:\n        print 'error'\n\n\ndef printGoodsList(ilt):\n    tplt = \"{:4}\\t{:8}\\t{:16}\"\n    print tplt.format('序号', '价格', '商品名称')\n    count = 0\n    for g in ilt:\n        count = count +1\n        print tplt.format(count, g[0], g[1])\n    print ''\n\n\ndef main():\n    goods = '书包'\n    depth = 2\n    start_url = 'https://s.taobao.com/search?q=' + goods\n    inforList = []\n    for i in range(depth):\n        try:\n            url = start_url + '&s=' + str(44*i)\n            html = getHtmlText(url)\n            parsePage(inforList, html)\n        except:\n            continue\n    printGoodsList(inforList)\n\n\nif __name__ == '__main__':\n    main()\n```\n---\n![运行结果](https://i.loli.net/2017/12/18/5a377e467083a.jpg)\n","source":"_posts/python网络爬虫和信息提取(3).md","raw":"---\ntitle: python网络爬虫和信息提取(3)\ndate: 2017-12-17\ntags: [python, 网络爬虫]\n---\n\n## re库的使用和爬虫实战\n\n- 通用的字符串表达框架\n- 简洁表达一组字符串的表达式\n- 针对字符串表达“简洁”和“特征”思想的工具\n- 判断某字符串的特征归属\n\n正则表达式在 **文本处理中** 的应用：\n\n- 表达文本类型的特征（病毒、入侵等）\n- 同时查找或替换字符字符串\n- 匹配字符串的全部或部分\n\n**主要用在字符串匹配中**\n\n<!--more-->\n\n正则表达式的使用：\n\n编译：将符合正则表达式语法的字符串转换成正则表达式特征。编译之前的表达式只是一个符合正则表达式语法的字符串。\n\n\n### 正则表达式的语法\n\n- 正则表达式的常用操作符\n\n| 操作符 | 说明 | 实例 |\n| :------------- | :------------- | :------------- |\n| `.` | 表示任何单个字符 |  |\n| `[]` | 字符集，对单个字符给出取值范围 | `[abc]`表示a、b、c,`[a-z]`表示a到z单个字符 |\n| `[^ ]` | 非字符集，对单个字符给出排除范围 | `[^abc]`表示非a或b或c的单个字符 |\n| `*` | 前一个字符0次或无限次扩展 | `abc*`表示ab、abc、abcc、abccc等 |\n| `+` | 前一个字符1次或无限次扩展 | `abc+`表示abc、abcc、abccc等 |\n| `?` | 前一个字符0次或1次扩展 | `abc?`表示ab、abc |\n| `｜` | 左右表达式任意一个 | `abc｜def` 表示abc、def |\n| `{m}` | 扩展前一个字符m次 | `ab{2}c`表示abbc |\n| `{m, n}` | 扩展前一个字符m至n次（含n） | `ab{1, 2}c`表示abc、abbc |\n| `^` | 匹配字符串开头 | `^abc`表示abc且在一个字符串的开头 |\n| `$` | 匹配字符串结尾 | `abc$`表示abc且在一个字符串的结尾 |\n| `()` | 分组标记，内部只能只用｜操作符 | `(abc)`表示abc,`(abc｜def)`表示acb、def |\n| `\\d` | 数字，等价与`[0-9]` ||\n| `\\w` | 单词字符，等价于`[A-Za-z0-9]` ||\n\n- 语法实例：\n\n| 正则表达式 | 对应字符串 |\n| :------------- | :------------- |\n| `P(Y｜YT｜YTH｜YTHO)?N` | 'PN'、'PYN'、'PYTN'、'PYTHN'、'PYTHON' |\n| `PYTHON+` | 'PYTHON'、'PYTHONN'、'PYTHONNN'、…… |\n| `PY[TH]ON` | 'PYTON'、'PYTHON' |\n| `PY[^TH]?ON` | 'PYON'、'PYN'、'PYbN'、…… |\n| `PY{:3}N` | 'PN'、'PYN'、'PYYN'、'PYYYN' |\n\n- 经典正则表达式实例\n\n| 表达式 | 说明 |\n| :------------- | :------------- |\n| `^[A-Za-z]+$` | 由26个字母组成的字符串 |\n| `^-?\\d+$` | 整数形式的字符串 |\n| `[\\u4e00-\\u9fa5]` | 匹配中文字符 |\n| `^\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$` | Email地址 |\n| `(^\\d{15}$)｜(^\\d{18}$)｜(^\\d{17}(\\d｜X｜x)$)` | 身份证号 |\n\n- 正则表达式运算优先级\n\n![正则表达式运算优先级](https://i.loli.net/2017/12/18/5a3730644bf23.jpg)\n\n### Re使用\n\nre库是python的标准库，主要用于字符串匹配。调用方法很简单： `import re`。re库采用raw string(原生字符串，不包含转义符的字符串)类型表示正则表达式，表示为`r'text'`\n\n**re库主要功能函数**\n\n![re库主要功能函数](https://i.loli.net/2017/12/18/5a37306458664.jpg)\n\nflags：正则表达式使用时的控制标记\n\n| 常用标记 | 说明 |\n| :------------- | :------------- |\n| re.I re.IGNORECASE | 忽略正则表达式的大小写，｜A-Z｜能够匹配小写字符 |\n| re.M re.MULTILINE | 正则表达式中的^操作符能够将给定字符串的每行当作匹配开始 |\n| re.S re.DOTALL | 正则表达式中的.操作符能够匹配所有字符，默认匹配除换行外的所有字符 |\n\n**re库的最小匹配和贪婪匹配**\n\n```python\nmath = re.search(r'PY.*N', 'PYANBNCNDN')\nmath.group(0)  # PYANBNCNDN\n```\n\nre库默认使用贪婪匹配模式。如果想返回最小匹配结果：\n\n```python\nmath = re.search(r'PY.*?N', 'PYANBNCNDN')\nmath.group(0)  # PYAN\n```\n\n| 最小匹配 | 说明 |\n| :------------- | :------------- |\n| *? | 前一个字符0次或无限次扩展，最小匹配 |\n| +? | 前一个字符1次或无限次扩展，最小匹配 |\n| ?? | 前一个字符0次或1次扩展，最小匹配 |\n| {m, n} | 扩展前一个字符m至n次(含n)，最小匹配 |\n\n---\n\n### 淘宝商品比价定向爬虫\n\n**功能描述**\n\n- 目的：获取淘宝搜索页面的信息，提取其中的商品名称和价格\n- 理解：淘宝的搜索接口、翻页的处理\n- 技术路线：requests+re\n\n**url分析**\n\n首页提交搜索：\n\n`url = 'https://s.taobao.com/search?q=书包&imgfile=&commend=all&ssid=s5-e&search_type=item&sourceId=tb.index&spm=a21bo.2017.201856-taobao-item.1&ie=utf8&initiative_id=tbindexz_20170306'`\n\n搜索结果的第二页：\n\n`url = 'https://s.taobao.com/search?q=书包&imgfile=&commend=all&ssid=s5-e&search_type=item&sourceId=tb.index&spm=a21bo.2017.201856-taobao-item.1&ie=utf8&initiative_id=tbindexz_20170306&bcoffset=4&ntoffset=4&p4ppushleft=1%2C48&s=44'`\n\n**程序设计**\n\n- 步骤1：提交商品搜索请求，循环获取页面\n- 步骤2：对于每个页面，提取商品名称和价格信息\n- 步骤3：将信息输出到屏幕上\n\n---\n\n```python\n# -*- coding: utf-8 -*-\nimport requests\nimport re\n\ndef getHtmlText(url):\n    try:\n        r = requests.get(url, timeout=30)\n        r.raise_for_status()\n        r.encoding = r.apparent_encoding\n        return r.text\n    except:\n        return ''\n\n\ndef parsePage(ilt, html):\n    try:\n        plt = re.findall(r'\\\"view_price\\\"\\:\\\"[\\d\\.]*\\\"', html)\n        tlt = re.findall(r'\\\"raw_title\\\"\\:\\\".*?\\\"', html)\n        for i in range(len(plt)):\n            price = eval(plt[i].split(':')[1])\n            title = eval(tlt[i].split(':')[1])\n            ilt.append([price, title])\n    except:\n        print 'error'\n\n\ndef printGoodsList(ilt):\n    tplt = \"{:4}\\t{:8}\\t{:16}\"\n    print tplt.format('序号', '价格', '商品名称')\n    count = 0\n    for g in ilt:\n        count = count +1\n        print tplt.format(count, g[0], g[1])\n    print ''\n\n\ndef main():\n    goods = '书包'\n    depth = 2\n    start_url = 'https://s.taobao.com/search?q=' + goods\n    inforList = []\n    for i in range(depth):\n        try:\n            url = start_url + '&s=' + str(44*i)\n            html = getHtmlText(url)\n            parsePage(inforList, html)\n        except:\n            continue\n    printGoodsList(inforList)\n\n\nif __name__ == '__main__':\n    main()\n```\n---\n![运行结果](https://i.loli.net/2017/12/18/5a377e467083a.jpg)\n","slug":"python网络爬虫和信息提取(3)","published":1,"updated":"2021-06-20T10:25:20.129Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluqa1hj50039rlog4bv318pc","content":"<h2 id=\"re库的使用和爬虫实战\"><a href=\"#re库的使用和爬虫实战\" class=\"headerlink\" title=\"re库的使用和爬虫实战\"></a>re库的使用和爬虫实战</h2><ul>\n<li>通用的字符串表达框架</li>\n<li>简洁表达一组字符串的表达式</li>\n<li>针对字符串表达“简洁”和“特征”思想的工具</li>\n<li>判断某字符串的特征归属</li>\n</ul>\n<p>正则表达式在 <strong>文本处理中</strong> 的应用：</p>\n<ul>\n<li>表达文本类型的特征（病毒、入侵等）</li>\n<li>同时查找或替换字符字符串</li>\n<li>匹配字符串的全部或部分</li>\n</ul>\n<p><strong>主要用在字符串匹配中</strong></p>\n<span id=\"more\"></span>\n\n<p>正则表达式的使用：</p>\n<p>编译：将符合正则表达式语法的字符串转换成正则表达式特征。编译之前的表达式只是一个符合正则表达式语法的字符串。</p>\n<h3 id=\"正则表达式的语法\"><a href=\"#正则表达式的语法\" class=\"headerlink\" title=\"正则表达式的语法\"></a>正则表达式的语法</h3><ul>\n<li>正则表达式的常用操作符</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"left\">操作符</th>\n<th align=\"left\">说明</th>\n<th align=\"left\">实例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>.</code></td>\n<td align=\"left\">表示任何单个字符</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>[]</code></td>\n<td align=\"left\">字符集，对单个字符给出取值范围</td>\n<td align=\"left\"><code>[abc]</code>表示a、b、c,<code>[a-z]</code>表示a到z单个字符</td>\n</tr>\n<tr>\n<td align=\"left\"><code>[^ ]</code></td>\n<td align=\"left\">非字符集，对单个字符给出排除范围</td>\n<td align=\"left\"><code>[^abc]</code>表示非a或b或c的单个字符</td>\n</tr>\n<tr>\n<td align=\"left\"><code>*</code></td>\n<td align=\"left\">前一个字符0次或无限次扩展</td>\n<td align=\"left\"><code>abc*</code>表示ab、abc、abcc、abccc等</td>\n</tr>\n<tr>\n<td align=\"left\"><code>+</code></td>\n<td align=\"left\">前一个字符1次或无限次扩展</td>\n<td align=\"left\"><code>abc+</code>表示abc、abcc、abccc等</td>\n</tr>\n<tr>\n<td align=\"left\"><code>?</code></td>\n<td align=\"left\">前一个字符0次或1次扩展</td>\n<td align=\"left\"><code>abc?</code>表示ab、abc</td>\n</tr>\n<tr>\n<td align=\"left\"><code>｜</code></td>\n<td align=\"left\">左右表达式任意一个</td>\n<td align=\"left\"><code>abc｜def</code> 表示abc、def</td>\n</tr>\n<tr>\n<td align=\"left\"><code>&#123;m&#125;</code></td>\n<td align=\"left\">扩展前一个字符m次</td>\n<td align=\"left\"><code>ab&#123;2&#125;c</code>表示abbc</td>\n</tr>\n<tr>\n<td align=\"left\"><code>&#123;m, n&#125;</code></td>\n<td align=\"left\">扩展前一个字符m至n次（含n）</td>\n<td align=\"left\"><code>ab&#123;1, 2&#125;c</code>表示abc、abbc</td>\n</tr>\n<tr>\n<td align=\"left\"><code>^</code></td>\n<td align=\"left\">匹配字符串开头</td>\n<td align=\"left\"><code>^abc</code>表示abc且在一个字符串的开头</td>\n</tr>\n<tr>\n<td align=\"left\"><code>$</code></td>\n<td align=\"left\">匹配字符串结尾</td>\n<td align=\"left\"><code>abc$</code>表示abc且在一个字符串的结尾</td>\n</tr>\n<tr>\n<td align=\"left\"><code>()</code></td>\n<td align=\"left\">分组标记，内部只能只用｜操作符</td>\n<td align=\"left\"><code>(abc)</code>表示abc,<code>(abc｜def)</code>表示acb、def</td>\n</tr>\n<tr>\n<td align=\"left\"><code>\\d</code></td>\n<td align=\"left\">数字，等价与<code>[0-9]</code></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>\\w</code></td>\n<td align=\"left\">单词字符，等价于<code>[A-Za-z0-9]</code></td>\n<td align=\"left\"></td>\n</tr>\n</tbody></table>\n<ul>\n<li>语法实例：</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"left\">正则表达式</th>\n<th align=\"left\">对应字符串</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>P(Y｜YT｜YTH｜YTHO)?N</code></td>\n<td align=\"left\">‘PN’、’PYN’、’PYTN’、’PYTHN’、’PYTHON’</td>\n</tr>\n<tr>\n<td align=\"left\"><code>PYTHON+</code></td>\n<td align=\"left\">‘PYTHON’、’PYTHONN’、’PYTHONNN’、……</td>\n</tr>\n<tr>\n<td align=\"left\"><code>PY[TH]ON</code></td>\n<td align=\"left\">‘PYTON’、’PYTHON’</td>\n</tr>\n<tr>\n<td align=\"left\"><code>PY[^TH]?ON</code></td>\n<td align=\"left\">‘PYON’、’PYN’、’PYbN’、……</td>\n</tr>\n<tr>\n<td align=\"left\"><code>PY&#123;:3&#125;N</code></td>\n<td align=\"left\">‘PN’、’PYN’、’PYYN’、’PYYYN’</td>\n</tr>\n</tbody></table>\n<ul>\n<li>经典正则表达式实例</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"left\">表达式</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>^[A-Za-z]+$</code></td>\n<td align=\"left\">由26个字母组成的字符串</td>\n</tr>\n<tr>\n<td align=\"left\"><code>^-?\\d+$</code></td>\n<td align=\"left\">整数形式的字符串</td>\n</tr>\n<tr>\n<td align=\"left\"><code>[\\u4e00-\\u9fa5]</code></td>\n<td align=\"left\">匹配中文字符</td>\n</tr>\n<tr>\n<td align=\"left\"><code>^\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$</code></td>\n<td align=\"left\">Email地址</td>\n</tr>\n<tr>\n<td align=\"left\"><code>(^\\d&#123;15&#125;$)｜(^\\d&#123;18&#125;$)｜(^\\d&#123;17&#125;(\\d｜X｜x)$)</code></td>\n<td align=\"left\">身份证号</td>\n</tr>\n</tbody></table>\n<ul>\n<li>正则表达式运算优先级</li>\n</ul>\n<p><img src=\"https://i.loli.net/2017/12/18/5a3730644bf23.jpg\" alt=\"正则表达式运算优先级\"></p>\n<h3 id=\"Re使用\"><a href=\"#Re使用\" class=\"headerlink\" title=\"Re使用\"></a>Re使用</h3><p>re库是python的标准库，主要用于字符串匹配。调用方法很简单： <code>import re</code>。re库采用raw string(原生字符串，不包含转义符的字符串)类型表示正则表达式，表示为<code>r&#39;text&#39;</code></p>\n<p><strong>re库主要功能函数</strong></p>\n<p><img src=\"https://i.loli.net/2017/12/18/5a37306458664.jpg\" alt=\"re库主要功能函数\"></p>\n<p>flags：正则表达式使用时的控制标记</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">常用标记</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">re.I re.IGNORECASE</td>\n<td align=\"left\">忽略正则表达式的大小写，｜A-Z｜能够匹配小写字符</td>\n</tr>\n<tr>\n<td align=\"left\">re.M re.MULTILINE</td>\n<td align=\"left\">正则表达式中的^操作符能够将给定字符串的每行当作匹配开始</td>\n</tr>\n<tr>\n<td align=\"left\">re.S re.DOTALL</td>\n<td align=\"left\">正则表达式中的.操作符能够匹配所有字符，默认匹配除换行外的所有字符</td>\n</tr>\n</tbody></table>\n<p><strong>re库的最小匹配和贪婪匹配</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math = re.search(<span class=\"string\">r&#x27;PY.*N&#x27;</span>, <span class=\"string\">&#x27;PYANBNCNDN&#x27;</span>)</span><br><span class=\"line\">math.group(<span class=\"number\">0</span>)  <span class=\"comment\"># PYANBNCNDN</span></span><br></pre></td></tr></table></figure>\n\n<p>re库默认使用贪婪匹配模式。如果想返回最小匹配结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math = re.search(<span class=\"string\">r&#x27;PY.*?N&#x27;</span>, <span class=\"string\">&#x27;PYANBNCNDN&#x27;</span>)</span><br><span class=\"line\">math.group(<span class=\"number\">0</span>)  <span class=\"comment\"># PYAN</span></span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\">最小匹配</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">*?</td>\n<td align=\"left\">前一个字符0次或无限次扩展，最小匹配</td>\n</tr>\n<tr>\n<td align=\"left\">+?</td>\n<td align=\"left\">前一个字符1次或无限次扩展，最小匹配</td>\n</tr>\n<tr>\n<td align=\"left\">??</td>\n<td align=\"left\">前一个字符0次或1次扩展，最小匹配</td>\n</tr>\n<tr>\n<td align=\"left\">{m, n}</td>\n<td align=\"left\">扩展前一个字符m至n次(含n)，最小匹配</td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"淘宝商品比价定向爬虫\"><a href=\"#淘宝商品比价定向爬虫\" class=\"headerlink\" title=\"淘宝商品比价定向爬虫\"></a>淘宝商品比价定向爬虫</h3><p><strong>功能描述</strong></p>\n<ul>\n<li>目的：获取淘宝搜索页面的信息，提取其中的商品名称和价格</li>\n<li>理解：淘宝的搜索接口、翻页的处理</li>\n<li>技术路线：requests+re</li>\n</ul>\n<p><strong>url分析</strong></p>\n<p>首页提交搜索：</p>\n<p><code>url = &#39;https://s.taobao.com/search?q=书包&amp;imgfile=&amp;commend=all&amp;ssid=s5-e&amp;search_type=item&amp;sourceId=tb.index&amp;spm=a21bo.2017.201856-taobao-item.1&amp;ie=utf8&amp;initiative_id=tbindexz_20170306&#39;</code></p>\n<p>搜索结果的第二页：</p>\n<p><code>url = &#39;https://s.taobao.com/search?q=书包&amp;imgfile=&amp;commend=all&amp;ssid=s5-e&amp;search_type=item&amp;sourceId=tb.index&amp;spm=a21bo.2017.201856-taobao-item.1&amp;ie=utf8&amp;initiative_id=tbindexz_20170306&amp;bcoffset=4&amp;ntoffset=4&amp;p4ppushleft=1%2C48&amp;s=44&#39;</code></p>\n<p><strong>程序设计</strong></p>\n<ul>\n<li>步骤1：提交商品搜索请求，循环获取页面</li>\n<li>步骤2：对于每个页面，提取商品名称和价格信息</li>\n<li>步骤3：将信息输出到屏幕上</li>\n</ul>\n<hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">getHtmlText</span>(<span class=\"params\">url</span>):</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        r = requests.get(url, timeout=<span class=\"number\">30</span>)</span><br><span class=\"line\">        r.raise_for_status()</span><br><span class=\"line\">        r.encoding = r.apparent_encoding</span><br><span class=\"line\">        <span class=\"keyword\">return</span> r.text</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">parsePage</span>(<span class=\"params\">ilt, html</span>):</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        plt = re.findall(<span class=\"string\">r&#x27;\\&quot;view_price\\&quot;\\:\\&quot;[\\d\\.]*\\&quot;&#x27;</span>, html)</span><br><span class=\"line\">        tlt = re.findall(<span class=\"string\">r&#x27;\\&quot;raw_title\\&quot;\\:\\&quot;.*?\\&quot;&#x27;</span>, html)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(plt)):</span><br><span class=\"line\">            price = <span class=\"built_in\">eval</span>(plt[i].split(<span class=\"string\">&#x27;:&#x27;</span>)[<span class=\"number\">1</span>])</span><br><span class=\"line\">            title = <span class=\"built_in\">eval</span>(tlt[i].split(<span class=\"string\">&#x27;:&#x27;</span>)[<span class=\"number\">1</span>])</span><br><span class=\"line\">            ilt.append([price, title])</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span> <span class=\"string\">&#x27;error&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">printGoodsList</span>(<span class=\"params\">ilt</span>):</span><br><span class=\"line\">    tplt = <span class=\"string\">&quot;&#123;:4&#125;\\t&#123;:8&#125;\\t&#123;:16&#125;&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span> tplt.<span class=\"built_in\">format</span>(<span class=\"string\">&#x27;序号&#x27;</span>, <span class=\"string\">&#x27;价格&#x27;</span>, <span class=\"string\">&#x27;商品名称&#x27;</span>)</span><br><span class=\"line\">    count = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> g <span class=\"keyword\">in</span> ilt:</span><br><span class=\"line\">        count = count +<span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span> tplt.<span class=\"built_in\">format</span>(count, g[<span class=\"number\">0</span>], g[<span class=\"number\">1</span>])</span><br><span class=\"line\">    <span class=\"built_in\">print</span> <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    goods = <span class=\"string\">&#x27;书包&#x27;</span></span><br><span class=\"line\">    depth = <span class=\"number\">2</span></span><br><span class=\"line\">    start_url = <span class=\"string\">&#x27;https://s.taobao.com/search?q=&#x27;</span> + goods</span><br><span class=\"line\">    inforList = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(depth):</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            url = start_url + <span class=\"string\">&#x27;&amp;s=&#x27;</span> + <span class=\"built_in\">str</span>(<span class=\"number\">44</span>*i)</span><br><span class=\"line\">            html = getHtmlText(url)</span><br><span class=\"line\">            parsePage(inforList, html)</span><br><span class=\"line\">        <span class=\"keyword\">except</span>:</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">    printGoodsList(inforList)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<hr>\n<p><img src=\"https://i.loli.net/2017/12/18/5a377e467083a.jpg\" alt=\"运行结果\"></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"re库的使用和爬虫实战\"><a href=\"#re库的使用和爬虫实战\" class=\"headerlink\" title=\"re库的使用和爬虫实战\"></a>re库的使用和爬虫实战</h2><ul>\n<li>通用的字符串表达框架</li>\n<li>简洁表达一组字符串的表达式</li>\n<li>针对字符串表达“简洁”和“特征”思想的工具</li>\n<li>判断某字符串的特征归属</li>\n</ul>\n<p>正则表达式在 <strong>文本处理中</strong> 的应用：</p>\n<ul>\n<li>表达文本类型的特征（病毒、入侵等）</li>\n<li>同时查找或替换字符字符串</li>\n<li>匹配字符串的全部或部分</li>\n</ul>\n<p><strong>主要用在字符串匹配中</strong></p>","more":"<p>正则表达式的使用：</p>\n<p>编译：将符合正则表达式语法的字符串转换成正则表达式特征。编译之前的表达式只是一个符合正则表达式语法的字符串。</p>\n<h3 id=\"正则表达式的语法\"><a href=\"#正则表达式的语法\" class=\"headerlink\" title=\"正则表达式的语法\"></a>正则表达式的语法</h3><ul>\n<li>正则表达式的常用操作符</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"left\">操作符</th>\n<th align=\"left\">说明</th>\n<th align=\"left\">实例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>.</code></td>\n<td align=\"left\">表示任何单个字符</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>[]</code></td>\n<td align=\"left\">字符集，对单个字符给出取值范围</td>\n<td align=\"left\"><code>[abc]</code>表示a、b、c,<code>[a-z]</code>表示a到z单个字符</td>\n</tr>\n<tr>\n<td align=\"left\"><code>[^ ]</code></td>\n<td align=\"left\">非字符集，对单个字符给出排除范围</td>\n<td align=\"left\"><code>[^abc]</code>表示非a或b或c的单个字符</td>\n</tr>\n<tr>\n<td align=\"left\"><code>*</code></td>\n<td align=\"left\">前一个字符0次或无限次扩展</td>\n<td align=\"left\"><code>abc*</code>表示ab、abc、abcc、abccc等</td>\n</tr>\n<tr>\n<td align=\"left\"><code>+</code></td>\n<td align=\"left\">前一个字符1次或无限次扩展</td>\n<td align=\"left\"><code>abc+</code>表示abc、abcc、abccc等</td>\n</tr>\n<tr>\n<td align=\"left\"><code>?</code></td>\n<td align=\"left\">前一个字符0次或1次扩展</td>\n<td align=\"left\"><code>abc?</code>表示ab、abc</td>\n</tr>\n<tr>\n<td align=\"left\"><code>｜</code></td>\n<td align=\"left\">左右表达式任意一个</td>\n<td align=\"left\"><code>abc｜def</code> 表示abc、def</td>\n</tr>\n<tr>\n<td align=\"left\"><code>&#123;m&#125;</code></td>\n<td align=\"left\">扩展前一个字符m次</td>\n<td align=\"left\"><code>ab&#123;2&#125;c</code>表示abbc</td>\n</tr>\n<tr>\n<td align=\"left\"><code>&#123;m, n&#125;</code></td>\n<td align=\"left\">扩展前一个字符m至n次（含n）</td>\n<td align=\"left\"><code>ab&#123;1, 2&#125;c</code>表示abc、abbc</td>\n</tr>\n<tr>\n<td align=\"left\"><code>^</code></td>\n<td align=\"left\">匹配字符串开头</td>\n<td align=\"left\"><code>^abc</code>表示abc且在一个字符串的开头</td>\n</tr>\n<tr>\n<td align=\"left\"><code>$</code></td>\n<td align=\"left\">匹配字符串结尾</td>\n<td align=\"left\"><code>abc$</code>表示abc且在一个字符串的结尾</td>\n</tr>\n<tr>\n<td align=\"left\"><code>()</code></td>\n<td align=\"left\">分组标记，内部只能只用｜操作符</td>\n<td align=\"left\"><code>(abc)</code>表示abc,<code>(abc｜def)</code>表示acb、def</td>\n</tr>\n<tr>\n<td align=\"left\"><code>\\d</code></td>\n<td align=\"left\">数字，等价与<code>[0-9]</code></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code>\\w</code></td>\n<td align=\"left\">单词字符，等价于<code>[A-Za-z0-9]</code></td>\n<td align=\"left\"></td>\n</tr>\n</tbody></table>\n<ul>\n<li>语法实例：</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"left\">正则表达式</th>\n<th align=\"left\">对应字符串</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>P(Y｜YT｜YTH｜YTHO)?N</code></td>\n<td align=\"left\">‘PN’、’PYN’、’PYTN’、’PYTHN’、’PYTHON’</td>\n</tr>\n<tr>\n<td align=\"left\"><code>PYTHON+</code></td>\n<td align=\"left\">‘PYTHON’、’PYTHONN’、’PYTHONNN’、……</td>\n</tr>\n<tr>\n<td align=\"left\"><code>PY[TH]ON</code></td>\n<td align=\"left\">‘PYTON’、’PYTHON’</td>\n</tr>\n<tr>\n<td align=\"left\"><code>PY[^TH]?ON</code></td>\n<td align=\"left\">‘PYON’、’PYN’、’PYbN’、……</td>\n</tr>\n<tr>\n<td align=\"left\"><code>PY&#123;:3&#125;N</code></td>\n<td align=\"left\">‘PN’、’PYN’、’PYYN’、’PYYYN’</td>\n</tr>\n</tbody></table>\n<ul>\n<li>经典正则表达式实例</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"left\">表达式</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>^[A-Za-z]+$</code></td>\n<td align=\"left\">由26个字母组成的字符串</td>\n</tr>\n<tr>\n<td align=\"left\"><code>^-?\\d+$</code></td>\n<td align=\"left\">整数形式的字符串</td>\n</tr>\n<tr>\n<td align=\"left\"><code>[\\u4e00-\\u9fa5]</code></td>\n<td align=\"left\">匹配中文字符</td>\n</tr>\n<tr>\n<td align=\"left\"><code>^\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$</code></td>\n<td align=\"left\">Email地址</td>\n</tr>\n<tr>\n<td align=\"left\"><code>(^\\d&#123;15&#125;$)｜(^\\d&#123;18&#125;$)｜(^\\d&#123;17&#125;(\\d｜X｜x)$)</code></td>\n<td align=\"left\">身份证号</td>\n</tr>\n</tbody></table>\n<ul>\n<li>正则表达式运算优先级</li>\n</ul>\n<p><img src=\"https://i.loli.net/2017/12/18/5a3730644bf23.jpg\" alt=\"正则表达式运算优先级\"></p>\n<h3 id=\"Re使用\"><a href=\"#Re使用\" class=\"headerlink\" title=\"Re使用\"></a>Re使用</h3><p>re库是python的标准库，主要用于字符串匹配。调用方法很简单： <code>import re</code>。re库采用raw string(原生字符串，不包含转义符的字符串)类型表示正则表达式，表示为<code>r&#39;text&#39;</code></p>\n<p><strong>re库主要功能函数</strong></p>\n<p><img src=\"https://i.loli.net/2017/12/18/5a37306458664.jpg\" alt=\"re库主要功能函数\"></p>\n<p>flags：正则表达式使用时的控制标记</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">常用标记</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">re.I re.IGNORECASE</td>\n<td align=\"left\">忽略正则表达式的大小写，｜A-Z｜能够匹配小写字符</td>\n</tr>\n<tr>\n<td align=\"left\">re.M re.MULTILINE</td>\n<td align=\"left\">正则表达式中的^操作符能够将给定字符串的每行当作匹配开始</td>\n</tr>\n<tr>\n<td align=\"left\">re.S re.DOTALL</td>\n<td align=\"left\">正则表达式中的.操作符能够匹配所有字符，默认匹配除换行外的所有字符</td>\n</tr>\n</tbody></table>\n<p><strong>re库的最小匹配和贪婪匹配</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math = re.search(<span class=\"string\">r&#x27;PY.*N&#x27;</span>, <span class=\"string\">&#x27;PYANBNCNDN&#x27;</span>)</span><br><span class=\"line\">math.group(<span class=\"number\">0</span>)  <span class=\"comment\"># PYANBNCNDN</span></span><br></pre></td></tr></table></figure>\n\n<p>re库默认使用贪婪匹配模式。如果想返回最小匹配结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math = re.search(<span class=\"string\">r&#x27;PY.*?N&#x27;</span>, <span class=\"string\">&#x27;PYANBNCNDN&#x27;</span>)</span><br><span class=\"line\">math.group(<span class=\"number\">0</span>)  <span class=\"comment\"># PYAN</span></span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\">最小匹配</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">*?</td>\n<td align=\"left\">前一个字符0次或无限次扩展，最小匹配</td>\n</tr>\n<tr>\n<td align=\"left\">+?</td>\n<td align=\"left\">前一个字符1次或无限次扩展，最小匹配</td>\n</tr>\n<tr>\n<td align=\"left\">??</td>\n<td align=\"left\">前一个字符0次或1次扩展，最小匹配</td>\n</tr>\n<tr>\n<td align=\"left\">{m, n}</td>\n<td align=\"left\">扩展前一个字符m至n次(含n)，最小匹配</td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"淘宝商品比价定向爬虫\"><a href=\"#淘宝商品比价定向爬虫\" class=\"headerlink\" title=\"淘宝商品比价定向爬虫\"></a>淘宝商品比价定向爬虫</h3><p><strong>功能描述</strong></p>\n<ul>\n<li>目的：获取淘宝搜索页面的信息，提取其中的商品名称和价格</li>\n<li>理解：淘宝的搜索接口、翻页的处理</li>\n<li>技术路线：requests+re</li>\n</ul>\n<p><strong>url分析</strong></p>\n<p>首页提交搜索：</p>\n<p><code>url = &#39;https://s.taobao.com/search?q=书包&amp;imgfile=&amp;commend=all&amp;ssid=s5-e&amp;search_type=item&amp;sourceId=tb.index&amp;spm=a21bo.2017.201856-taobao-item.1&amp;ie=utf8&amp;initiative_id=tbindexz_20170306&#39;</code></p>\n<p>搜索结果的第二页：</p>\n<p><code>url = &#39;https://s.taobao.com/search?q=书包&amp;imgfile=&amp;commend=all&amp;ssid=s5-e&amp;search_type=item&amp;sourceId=tb.index&amp;spm=a21bo.2017.201856-taobao-item.1&amp;ie=utf8&amp;initiative_id=tbindexz_20170306&amp;bcoffset=4&amp;ntoffset=4&amp;p4ppushleft=1%2C48&amp;s=44&#39;</code></p>\n<p><strong>程序设计</strong></p>\n<ul>\n<li>步骤1：提交商品搜索请求，循环获取页面</li>\n<li>步骤2：对于每个页面，提取商品名称和价格信息</li>\n<li>步骤3：将信息输出到屏幕上</li>\n</ul>\n<hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">getHtmlText</span>(<span class=\"params\">url</span>):</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        r = requests.get(url, timeout=<span class=\"number\">30</span>)</span><br><span class=\"line\">        r.raise_for_status()</span><br><span class=\"line\">        r.encoding = r.apparent_encoding</span><br><span class=\"line\">        <span class=\"keyword\">return</span> r.text</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">parsePage</span>(<span class=\"params\">ilt, html</span>):</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        plt = re.findall(<span class=\"string\">r&#x27;\\&quot;view_price\\&quot;\\:\\&quot;[\\d\\.]*\\&quot;&#x27;</span>, html)</span><br><span class=\"line\">        tlt = re.findall(<span class=\"string\">r&#x27;\\&quot;raw_title\\&quot;\\:\\&quot;.*?\\&quot;&#x27;</span>, html)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(plt)):</span><br><span class=\"line\">            price = <span class=\"built_in\">eval</span>(plt[i].split(<span class=\"string\">&#x27;:&#x27;</span>)[<span class=\"number\">1</span>])</span><br><span class=\"line\">            title = <span class=\"built_in\">eval</span>(tlt[i].split(<span class=\"string\">&#x27;:&#x27;</span>)[<span class=\"number\">1</span>])</span><br><span class=\"line\">            ilt.append([price, title])</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span> <span class=\"string\">&#x27;error&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">printGoodsList</span>(<span class=\"params\">ilt</span>):</span><br><span class=\"line\">    tplt = <span class=\"string\">&quot;&#123;:4&#125;\\t&#123;:8&#125;\\t&#123;:16&#125;&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span> tplt.<span class=\"built_in\">format</span>(<span class=\"string\">&#x27;序号&#x27;</span>, <span class=\"string\">&#x27;价格&#x27;</span>, <span class=\"string\">&#x27;商品名称&#x27;</span>)</span><br><span class=\"line\">    count = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> g <span class=\"keyword\">in</span> ilt:</span><br><span class=\"line\">        count = count +<span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span> tplt.<span class=\"built_in\">format</span>(count, g[<span class=\"number\">0</span>], g[<span class=\"number\">1</span>])</span><br><span class=\"line\">    <span class=\"built_in\">print</span> <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    goods = <span class=\"string\">&#x27;书包&#x27;</span></span><br><span class=\"line\">    depth = <span class=\"number\">2</span></span><br><span class=\"line\">    start_url = <span class=\"string\">&#x27;https://s.taobao.com/search?q=&#x27;</span> + goods</span><br><span class=\"line\">    inforList = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(depth):</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            url = start_url + <span class=\"string\">&#x27;&amp;s=&#x27;</span> + <span class=\"built_in\">str</span>(<span class=\"number\">44</span>*i)</span><br><span class=\"line\">            html = getHtmlText(url)</span><br><span class=\"line\">            parsePage(inforList, html)</span><br><span class=\"line\">        <span class=\"keyword\">except</span>:</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">    printGoodsList(inforList)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<hr>\n<p><img src=\"https://i.loli.net/2017/12/18/5a377e467083a.jpg\" alt=\"运行结果\"></p>"},{"title":"python网络爬虫和信息提取(4)","date":"2017-12-18T16:00:00.000Z","_content":"\n## Scrapy框架的使用和实战\n\nScrapy是一个功能强大的python爬虫框架！\n\n爬虫框架：\n- 是实现爬虫功能的一个软件结构和功能组件集合。\n- 是一个半成品，能够帮助用户实现专业网络爬虫。\n\n### 安装\n\n    pip install scrapy\n\n### Scrapy常用命令\n\n| 命令 | 说明 | 格式 |\n| :------------- | :------------- |\n| startproject | 创建一个新工程 | `scrapy startproject <name> [dir]` |\n| genspider | 创建一个爬虫 | `scrapy genspider [options] <name> <domain>` |\n| settings | 获取爬虫配置信息 | scrapy settings [options] |\n| crawl | 运行一个爬虫 | scrapy crawl <spider> |\n| list | 列出工程中所有爬虫 | scrapy list |\n| shell | 启动URL调试命令行 | scrapy shell [url] |\n\n\n## requests vs Scrapy\n\n相同点：\n\n- 两者都可以进行页面请求和爬取，python爬虫的两个重要技术路线。\n- 两者可用性都好，文档丰富，入门简单。\n- 两者都没有处理js、提交表单、对应验证码等功能（可扩展）。\n\n不同点:\n\n| requests | scrapy |\n| :------------- | :------------- |\n| 页面级爬虫 | 网站级爬虫 |\n| 功能库 | 框架 |\n| 并发性考虑不足，性能较差 | 并发性好，性能较高 |\n| 重点在于页面下载 | 重点在于爬虫结构 |\n| 定制灵活 | 一般定制灵活，深度定制困难 |\n| 上手十分简单 | 入门稍难 |\n\n\n选用哪个技术路线开发爬虫\n\n- 非常小的需求，requests库\n- 不太小的需求，scrapy框架\n- 定制程度很好的需求(不考虑规模),自搭框架。requests > Scrapy。\n","source":"_posts/python网络爬虫和信息提取(4).md","raw":"---\ntitle: python网络爬虫和信息提取(4)\ndate: 2017-12-19\ntags: [python, 网络爬虫]\n---\n\n## Scrapy框架的使用和实战\n\nScrapy是一个功能强大的python爬虫框架！\n\n爬虫框架：\n- 是实现爬虫功能的一个软件结构和功能组件集合。\n- 是一个半成品，能够帮助用户实现专业网络爬虫。\n\n### 安装\n\n    pip install scrapy\n\n### Scrapy常用命令\n\n| 命令 | 说明 | 格式 |\n| :------------- | :------------- |\n| startproject | 创建一个新工程 | `scrapy startproject <name> [dir]` |\n| genspider | 创建一个爬虫 | `scrapy genspider [options] <name> <domain>` |\n| settings | 获取爬虫配置信息 | scrapy settings [options] |\n| crawl | 运行一个爬虫 | scrapy crawl <spider> |\n| list | 列出工程中所有爬虫 | scrapy list |\n| shell | 启动URL调试命令行 | scrapy shell [url] |\n\n\n## requests vs Scrapy\n\n相同点：\n\n- 两者都可以进行页面请求和爬取，python爬虫的两个重要技术路线。\n- 两者可用性都好，文档丰富，入门简单。\n- 两者都没有处理js、提交表单、对应验证码等功能（可扩展）。\n\n不同点:\n\n| requests | scrapy |\n| :------------- | :------------- |\n| 页面级爬虫 | 网站级爬虫 |\n| 功能库 | 框架 |\n| 并发性考虑不足，性能较差 | 并发性好，性能较高 |\n| 重点在于页面下载 | 重点在于爬虫结构 |\n| 定制灵活 | 一般定制灵活，深度定制困难 |\n| 上手十分简单 | 入门稍难 |\n\n\n选用哪个技术路线开发爬虫\n\n- 非常小的需求，requests库\n- 不太小的需求，scrapy框架\n- 定制程度很好的需求(不考虑规模),自搭框架。requests > Scrapy。\n","slug":"python网络爬虫和信息提取(4)","published":1,"updated":"2021-06-20T10:25:20.129Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluqa1hj6003brlog2dwr0h64","content":"<h2 id=\"Scrapy框架的使用和实战\"><a href=\"#Scrapy框架的使用和实战\" class=\"headerlink\" title=\"Scrapy框架的使用和实战\"></a>Scrapy框架的使用和实战</h2><p>Scrapy是一个功能强大的python爬虫框架！</p>\n<p>爬虫框架：</p>\n<ul>\n<li>是实现爬虫功能的一个软件结构和功能组件集合。</li>\n<li>是一个半成品，能够帮助用户实现专业网络爬虫。</li>\n</ul>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><pre><code>pip install scrapy\n</code></pre>\n<h3 id=\"Scrapy常用命令\"><a href=\"#Scrapy常用命令\" class=\"headerlink\" title=\"Scrapy常用命令\"></a>Scrapy常用命令</h3><p>| 命令 | 说明 | 格式 |<br>| :————- | :————- |<br>| startproject | 创建一个新工程 | <code>scrapy startproject &lt;name&gt; [dir]</code> |<br>| genspider | 创建一个爬虫 | <code>scrapy genspider [options] &lt;name&gt; &lt;domain&gt;</code> |<br>| settings | 获取爬虫配置信息 | scrapy settings [options] |<br>| crawl | 运行一个爬虫 | scrapy crawl <spider> |<br>| list | 列出工程中所有爬虫 | scrapy list |<br>| shell | 启动URL调试命令行 | scrapy shell [url] |</p>\n<h2 id=\"requests-vs-Scrapy\"><a href=\"#requests-vs-Scrapy\" class=\"headerlink\" title=\"requests vs Scrapy\"></a>requests vs Scrapy</h2><p>相同点：</p>\n<ul>\n<li>两者都可以进行页面请求和爬取，python爬虫的两个重要技术路线。</li>\n<li>两者可用性都好，文档丰富，入门简单。</li>\n<li>两者都没有处理js、提交表单、对应验证码等功能（可扩展）。</li>\n</ul>\n<p>不同点:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">requests</th>\n<th align=\"left\">scrapy</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">页面级爬虫</td>\n<td align=\"left\">网站级爬虫</td>\n</tr>\n<tr>\n<td align=\"left\">功能库</td>\n<td align=\"left\">框架</td>\n</tr>\n<tr>\n<td align=\"left\">并发性考虑不足，性能较差</td>\n<td align=\"left\">并发性好，性能较高</td>\n</tr>\n<tr>\n<td align=\"left\">重点在于页面下载</td>\n<td align=\"left\">重点在于爬虫结构</td>\n</tr>\n<tr>\n<td align=\"left\">定制灵活</td>\n<td align=\"left\">一般定制灵活，深度定制困难</td>\n</tr>\n<tr>\n<td align=\"left\">上手十分简单</td>\n<td align=\"left\">入门稍难</td>\n</tr>\n</tbody></table>\n<p>选用哪个技术路线开发爬虫</p>\n<ul>\n<li>非常小的需求，requests库</li>\n<li>不太小的需求，scrapy框架</li>\n<li>定制程度很好的需求(不考虑规模),自搭框架。requests &gt; Scrapy。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Scrapy框架的使用和实战\"><a href=\"#Scrapy框架的使用和实战\" class=\"headerlink\" title=\"Scrapy框架的使用和实战\"></a>Scrapy框架的使用和实战</h2><p>Scrapy是一个功能强大的python爬虫框架！</p>\n<p>爬虫框架：</p>\n<ul>\n<li>是实现爬虫功能的一个软件结构和功能组件集合。</li>\n<li>是一个半成品，能够帮助用户实现专业网络爬虫。</li>\n</ul>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><pre><code>pip install scrapy\n</code></pre>\n<h3 id=\"Scrapy常用命令\"><a href=\"#Scrapy常用命令\" class=\"headerlink\" title=\"Scrapy常用命令\"></a>Scrapy常用命令</h3><p>| 命令 | 说明 | 格式 |<br>| :————- | :————- |<br>| startproject | 创建一个新工程 | <code>scrapy startproject &lt;name&gt; [dir]</code> |<br>| genspider | 创建一个爬虫 | <code>scrapy genspider [options] &lt;name&gt; &lt;domain&gt;</code> |<br>| settings | 获取爬虫配置信息 | scrapy settings [options] |<br>| crawl | 运行一个爬虫 | scrapy crawl <spider> |<br>| list | 列出工程中所有爬虫 | scrapy list |<br>| shell | 启动URL调试命令行 | scrapy shell [url] |</p>\n<h2 id=\"requests-vs-Scrapy\"><a href=\"#requests-vs-Scrapy\" class=\"headerlink\" title=\"requests vs Scrapy\"></a>requests vs Scrapy</h2><p>相同点：</p>\n<ul>\n<li>两者都可以进行页面请求和爬取，python爬虫的两个重要技术路线。</li>\n<li>两者可用性都好，文档丰富，入门简单。</li>\n<li>两者都没有处理js、提交表单、对应验证码等功能（可扩展）。</li>\n</ul>\n<p>不同点:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">requests</th>\n<th align=\"left\">scrapy</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">页面级爬虫</td>\n<td align=\"left\">网站级爬虫</td>\n</tr>\n<tr>\n<td align=\"left\">功能库</td>\n<td align=\"left\">框架</td>\n</tr>\n<tr>\n<td align=\"left\">并发性考虑不足，性能较差</td>\n<td align=\"left\">并发性好，性能较高</td>\n</tr>\n<tr>\n<td align=\"left\">重点在于页面下载</td>\n<td align=\"left\">重点在于爬虫结构</td>\n</tr>\n<tr>\n<td align=\"left\">定制灵活</td>\n<td align=\"left\">一般定制灵活，深度定制困难</td>\n</tr>\n<tr>\n<td align=\"left\">上手十分简单</td>\n<td align=\"left\">入门稍难</td>\n</tr>\n</tbody></table>\n<p>选用哪个技术路线开发爬虫</p>\n<ul>\n<li>非常小的需求，requests库</li>\n<li>不太小的需求，scrapy框架</li>\n<li>定制程度很好的需求(不考虑规模),自搭框架。requests &gt; Scrapy。</li>\n</ul>\n"},{"title":"requests库的使用注意地方","date":"2019-10-05T16:00:00.000Z","_content":"\n1、设置cookie\n\n```\nfrom requests import Session\nfrom requests.cookies import RequestsCookieJar\n\nsession = Session()\nres = session.post('http://data.huaxuejia.cn/search.php',\nfiles={'search_keyword': (None, casnum)})\n\ncookie_jar = RequestsCookieJar()\nresd = requests.utils.dict_from_cookiejar(res.cookies)\ncookie_jar.set([key for key in resd][0], resd[[key for key in resd][0]], domain='.huaxuejia.cn')\n\nres = session.post('http://data.huaxuejia.cn/search.php', files={'search_keyword': (None, casnum)}, cookies=cookie_jar)\n\n```\n\n2、post提交表单\n\n```\nfrom requests import Session\n\nres = session.post(url, files={key: (None, value)})\n```\n\n\n\n3、错误（too many open files）:\n\n```\nOpenSSL.SSL.Error: [('system library', 'fopen', 'Too many open files'), ('BIO routines', 'BIO_new_file', 'system lib'), ('x509 cetificate routines', 'X509_load_cert_crl_file', 'system lib')]\n```\n\n解决：\n\n```\nimport requests\n\nsession = requests.Session()\nres = session.get('http://www.baidu.com')\nsession.close()\ndel(session)\n```\n","source":"_posts/requests库的使用注意地方.md","raw":"---\ntitle: requests库的使用注意地方\ndate: 2019-10-06\ntags: [python]\n---\n\n1、设置cookie\n\n```\nfrom requests import Session\nfrom requests.cookies import RequestsCookieJar\n\nsession = Session()\nres = session.post('http://data.huaxuejia.cn/search.php',\nfiles={'search_keyword': (None, casnum)})\n\ncookie_jar = RequestsCookieJar()\nresd = requests.utils.dict_from_cookiejar(res.cookies)\ncookie_jar.set([key for key in resd][0], resd[[key for key in resd][0]], domain='.huaxuejia.cn')\n\nres = session.post('http://data.huaxuejia.cn/search.php', files={'search_keyword': (None, casnum)}, cookies=cookie_jar)\n\n```\n\n2、post提交表单\n\n```\nfrom requests import Session\n\nres = session.post(url, files={key: (None, value)})\n```\n\n\n\n3、错误（too many open files）:\n\n```\nOpenSSL.SSL.Error: [('system library', 'fopen', 'Too many open files'), ('BIO routines', 'BIO_new_file', 'system lib'), ('x509 cetificate routines', 'X509_load_cert_crl_file', 'system lib')]\n```\n\n解决：\n\n```\nimport requests\n\nsession = requests.Session()\nres = session.get('http://www.baidu.com')\nsession.close()\ndel(session)\n```\n","slug":"requests库的使用注意地方","published":1,"updated":"2021-06-20T10:25:20.129Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluqa1hj7003drlog6c9q4iiu","content":"<p>1、设置cookie</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from requests import Session</span><br><span class=\"line\">from requests.cookies import RequestsCookieJar</span><br><span class=\"line\"></span><br><span class=\"line\">session = Session()</span><br><span class=\"line\">res = session.post(&#x27;http://data.huaxuejia.cn/search.php&#x27;,</span><br><span class=\"line\">files=&#123;&#x27;search_keyword&#x27;: (None, casnum)&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">cookie_jar = RequestsCookieJar()</span><br><span class=\"line\">resd = requests.utils.dict_from_cookiejar(res.cookies)</span><br><span class=\"line\">cookie_jar.set([key for key in resd][0], resd[[key for key in resd][0]], domain=&#x27;.huaxuejia.cn&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">res = session.post(&#x27;http://data.huaxuejia.cn/search.php&#x27;, files=&#123;&#x27;search_keyword&#x27;: (None, casnum)&#125;, cookies=cookie_jar)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>2、post提交表单</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from requests import Session</span><br><span class=\"line\"></span><br><span class=\"line\">res = session.post(url, files=&#123;key: (None, value)&#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>3、错误（too many open files）:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OpenSSL.SSL.Error: [(&#x27;system library&#x27;, &#x27;fopen&#x27;, &#x27;Too many open files&#x27;), (&#x27;BIO routines&#x27;, &#x27;BIO_new_file&#x27;, &#x27;system lib&#x27;), (&#x27;x509 cetificate routines&#x27;, &#x27;X509_load_cert_crl_file&#x27;, &#x27;system lib&#x27;)]</span><br></pre></td></tr></table></figure>\n\n<p>解决：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import requests</span><br><span class=\"line\"></span><br><span class=\"line\">session = requests.Session()</span><br><span class=\"line\">res = session.get(&#x27;http://www.baidu.com&#x27;)</span><br><span class=\"line\">session.close()</span><br><span class=\"line\">del(session)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>1、设置cookie</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from requests import Session</span><br><span class=\"line\">from requests.cookies import RequestsCookieJar</span><br><span class=\"line\"></span><br><span class=\"line\">session = Session()</span><br><span class=\"line\">res = session.post(&#x27;http://data.huaxuejia.cn/search.php&#x27;,</span><br><span class=\"line\">files=&#123;&#x27;search_keyword&#x27;: (None, casnum)&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">cookie_jar = RequestsCookieJar()</span><br><span class=\"line\">resd = requests.utils.dict_from_cookiejar(res.cookies)</span><br><span class=\"line\">cookie_jar.set([key for key in resd][0], resd[[key for key in resd][0]], domain=&#x27;.huaxuejia.cn&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">res = session.post(&#x27;http://data.huaxuejia.cn/search.php&#x27;, files=&#123;&#x27;search_keyword&#x27;: (None, casnum)&#125;, cookies=cookie_jar)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>2、post提交表单</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from requests import Session</span><br><span class=\"line\"></span><br><span class=\"line\">res = session.post(url, files=&#123;key: (None, value)&#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>3、错误（too many open files）:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OpenSSL.SSL.Error: [(&#x27;system library&#x27;, &#x27;fopen&#x27;, &#x27;Too many open files&#x27;), (&#x27;BIO routines&#x27;, &#x27;BIO_new_file&#x27;, &#x27;system lib&#x27;), (&#x27;x509 cetificate routines&#x27;, &#x27;X509_load_cert_crl_file&#x27;, &#x27;system lib&#x27;)]</span><br></pre></td></tr></table></figure>\n\n<p>解决：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import requests</span><br><span class=\"line\"></span><br><span class=\"line\">session = requests.Session()</span><br><span class=\"line\">res = session.get(&#x27;http://www.baidu.com&#x27;)</span><br><span class=\"line\">session.close()</span><br><span class=\"line\">del(session)</span><br></pre></td></tr></table></figure>\n"},{"title":"sublime text 3在ubunt下设置输入中文方法","date":"2017-05-30T16:00:00.000Z","_content":"\n## 将以下代码保存到`sublime_imfix.c`(位于`~`目录)\n\n```\n#include <gtk/gtkimcontext.h>\nvoid gtk_im_context_set_client_window (GtkIMContext *context,\n         GdkWindow    *window)\n{\n GtkIMContextClass *klass;\n g_return_if_fail (GTK_IS_IM_CONTEXT (context));\n klass = GTK_IM_CONTEXT_GET_CLASS (context);\n if (klass->set_client_window)\n   klass->set_client_window (context, window);\n g_object_set_data(G_OBJECT(context),\"window\",window);\n if(!GDK_IS_WINDOW (window))\n   return;\n int width = gdk_window_get_width(window);\n int height = gdk_window_get_height(window);\n if(width != 0 && height !=0)\n   gtk_im_context_focus_in(context);\n}\n```\n\n<!--more-->\n\n## 安装编译环境\n\n```\nsudo apt-get install build-essential\n\nsudo apt-get install libgtk2.0-dev\n```\n\n## 将上一步的代码编译成共享库`libsublime-imfix.so`，命令\n\n```\ncd ~\n\ngcc -shared -o libsublime-imfix.so sublime_imfix.c  `pkg-config --libs --cflags gtk+-2.0` -fPIC\n```\n\n## 然后将`libsublime-imfix.so`拷贝到sublime_text所在文件夹\n\n```\nsudo mv libsublime-imfix.so /opt/sublime_text/\n```\n\n## 修改文件`/usr/bin/subl`的内容\n\n```\nsudo gedit /usr/bin/subl\n```\n将\n```\n#!/bin/sh\n\nexec /opt/sublime_text/sublime_text \"$@\"\n```\n\n修改为\n\n```\n#!/bin/sh\n\nLD_PRELOAD=/opt/sublime_text/libsublime-imfix.so exec /opt/sublime_text/sublime_text \"$@\"\n```\n\n## 此时可在命令行执行命令subl可启动sublime-text 可输入汉字，但是点击图标则不行\n\n## 在启动器快捷启动\n\n找到sublime启动图标的放置位置\n\n```\nsudo find -iname sublime*\n```\n\n## find的结果如下\n```\n./.local/share/icons/sublime_text.png\n\n./.local/share/applications/sublime_text.desktop\n\n./.config/sublime-text-3\n```\n说明sublime启动图标位置为`./.local/share/applications/sublime_text.desktop`\n\n## 然后修改启动设置\n\n    sudo vim ./.local/share/applications/sublime_text.desktop\n\n将`Exec=/opt/sublime_text/sublime_text`修改为\n\n`Exec=/usr/bin/subl`\n\n## 这时，不管时在终端优雅的输入 subl 还是在启动器中优雅的点击 sublime 进入后都可以输入中文啦！\n\n## [参考资料](http://log.fyscu.com/index.php/archives/55/)","source":"_posts/sublime text 3在ubunt下设置输入中文方法.md","raw":"---\ntitle: sublime text 3在ubunt下设置输入中文方法\ndate: 2017-05-31\ntags: [Linux, sublime]\n---\n\n## 将以下代码保存到`sublime_imfix.c`(位于`~`目录)\n\n```\n#include <gtk/gtkimcontext.h>\nvoid gtk_im_context_set_client_window (GtkIMContext *context,\n         GdkWindow    *window)\n{\n GtkIMContextClass *klass;\n g_return_if_fail (GTK_IS_IM_CONTEXT (context));\n klass = GTK_IM_CONTEXT_GET_CLASS (context);\n if (klass->set_client_window)\n   klass->set_client_window (context, window);\n g_object_set_data(G_OBJECT(context),\"window\",window);\n if(!GDK_IS_WINDOW (window))\n   return;\n int width = gdk_window_get_width(window);\n int height = gdk_window_get_height(window);\n if(width != 0 && height !=0)\n   gtk_im_context_focus_in(context);\n}\n```\n\n<!--more-->\n\n## 安装编译环境\n\n```\nsudo apt-get install build-essential\n\nsudo apt-get install libgtk2.0-dev\n```\n\n## 将上一步的代码编译成共享库`libsublime-imfix.so`，命令\n\n```\ncd ~\n\ngcc -shared -o libsublime-imfix.so sublime_imfix.c  `pkg-config --libs --cflags gtk+-2.0` -fPIC\n```\n\n## 然后将`libsublime-imfix.so`拷贝到sublime_text所在文件夹\n\n```\nsudo mv libsublime-imfix.so /opt/sublime_text/\n```\n\n## 修改文件`/usr/bin/subl`的内容\n\n```\nsudo gedit /usr/bin/subl\n```\n将\n```\n#!/bin/sh\n\nexec /opt/sublime_text/sublime_text \"$@\"\n```\n\n修改为\n\n```\n#!/bin/sh\n\nLD_PRELOAD=/opt/sublime_text/libsublime-imfix.so exec /opt/sublime_text/sublime_text \"$@\"\n```\n\n## 此时可在命令行执行命令subl可启动sublime-text 可输入汉字，但是点击图标则不行\n\n## 在启动器快捷启动\n\n找到sublime启动图标的放置位置\n\n```\nsudo find -iname sublime*\n```\n\n## find的结果如下\n```\n./.local/share/icons/sublime_text.png\n\n./.local/share/applications/sublime_text.desktop\n\n./.config/sublime-text-3\n```\n说明sublime启动图标位置为`./.local/share/applications/sublime_text.desktop`\n\n## 然后修改启动设置\n\n    sudo vim ./.local/share/applications/sublime_text.desktop\n\n将`Exec=/opt/sublime_text/sublime_text`修改为\n\n`Exec=/usr/bin/subl`\n\n## 这时，不管时在终端优雅的输入 subl 还是在启动器中优雅的点击 sublime 进入后都可以输入中文啦！\n\n## [参考资料](http://log.fyscu.com/index.php/archives/55/)","slug":"sublime text 3在ubunt下设置输入中文方法","published":1,"updated":"2021-06-20T10:25:20.129Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluqa1hj7003grloghnfhdwhq","content":"<h2 id=\"将以下代码保存到sublime-imfix-c-位于-目录\"><a href=\"#将以下代码保存到sublime-imfix-c-位于-目录\" class=\"headerlink\" title=\"将以下代码保存到sublime_imfix.c(位于~目录)\"></a>将以下代码保存到<code>sublime_imfix.c</code>(位于<code>~</code>目录)</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;gtk/gtkimcontext.h&gt;</span><br><span class=\"line\">void gtk_im_context_set_client_window (GtkIMContext *context,</span><br><span class=\"line\">         GdkWindow    *window)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> GtkIMContextClass *klass;</span><br><span class=\"line\"> g_return_if_fail (GTK_IS_IM_CONTEXT (context));</span><br><span class=\"line\"> klass = GTK_IM_CONTEXT_GET_CLASS (context);</span><br><span class=\"line\"> if (klass-&gt;set_client_window)</span><br><span class=\"line\">   klass-&gt;set_client_window (context, window);</span><br><span class=\"line\"> g_object_set_data(G_OBJECT(context),&quot;window&quot;,window);</span><br><span class=\"line\"> if(!GDK_IS_WINDOW (window))</span><br><span class=\"line\">   return;</span><br><span class=\"line\"> int width = gdk_window_get_width(window);</span><br><span class=\"line\"> int height = gdk_window_get_height(window);</span><br><span class=\"line\"> if(width != 0 &amp;&amp; height !=0)</span><br><span class=\"line\">   gtk_im_context_focus_in(context);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"安装编译环境\"><a href=\"#安装编译环境\" class=\"headerlink\" title=\"安装编译环境\"></a>安装编译环境</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install build-essential</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-get install libgtk2.0-dev</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"将上一步的代码编译成共享库libsublime-imfix-so，命令\"><a href=\"#将上一步的代码编译成共享库libsublime-imfix-so，命令\" class=\"headerlink\" title=\"将上一步的代码编译成共享库libsublime-imfix.so，命令\"></a>将上一步的代码编译成共享库<code>libsublime-imfix.so</code>，命令</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~</span><br><span class=\"line\"></span><br><span class=\"line\">gcc -shared -o libsublime-imfix.so sublime_imfix.c  `pkg-config --libs --cflags gtk+-2.0` -fPIC</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"然后将libsublime-imfix-so拷贝到sublime-text所在文件夹\"><a href=\"#然后将libsublime-imfix-so拷贝到sublime-text所在文件夹\" class=\"headerlink\" title=\"然后将libsublime-imfix.so拷贝到sublime_text所在文件夹\"></a>然后将<code>libsublime-imfix.so</code>拷贝到sublime_text所在文件夹</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mv libsublime-imfix.so /opt/sublime_text/</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"修改文件-usr-bin-subl的内容\"><a href=\"#修改文件-usr-bin-subl的内容\" class=\"headerlink\" title=\"修改文件/usr/bin/subl的内容\"></a>修改文件<code>/usr/bin/subl</code>的内容</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gedit /usr/bin/subl</span><br></pre></td></tr></table></figure>\n<p>将</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/sh</span><br><span class=\"line\"></span><br><span class=\"line\">exec /opt/sublime_text/sublime_text &quot;$@&quot;</span><br></pre></td></tr></table></figure>\n\n<p>修改为</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/sh</span><br><span class=\"line\"></span><br><span class=\"line\">LD_PRELOAD=/opt/sublime_text/libsublime-imfix.so exec /opt/sublime_text/sublime_text &quot;$@&quot;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"此时可在命令行执行命令subl可启动sublime-text-可输入汉字，但是点击图标则不行\"><a href=\"#此时可在命令行执行命令subl可启动sublime-text-可输入汉字，但是点击图标则不行\" class=\"headerlink\" title=\"此时可在命令行执行命令subl可启动sublime-text 可输入汉字，但是点击图标则不行\"></a>此时可在命令行执行命令subl可启动sublime-text 可输入汉字，但是点击图标则不行</h2><h2 id=\"在启动器快捷启动\"><a href=\"#在启动器快捷启动\" class=\"headerlink\" title=\"在启动器快捷启动\"></a>在启动器快捷启动</h2><p>找到sublime启动图标的放置位置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo find -iname sublime*</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"find的结果如下\"><a href=\"#find的结果如下\" class=\"headerlink\" title=\"find的结果如下\"></a>find的结果如下</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./.local/share/icons/sublime_text.png</span><br><span class=\"line\"></span><br><span class=\"line\">./.local/share/applications/sublime_text.desktop</span><br><span class=\"line\"></span><br><span class=\"line\">./.config/sublime-text-3</span><br></pre></td></tr></table></figure>\n<p>说明sublime启动图标位置为<code>./.local/share/applications/sublime_text.desktop</code></p>\n<h2 id=\"然后修改启动设置\"><a href=\"#然后修改启动设置\" class=\"headerlink\" title=\"然后修改启动设置\"></a>然后修改启动设置</h2><pre><code>sudo vim ./.local/share/applications/sublime_text.desktop\n</code></pre>\n<p>将<code>Exec=/opt/sublime_text/sublime_text</code>修改为</p>\n<p><code>Exec=/usr/bin/subl</code></p>\n<h2 id=\"这时，不管时在终端优雅的输入-subl-还是在启动器中优雅的点击-sublime-进入后都可以输入中文啦！\"><a href=\"#这时，不管时在终端优雅的输入-subl-还是在启动器中优雅的点击-sublime-进入后都可以输入中文啦！\" class=\"headerlink\" title=\"这时，不管时在终端优雅的输入 subl 还是在启动器中优雅的点击 sublime 进入后都可以输入中文啦！\"></a>这时，不管时在终端优雅的输入 subl 还是在启动器中优雅的点击 sublime 进入后都可以输入中文啦！</h2><h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a><a href=\"http://log.fyscu.com/index.php/archives/55/\">参考资料</a></h2>","site":{"data":{}},"excerpt":"<h2 id=\"将以下代码保存到sublime-imfix-c-位于-目录\"><a href=\"#将以下代码保存到sublime-imfix-c-位于-目录\" class=\"headerlink\" title=\"将以下代码保存到sublime_imfix.c(位于~目录)\"></a>将以下代码保存到<code>sublime_imfix.c</code>(位于<code>~</code>目录)</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;gtk/gtkimcontext.h&gt;</span><br><span class=\"line\">void gtk_im_context_set_client_window (GtkIMContext *context,</span><br><span class=\"line\">         GdkWindow    *window)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> GtkIMContextClass *klass;</span><br><span class=\"line\"> g_return_if_fail (GTK_IS_IM_CONTEXT (context));</span><br><span class=\"line\"> klass = GTK_IM_CONTEXT_GET_CLASS (context);</span><br><span class=\"line\"> if (klass-&gt;set_client_window)</span><br><span class=\"line\">   klass-&gt;set_client_window (context, window);</span><br><span class=\"line\"> g_object_set_data(G_OBJECT(context),&quot;window&quot;,window);</span><br><span class=\"line\"> if(!GDK_IS_WINDOW (window))</span><br><span class=\"line\">   return;</span><br><span class=\"line\"> int width = gdk_window_get_width(window);</span><br><span class=\"line\"> int height = gdk_window_get_height(window);</span><br><span class=\"line\"> if(width != 0 &amp;&amp; height !=0)</span><br><span class=\"line\">   gtk_im_context_focus_in(context);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","more":"<h2 id=\"安装编译环境\"><a href=\"#安装编译环境\" class=\"headerlink\" title=\"安装编译环境\"></a>安装编译环境</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install build-essential</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-get install libgtk2.0-dev</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"将上一步的代码编译成共享库libsublime-imfix-so，命令\"><a href=\"#将上一步的代码编译成共享库libsublime-imfix-so，命令\" class=\"headerlink\" title=\"将上一步的代码编译成共享库libsublime-imfix.so，命令\"></a>将上一步的代码编译成共享库<code>libsublime-imfix.so</code>，命令</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~</span><br><span class=\"line\"></span><br><span class=\"line\">gcc -shared -o libsublime-imfix.so sublime_imfix.c  `pkg-config --libs --cflags gtk+-2.0` -fPIC</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"然后将libsublime-imfix-so拷贝到sublime-text所在文件夹\"><a href=\"#然后将libsublime-imfix-so拷贝到sublime-text所在文件夹\" class=\"headerlink\" title=\"然后将libsublime-imfix.so拷贝到sublime_text所在文件夹\"></a>然后将<code>libsublime-imfix.so</code>拷贝到sublime_text所在文件夹</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mv libsublime-imfix.so /opt/sublime_text/</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"修改文件-usr-bin-subl的内容\"><a href=\"#修改文件-usr-bin-subl的内容\" class=\"headerlink\" title=\"修改文件/usr/bin/subl的内容\"></a>修改文件<code>/usr/bin/subl</code>的内容</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gedit /usr/bin/subl</span><br></pre></td></tr></table></figure>\n<p>将</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/sh</span><br><span class=\"line\"></span><br><span class=\"line\">exec /opt/sublime_text/sublime_text &quot;$@&quot;</span><br></pre></td></tr></table></figure>\n\n<p>修改为</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/sh</span><br><span class=\"line\"></span><br><span class=\"line\">LD_PRELOAD=/opt/sublime_text/libsublime-imfix.so exec /opt/sublime_text/sublime_text &quot;$@&quot;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"此时可在命令行执行命令subl可启动sublime-text-可输入汉字，但是点击图标则不行\"><a href=\"#此时可在命令行执行命令subl可启动sublime-text-可输入汉字，但是点击图标则不行\" class=\"headerlink\" title=\"此时可在命令行执行命令subl可启动sublime-text 可输入汉字，但是点击图标则不行\"></a>此时可在命令行执行命令subl可启动sublime-text 可输入汉字，但是点击图标则不行</h2><h2 id=\"在启动器快捷启动\"><a href=\"#在启动器快捷启动\" class=\"headerlink\" title=\"在启动器快捷启动\"></a>在启动器快捷启动</h2><p>找到sublime启动图标的放置位置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo find -iname sublime*</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"find的结果如下\"><a href=\"#find的结果如下\" class=\"headerlink\" title=\"find的结果如下\"></a>find的结果如下</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./.local/share/icons/sublime_text.png</span><br><span class=\"line\"></span><br><span class=\"line\">./.local/share/applications/sublime_text.desktop</span><br><span class=\"line\"></span><br><span class=\"line\">./.config/sublime-text-3</span><br></pre></td></tr></table></figure>\n<p>说明sublime启动图标位置为<code>./.local/share/applications/sublime_text.desktop</code></p>\n<h2 id=\"然后修改启动设置\"><a href=\"#然后修改启动设置\" class=\"headerlink\" title=\"然后修改启动设置\"></a>然后修改启动设置</h2><pre><code>sudo vim ./.local/share/applications/sublime_text.desktop\n</code></pre>\n<p>将<code>Exec=/opt/sublime_text/sublime_text</code>修改为</p>\n<p><code>Exec=/usr/bin/subl</code></p>\n<h2 id=\"这时，不管时在终端优雅的输入-subl-还是在启动器中优雅的点击-sublime-进入后都可以输入中文啦！\"><a href=\"#这时，不管时在终端优雅的输入-subl-还是在启动器中优雅的点击-sublime-进入后都可以输入中文啦！\" class=\"headerlink\" title=\"这时，不管时在终端优雅的输入 subl 还是在启动器中优雅的点击 sublime 进入后都可以输入中文啦！\"></a>这时，不管时在终端优雅的输入 subl 还是在启动器中优雅的点击 sublime 进入后都可以输入中文啦！</h2><h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a><a href=\"http://log.fyscu.com/index.php/archives/55/\">参考资料</a></h2>"},{"title":"sudo免密码","date":"2018-11-12T16:00:00.000Z","_content":"\n## Ubuntu\n\n `sudo  vi /etc/sudoers`\n \n将\n```\n%sudo   ALL=(ALL:ALL)  ALL\n```\n改为\n```\n%sudo   ALL=(ALL:ALL) NOPASSWD: ALL\n```\n\n保存后退出 `:wq!`\n\n之后输入 `sudo` 就可以不用输入密码。 \n\n至于安全问题，对于一般个人用户，我觉得这样也可以的。\n\n如果改崩了，可以使用 `pkexec visudo` 输入密码后修改对应出错的地方，保存文件即可解决此问题\n\n\n## MACOS\n\n```\nsudo vi /etc/sudoers\n```\n\n将\n```\n%admin   ALL=(ALL)  ALL\n```\n改为\n```\n%admin   ALL=(ALL) NOPASSWD: ALL\n```\n\n保存后退出 `:wq!`\n","source":"_posts/sudo免密码.md","raw":"---\ntitle: sudo免密码\ndate: 2018-11-13\ntags: [Ubuntu, MACOS]\n---\n\n## Ubuntu\n\n `sudo  vi /etc/sudoers`\n \n将\n```\n%sudo   ALL=(ALL:ALL)  ALL\n```\n改为\n```\n%sudo   ALL=(ALL:ALL) NOPASSWD: ALL\n```\n\n保存后退出 `:wq!`\n\n之后输入 `sudo` 就可以不用输入密码。 \n\n至于安全问题，对于一般个人用户，我觉得这样也可以的。\n\n如果改崩了，可以使用 `pkexec visudo` 输入密码后修改对应出错的地方，保存文件即可解决此问题\n\n\n## MACOS\n\n```\nsudo vi /etc/sudoers\n```\n\n将\n```\n%admin   ALL=(ALL)  ALL\n```\n改为\n```\n%admin   ALL=(ALL) NOPASSWD: ALL\n```\n\n保存后退出 `:wq!`\n","slug":"sudo免密码","published":1,"updated":"2022-07-12T03:31:18.660Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluqa1hj8003irlogbswqfx03","content":"<h2 id=\"Ubuntu\"><a href=\"#Ubuntu\" class=\"headerlink\" title=\"Ubuntu\"></a>Ubuntu</h2><p> <code>sudo  vi /etc/sudoers</code></p>\n<p>将</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%sudo   ALL=(ALL:ALL)  ALL</span><br></pre></td></tr></table></figure>\n<p>改为</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%sudo   ALL=(ALL:ALL) NOPASSWD: ALL</span><br></pre></td></tr></table></figure>\n\n<p>保存后退出 <code>:wq!</code></p>\n<p>之后输入 <code>sudo</code> 就可以不用输入密码。 </p>\n<p>至于安全问题，对于一般个人用户，我觉得这样也可以的。</p>\n<p>如果改崩了，可以使用 <code>pkexec visudo</code> 输入密码后修改对应出错的地方，保存文件即可解决此问题</p>\n<h2 id=\"MACOS\"><a href=\"#MACOS\" class=\"headerlink\" title=\"MACOS\"></a>MACOS</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vi /etc/sudoers</span><br></pre></td></tr></table></figure>\n\n<p>将</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%admin   ALL=(ALL)  ALL</span><br></pre></td></tr></table></figure>\n<p>改为</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%admin   ALL=(ALL) NOPASSWD: ALL</span><br></pre></td></tr></table></figure>\n\n<p>保存后退出 <code>:wq!</code></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Ubuntu\"><a href=\"#Ubuntu\" class=\"headerlink\" title=\"Ubuntu\"></a>Ubuntu</h2><p> <code>sudo  vi /etc/sudoers</code></p>\n<p>将</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%sudo   ALL=(ALL:ALL)  ALL</span><br></pre></td></tr></table></figure>\n<p>改为</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%sudo   ALL=(ALL:ALL) NOPASSWD: ALL</span><br></pre></td></tr></table></figure>\n\n<p>保存后退出 <code>:wq!</code></p>\n<p>之后输入 <code>sudo</code> 就可以不用输入密码。 </p>\n<p>至于安全问题，对于一般个人用户，我觉得这样也可以的。</p>\n<p>如果改崩了，可以使用 <code>pkexec visudo</code> 输入密码后修改对应出错的地方，保存文件即可解决此问题</p>\n<h2 id=\"MACOS\"><a href=\"#MACOS\" class=\"headerlink\" title=\"MACOS\"></a>MACOS</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vi /etc/sudoers</span><br></pre></td></tr></table></figure>\n\n<p>将</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%admin   ALL=(ALL)  ALL</span><br></pre></td></tr></table></figure>\n<p>改为</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%admin   ALL=(ALL) NOPASSWD: ALL</span><br></pre></td></tr></table></figure>\n\n<p>保存后退出 <code>:wq!</code></p>\n"},{"title":"《极客时间--MySQL45讲》学习笔记","date":"2019-03-31T16:00:00.000Z","_content":"\n4月1日\n- - - -\n\n## 基础架构\n\n![基础架构](/blog-img/2019040101.png)\n大体来说是可以分为server层和存储引擎层两个部分。\n\nServer 层包括连接器、分析器、查询缓存、优化器、执行器等，涵盖了MySQL 大多数核心服务，以及所有的内置函数（如日期、时间、数学和加密函数等），所有跨存储引擎的功能都在这一层实现，比如存储过程、触发器和视图等。\n\n<!--more-->\n\n存储引擎层负责数据的存储和提取，服务器通过API与存储引擎进行通信，这些借口就屏蔽了不同的存储引擎之间的差异。存储引擎是插件式的，支持InnoDB、MyISAM、Memory等，最常见的就是InnoDB，从Mysql5.5.5版本开始，就成了默认的存储引擎。\n\n### 连接器\n\n客户端与连接器建立连接、获取权限、维持和管理连接。连接的建立是通过TCP握手的方式。\n\n当一个用户成功建立连接后，即使管理员账号对这个用户的权限做了修改，也不会影响已经连接的权限。修改完成后，**只有重新建立连接时才会使用新的权限设置**。\n\n客户端如果长时间没有操作，连接器会自动断开连接（时间参数适用`wait_timeout`控制的，默认值时8小时）。\n\n### 查询缓存\n\n对于SELECT语句，查询缓存是第二步。\n\nMySQL拿到查询请求后，会先到查询缓存看看，是否之前已经执行该语句。如果存在，那么就直接返回查询结果，否则就执行后面的阶段，并将执行结果存入查询缓存中。\n\n查询缓存往往弊大于利，不建议使用。因为**查询缓存的失效非常频繁，只要对一个表更新，这个表所有的查询缓存都会被清空**。对于更新压力大的数据库来说，查询缓存的命中率非常低。\n\n**MySQL8.0版本直接将查询缓存整块功能删掉了**。\n\n### 分析器\n\n先做词法分析，在做语法分析。\n词法分析：判断你输入的多个字符串和空格组成的一条sql语句，里面的字符串分别是什么，代表什么。\n语法分析：根据语法规则，判断你输入的sql语句是否满足MySQL的语法。\n\n### 优化器\n\n在开始执行之前进行优化，优化器在表里面有多个索引的时候，决定使用哪个索引；或者在一个语句中有多表关联的时候，决定各个表的连接顺序。\n优化后执行的效率会不同。\n优化器不关心表使用的是什么存储引擎，但是存储引擎对于优化查询是有影响的。\n\n### 执行器\n\n执行的时候，首先要判读用户对表的操作权限，如果没有权限，则返回错误，如果有权限，就打开表继续执行，打开表的时候，执行器就会根据表的引擎定义，去使用这个引擎提供的接口。\n\n## 日志系统\n和查询流程不同，更新流程还会设计到两个重要的日志模块，redo log 和binlog。\n\n### redo log 重做日志\n\n**redo log 日志是InnoDB引擎特有的**。\n\n当有一条记录需要更新时，InnoDB引擎就会先把记录写到redo log里面，并更新内存，这个时候就算更新完成了，同时InnoDB引擎会在适当的时候将这个操作记录更新到磁盘中。这个更新往往在系统比较空闲的时候。\n\n同时InnoDB的redo log 的大小是固定的。从头开始写，到末尾又回到开头循环写。有了redo log，InnoDB就可以保证数据库发生异常重启，之前提交的记录都不会丢失，这个能力成为crash-safe。\n\n### binlog 归档日志\n\nbinlog日志属于MySQL的Server层实现的，所有引擎都可以使用。binlog是追加写入。binlog文件写到一定大小后会切换到下一个，并不会覆盖以前的日志。\n\n两种日志的三个不同点：\n\n1 redo log 是InnoDB引擎特有的；binlog是MySQL的Server层实现的，所有引擎都可以使用。\n2 redo log 是物理日志，记录的是“在某个数据页做了什么修改”；binlog是逻辑日志，记录的是这个语句的原始逻辑，比如“给ID=2这一行的c字段加1”\n3 redo log 是循环写，空间固定会用完；binlog是可以追加写入。\n\n### 日志的写入流程\n\nredo log的写入可以拆分为两个步骤： “prepare” 和“commit”，这就是“两阶段提交”。\n举例说明：\n\n给ID=2这一行的c字段加1\n\n![给ID=2这一行的c字段加1 日志写入流程](/blog-img/2019040102.jpg)\n\nredo log 用于保证crash-safe能力，`innodb_flush_log_at_trx_commit` 这个参数设置成1的时候，表示每次事务的redo log 都直接持久化到磁盘。这个参数建议这是成1，这样可以保证MySQL异常重启之后数据不会丢失。`sync_binlog` 参数设置为1时，表示每次事务的binlog都直接持久化到磁盘。\n\n4月9日\n- - - -\n\n## 全局锁和表级锁\n\nMySQL中锁分为三种：全局锁、表级锁和行级锁。\n\n### 全局锁\n\n全局锁是对整个数据库加锁，会让整个数据库处于只读的状态。\n全局锁的使用命令：\n\n```\nflush tables with read lock;  # 加锁\n\nublock tables;  # 解锁\n```\n\n全局锁多用于全库逻辑备份。\n\n### 表级锁\n\n表级锁分为表锁和元数据锁。\n\n表锁：用法是 `lock tables ... read/write;`，lock tables 除了会限制别的线程的读写之外，也限定了本线程接下来的操作对象。例如：\n\n```\nlock tables t1 read, t2 write;\n```\n\n那么在`unlock tables;`之前，本线程只能对t1进行读，对t2进行写，不能完成其他操作，访问其他表。\n\n**全局锁和表锁都会在客户端断开连接时自动解锁。**\n\n表锁解决的的数据库引擎不支持行锁的时候才使用，在实际中其他情况下不建议使用，影响较大。在引擎支持的情况下，升级代码中出现的`lock tables`和`ublock tables`改成`begin`和`commit`就可以了。\n\n#### 元数据锁（MDL）\n\n元数据锁不需要显示使用，在访问一个表的时候就会被自动加上，用来确保读写的正确性。\n\n- 读锁：对一个表做增删改查操作时，加MDL读锁\n- 写锁：对表做了结构变更操作的时候，加MDL写锁\n\n读锁之间不互斥，可以多线程。\n写写、写读锁之间互斥，需要等先执行的完成。\n\n在事务中：\n**事务中的MDL锁，会在执行语句开始时申请，但是执行完成之后，不会立即释放，而是等到整个事务的提交之后再释放。**\n","source":"_posts/《极客时间--MySQL45讲》学习笔记.md","raw":"---\ntitle: 《极客时间--MySQL45讲》学习笔记\ndate: 2019-04-01\ntags: [数据库, 阅读笔记]\n---\n\n4月1日\n- - - -\n\n## 基础架构\n\n![基础架构](/blog-img/2019040101.png)\n大体来说是可以分为server层和存储引擎层两个部分。\n\nServer 层包括连接器、分析器、查询缓存、优化器、执行器等，涵盖了MySQL 大多数核心服务，以及所有的内置函数（如日期、时间、数学和加密函数等），所有跨存储引擎的功能都在这一层实现，比如存储过程、触发器和视图等。\n\n<!--more-->\n\n存储引擎层负责数据的存储和提取，服务器通过API与存储引擎进行通信，这些借口就屏蔽了不同的存储引擎之间的差异。存储引擎是插件式的，支持InnoDB、MyISAM、Memory等，最常见的就是InnoDB，从Mysql5.5.5版本开始，就成了默认的存储引擎。\n\n### 连接器\n\n客户端与连接器建立连接、获取权限、维持和管理连接。连接的建立是通过TCP握手的方式。\n\n当一个用户成功建立连接后，即使管理员账号对这个用户的权限做了修改，也不会影响已经连接的权限。修改完成后，**只有重新建立连接时才会使用新的权限设置**。\n\n客户端如果长时间没有操作，连接器会自动断开连接（时间参数适用`wait_timeout`控制的，默认值时8小时）。\n\n### 查询缓存\n\n对于SELECT语句，查询缓存是第二步。\n\nMySQL拿到查询请求后，会先到查询缓存看看，是否之前已经执行该语句。如果存在，那么就直接返回查询结果，否则就执行后面的阶段，并将执行结果存入查询缓存中。\n\n查询缓存往往弊大于利，不建议使用。因为**查询缓存的失效非常频繁，只要对一个表更新，这个表所有的查询缓存都会被清空**。对于更新压力大的数据库来说，查询缓存的命中率非常低。\n\n**MySQL8.0版本直接将查询缓存整块功能删掉了**。\n\n### 分析器\n\n先做词法分析，在做语法分析。\n词法分析：判断你输入的多个字符串和空格组成的一条sql语句，里面的字符串分别是什么，代表什么。\n语法分析：根据语法规则，判断你输入的sql语句是否满足MySQL的语法。\n\n### 优化器\n\n在开始执行之前进行优化，优化器在表里面有多个索引的时候，决定使用哪个索引；或者在一个语句中有多表关联的时候，决定各个表的连接顺序。\n优化后执行的效率会不同。\n优化器不关心表使用的是什么存储引擎，但是存储引擎对于优化查询是有影响的。\n\n### 执行器\n\n执行的时候，首先要判读用户对表的操作权限，如果没有权限，则返回错误，如果有权限，就打开表继续执行，打开表的时候，执行器就会根据表的引擎定义，去使用这个引擎提供的接口。\n\n## 日志系统\n和查询流程不同，更新流程还会设计到两个重要的日志模块，redo log 和binlog。\n\n### redo log 重做日志\n\n**redo log 日志是InnoDB引擎特有的**。\n\n当有一条记录需要更新时，InnoDB引擎就会先把记录写到redo log里面，并更新内存，这个时候就算更新完成了，同时InnoDB引擎会在适当的时候将这个操作记录更新到磁盘中。这个更新往往在系统比较空闲的时候。\n\n同时InnoDB的redo log 的大小是固定的。从头开始写，到末尾又回到开头循环写。有了redo log，InnoDB就可以保证数据库发生异常重启，之前提交的记录都不会丢失，这个能力成为crash-safe。\n\n### binlog 归档日志\n\nbinlog日志属于MySQL的Server层实现的，所有引擎都可以使用。binlog是追加写入。binlog文件写到一定大小后会切换到下一个，并不会覆盖以前的日志。\n\n两种日志的三个不同点：\n\n1 redo log 是InnoDB引擎特有的；binlog是MySQL的Server层实现的，所有引擎都可以使用。\n2 redo log 是物理日志，记录的是“在某个数据页做了什么修改”；binlog是逻辑日志，记录的是这个语句的原始逻辑，比如“给ID=2这一行的c字段加1”\n3 redo log 是循环写，空间固定会用完；binlog是可以追加写入。\n\n### 日志的写入流程\n\nredo log的写入可以拆分为两个步骤： “prepare” 和“commit”，这就是“两阶段提交”。\n举例说明：\n\n给ID=2这一行的c字段加1\n\n![给ID=2这一行的c字段加1 日志写入流程](/blog-img/2019040102.jpg)\n\nredo log 用于保证crash-safe能力，`innodb_flush_log_at_trx_commit` 这个参数设置成1的时候，表示每次事务的redo log 都直接持久化到磁盘。这个参数建议这是成1，这样可以保证MySQL异常重启之后数据不会丢失。`sync_binlog` 参数设置为1时，表示每次事务的binlog都直接持久化到磁盘。\n\n4月9日\n- - - -\n\n## 全局锁和表级锁\n\nMySQL中锁分为三种：全局锁、表级锁和行级锁。\n\n### 全局锁\n\n全局锁是对整个数据库加锁，会让整个数据库处于只读的状态。\n全局锁的使用命令：\n\n```\nflush tables with read lock;  # 加锁\n\nublock tables;  # 解锁\n```\n\n全局锁多用于全库逻辑备份。\n\n### 表级锁\n\n表级锁分为表锁和元数据锁。\n\n表锁：用法是 `lock tables ... read/write;`，lock tables 除了会限制别的线程的读写之外，也限定了本线程接下来的操作对象。例如：\n\n```\nlock tables t1 read, t2 write;\n```\n\n那么在`unlock tables;`之前，本线程只能对t1进行读，对t2进行写，不能完成其他操作，访问其他表。\n\n**全局锁和表锁都会在客户端断开连接时自动解锁。**\n\n表锁解决的的数据库引擎不支持行锁的时候才使用，在实际中其他情况下不建议使用，影响较大。在引擎支持的情况下，升级代码中出现的`lock tables`和`ublock tables`改成`begin`和`commit`就可以了。\n\n#### 元数据锁（MDL）\n\n元数据锁不需要显示使用，在访问一个表的时候就会被自动加上，用来确保读写的正确性。\n\n- 读锁：对一个表做增删改查操作时，加MDL读锁\n- 写锁：对表做了结构变更操作的时候，加MDL写锁\n\n读锁之间不互斥，可以多线程。\n写写、写读锁之间互斥，需要等先执行的完成。\n\n在事务中：\n**事务中的MDL锁，会在执行语句开始时申请，但是执行完成之后，不会立即释放，而是等到整个事务的提交之后再释放。**\n","slug":"《极客时间--MySQL45讲》学习笔记","published":1,"updated":"2021-06-20T10:25:20.129Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluqa1hj9003krlogb56b771s","content":"<p>4月1日</p>\n<hr>\n<h2 id=\"基础架构\"><a href=\"#基础架构\" class=\"headerlink\" title=\"基础架构\"></a>基础架构</h2><p><img src=\"/blog-img/2019040101.png\" alt=\"基础架构\"><br>大体来说是可以分为server层和存储引擎层两个部分。</p>\n<p>Server 层包括连接器、分析器、查询缓存、优化器、执行器等，涵盖了MySQL 大多数核心服务，以及所有的内置函数（如日期、时间、数学和加密函数等），所有跨存储引擎的功能都在这一层实现，比如存储过程、触发器和视图等。</p>\n<span id=\"more\"></span>\n\n<p>存储引擎层负责数据的存储和提取，服务器通过API与存储引擎进行通信，这些借口就屏蔽了不同的存储引擎之间的差异。存储引擎是插件式的，支持InnoDB、MyISAM、Memory等，最常见的就是InnoDB，从Mysql5.5.5版本开始，就成了默认的存储引擎。</p>\n<h3 id=\"连接器\"><a href=\"#连接器\" class=\"headerlink\" title=\"连接器\"></a>连接器</h3><p>客户端与连接器建立连接、获取权限、维持和管理连接。连接的建立是通过TCP握手的方式。</p>\n<p>当一个用户成功建立连接后，即使管理员账号对这个用户的权限做了修改，也不会影响已经连接的权限。修改完成后，<strong>只有重新建立连接时才会使用新的权限设置</strong>。</p>\n<p>客户端如果长时间没有操作，连接器会自动断开连接（时间参数适用<code>wait_timeout</code>控制的，默认值时8小时）。</p>\n<h3 id=\"查询缓存\"><a href=\"#查询缓存\" class=\"headerlink\" title=\"查询缓存\"></a>查询缓存</h3><p>对于SELECT语句，查询缓存是第二步。</p>\n<p>MySQL拿到查询请求后，会先到查询缓存看看，是否之前已经执行该语句。如果存在，那么就直接返回查询结果，否则就执行后面的阶段，并将执行结果存入查询缓存中。</p>\n<p>查询缓存往往弊大于利，不建议使用。因为<strong>查询缓存的失效非常频繁，只要对一个表更新，这个表所有的查询缓存都会被清空</strong>。对于更新压力大的数据库来说，查询缓存的命中率非常低。</p>\n<p><strong>MySQL8.0版本直接将查询缓存整块功能删掉了</strong>。</p>\n<h3 id=\"分析器\"><a href=\"#分析器\" class=\"headerlink\" title=\"分析器\"></a>分析器</h3><p>先做词法分析，在做语法分析。<br>词法分析：判断你输入的多个字符串和空格组成的一条sql语句，里面的字符串分别是什么，代表什么。<br>语法分析：根据语法规则，判断你输入的sql语句是否满足MySQL的语法。</p>\n<h3 id=\"优化器\"><a href=\"#优化器\" class=\"headerlink\" title=\"优化器\"></a>优化器</h3><p>在开始执行之前进行优化，优化器在表里面有多个索引的时候，决定使用哪个索引；或者在一个语句中有多表关联的时候，决定各个表的连接顺序。<br>优化后执行的效率会不同。<br>优化器不关心表使用的是什么存储引擎，但是存储引擎对于优化查询是有影响的。</p>\n<h3 id=\"执行器\"><a href=\"#执行器\" class=\"headerlink\" title=\"执行器\"></a>执行器</h3><p>执行的时候，首先要判读用户对表的操作权限，如果没有权限，则返回错误，如果有权限，就打开表继续执行，打开表的时候，执行器就会根据表的引擎定义，去使用这个引擎提供的接口。</p>\n<h2 id=\"日志系统\"><a href=\"#日志系统\" class=\"headerlink\" title=\"日志系统\"></a>日志系统</h2><p>和查询流程不同，更新流程还会设计到两个重要的日志模块，redo log 和binlog。</p>\n<h3 id=\"redo-log-重做日志\"><a href=\"#redo-log-重做日志\" class=\"headerlink\" title=\"redo log 重做日志\"></a>redo log 重做日志</h3><p><strong>redo log 日志是InnoDB引擎特有的</strong>。</p>\n<p>当有一条记录需要更新时，InnoDB引擎就会先把记录写到redo log里面，并更新内存，这个时候就算更新完成了，同时InnoDB引擎会在适当的时候将这个操作记录更新到磁盘中。这个更新往往在系统比较空闲的时候。</p>\n<p>同时InnoDB的redo log 的大小是固定的。从头开始写，到末尾又回到开头循环写。有了redo log，InnoDB就可以保证数据库发生异常重启，之前提交的记录都不会丢失，这个能力成为crash-safe。</p>\n<h3 id=\"binlog-归档日志\"><a href=\"#binlog-归档日志\" class=\"headerlink\" title=\"binlog 归档日志\"></a>binlog 归档日志</h3><p>binlog日志属于MySQL的Server层实现的，所有引擎都可以使用。binlog是追加写入。binlog文件写到一定大小后会切换到下一个，并不会覆盖以前的日志。</p>\n<p>两种日志的三个不同点：</p>\n<p>1 redo log 是InnoDB引擎特有的；binlog是MySQL的Server层实现的，所有引擎都可以使用。<br>2 redo log 是物理日志，记录的是“在某个数据页做了什么修改”；binlog是逻辑日志，记录的是这个语句的原始逻辑，比如“给ID&#x3D;2这一行的c字段加1”<br>3 redo log 是循环写，空间固定会用完；binlog是可以追加写入。</p>\n<h3 id=\"日志的写入流程\"><a href=\"#日志的写入流程\" class=\"headerlink\" title=\"日志的写入流程\"></a>日志的写入流程</h3><p>redo log的写入可以拆分为两个步骤： “prepare” 和“commit”，这就是“两阶段提交”。<br>举例说明：</p>\n<p>给ID&#x3D;2这一行的c字段加1</p>\n<p><img src=\"/blog-img/2019040102.jpg\" alt=\"给ID=2这一行的c字段加1 日志写入流程\"></p>\n<p>redo log 用于保证crash-safe能力，<code>innodb_flush_log_at_trx_commit</code> 这个参数设置成1的时候，表示每次事务的redo log 都直接持久化到磁盘。这个参数建议这是成1，这样可以保证MySQL异常重启之后数据不会丢失。<code>sync_binlog</code> 参数设置为1时，表示每次事务的binlog都直接持久化到磁盘。</p>\n<p>4月9日</p>\n<hr>\n<h2 id=\"全局锁和表级锁\"><a href=\"#全局锁和表级锁\" class=\"headerlink\" title=\"全局锁和表级锁\"></a>全局锁和表级锁</h2><p>MySQL中锁分为三种：全局锁、表级锁和行级锁。</p>\n<h3 id=\"全局锁\"><a href=\"#全局锁\" class=\"headerlink\" title=\"全局锁\"></a>全局锁</h3><p>全局锁是对整个数据库加锁，会让整个数据库处于只读的状态。<br>全局锁的使用命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flush tables with read lock;  # 加锁</span><br><span class=\"line\"></span><br><span class=\"line\">ublock tables;  # 解锁</span><br></pre></td></tr></table></figure>\n\n<p>全局锁多用于全库逻辑备份。</p>\n<h3 id=\"表级锁\"><a href=\"#表级锁\" class=\"headerlink\" title=\"表级锁\"></a>表级锁</h3><p>表级锁分为表锁和元数据锁。</p>\n<p>表锁：用法是 <code>lock tables ... read/write;</code>，lock tables 除了会限制别的线程的读写之外，也限定了本线程接下来的操作对象。例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lock tables t1 read, t2 write;</span><br></pre></td></tr></table></figure>\n\n<p>那么在<code>unlock tables;</code>之前，本线程只能对t1进行读，对t2进行写，不能完成其他操作，访问其他表。</p>\n<p><strong>全局锁和表锁都会在客户端断开连接时自动解锁。</strong></p>\n<p>表锁解决的的数据库引擎不支持行锁的时候才使用，在实际中其他情况下不建议使用，影响较大。在引擎支持的情况下，升级代码中出现的<code>lock tables</code>和<code>ublock tables</code>改成<code>begin</code>和<code>commit</code>就可以了。</p>\n<h4 id=\"元数据锁（MDL）\"><a href=\"#元数据锁（MDL）\" class=\"headerlink\" title=\"元数据锁（MDL）\"></a>元数据锁（MDL）</h4><p>元数据锁不需要显示使用，在访问一个表的时候就会被自动加上，用来确保读写的正确性。</p>\n<ul>\n<li>读锁：对一个表做增删改查操作时，加MDL读锁</li>\n<li>写锁：对表做了结构变更操作的时候，加MDL写锁</li>\n</ul>\n<p>读锁之间不互斥，可以多线程。<br>写写、写读锁之间互斥，需要等先执行的完成。</p>\n<p>在事务中：<br><strong>事务中的MDL锁，会在执行语句开始时申请，但是执行完成之后，不会立即释放，而是等到整个事务的提交之后再释放。</strong></p>\n","site":{"data":{}},"excerpt":"<p>4月1日</p>\n<hr>\n<h2 id=\"基础架构\"><a href=\"#基础架构\" class=\"headerlink\" title=\"基础架构\"></a>基础架构</h2><p><img src=\"/blog-img/2019040101.png\" alt=\"基础架构\"><br>大体来说是可以分为server层和存储引擎层两个部分。</p>\n<p>Server 层包括连接器、分析器、查询缓存、优化器、执行器等，涵盖了MySQL 大多数核心服务，以及所有的内置函数（如日期、时间、数学和加密函数等），所有跨存储引擎的功能都在这一层实现，比如存储过程、触发器和视图等。</p>","more":"<p>存储引擎层负责数据的存储和提取，服务器通过API与存储引擎进行通信，这些借口就屏蔽了不同的存储引擎之间的差异。存储引擎是插件式的，支持InnoDB、MyISAM、Memory等，最常见的就是InnoDB，从Mysql5.5.5版本开始，就成了默认的存储引擎。</p>\n<h3 id=\"连接器\"><a href=\"#连接器\" class=\"headerlink\" title=\"连接器\"></a>连接器</h3><p>客户端与连接器建立连接、获取权限、维持和管理连接。连接的建立是通过TCP握手的方式。</p>\n<p>当一个用户成功建立连接后，即使管理员账号对这个用户的权限做了修改，也不会影响已经连接的权限。修改完成后，<strong>只有重新建立连接时才会使用新的权限设置</strong>。</p>\n<p>客户端如果长时间没有操作，连接器会自动断开连接（时间参数适用<code>wait_timeout</code>控制的，默认值时8小时）。</p>\n<h3 id=\"查询缓存\"><a href=\"#查询缓存\" class=\"headerlink\" title=\"查询缓存\"></a>查询缓存</h3><p>对于SELECT语句，查询缓存是第二步。</p>\n<p>MySQL拿到查询请求后，会先到查询缓存看看，是否之前已经执行该语句。如果存在，那么就直接返回查询结果，否则就执行后面的阶段，并将执行结果存入查询缓存中。</p>\n<p>查询缓存往往弊大于利，不建议使用。因为<strong>查询缓存的失效非常频繁，只要对一个表更新，这个表所有的查询缓存都会被清空</strong>。对于更新压力大的数据库来说，查询缓存的命中率非常低。</p>\n<p><strong>MySQL8.0版本直接将查询缓存整块功能删掉了</strong>。</p>\n<h3 id=\"分析器\"><a href=\"#分析器\" class=\"headerlink\" title=\"分析器\"></a>分析器</h3><p>先做词法分析，在做语法分析。<br>词法分析：判断你输入的多个字符串和空格组成的一条sql语句，里面的字符串分别是什么，代表什么。<br>语法分析：根据语法规则，判断你输入的sql语句是否满足MySQL的语法。</p>\n<h3 id=\"优化器\"><a href=\"#优化器\" class=\"headerlink\" title=\"优化器\"></a>优化器</h3><p>在开始执行之前进行优化，优化器在表里面有多个索引的时候，决定使用哪个索引；或者在一个语句中有多表关联的时候，决定各个表的连接顺序。<br>优化后执行的效率会不同。<br>优化器不关心表使用的是什么存储引擎，但是存储引擎对于优化查询是有影响的。</p>\n<h3 id=\"执行器\"><a href=\"#执行器\" class=\"headerlink\" title=\"执行器\"></a>执行器</h3><p>执行的时候，首先要判读用户对表的操作权限，如果没有权限，则返回错误，如果有权限，就打开表继续执行，打开表的时候，执行器就会根据表的引擎定义，去使用这个引擎提供的接口。</p>\n<h2 id=\"日志系统\"><a href=\"#日志系统\" class=\"headerlink\" title=\"日志系统\"></a>日志系统</h2><p>和查询流程不同，更新流程还会设计到两个重要的日志模块，redo log 和binlog。</p>\n<h3 id=\"redo-log-重做日志\"><a href=\"#redo-log-重做日志\" class=\"headerlink\" title=\"redo log 重做日志\"></a>redo log 重做日志</h3><p><strong>redo log 日志是InnoDB引擎特有的</strong>。</p>\n<p>当有一条记录需要更新时，InnoDB引擎就会先把记录写到redo log里面，并更新内存，这个时候就算更新完成了，同时InnoDB引擎会在适当的时候将这个操作记录更新到磁盘中。这个更新往往在系统比较空闲的时候。</p>\n<p>同时InnoDB的redo log 的大小是固定的。从头开始写，到末尾又回到开头循环写。有了redo log，InnoDB就可以保证数据库发生异常重启，之前提交的记录都不会丢失，这个能力成为crash-safe。</p>\n<h3 id=\"binlog-归档日志\"><a href=\"#binlog-归档日志\" class=\"headerlink\" title=\"binlog 归档日志\"></a>binlog 归档日志</h3><p>binlog日志属于MySQL的Server层实现的，所有引擎都可以使用。binlog是追加写入。binlog文件写到一定大小后会切换到下一个，并不会覆盖以前的日志。</p>\n<p>两种日志的三个不同点：</p>\n<p>1 redo log 是InnoDB引擎特有的；binlog是MySQL的Server层实现的，所有引擎都可以使用。<br>2 redo log 是物理日志，记录的是“在某个数据页做了什么修改”；binlog是逻辑日志，记录的是这个语句的原始逻辑，比如“给ID&#x3D;2这一行的c字段加1”<br>3 redo log 是循环写，空间固定会用完；binlog是可以追加写入。</p>\n<h3 id=\"日志的写入流程\"><a href=\"#日志的写入流程\" class=\"headerlink\" title=\"日志的写入流程\"></a>日志的写入流程</h3><p>redo log的写入可以拆分为两个步骤： “prepare” 和“commit”，这就是“两阶段提交”。<br>举例说明：</p>\n<p>给ID&#x3D;2这一行的c字段加1</p>\n<p><img src=\"/blog-img/2019040102.jpg\" alt=\"给ID=2这一行的c字段加1 日志写入流程\"></p>\n<p>redo log 用于保证crash-safe能力，<code>innodb_flush_log_at_trx_commit</code> 这个参数设置成1的时候，表示每次事务的redo log 都直接持久化到磁盘。这个参数建议这是成1，这样可以保证MySQL异常重启之后数据不会丢失。<code>sync_binlog</code> 参数设置为1时，表示每次事务的binlog都直接持久化到磁盘。</p>\n<p>4月9日</p>\n<hr>\n<h2 id=\"全局锁和表级锁\"><a href=\"#全局锁和表级锁\" class=\"headerlink\" title=\"全局锁和表级锁\"></a>全局锁和表级锁</h2><p>MySQL中锁分为三种：全局锁、表级锁和行级锁。</p>\n<h3 id=\"全局锁\"><a href=\"#全局锁\" class=\"headerlink\" title=\"全局锁\"></a>全局锁</h3><p>全局锁是对整个数据库加锁，会让整个数据库处于只读的状态。<br>全局锁的使用命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flush tables with read lock;  # 加锁</span><br><span class=\"line\"></span><br><span class=\"line\">ublock tables;  # 解锁</span><br></pre></td></tr></table></figure>\n\n<p>全局锁多用于全库逻辑备份。</p>\n<h3 id=\"表级锁\"><a href=\"#表级锁\" class=\"headerlink\" title=\"表级锁\"></a>表级锁</h3><p>表级锁分为表锁和元数据锁。</p>\n<p>表锁：用法是 <code>lock tables ... read/write;</code>，lock tables 除了会限制别的线程的读写之外，也限定了本线程接下来的操作对象。例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lock tables t1 read, t2 write;</span><br></pre></td></tr></table></figure>\n\n<p>那么在<code>unlock tables;</code>之前，本线程只能对t1进行读，对t2进行写，不能完成其他操作，访问其他表。</p>\n<p><strong>全局锁和表锁都会在客户端断开连接时自动解锁。</strong></p>\n<p>表锁解决的的数据库引擎不支持行锁的时候才使用，在实际中其他情况下不建议使用，影响较大。在引擎支持的情况下，升级代码中出现的<code>lock tables</code>和<code>ublock tables</code>改成<code>begin</code>和<code>commit</code>就可以了。</p>\n<h4 id=\"元数据锁（MDL）\"><a href=\"#元数据锁（MDL）\" class=\"headerlink\" title=\"元数据锁（MDL）\"></a>元数据锁（MDL）</h4><p>元数据锁不需要显示使用，在访问一个表的时候就会被自动加上，用来确保读写的正确性。</p>\n<ul>\n<li>读锁：对一个表做增删改查操作时，加MDL读锁</li>\n<li>写锁：对表做了结构变更操作的时候，加MDL写锁</li>\n</ul>\n<p>读锁之间不互斥，可以多线程。<br>写写、写读锁之间互斥，需要等先执行的完成。</p>\n<p>在事务中：<br><strong>事务中的MDL锁，会在执行语句开始时申请，但是执行完成之后，不会立即释放，而是等到整个事务的提交之后再释放。</strong></p>"},{"title":"从电梯式到扶梯式的分页模式对比","date":"2018-08-19T16:00:00.000Z","_content":"\n在一个列表中，如果避免一次请求大量数据的问题，使用分页是最好的解决方式，而且在接触开发以来，也一直认为分页是最简单的基础，最容易实现的部分。然后在正式工作的第一个月，便改变了这个思想，虽然分页还是最基础的部分，但是已经不认为它是简单的了，它的实现，在某些场景下，让现在的我觉得还有很棘手的。\n\n本文又名《简单的分页不简单》。为本人的第一篇工作笔记，以下所有的内容，均仅作为个人学习总结所用，特此声明！本文记录下当前这个状态的自己对于分页的理解，会留下目前解决不了的问题，等待未来的自己能够回来替自己解答。\n\n参考文章：\n[https://developer.twitter.com/en/docs/tweets/timelines/guides/working-with-timelines](https://developer.twitter.com/en/docs/tweets/timelines/guides/working-with-timelines)\n[http://zhiheng.me/156](http://zhiheng.me/156)\n[https://aotu.io/notes/2017/06/27/infinite-scrolling/index.html](https://aotu.io/notes/2017/06/27/infinite-scrolling/index.html)\n\n## 电梯式\n\n”电梯式分页“，我觉得这个名字是十分贴切，这个名词形象的描述了这种分页模式的过程。常见的有百度的搜索页。\n\n<!--more-->\n\n![百度的搜索页分页](/blog-img/20180903174013.png)\n\n这种模式有以下特点：\n\n- 页面上有一连串的页码，和电梯按钮相似\n- 通过页码进行分页\n- 通过点击上/下页按钮可实现页面切换\n- 通过点击页码可实现页面切换\n- 可直接跳转至指定页面\n- 需要计算总数or总页数\n\n一般来说前端传给后端的请求中，仅包含 `page` 和 `per_page`，前者来标明要第几页，后者标明每页的大小，例如 `page=2&per_page=20` 意味着请求第二页，页中的数据有20条。这种模式多用于 PC 端，适合需要查找特定内容的页面。\n\n其实在数据库中对应的语句如下(Mysql):\n\n```mysql\nselect * from TABLE_NAME where ... order by ... limit ({page} -1) * {per_page}, {per_page}\n```\n\n### 缺点\n\n** 数据缺失 **\n\n获取后页时，前页数据有删除。此时，本应出现在后页的内容被“顶”到前页，而前页已经加载过了不会重新加载，后页又无此内容，从而无法被用户看到。\n\n举个栗子说明下：\n\n- 当前数据库中的内容已经按照 `7-6-5-4-3-2-1` 的顺序\n- 第一次请求 `page=1&per_count=2` 则返回 `7-6`\n- 之后数据库内容`6`被删，现在的序列为 `7-5-4-3-2-1`\n- 第二次请求 `page=2&per_count=2` 则返回 `4-3`，本来应该返回 `5-4`，这样`5`就从请求中消失了。\n\n** 数据重复 **\n\n获取后页时，前页数据有插入。此时，原本在前页的内容被“压”到后页，导致前后也都有此数据，在用户端就是重复数据。\n\n这里也举个栗子说明：\n\n- 当前数据库中的内容已经按照 `7-6-5-4-3-2-1` 的顺序\n- 第一次请求 `page=1&per_count=2` 则返回 `7-6`\n- 之后数据库插入内容`8`，现在的序列为 `8-7-6-5-4-3-2-1`\n- 第二次请求 `page=2&per_count=2` 则返回 `6-5`，本来应该返回 `5-4`，这样`6`就从请求中重复了。\n\n** 性能问题 **\n\n较大页码的数据获取时性能会下降，计算总数也会带来额外的开销。\n\n### 适用场景\n\n- 用户在查看列表的时候，列表中的数据不会发生增删的情况。\n- 数据量不是很大的情况下\n\n## 扶梯式\n\n扶梯式分页模式更多在移动端实现，存在以下特点：\n\n- 通过滚动/上拉/点击等方式加载新一页\n- 无页码\n- 无上/下页按钮\n- 不可跳转至指定页面\n- 无需计算总数or总页数\n\n该种方法传入的参数有 `since_id`、`max_i`和`count`。\n客户端第一次请求的时候，仅需携带 `count`参数，对应的数据库语句如下(Mysql):\n\n```\nselect * from TABLE_NAME order by id DESC limit {count}\n```\n\n这里的`id` 是递增的。\n\n举个栗子说明下：\n\n当前数据库中的内容id是 `7-6-5-4-3-2-1`, `count=2`时，那么返回的是 `7-6`。\n\n第二次访问的时候，就需要携带 `since_id` 或`max_id` 了。如果想要获取id值比`6`小的内容，那么除了`count=2`之外，还要携带 `max_id=6` 的参数。后端的处理语句类似：\n\n```\nselect * from TABLE_NAME where id < {max_id} order by id desc limit {count}\n```\n","source":"_posts/从电梯式到扶梯式的分页模式对比.md","raw":"---\ntitle: 从电梯式到扶梯式的分页模式对比\ndate: 2018-08-20\ntags: [工作笔记]\n---\n\n在一个列表中，如果避免一次请求大量数据的问题，使用分页是最好的解决方式，而且在接触开发以来，也一直认为分页是最简单的基础，最容易实现的部分。然后在正式工作的第一个月，便改变了这个思想，虽然分页还是最基础的部分，但是已经不认为它是简单的了，它的实现，在某些场景下，让现在的我觉得还有很棘手的。\n\n本文又名《简单的分页不简单》。为本人的第一篇工作笔记，以下所有的内容，均仅作为个人学习总结所用，特此声明！本文记录下当前这个状态的自己对于分页的理解，会留下目前解决不了的问题，等待未来的自己能够回来替自己解答。\n\n参考文章：\n[https://developer.twitter.com/en/docs/tweets/timelines/guides/working-with-timelines](https://developer.twitter.com/en/docs/tweets/timelines/guides/working-with-timelines)\n[http://zhiheng.me/156](http://zhiheng.me/156)\n[https://aotu.io/notes/2017/06/27/infinite-scrolling/index.html](https://aotu.io/notes/2017/06/27/infinite-scrolling/index.html)\n\n## 电梯式\n\n”电梯式分页“，我觉得这个名字是十分贴切，这个名词形象的描述了这种分页模式的过程。常见的有百度的搜索页。\n\n<!--more-->\n\n![百度的搜索页分页](/blog-img/20180903174013.png)\n\n这种模式有以下特点：\n\n- 页面上有一连串的页码，和电梯按钮相似\n- 通过页码进行分页\n- 通过点击上/下页按钮可实现页面切换\n- 通过点击页码可实现页面切换\n- 可直接跳转至指定页面\n- 需要计算总数or总页数\n\n一般来说前端传给后端的请求中，仅包含 `page` 和 `per_page`，前者来标明要第几页，后者标明每页的大小，例如 `page=2&per_page=20` 意味着请求第二页，页中的数据有20条。这种模式多用于 PC 端，适合需要查找特定内容的页面。\n\n其实在数据库中对应的语句如下(Mysql):\n\n```mysql\nselect * from TABLE_NAME where ... order by ... limit ({page} -1) * {per_page}, {per_page}\n```\n\n### 缺点\n\n** 数据缺失 **\n\n获取后页时，前页数据有删除。此时，本应出现在后页的内容被“顶”到前页，而前页已经加载过了不会重新加载，后页又无此内容，从而无法被用户看到。\n\n举个栗子说明下：\n\n- 当前数据库中的内容已经按照 `7-6-5-4-3-2-1` 的顺序\n- 第一次请求 `page=1&per_count=2` 则返回 `7-6`\n- 之后数据库内容`6`被删，现在的序列为 `7-5-4-3-2-1`\n- 第二次请求 `page=2&per_count=2` 则返回 `4-3`，本来应该返回 `5-4`，这样`5`就从请求中消失了。\n\n** 数据重复 **\n\n获取后页时，前页数据有插入。此时，原本在前页的内容被“压”到后页，导致前后也都有此数据，在用户端就是重复数据。\n\n这里也举个栗子说明：\n\n- 当前数据库中的内容已经按照 `7-6-5-4-3-2-1` 的顺序\n- 第一次请求 `page=1&per_count=2` 则返回 `7-6`\n- 之后数据库插入内容`8`，现在的序列为 `8-7-6-5-4-3-2-1`\n- 第二次请求 `page=2&per_count=2` 则返回 `6-5`，本来应该返回 `5-4`，这样`6`就从请求中重复了。\n\n** 性能问题 **\n\n较大页码的数据获取时性能会下降，计算总数也会带来额外的开销。\n\n### 适用场景\n\n- 用户在查看列表的时候，列表中的数据不会发生增删的情况。\n- 数据量不是很大的情况下\n\n## 扶梯式\n\n扶梯式分页模式更多在移动端实现，存在以下特点：\n\n- 通过滚动/上拉/点击等方式加载新一页\n- 无页码\n- 无上/下页按钮\n- 不可跳转至指定页面\n- 无需计算总数or总页数\n\n该种方法传入的参数有 `since_id`、`max_i`和`count`。\n客户端第一次请求的时候，仅需携带 `count`参数，对应的数据库语句如下(Mysql):\n\n```\nselect * from TABLE_NAME order by id DESC limit {count}\n```\n\n这里的`id` 是递增的。\n\n举个栗子说明下：\n\n当前数据库中的内容id是 `7-6-5-4-3-2-1`, `count=2`时，那么返回的是 `7-6`。\n\n第二次访问的时候，就需要携带 `since_id` 或`max_id` 了。如果想要获取id值比`6`小的内容，那么除了`count=2`之外，还要携带 `max_id=6` 的参数。后端的处理语句类似：\n\n```\nselect * from TABLE_NAME where id < {max_id} order by id desc limit {count}\n```\n","slug":"从电梯式到扶梯式的分页模式对比","published":1,"updated":"2021-06-20T10:25:20.130Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluqa1hj9003mrloga2v31rdl","content":"<p>在一个列表中，如果避免一次请求大量数据的问题，使用分页是最好的解决方式，而且在接触开发以来，也一直认为分页是最简单的基础，最容易实现的部分。然后在正式工作的第一个月，便改变了这个思想，虽然分页还是最基础的部分，但是已经不认为它是简单的了，它的实现，在某些场景下，让现在的我觉得还有很棘手的。</p>\n<p>本文又名《简单的分页不简单》。为本人的第一篇工作笔记，以下所有的内容，均仅作为个人学习总结所用，特此声明！本文记录下当前这个状态的自己对于分页的理解，会留下目前解决不了的问题，等待未来的自己能够回来替自己解答。</p>\n<p>参考文章：<br><a href=\"https://developer.twitter.com/en/docs/tweets/timelines/guides/working-with-timelines\">https://developer.twitter.com/en/docs/tweets/timelines/guides/working-with-timelines</a><br><a href=\"http://zhiheng.me/156\">http://zhiheng.me/156</a><br><a href=\"https://aotu.io/notes/2017/06/27/infinite-scrolling/index.html\">https://aotu.io/notes/2017/06/27/infinite-scrolling/index.html</a></p>\n<h2 id=\"电梯式\"><a href=\"#电梯式\" class=\"headerlink\" title=\"电梯式\"></a>电梯式</h2><p>”电梯式分页“，我觉得这个名字是十分贴切，这个名词形象的描述了这种分页模式的过程。常见的有百度的搜索页。</p>\n<span id=\"more\"></span>\n\n<p><img src=\"/blog-img/20180903174013.png\" alt=\"百度的搜索页分页\"></p>\n<p>这种模式有以下特点：</p>\n<ul>\n<li>页面上有一连串的页码，和电梯按钮相似</li>\n<li>通过页码进行分页</li>\n<li>通过点击上&#x2F;下页按钮可实现页面切换</li>\n<li>通过点击页码可实现页面切换</li>\n<li>可直接跳转至指定页面</li>\n<li>需要计算总数or总页数</li>\n</ul>\n<p>一般来说前端传给后端的请求中，仅包含 <code>page</code> 和 <code>per_page</code>，前者来标明要第几页，后者标明每页的大小，例如 <code>page=2&amp;per_page=20</code> 意味着请求第二页，页中的数据有20条。这种模式多用于 PC 端，适合需要查找特定内容的页面。</p>\n<p>其实在数据库中对应的语句如下(Mysql):</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from TABLE_NAME where ... order by ... limit (&#123;page&#125; -1) * &#123;per_page&#125;, &#123;per_page&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><p>** 数据缺失 **</p>\n<p>获取后页时，前页数据有删除。此时，本应出现在后页的内容被“顶”到前页，而前页已经加载过了不会重新加载，后页又无此内容，从而无法被用户看到。</p>\n<p>举个栗子说明下：</p>\n<ul>\n<li>当前数据库中的内容已经按照 <code>7-6-5-4-3-2-1</code> 的顺序</li>\n<li>第一次请求 <code>page=1&amp;per_count=2</code> 则返回 <code>7-6</code></li>\n<li>之后数据库内容<code>6</code>被删，现在的序列为 <code>7-5-4-3-2-1</code></li>\n<li>第二次请求 <code>page=2&amp;per_count=2</code> 则返回 <code>4-3</code>，本来应该返回 <code>5-4</code>，这样<code>5</code>就从请求中消失了。</li>\n</ul>\n<p>** 数据重复 **</p>\n<p>获取后页时，前页数据有插入。此时，原本在前页的内容被“压”到后页，导致前后也都有此数据，在用户端就是重复数据。</p>\n<p>这里也举个栗子说明：</p>\n<ul>\n<li>当前数据库中的内容已经按照 <code>7-6-5-4-3-2-1</code> 的顺序</li>\n<li>第一次请求 <code>page=1&amp;per_count=2</code> 则返回 <code>7-6</code></li>\n<li>之后数据库插入内容<code>8</code>，现在的序列为 <code>8-7-6-5-4-3-2-1</code></li>\n<li>第二次请求 <code>page=2&amp;per_count=2</code> 则返回 <code>6-5</code>，本来应该返回 <code>5-4</code>，这样<code>6</code>就从请求中重复了。</li>\n</ul>\n<p>** 性能问题 **</p>\n<p>较大页码的数据获取时性能会下降，计算总数也会带来额外的开销。</p>\n<h3 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h3><ul>\n<li>用户在查看列表的时候，列表中的数据不会发生增删的情况。</li>\n<li>数据量不是很大的情况下</li>\n</ul>\n<h2 id=\"扶梯式\"><a href=\"#扶梯式\" class=\"headerlink\" title=\"扶梯式\"></a>扶梯式</h2><p>扶梯式分页模式更多在移动端实现，存在以下特点：</p>\n<ul>\n<li>通过滚动&#x2F;上拉&#x2F;点击等方式加载新一页</li>\n<li>无页码</li>\n<li>无上&#x2F;下页按钮</li>\n<li>不可跳转至指定页面</li>\n<li>无需计算总数or总页数</li>\n</ul>\n<p>该种方法传入的参数有 <code>since_id</code>、<code>max_i</code>和<code>count</code>。<br>客户端第一次请求的时候，仅需携带 <code>count</code>参数，对应的数据库语句如下(Mysql):</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from TABLE_NAME order by id DESC limit &#123;count&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里的<code>id</code> 是递增的。</p>\n<p>举个栗子说明下：</p>\n<p>当前数据库中的内容id是 <code>7-6-5-4-3-2-1</code>, <code>count=2</code>时，那么返回的是 <code>7-6</code>。</p>\n<p>第二次访问的时候，就需要携带 <code>since_id</code> 或<code>max_id</code> 了。如果想要获取id值比<code>6</code>小的内容，那么除了<code>count=2</code>之外，还要携带 <code>max_id=6</code> 的参数。后端的处理语句类似：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from TABLE_NAME where id &lt; &#123;max_id&#125; order by id desc limit &#123;count&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>在一个列表中，如果避免一次请求大量数据的问题，使用分页是最好的解决方式，而且在接触开发以来，也一直认为分页是最简单的基础，最容易实现的部分。然后在正式工作的第一个月，便改变了这个思想，虽然分页还是最基础的部分，但是已经不认为它是简单的了，它的实现，在某些场景下，让现在的我觉得还有很棘手的。</p>\n<p>本文又名《简单的分页不简单》。为本人的第一篇工作笔记，以下所有的内容，均仅作为个人学习总结所用，特此声明！本文记录下当前这个状态的自己对于分页的理解，会留下目前解决不了的问题，等待未来的自己能够回来替自己解答。</p>\n<p>参考文章：<br><a href=\"https://developer.twitter.com/en/docs/tweets/timelines/guides/working-with-timelines\">https://developer.twitter.com/en/docs/tweets/timelines/guides/working-with-timelines</a><br><a href=\"http://zhiheng.me/156\">http://zhiheng.me/156</a><br><a href=\"https://aotu.io/notes/2017/06/27/infinite-scrolling/index.html\">https://aotu.io/notes/2017/06/27/infinite-scrolling/index.html</a></p>\n<h2 id=\"电梯式\"><a href=\"#电梯式\" class=\"headerlink\" title=\"电梯式\"></a>电梯式</h2><p>”电梯式分页“，我觉得这个名字是十分贴切，这个名词形象的描述了这种分页模式的过程。常见的有百度的搜索页。</p>","more":"<p><img src=\"/blog-img/20180903174013.png\" alt=\"百度的搜索页分页\"></p>\n<p>这种模式有以下特点：</p>\n<ul>\n<li>页面上有一连串的页码，和电梯按钮相似</li>\n<li>通过页码进行分页</li>\n<li>通过点击上&#x2F;下页按钮可实现页面切换</li>\n<li>通过点击页码可实现页面切换</li>\n<li>可直接跳转至指定页面</li>\n<li>需要计算总数or总页数</li>\n</ul>\n<p>一般来说前端传给后端的请求中，仅包含 <code>page</code> 和 <code>per_page</code>，前者来标明要第几页，后者标明每页的大小，例如 <code>page=2&amp;per_page=20</code> 意味着请求第二页，页中的数据有20条。这种模式多用于 PC 端，适合需要查找特定内容的页面。</p>\n<p>其实在数据库中对应的语句如下(Mysql):</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from TABLE_NAME where ... order by ... limit (&#123;page&#125; -1) * &#123;per_page&#125;, &#123;per_page&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><p>** 数据缺失 **</p>\n<p>获取后页时，前页数据有删除。此时，本应出现在后页的内容被“顶”到前页，而前页已经加载过了不会重新加载，后页又无此内容，从而无法被用户看到。</p>\n<p>举个栗子说明下：</p>\n<ul>\n<li>当前数据库中的内容已经按照 <code>7-6-5-4-3-2-1</code> 的顺序</li>\n<li>第一次请求 <code>page=1&amp;per_count=2</code> 则返回 <code>7-6</code></li>\n<li>之后数据库内容<code>6</code>被删，现在的序列为 <code>7-5-4-3-2-1</code></li>\n<li>第二次请求 <code>page=2&amp;per_count=2</code> 则返回 <code>4-3</code>，本来应该返回 <code>5-4</code>，这样<code>5</code>就从请求中消失了。</li>\n</ul>\n<p>** 数据重复 **</p>\n<p>获取后页时，前页数据有插入。此时，原本在前页的内容被“压”到后页，导致前后也都有此数据，在用户端就是重复数据。</p>\n<p>这里也举个栗子说明：</p>\n<ul>\n<li>当前数据库中的内容已经按照 <code>7-6-5-4-3-2-1</code> 的顺序</li>\n<li>第一次请求 <code>page=1&amp;per_count=2</code> 则返回 <code>7-6</code></li>\n<li>之后数据库插入内容<code>8</code>，现在的序列为 <code>8-7-6-5-4-3-2-1</code></li>\n<li>第二次请求 <code>page=2&amp;per_count=2</code> 则返回 <code>6-5</code>，本来应该返回 <code>5-4</code>，这样<code>6</code>就从请求中重复了。</li>\n</ul>\n<p>** 性能问题 **</p>\n<p>较大页码的数据获取时性能会下降，计算总数也会带来额外的开销。</p>\n<h3 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h3><ul>\n<li>用户在查看列表的时候，列表中的数据不会发生增删的情况。</li>\n<li>数据量不是很大的情况下</li>\n</ul>\n<h2 id=\"扶梯式\"><a href=\"#扶梯式\" class=\"headerlink\" title=\"扶梯式\"></a>扶梯式</h2><p>扶梯式分页模式更多在移动端实现，存在以下特点：</p>\n<ul>\n<li>通过滚动&#x2F;上拉&#x2F;点击等方式加载新一页</li>\n<li>无页码</li>\n<li>无上&#x2F;下页按钮</li>\n<li>不可跳转至指定页面</li>\n<li>无需计算总数or总页数</li>\n</ul>\n<p>该种方法传入的参数有 <code>since_id</code>、<code>max_i</code>和<code>count</code>。<br>客户端第一次请求的时候，仅需携带 <code>count</code>参数，对应的数据库语句如下(Mysql):</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from TABLE_NAME order by id DESC limit &#123;count&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里的<code>id</code> 是递增的。</p>\n<p>举个栗子说明下：</p>\n<p>当前数据库中的内容id是 <code>7-6-5-4-3-2-1</code>, <code>count=2</code>时，那么返回的是 <code>7-6</code>。</p>\n<p>第二次访问的时候，就需要携带 <code>since_id</code> 或<code>max_id</code> 了。如果想要获取id值比<code>6</code>小的内容，那么除了<code>count=2</code>之外，还要携带 <code>max_id=6</code> 的参数。后端的处理语句类似：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from TABLE_NAME where id &lt; &#123;max_id&#125; order by id desc limit &#123;count&#125;</span><br></pre></td></tr></table></figure>"},{"title":"你不知道的javascript(中卷)阅读笔记","date":"2017-08-08T16:00:00.000Z","_content":"\n\n《你不知道的JavaScript》系列图书是很早之前一位学长推荐的，从买来之后，一直找各个理由往后拖。\n\n自己虽然也能写一些js，但是，经过上次面试，才知道，自己的基础很差，当前是认真务实自己已经掌握的技术的基础。一步一个脚印，从头开始。\n\n<!-- more -->\n\n## 第一部分 类型和语法\n\n\n### 第一章 类型\n\n**有以下七种内置类型**\n\n- 空值(null)\n- 未定义(undefined)\n- 布尔型(boolean)\n- 数字(number)\n- 字符串(string)\n- 对象(object)\n- 符号(symbol, ES6新增)\n\n可以使用 `typeof` 运算符查看类型\n\n\n\n**值和类型**\n\n变量没有类型，但它们持有的值有类型。类型定义了值的行为。\n\n\ntypeof运算符总是返回一个字符串。\n\n\n```js\n/* 十进制转换成二进制 */\nvar a = 12;\nconsole.log(a.toString(2));\n\n/* 字符串转换成整数和浮点数注意的地方 */\nvar b = \"123456red\";\nvar c = \"12.2\";\nvar d = \"123\";\nvar e = \"ddd\";\nconsole.log([parseInt(b), parseInt(c), parseInt(d), parseInt(e)]);\nconsole.log([parseFloat(b), parseFloat(c), parseFloat(d), parseFloat(e)]);\n```\n\n### 第二章 值\n\n**数组**\n\n数组可以容纳任何类型的值，可以是字符串、数字、对象，甚至是其他数组。\n\n对数组声明后即可向其中加入值，不需要预先设定大小。\n\n```js\nvar a = [];\nconsole.log(a.length);  // 0\na[0] = 1;\na[1] = \"2\";\na[3] = [3];\nconsole.log(a.length); // 4\n```\n\n上述代码没有设置 `a[2]` 单元，那么 `a[2]` 的值为 **undefined**。\n\n**字符串与数组一些比较**\n\n字符串和数组很相似，它们都是类数组，都有 `length`属性以及 `indexOf()`和 `concat()`方法。\n\n字符串是不可变的，而数组是可变的。\n\n```js\n/* 数组与字符串的对比 */\nvar f = \"foo\";\nvar g = ['f', 'o', 'o'];\nvar h = Array.prototype.join.call(f, \"-\");\nvar i = Array.prototype.map.call(f, function () {\n    return \".\"\n}).join(\"\");\nconsole.log({\"h\": h, \"i\": i});\nconsole.log(g.reverse());  // 数组符串\n```\n数组有一个字符串没有的可变更成员的函数 `reverse()`\n\n**简单字符串的反转实现：**\n\n先将字符串转换成数组，待处理完再将结果转换回字符串\n\n```js\n/* 简单字符串反转 */\nvar sReverse = \"reverse\".split(\"\").reverse().join(\"\");\nconsole.log(sReverse);\n```\n\n**数字**\n\n`toFixed()` 方法可以指定小数部分的显示位数：\n\n```js\nvar a = 42.49;\na.toFixed(0);  // 43\na.toFixed(1); // 42.5\na.toFixed(3); // 42.490\n```\n**小数点后小数部分最后面的0也可以省略。**\n\n注意一下：\n\n```js\n// 无效语法\n42.toFixed(3);\n\n// 一下语法都有效\n\n(42).toFixed(3);\n0.42.toFixed(3);\n42..toFixed(3);\n42 .toFixed(3); // 42后有空格\n```\n\n`42.toFixed(3)`是无效语法，因为被视为常量42.0的一部分，所以没有 . 属性访问运算符来调用`toFixed()`\n\n\n```js\nconsole.log(0.1 + 0.2 === 0.3) // false\n```\n\n二进制浮点数中的0.1和0.2并不是十分准确，他们相加的结果并非刚好0.3。\n\n**不是数字的数字**\n\n检查参数是否不是 NaN，也不是数字\n\n```js\n/* 检查参数是否不是 NaN，也不是数字 */\nif (!Number.isNaN){\n    Number.isNaN = function (n) {\n        return (\n            typeof n === \"number\" &&\n            window.isNaN(n)\n        );\n    };\n}\nconsole.log(isNaN(f));\n```\n\nNaN是javaScript中 **唯一**一个不等于自身的值。\n\n**值与引用**\n\n- 简单值(即标量基本类型值)总是通过值复制的方式赋值/传递，包括null、undefined、字符串、数字、布尔和ES6中的symbol。\n- 复合值总是通过引用复制的方式来赋值/传递，包括对象（包括数组和封装对象）和函数。\n\n由于引用指向的是值本身而非变量，所以一个引用无法更改另一个引用的人指向。\n\n```js\nvar a = [1, 2, 3];\nvar b = a;\nconsole.log({\"a\": a,\"b\": b}); // {\"a\": [1, 2, 3], \"b\": [1, 2, 3]}\n\nb = [4, 5, 6];\nconsole.log({\"a\": a,\"b\": b}); // {\"a\": [1, 2, 3], \"b\": [4, 5, 6]}\n```\n\n注意一下：\n\n```js\nfunction foo(x) {\n    x.push(4);\n    console.log(x); // [1, 2, 3, 4]\n\n    x = [4, 5, 6]; // x赋值新的数组，所以对以前数组没有产生影响。\n    x.push(7);\n    console.log(x); // [4, 5, 6, 7]\n}\nvar a = [1, 2, 3];\nfoo(a);\nconsole.log(a);  // [1, 2, 3, 4]\n```\n区别：\n\n```js\nfunction foo(x) {\n    x.push(4);\n    console.log(x); // [1, 2, 3, 4]\n\n    x.length = 0; // 清空数组，这里更改了a指向的数组的长度\n    x.push(4, 5, 6, 7);\n    console.log(x); // [4, 5, 6, 7]\n}\nvar a = [1, 2, 3];\nfoo(a);\nconsole.log(a);  // [4, 5, 6, 7]\n```\n从上例可以看出，`x.length = 0` 和 `x.push(4, 5, 6, 7)` 并没有创建一个新的数组，而是更改了当前的数组。\n\n\n**补充**\n\n所有变量在赋值之前默认值都是 `undefined`。void运算符返回undefined。\n\n当JavaScript执行一个函数时，它首先会查找函数内所有的变量声明，它使用初始值 **undefined** 创建变量。\n\n```js\nvar foo = 1;\nfunction main() {\n  console.log(foo);  // undefined\n  var foo = 2;\n  console.log(this.foo);  // 1\n  this.foo = 3;\n}\nmain();\n```\n\n### 第三章 原生函数\n\n通过构造函数(如new String(\"abc\"))创建出来的是封装了基本类型值的封装对象。\n\n```js\nvar a = String(\"abc\");\nconsole.log(typeof a);  // 是\"Object\"， 不是 \"String\"\nconsole.log(a instanceof String);  // true\nObject.prototype.toString().call(a);  // \"[object String]\"\n```\n\n**封装对象包装**\n\n由于基本类型值没有`.length`和`.toString()`这样的属性和方法，需要通过封装对象才能访问，\n此时js会自动为基本类型值包装一个封装对象。\n（基本类型能够使用`.length`, `.toString()`等属性和方法，是因为js自动为其包装一个封装对象。）\n\n一般情况下，我们不需要直接使封装对象。\n\n在需要用到封装对象中的基本类型值的地方会发生隐性**拆封**。\n\n**原生函数作为构造函数**\n\n- 关于数组、对象、函数和正则表达式，我们通常喜欢以常量的形式来创建它们。\n- 应该尽量避免使用构造函数。\n- Array构造函数只带一个数字参数的时候，该参数会被作为数组的预设长度，而非只充当数组中的一个元素。\n- 永远**不要**创建和使用**空**单元数组。\n- 强烈建议使用常量形式来定义正则表达式，这样不仅语法简单，执行效率也更高。因为js引擎在代码执行前会对他们进行预编译和缓存。\n- 创建日期对象必须使用`new Date()`。\n- 错误对象`Error()`通常与throw一起使用。\n\n**常用的字符串对象方法**\n\n- indexof() 在字符串中找到指定子字符串的位置\n- chartAt() 获得字符串指定位置上的字符\n- substr()、substring()、slice() 获取字符串的指定部分\n- toUpperCase()、toLowerCase() 将字符串转换为大写或小写\n- trim() 去掉字符串前后的空格，返回新的字符串\n\n\n### 第四章 强制类型转换\n\n**抽象值操作**\n\n**toString**\n\n负责处理非字符串到字符串的强制类型转换。\n\n- 基本类型值： `null` 转换为`\"null\"`，undefined转换为`\"undefined\"`，`true`转换为`\"true\"`\n- 普通对象：如果对象有自己的`toString()`方法，字符串化时就会调用该方法并返回其值，否则返回内部属相`[[Class]]`的值。\n\n```js\nvar a = [1, 2, 3];\nconsole.log(a); // \"1, 2, 3\"\n```\n\n**JSON字符串化**\n\n工具函数 `JSON.stringify(..)` 在将JSON对象序列化为字符串时也用到了toString，但JSON字符串并非严格意义上的强制类型转换。对大多数简单值来说，效果基本相同。\n\n```js\nJSON.stringify(45); // \"45\"\nJSON.stringify(null);  // \"null\"\n```\n\n`JSON.stringify()`在对象中遇到**undefined**、**function**、**symbol**时会自动将其忽略，在数组中则会返回**null**\n\n```js\nJSON.stringify(undefined);  // undefined\nJSON.stringify(function(){});  // undefined\nJSON.stringify([1, undefined, function(){}, 4]); // \"[1, null, null, 4]\"\n```\n\n对包含循环引用的对象执行JSON.stringify()会出错。\n\n我们可以向`JSON.stringify()`传递一个可选参数replacer，它可以是数组或者函数，用来指定对象序列化过程中哪些属性则应给被处理，哪些应该被排除。\n\n```js\nvar a = {\n    b: 45,\n    c: \"45\",\n    d: [1, 2, 3]\n};\nJSON.stringify(a, [\"b\", \"c\"]);  // \"{\"b\":45,\"c\":\"45\"}\"\n```\n\n- 字符串、数字、布尔值和null的`JSON.stringify()`规则与toString基本相同。\n- 如果传递给`JSON.stringity()`的对象包含了`toJSON()`方法，那么该方法会在字符串化前调用，以便将对象转换成安全的JSON值\n\n\n**ToNumber**\n\ntrue转换成1，false转换为0.undefined转换为NaN，null转换为0。\n\n处理失败时返回 **NAN** (处理数字常量失败时会产生错误语法)；对以0开头的十六位进制数不按照十六位进制处理。而是按照十进制。\n\n对于对象：首先检查该值是否有`valueOf()`方法，如果有并且返回基本类型值，就使用该值进行强制类型转换。如果没有就是用`toString()`的返回值(如果存在)来进行强制类型转换。\n\n```js\nvar a = {\n    valueOf: function() {\n      return \"42\";\n    }\n};\n\nvar b = {\n    toString: function() {\n      return \"42\";\n    }\n};\n\nvar c = [4, 2];\nc.toString = function() {\n  return this.join(\"\");\n};\n\nNumber(a);  // 42\nNumber(b);  // 42\nNumber(c);  // 42\nNumber([]);  // 0\nNumber([\"abc\"]);  // NaN  \n```\n\n**ToBoolean**\n\n假值：\n\n- undefined\n- null\n- false\n- +0、-0和NaN\n- \"\"\n\n假值的布尔类型转换结果为false,假值列表以外的值都是真值。\n\n\n**显式强制类型转换**\n\n字符串与数字之间的显式转换\n\n```js\nvar c = \"3.14\";\nvar d = +c;\nconsole.log(typeof c);  // string\nconsole.log(typeof d);  // number\n```\n\n上例中`+c` 是 **+** 运算符的一元形式。**+** 运算符显式的将c转换为数字，而非数字加法运算；另一个常见的用途就是将日期对象强制转换为数字，返回结果为Unix时间戳，以毫秒为单位（从1970年1月1日00:00:00UTC到当前时间），但是不建议使用。\n\n**隐式强制类型转换**\n\n隐式强制类型转换的作用是减少冗余，让代码更简洁。\n\n如果+的其中一个操作数是字符串（或者是通过一些步骤可以得到字符串），则执行字符串拼接，否则执行数字加法。\n\n我们可以将数字和空字符串`\"\"`相+将其转换为字符串。\n\n```js\nvar a = 42;\nvar b = a + \"\";\nconsole.log(b); // \"42\"\n```\n下列情况会发生**布尔值隐式强制类型转换**：\n\n- **`if()`**语句中的条件判断表达式。\n- **`for(..; ..; ..;)`**语句中的条件判断表达式。\n- **`while(..)`**和**`do..while(..)`**循环中的条件表达式。\n- **`? : `**中的条件判读表达式。\n- 逻辑运算符 **`||`** 和 **`&&`** 左边的操作数。\n\n\n**`||`和`&&`**\n\n\n在JavaScript中它们返回的并不一定是布尔类型，而是两个操作数其中一个的值。\n\n```js\nvar a = 42;\nvar b = 'abc';\nvar c = null;\n\nconsole.log(a || b);  // 42\nconsole.log(a && b);  // 'abc'\nconsole.log(c || b);  // 'abc'\nconsole.log(c && b);  // null\n```\n**`||`** 和 **`&&`** 首先对第一个操作数执行条件判断。\n\n- 对于 **`||`** 来说， 如果条件判断结果为 `true` 就返回第一个操作数的值，否则就返回第二个操作数的值。\n- 对于 **`&&`** 则相反，如果条件判断结果为 `true`就返回第二个操作数的值，否则就返回第一个操作数的值。\n\n换一个角度理解：\n\n`a || b` 相当于 `a ? a : b`， 注意的是a只执行一次。\n\n`a && b` 相当于 `a ? b : a`\n\n```js\nfunction foo(a, b) {\n    a = a || \"hello\";\n    b = b || \"world\";\n    console.log(a + \" \" + b);\n}\nfoo();  // \"hello world\"\nfoo(\"yeah\", \"yeah\");  // \"yeah yeah\"\n```\n\n**宽松相等和严格相等**\n\n**`==`允许在相等比较中进行强制类型转换，而`===`不允许**\n\n如果两个值的类型不同，我们就需要考虑有没有强制类型转换的必要，有就用 `==`，没有就用`===`，不用在乎性能。\n\n容易出错的一个地方：\n\n```js\nvar a = \"42\";\nvar b = true;\nvar c = false;\n\nconsole.log(a == b);  // false\nconsole.log(a == c);  // false\n```\n\n- 如果Type(x)是布尔类型，则返回`ToNumber(x) == y`的结果。\n- 如果Type(y)是布尔类型，则返回`x == ToNumber(y)`的结果。\n\n**避免使用 `== true` 和`== false`**\n\n```js\nvar a = \"42\";\n/* 建议使用一下显示 */\nif(a){\n    //  ..\n}\n\nif(!!a){\n    //  ..\n}\n\nif(Boolean(a)){\n    // ..\n}\n```\n\n在 `==` 中 **null** 和 **undefined** 相等，除此之外其他值都不存在这种情况。\n\n注意：\n\n```js\nvar i = 2;\nNumber.prototype.valueOf = function() {\n  return i++ ;\n};\nvar a = new Number(42);\nif (a == 2 && a == 3){\n    console.log(\"happened\");  // \"happened\"\n}\n```\n以下\n\n```js\nvar i = 2;\nNumber.prototype.valueOf = function() {\n  return i++ ;\n};\nvar a = Number(42);\nif (a == 2 && a == 3){\n    console.log(\"happened\");\n}\n```\n\n几种特殊情况：\n\n```\n\"\" == 0;  // true\n\"\" == []; // true\n0 == [];  // true\n```\n这几种特殊情况，在实际开发中会不小心使用上，特别是 `== \"\"`和 `== 0`，应当注意。\n\n以下两个原则：\n\n- 如果两边的值中有`true`或者`false`，千万不要使用 `==`。\n- 如果两边的值中有`[]`、`\"\"`或者`0`，尽量不要用`==`。\n\n这时最好用`===`\n\n在js中 `<=`是**不大于**的意思(即`!(a > b)`，处理`!(b < a)`)。同理`a>= b`处理为`b <= a`。\n\n```\nvar a = {b: 42};\nvar b = {b: 43};\n\na < b;  // false\na == b;  // false\na > b;  //false\n\na <= b;  // true\na >= b;  // true\n```\n\n### 第五章 语法\n\n语句都有一个结果值(undefined也算)\n\n代码块`{..}`的结果是最后一个语句/表达式的结果。换句话说，代码块的返回值就如同**一个隐式的返回**，即返回最后一个语句的结果值。\n\n```js\nvar a = 42;\nvar b = (a++);\n\nconsole.log(a);  // 43\nconsole.log(b);  // 42\n```\n有人误以为可以用括号`()`将`a++`的副作用封装起来，例如上例。但是并非如此，`()`本身并不是一个封装表达式，不会在表达式a++产生副作用之后执行，即便如此a++首先返回42。\n\n**链式赋值**\n\n```js\nvar a, b , c;\na = b = c = 42;\nvar d = e = 42;\n```\n\na， b，c，d，e均被赋值为42。变量 e,没有在作用域中像`var e` 这样声明过，则`var d = e = 42`不会对变量e进行声明。\n\nJavaScript通过标签跳转能够实现goto的部分功能。`continue`和`break`语句都可以带一个标签。\n\n```js\nfoo: for(var i=0; i<4; i++){\n    for(var j=0; j<4; j++){\n        if (j == i){\n            continue foo;  // 跳到foo的下一个循环\n        }\n        if ((j * i) % 2 == 1){\n            continue;  //继续内层循环\n        }\n\n        console.log(i, j)\n    }\n}\n```\n注意上例：`contiue foo` 并不是指“跳转到标签foo所在位置继续执行”，而是“执行foo循环的下一轮循环”，所以这里的foo并非goto。\n\n带标签的循环跳转一个更大的用处在于，和`break _` 一起使用可以实现从内部循环跳转到外层循环。\n\n```js\nfoo: for(var i=0; i<4; i++){\n    for(var j=0; j<4; j++){\n        if(i*j >= 3){\n            console.log(\"stopping!\", i, j);\n            break foo;\n        }\n        console.log(i, j);\n    }\n}\n```\n注意上例：`break foo` 并不是指“跳转到标签foo所在位置继续执行”，而是“跳出标签foo所在的循环/代码块，继续执行后面的代码”，所以这里的foo并非goto。\n\n标签也可以用于非循环代码块，但是只有`break`才可以。我们可以对带标签的代码块使用`break __`，但是不能对带标签的非循环代码块使用`continue __`， 也不能对不带标签的代码块使用`break`。\n\n标签不允许使用双引号。\n\n**运算符优先级**\n\n- 用 `,`来连接连接一系列语句的时候，它的优先级最低，其他操作数的优先级都比它高。\n- `&&` 运算符优先于 `||`。而 `||`的优先级又高于 `? :`。\n- `? :`是右关联，而且它的组合方式会影响返回结果。`=`也是右关联。\n\n`do..while`循环后面必须带**`;`**，而 `while`和`for`循环后则不需要。\n\n**try..finally**\n\n`finally`中的代码总会在`try`之后执行，如果有`catch`的话则在`catch`之后执行。即无论出现什么情况最后一定会被调用。\n\n```js\nfunction foo(){\n    try {\n        return 42;\n    }\n    finally {\n        console.log(\"hello\");\n    }\n    console.log(\"nerver runs\");\n}\n\nfoo();\n// hello\n// 42\n```\n\n如果`finally`中抛出异常（无论是有意还是无意），函数就会在此终止。如果此前`try`中已有`return`设置返回值，则该值会被丢弃。\n\n```js\nfunction foo() {\n    try {\n        return 42;\n    }\n    finally {\n       throw \"Oops!\";\n    }\n    console.log(\"nerver run\");\n}\n\nfoo();  // Uncaught Oops!\n```\n\n- `finally`中的`return`会覆盖`try`和`catch`中`return`的返回值。\n- switch表达式的匹配算法与 `===`相同。\n- 尽量不要是用`arguments`，如果非用不可，也切勿同时使用`arguments`和其对应的命名参数。\n\n---\n","source":"_posts/你不知道的javascript中卷阅读笔记.md","raw":"---\ntitle: 你不知道的javascript(中卷)阅读笔记\ndate: 2017-08-09\ntags: [阅读笔记, JavaScript]\n---\n\n\n《你不知道的JavaScript》系列图书是很早之前一位学长推荐的，从买来之后，一直找各个理由往后拖。\n\n自己虽然也能写一些js，但是，经过上次面试，才知道，自己的基础很差，当前是认真务实自己已经掌握的技术的基础。一步一个脚印，从头开始。\n\n<!-- more -->\n\n## 第一部分 类型和语法\n\n\n### 第一章 类型\n\n**有以下七种内置类型**\n\n- 空值(null)\n- 未定义(undefined)\n- 布尔型(boolean)\n- 数字(number)\n- 字符串(string)\n- 对象(object)\n- 符号(symbol, ES6新增)\n\n可以使用 `typeof` 运算符查看类型\n\n\n\n**值和类型**\n\n变量没有类型，但它们持有的值有类型。类型定义了值的行为。\n\n\ntypeof运算符总是返回一个字符串。\n\n\n```js\n/* 十进制转换成二进制 */\nvar a = 12;\nconsole.log(a.toString(2));\n\n/* 字符串转换成整数和浮点数注意的地方 */\nvar b = \"123456red\";\nvar c = \"12.2\";\nvar d = \"123\";\nvar e = \"ddd\";\nconsole.log([parseInt(b), parseInt(c), parseInt(d), parseInt(e)]);\nconsole.log([parseFloat(b), parseFloat(c), parseFloat(d), parseFloat(e)]);\n```\n\n### 第二章 值\n\n**数组**\n\n数组可以容纳任何类型的值，可以是字符串、数字、对象，甚至是其他数组。\n\n对数组声明后即可向其中加入值，不需要预先设定大小。\n\n```js\nvar a = [];\nconsole.log(a.length);  // 0\na[0] = 1;\na[1] = \"2\";\na[3] = [3];\nconsole.log(a.length); // 4\n```\n\n上述代码没有设置 `a[2]` 单元，那么 `a[2]` 的值为 **undefined**。\n\n**字符串与数组一些比较**\n\n字符串和数组很相似，它们都是类数组，都有 `length`属性以及 `indexOf()`和 `concat()`方法。\n\n字符串是不可变的，而数组是可变的。\n\n```js\n/* 数组与字符串的对比 */\nvar f = \"foo\";\nvar g = ['f', 'o', 'o'];\nvar h = Array.prototype.join.call(f, \"-\");\nvar i = Array.prototype.map.call(f, function () {\n    return \".\"\n}).join(\"\");\nconsole.log({\"h\": h, \"i\": i});\nconsole.log(g.reverse());  // 数组符串\n```\n数组有一个字符串没有的可变更成员的函数 `reverse()`\n\n**简单字符串的反转实现：**\n\n先将字符串转换成数组，待处理完再将结果转换回字符串\n\n```js\n/* 简单字符串反转 */\nvar sReverse = \"reverse\".split(\"\").reverse().join(\"\");\nconsole.log(sReverse);\n```\n\n**数字**\n\n`toFixed()` 方法可以指定小数部分的显示位数：\n\n```js\nvar a = 42.49;\na.toFixed(0);  // 43\na.toFixed(1); // 42.5\na.toFixed(3); // 42.490\n```\n**小数点后小数部分最后面的0也可以省略。**\n\n注意一下：\n\n```js\n// 无效语法\n42.toFixed(3);\n\n// 一下语法都有效\n\n(42).toFixed(3);\n0.42.toFixed(3);\n42..toFixed(3);\n42 .toFixed(3); // 42后有空格\n```\n\n`42.toFixed(3)`是无效语法，因为被视为常量42.0的一部分，所以没有 . 属性访问运算符来调用`toFixed()`\n\n\n```js\nconsole.log(0.1 + 0.2 === 0.3) // false\n```\n\n二进制浮点数中的0.1和0.2并不是十分准确，他们相加的结果并非刚好0.3。\n\n**不是数字的数字**\n\n检查参数是否不是 NaN，也不是数字\n\n```js\n/* 检查参数是否不是 NaN，也不是数字 */\nif (!Number.isNaN){\n    Number.isNaN = function (n) {\n        return (\n            typeof n === \"number\" &&\n            window.isNaN(n)\n        );\n    };\n}\nconsole.log(isNaN(f));\n```\n\nNaN是javaScript中 **唯一**一个不等于自身的值。\n\n**值与引用**\n\n- 简单值(即标量基本类型值)总是通过值复制的方式赋值/传递，包括null、undefined、字符串、数字、布尔和ES6中的symbol。\n- 复合值总是通过引用复制的方式来赋值/传递，包括对象（包括数组和封装对象）和函数。\n\n由于引用指向的是值本身而非变量，所以一个引用无法更改另一个引用的人指向。\n\n```js\nvar a = [1, 2, 3];\nvar b = a;\nconsole.log({\"a\": a,\"b\": b}); // {\"a\": [1, 2, 3], \"b\": [1, 2, 3]}\n\nb = [4, 5, 6];\nconsole.log({\"a\": a,\"b\": b}); // {\"a\": [1, 2, 3], \"b\": [4, 5, 6]}\n```\n\n注意一下：\n\n```js\nfunction foo(x) {\n    x.push(4);\n    console.log(x); // [1, 2, 3, 4]\n\n    x = [4, 5, 6]; // x赋值新的数组，所以对以前数组没有产生影响。\n    x.push(7);\n    console.log(x); // [4, 5, 6, 7]\n}\nvar a = [1, 2, 3];\nfoo(a);\nconsole.log(a);  // [1, 2, 3, 4]\n```\n区别：\n\n```js\nfunction foo(x) {\n    x.push(4);\n    console.log(x); // [1, 2, 3, 4]\n\n    x.length = 0; // 清空数组，这里更改了a指向的数组的长度\n    x.push(4, 5, 6, 7);\n    console.log(x); // [4, 5, 6, 7]\n}\nvar a = [1, 2, 3];\nfoo(a);\nconsole.log(a);  // [4, 5, 6, 7]\n```\n从上例可以看出，`x.length = 0` 和 `x.push(4, 5, 6, 7)` 并没有创建一个新的数组，而是更改了当前的数组。\n\n\n**补充**\n\n所有变量在赋值之前默认值都是 `undefined`。void运算符返回undefined。\n\n当JavaScript执行一个函数时，它首先会查找函数内所有的变量声明，它使用初始值 **undefined** 创建变量。\n\n```js\nvar foo = 1;\nfunction main() {\n  console.log(foo);  // undefined\n  var foo = 2;\n  console.log(this.foo);  // 1\n  this.foo = 3;\n}\nmain();\n```\n\n### 第三章 原生函数\n\n通过构造函数(如new String(\"abc\"))创建出来的是封装了基本类型值的封装对象。\n\n```js\nvar a = String(\"abc\");\nconsole.log(typeof a);  // 是\"Object\"， 不是 \"String\"\nconsole.log(a instanceof String);  // true\nObject.prototype.toString().call(a);  // \"[object String]\"\n```\n\n**封装对象包装**\n\n由于基本类型值没有`.length`和`.toString()`这样的属性和方法，需要通过封装对象才能访问，\n此时js会自动为基本类型值包装一个封装对象。\n（基本类型能够使用`.length`, `.toString()`等属性和方法，是因为js自动为其包装一个封装对象。）\n\n一般情况下，我们不需要直接使封装对象。\n\n在需要用到封装对象中的基本类型值的地方会发生隐性**拆封**。\n\n**原生函数作为构造函数**\n\n- 关于数组、对象、函数和正则表达式，我们通常喜欢以常量的形式来创建它们。\n- 应该尽量避免使用构造函数。\n- Array构造函数只带一个数字参数的时候，该参数会被作为数组的预设长度，而非只充当数组中的一个元素。\n- 永远**不要**创建和使用**空**单元数组。\n- 强烈建议使用常量形式来定义正则表达式，这样不仅语法简单，执行效率也更高。因为js引擎在代码执行前会对他们进行预编译和缓存。\n- 创建日期对象必须使用`new Date()`。\n- 错误对象`Error()`通常与throw一起使用。\n\n**常用的字符串对象方法**\n\n- indexof() 在字符串中找到指定子字符串的位置\n- chartAt() 获得字符串指定位置上的字符\n- substr()、substring()、slice() 获取字符串的指定部分\n- toUpperCase()、toLowerCase() 将字符串转换为大写或小写\n- trim() 去掉字符串前后的空格，返回新的字符串\n\n\n### 第四章 强制类型转换\n\n**抽象值操作**\n\n**toString**\n\n负责处理非字符串到字符串的强制类型转换。\n\n- 基本类型值： `null` 转换为`\"null\"`，undefined转换为`\"undefined\"`，`true`转换为`\"true\"`\n- 普通对象：如果对象有自己的`toString()`方法，字符串化时就会调用该方法并返回其值，否则返回内部属相`[[Class]]`的值。\n\n```js\nvar a = [1, 2, 3];\nconsole.log(a); // \"1, 2, 3\"\n```\n\n**JSON字符串化**\n\n工具函数 `JSON.stringify(..)` 在将JSON对象序列化为字符串时也用到了toString，但JSON字符串并非严格意义上的强制类型转换。对大多数简单值来说，效果基本相同。\n\n```js\nJSON.stringify(45); // \"45\"\nJSON.stringify(null);  // \"null\"\n```\n\n`JSON.stringify()`在对象中遇到**undefined**、**function**、**symbol**时会自动将其忽略，在数组中则会返回**null**\n\n```js\nJSON.stringify(undefined);  // undefined\nJSON.stringify(function(){});  // undefined\nJSON.stringify([1, undefined, function(){}, 4]); // \"[1, null, null, 4]\"\n```\n\n对包含循环引用的对象执行JSON.stringify()会出错。\n\n我们可以向`JSON.stringify()`传递一个可选参数replacer，它可以是数组或者函数，用来指定对象序列化过程中哪些属性则应给被处理，哪些应该被排除。\n\n```js\nvar a = {\n    b: 45,\n    c: \"45\",\n    d: [1, 2, 3]\n};\nJSON.stringify(a, [\"b\", \"c\"]);  // \"{\"b\":45,\"c\":\"45\"}\"\n```\n\n- 字符串、数字、布尔值和null的`JSON.stringify()`规则与toString基本相同。\n- 如果传递给`JSON.stringity()`的对象包含了`toJSON()`方法，那么该方法会在字符串化前调用，以便将对象转换成安全的JSON值\n\n\n**ToNumber**\n\ntrue转换成1，false转换为0.undefined转换为NaN，null转换为0。\n\n处理失败时返回 **NAN** (处理数字常量失败时会产生错误语法)；对以0开头的十六位进制数不按照十六位进制处理。而是按照十进制。\n\n对于对象：首先检查该值是否有`valueOf()`方法，如果有并且返回基本类型值，就使用该值进行强制类型转换。如果没有就是用`toString()`的返回值(如果存在)来进行强制类型转换。\n\n```js\nvar a = {\n    valueOf: function() {\n      return \"42\";\n    }\n};\n\nvar b = {\n    toString: function() {\n      return \"42\";\n    }\n};\n\nvar c = [4, 2];\nc.toString = function() {\n  return this.join(\"\");\n};\n\nNumber(a);  // 42\nNumber(b);  // 42\nNumber(c);  // 42\nNumber([]);  // 0\nNumber([\"abc\"]);  // NaN  \n```\n\n**ToBoolean**\n\n假值：\n\n- undefined\n- null\n- false\n- +0、-0和NaN\n- \"\"\n\n假值的布尔类型转换结果为false,假值列表以外的值都是真值。\n\n\n**显式强制类型转换**\n\n字符串与数字之间的显式转换\n\n```js\nvar c = \"3.14\";\nvar d = +c;\nconsole.log(typeof c);  // string\nconsole.log(typeof d);  // number\n```\n\n上例中`+c` 是 **+** 运算符的一元形式。**+** 运算符显式的将c转换为数字，而非数字加法运算；另一个常见的用途就是将日期对象强制转换为数字，返回结果为Unix时间戳，以毫秒为单位（从1970年1月1日00:00:00UTC到当前时间），但是不建议使用。\n\n**隐式强制类型转换**\n\n隐式强制类型转换的作用是减少冗余，让代码更简洁。\n\n如果+的其中一个操作数是字符串（或者是通过一些步骤可以得到字符串），则执行字符串拼接，否则执行数字加法。\n\n我们可以将数字和空字符串`\"\"`相+将其转换为字符串。\n\n```js\nvar a = 42;\nvar b = a + \"\";\nconsole.log(b); // \"42\"\n```\n下列情况会发生**布尔值隐式强制类型转换**：\n\n- **`if()`**语句中的条件判断表达式。\n- **`for(..; ..; ..;)`**语句中的条件判断表达式。\n- **`while(..)`**和**`do..while(..)`**循环中的条件表达式。\n- **`? : `**中的条件判读表达式。\n- 逻辑运算符 **`||`** 和 **`&&`** 左边的操作数。\n\n\n**`||`和`&&`**\n\n\n在JavaScript中它们返回的并不一定是布尔类型，而是两个操作数其中一个的值。\n\n```js\nvar a = 42;\nvar b = 'abc';\nvar c = null;\n\nconsole.log(a || b);  // 42\nconsole.log(a && b);  // 'abc'\nconsole.log(c || b);  // 'abc'\nconsole.log(c && b);  // null\n```\n**`||`** 和 **`&&`** 首先对第一个操作数执行条件判断。\n\n- 对于 **`||`** 来说， 如果条件判断结果为 `true` 就返回第一个操作数的值，否则就返回第二个操作数的值。\n- 对于 **`&&`** 则相反，如果条件判断结果为 `true`就返回第二个操作数的值，否则就返回第一个操作数的值。\n\n换一个角度理解：\n\n`a || b` 相当于 `a ? a : b`， 注意的是a只执行一次。\n\n`a && b` 相当于 `a ? b : a`\n\n```js\nfunction foo(a, b) {\n    a = a || \"hello\";\n    b = b || \"world\";\n    console.log(a + \" \" + b);\n}\nfoo();  // \"hello world\"\nfoo(\"yeah\", \"yeah\");  // \"yeah yeah\"\n```\n\n**宽松相等和严格相等**\n\n**`==`允许在相等比较中进行强制类型转换，而`===`不允许**\n\n如果两个值的类型不同，我们就需要考虑有没有强制类型转换的必要，有就用 `==`，没有就用`===`，不用在乎性能。\n\n容易出错的一个地方：\n\n```js\nvar a = \"42\";\nvar b = true;\nvar c = false;\n\nconsole.log(a == b);  // false\nconsole.log(a == c);  // false\n```\n\n- 如果Type(x)是布尔类型，则返回`ToNumber(x) == y`的结果。\n- 如果Type(y)是布尔类型，则返回`x == ToNumber(y)`的结果。\n\n**避免使用 `== true` 和`== false`**\n\n```js\nvar a = \"42\";\n/* 建议使用一下显示 */\nif(a){\n    //  ..\n}\n\nif(!!a){\n    //  ..\n}\n\nif(Boolean(a)){\n    // ..\n}\n```\n\n在 `==` 中 **null** 和 **undefined** 相等，除此之外其他值都不存在这种情况。\n\n注意：\n\n```js\nvar i = 2;\nNumber.prototype.valueOf = function() {\n  return i++ ;\n};\nvar a = new Number(42);\nif (a == 2 && a == 3){\n    console.log(\"happened\");  // \"happened\"\n}\n```\n以下\n\n```js\nvar i = 2;\nNumber.prototype.valueOf = function() {\n  return i++ ;\n};\nvar a = Number(42);\nif (a == 2 && a == 3){\n    console.log(\"happened\");\n}\n```\n\n几种特殊情况：\n\n```\n\"\" == 0;  // true\n\"\" == []; // true\n0 == [];  // true\n```\n这几种特殊情况，在实际开发中会不小心使用上，特别是 `== \"\"`和 `== 0`，应当注意。\n\n以下两个原则：\n\n- 如果两边的值中有`true`或者`false`，千万不要使用 `==`。\n- 如果两边的值中有`[]`、`\"\"`或者`0`，尽量不要用`==`。\n\n这时最好用`===`\n\n在js中 `<=`是**不大于**的意思(即`!(a > b)`，处理`!(b < a)`)。同理`a>= b`处理为`b <= a`。\n\n```\nvar a = {b: 42};\nvar b = {b: 43};\n\na < b;  // false\na == b;  // false\na > b;  //false\n\na <= b;  // true\na >= b;  // true\n```\n\n### 第五章 语法\n\n语句都有一个结果值(undefined也算)\n\n代码块`{..}`的结果是最后一个语句/表达式的结果。换句话说，代码块的返回值就如同**一个隐式的返回**，即返回最后一个语句的结果值。\n\n```js\nvar a = 42;\nvar b = (a++);\n\nconsole.log(a);  // 43\nconsole.log(b);  // 42\n```\n有人误以为可以用括号`()`将`a++`的副作用封装起来，例如上例。但是并非如此，`()`本身并不是一个封装表达式，不会在表达式a++产生副作用之后执行，即便如此a++首先返回42。\n\n**链式赋值**\n\n```js\nvar a, b , c;\na = b = c = 42;\nvar d = e = 42;\n```\n\na， b，c，d，e均被赋值为42。变量 e,没有在作用域中像`var e` 这样声明过，则`var d = e = 42`不会对变量e进行声明。\n\nJavaScript通过标签跳转能够实现goto的部分功能。`continue`和`break`语句都可以带一个标签。\n\n```js\nfoo: for(var i=0; i<4; i++){\n    for(var j=0; j<4; j++){\n        if (j == i){\n            continue foo;  // 跳到foo的下一个循环\n        }\n        if ((j * i) % 2 == 1){\n            continue;  //继续内层循环\n        }\n\n        console.log(i, j)\n    }\n}\n```\n注意上例：`contiue foo` 并不是指“跳转到标签foo所在位置继续执行”，而是“执行foo循环的下一轮循环”，所以这里的foo并非goto。\n\n带标签的循环跳转一个更大的用处在于，和`break _` 一起使用可以实现从内部循环跳转到外层循环。\n\n```js\nfoo: for(var i=0; i<4; i++){\n    for(var j=0; j<4; j++){\n        if(i*j >= 3){\n            console.log(\"stopping!\", i, j);\n            break foo;\n        }\n        console.log(i, j);\n    }\n}\n```\n注意上例：`break foo` 并不是指“跳转到标签foo所在位置继续执行”，而是“跳出标签foo所在的循环/代码块，继续执行后面的代码”，所以这里的foo并非goto。\n\n标签也可以用于非循环代码块，但是只有`break`才可以。我们可以对带标签的代码块使用`break __`，但是不能对带标签的非循环代码块使用`continue __`， 也不能对不带标签的代码块使用`break`。\n\n标签不允许使用双引号。\n\n**运算符优先级**\n\n- 用 `,`来连接连接一系列语句的时候，它的优先级最低，其他操作数的优先级都比它高。\n- `&&` 运算符优先于 `||`。而 `||`的优先级又高于 `? :`。\n- `? :`是右关联，而且它的组合方式会影响返回结果。`=`也是右关联。\n\n`do..while`循环后面必须带**`;`**，而 `while`和`for`循环后则不需要。\n\n**try..finally**\n\n`finally`中的代码总会在`try`之后执行，如果有`catch`的话则在`catch`之后执行。即无论出现什么情况最后一定会被调用。\n\n```js\nfunction foo(){\n    try {\n        return 42;\n    }\n    finally {\n        console.log(\"hello\");\n    }\n    console.log(\"nerver runs\");\n}\n\nfoo();\n// hello\n// 42\n```\n\n如果`finally`中抛出异常（无论是有意还是无意），函数就会在此终止。如果此前`try`中已有`return`设置返回值，则该值会被丢弃。\n\n```js\nfunction foo() {\n    try {\n        return 42;\n    }\n    finally {\n       throw \"Oops!\";\n    }\n    console.log(\"nerver run\");\n}\n\nfoo();  // Uncaught Oops!\n```\n\n- `finally`中的`return`会覆盖`try`和`catch`中`return`的返回值。\n- switch表达式的匹配算法与 `===`相同。\n- 尽量不要是用`arguments`，如果非用不可，也切勿同时使用`arguments`和其对应的命名参数。\n\n---\n","slug":"你不知道的javascript中卷阅读笔记","published":1,"updated":"2021-06-20T10:25:20.130Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluqa1hja003orlog2uz5gy1r","content":"<p>《你不知道的JavaScript》系列图书是很早之前一位学长推荐的，从买来之后，一直找各个理由往后拖。</p>\n<p>自己虽然也能写一些js，但是，经过上次面试，才知道，自己的基础很差，当前是认真务实自己已经掌握的技术的基础。一步一个脚印，从头开始。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"第一部分-类型和语法\"><a href=\"#第一部分-类型和语法\" class=\"headerlink\" title=\"第一部分 类型和语法\"></a>第一部分 类型和语法</h2><h3 id=\"第一章-类型\"><a href=\"#第一章-类型\" class=\"headerlink\" title=\"第一章 类型\"></a>第一章 类型</h3><p><strong>有以下七种内置类型</strong></p>\n<ul>\n<li>空值(null)</li>\n<li>未定义(undefined)</li>\n<li>布尔型(boolean)</li>\n<li>数字(number)</li>\n<li>字符串(string)</li>\n<li>对象(object)</li>\n<li>符号(symbol, ES6新增)</li>\n</ul>\n<p>可以使用 <code>typeof</code> 运算符查看类型</p>\n<p><strong>值和类型</strong></p>\n<p>变量没有类型，但它们持有的值有类型。类型定义了值的行为。</p>\n<p>typeof运算符总是返回一个字符串。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 十进制转换成二进制 */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">12</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a.<span class=\"title function_\">toString</span>(<span class=\"number\">2</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 字符串转换成整数和浮点数注意的地方 */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"string\">&quot;123456red&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"string\">&quot;12.2&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> d = <span class=\"string\">&quot;123&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> e = <span class=\"string\">&quot;ddd&quot;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>([<span class=\"built_in\">parseInt</span>(b), <span class=\"built_in\">parseInt</span>(c), <span class=\"built_in\">parseInt</span>(d), <span class=\"built_in\">parseInt</span>(e)]);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>([<span class=\"built_in\">parseFloat</span>(b), <span class=\"built_in\">parseFloat</span>(c), <span class=\"built_in\">parseFloat</span>(d), <span class=\"built_in\">parseFloat</span>(e)]);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"第二章-值\"><a href=\"#第二章-值\" class=\"headerlink\" title=\"第二章 值\"></a>第二章 值</h3><p><strong>数组</strong></p>\n<p>数组可以容纳任何类型的值，可以是字符串、数字、对象，甚至是其他数组。</p>\n<p>对数组声明后即可向其中加入值，不需要预先设定大小。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [];</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a.<span class=\"property\">length</span>);  <span class=\"comment\">// 0</span></span><br><span class=\"line\">a[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">a[<span class=\"number\">1</span>] = <span class=\"string\">&quot;2&quot;</span>;</span><br><span class=\"line\">a[<span class=\"number\">3</span>] = [<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a.<span class=\"property\">length</span>); <span class=\"comment\">// 4</span></span><br></pre></td></tr></table></figure>\n\n<p>上述代码没有设置 <code>a[2]</code> 单元，那么 <code>a[2]</code> 的值为 <strong>undefined</strong>。</p>\n<p><strong>字符串与数组一些比较</strong></p>\n<p>字符串和数组很相似，它们都是类数组，都有 <code>length</code>属性以及 <code>indexOf()</code>和 <code>concat()</code>方法。</p>\n<p>字符串是不可变的，而数组是可变的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 数组与字符串的对比 */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"string\">&quot;foo&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> g = [<span class=\"string\">&#x27;f&#x27;</span>, <span class=\"string\">&#x27;o&#x27;</span>, <span class=\"string\">&#x27;o&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> h = <span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">join</span>.<span class=\"title function_\">call</span>(f, <span class=\"string\">&quot;-&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">map</span>.<span class=\"title function_\">call</span>(f, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;.&quot;</span></span><br><span class=\"line\">&#125;).<span class=\"title function_\">join</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(&#123;<span class=\"string\">&quot;h&quot;</span>: h, <span class=\"string\">&quot;i&quot;</span>: i&#125;);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(g.<span class=\"title function_\">reverse</span>());  <span class=\"comment\">// 数组符串</span></span><br></pre></td></tr></table></figure>\n<p>数组有一个字符串没有的可变更成员的函数 <code>reverse()</code></p>\n<p><strong>简单字符串的反转实现：</strong></p>\n<p>先将字符串转换成数组，待处理完再将结果转换回字符串</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 简单字符串反转 */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> sReverse = <span class=\"string\">&quot;reverse&quot;</span>.<span class=\"title function_\">split</span>(<span class=\"string\">&quot;&quot;</span>).<span class=\"title function_\">reverse</span>().<span class=\"title function_\">join</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(sReverse);</span><br></pre></td></tr></table></figure>\n\n<p><strong>数字</strong></p>\n<p><code>toFixed()</code> 方法可以指定小数部分的显示位数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">42.49</span>;</span><br><span class=\"line\">a.<span class=\"title function_\">toFixed</span>(<span class=\"number\">0</span>);  <span class=\"comment\">// 43</span></span><br><span class=\"line\">a.<span class=\"title function_\">toFixed</span>(<span class=\"number\">1</span>); <span class=\"comment\">// 42.5</span></span><br><span class=\"line\">a.<span class=\"title function_\">toFixed</span>(<span class=\"number\">3</span>); <span class=\"comment\">// 42.490</span></span><br></pre></td></tr></table></figure>\n<p><strong>小数点后小数部分最后面的0也可以省略。</strong></p>\n<p>注意一下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 无效语法</span></span><br><span class=\"line\"><span class=\"number\">42.</span><span class=\"title function_\">toFixed</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 一下语法都有效</span></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"number\">42</span>).<span class=\"title function_\">toFixed</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"number\">0.42</span>.<span class=\"title function_\">toFixed</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"number\">42.</span>.<span class=\"title function_\">toFixed</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"number\">42</span> .<span class=\"title function_\">toFixed</span>(<span class=\"number\">3</span>); <span class=\"comment\">// 42后有空格</span></span><br></pre></td></tr></table></figure>\n\n<p><code>42.toFixed(3)</code>是无效语法，因为被视为常量42.0的一部分，所以没有 . 属性访问运算符来调用<code>toFixed()</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">0.1</span> + <span class=\"number\">0.2</span> === <span class=\"number\">0.3</span>) <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<p>二进制浮点数中的0.1和0.2并不是十分准确，他们相加的结果并非刚好0.3。</p>\n<p><strong>不是数字的数字</strong></p>\n<p>检查参数是否不是 NaN，也不是数字</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 检查参数是否不是 NaN，也不是数字 */</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"title class_\">Number</span>.<span class=\"property\">isNaN</span>)&#123;</span><br><span class=\"line\">    <span class=\"title class_\">Number</span>.<span class=\"property\">isNaN</span> = <span class=\"keyword\">function</span> (<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">            <span class=\"keyword\">typeof</span> n === <span class=\"string\">&quot;number&quot;</span> &amp;&amp;</span><br><span class=\"line\">            <span class=\"variable language_\">window</span>.<span class=\"built_in\">isNaN</span>(n)</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"built_in\">isNaN</span>(f));</span><br></pre></td></tr></table></figure>\n\n<p>NaN是javaScript中 <strong>唯一</strong>一个不等于自身的值。</p>\n<p><strong>值与引用</strong></p>\n<ul>\n<li>简单值(即标量基本类型值)总是通过值复制的方式赋值&#x2F;传递，包括null、undefined、字符串、数字、布尔和ES6中的symbol。</li>\n<li>复合值总是通过引用复制的方式来赋值&#x2F;传递，包括对象（包括数组和封装对象）和函数。</li>\n</ul>\n<p>由于引用指向的是值本身而非变量，所以一个引用无法更改另一个引用的人指向。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(&#123;<span class=\"string\">&quot;a&quot;</span>: a,<span class=\"string\">&quot;b&quot;</span>: b&#125;); <span class=\"comment\">// &#123;&quot;a&quot;: [1, 2, 3], &quot;b&quot;: [1, 2, 3]&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">b = [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(&#123;<span class=\"string\">&quot;a&quot;</span>: a,<span class=\"string\">&quot;b&quot;</span>: b&#125;); <span class=\"comment\">// &#123;&quot;a&quot;: [1, 2, 3], &quot;b&quot;: [4, 5, 6]&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>注意一下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\">x</span>) &#123;</span><br><span class=\"line\">    x.<span class=\"title function_\">push</span>(<span class=\"number\">4</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x); <span class=\"comment\">// [1, 2, 3, 4]</span></span><br><span class=\"line\"></span><br><span class=\"line\">    x = [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]; <span class=\"comment\">// x赋值新的数组，所以对以前数组没有产生影响。</span></span><br><span class=\"line\">    x.<span class=\"title function_\">push</span>(<span class=\"number\">7</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x); <span class=\"comment\">// [4, 5, 6, 7]</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"title function_\">foo</span>(a);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);  <span class=\"comment\">// [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure>\n<p>区别：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\">x</span>) &#123;</span><br><span class=\"line\">    x.<span class=\"title function_\">push</span>(<span class=\"number\">4</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x); <span class=\"comment\">// [1, 2, 3, 4]</span></span><br><span class=\"line\"></span><br><span class=\"line\">    x.<span class=\"property\">length</span> = <span class=\"number\">0</span>; <span class=\"comment\">// 清空数组，这里更改了a指向的数组的长度</span></span><br><span class=\"line\">    x.<span class=\"title function_\">push</span>(<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x); <span class=\"comment\">// [4, 5, 6, 7]</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"title function_\">foo</span>(a);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);  <span class=\"comment\">// [4, 5, 6, 7]</span></span><br></pre></td></tr></table></figure>\n<p>从上例可以看出，<code>x.length = 0</code> 和 <code>x.push(4, 5, 6, 7)</code> 并没有创建一个新的数组，而是更改了当前的数组。</p>\n<p><strong>补充</strong></p>\n<p>所有变量在赋值之前默认值都是 <code>undefined</code>。void运算符返回undefined。</p>\n<p>当JavaScript执行一个函数时，它首先会查找函数内所有的变量声明，它使用初始值 <strong>undefined</strong> 创建变量。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">main</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(foo);  <span class=\"comment\">// undefined</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> foo = <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">foo</span>);  <span class=\"comment\">// 1</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">foo</span> = <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">main</span>();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"第三章-原生函数\"><a href=\"#第三章-原生函数\" class=\"headerlink\" title=\"第三章 原生函数\"></a>第三章 原生函数</h3><p>通过构造函数(如new String(“abc”))创建出来的是封装了基本类型值的封装对象。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"title class_\">String</span>(<span class=\"string\">&quot;abc&quot;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> a);  <span class=\"comment\">// 是&quot;Object&quot;， 不是 &quot;String&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a <span class=\"keyword\">instanceof</span> <span class=\"title class_\">String</span>);  <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"title function_\">toString</span>().<span class=\"title function_\">call</span>(a);  <span class=\"comment\">// &quot;[object String]&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>封装对象包装</strong></p>\n<p>由于基本类型值没有<code>.length</code>和<code>.toString()</code>这样的属性和方法，需要通过封装对象才能访问，<br>此时js会自动为基本类型值包装一个封装对象。<br>（基本类型能够使用<code>.length</code>, <code>.toString()</code>等属性和方法，是因为js自动为其包装一个封装对象。）</p>\n<p>一般情况下，我们不需要直接使封装对象。</p>\n<p>在需要用到封装对象中的基本类型值的地方会发生隐性<strong>拆封</strong>。</p>\n<p><strong>原生函数作为构造函数</strong></p>\n<ul>\n<li>关于数组、对象、函数和正则表达式，我们通常喜欢以常量的形式来创建它们。</li>\n<li>应该尽量避免使用构造函数。</li>\n<li>Array构造函数只带一个数字参数的时候，该参数会被作为数组的预设长度，而非只充当数组中的一个元素。</li>\n<li>永远<strong>不要</strong>创建和使用<strong>空</strong>单元数组。</li>\n<li>强烈建议使用常量形式来定义正则表达式，这样不仅语法简单，执行效率也更高。因为js引擎在代码执行前会对他们进行预编译和缓存。</li>\n<li>创建日期对象必须使用<code>new Date()</code>。</li>\n<li>错误对象<code>Error()</code>通常与throw一起使用。</li>\n</ul>\n<p><strong>常用的字符串对象方法</strong></p>\n<ul>\n<li>indexof() 在字符串中找到指定子字符串的位置</li>\n<li>chartAt() 获得字符串指定位置上的字符</li>\n<li>substr()、substring()、slice() 获取字符串的指定部分</li>\n<li>toUpperCase()、toLowerCase() 将字符串转换为大写或小写</li>\n<li>trim() 去掉字符串前后的空格，返回新的字符串</li>\n</ul>\n<h3 id=\"第四章-强制类型转换\"><a href=\"#第四章-强制类型转换\" class=\"headerlink\" title=\"第四章 强制类型转换\"></a>第四章 强制类型转换</h3><p><strong>抽象值操作</strong></p>\n<p><strong>toString</strong></p>\n<p>负责处理非字符串到字符串的强制类型转换。</p>\n<ul>\n<li>基本类型值： <code>null</code> 转换为<code>&quot;null&quot;</code>，undefined转换为<code>&quot;undefined&quot;</code>，<code>true</code>转换为<code>&quot;true&quot;</code></li>\n<li>普通对象：如果对象有自己的<code>toString()</code>方法，字符串化时就会调用该方法并返回其值，否则返回内部属相<code>[[Class]]</code>的值。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a); <span class=\"comment\">// &quot;1, 2, 3&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>JSON字符串化</strong></p>\n<p>工具函数 <code>JSON.stringify(..)</code> 在将JSON对象序列化为字符串时也用到了toString，但JSON字符串并非严格意义上的强制类型转换。对大多数简单值来说，效果基本相同。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(<span class=\"number\">45</span>); <span class=\"comment\">// &quot;45&quot;</span></span><br><span class=\"line\"><span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(<span class=\"literal\">null</span>);  <span class=\"comment\">// &quot;null&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>JSON.stringify()</code>在对象中遇到<strong>undefined</strong>、<strong>function</strong>、<strong>symbol</strong>时会自动将其忽略，在数组中则会返回<strong>null</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(<span class=\"literal\">undefined</span>);  <span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;&#125;);  <span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>([<span class=\"number\">1</span>, <span class=\"literal\">undefined</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;&#125;, <span class=\"number\">4</span>]); <span class=\"comment\">// &quot;[1, null, null, 4]&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>对包含循环引用的对象执行JSON.stringify()会出错。</p>\n<p>我们可以向<code>JSON.stringify()</code>传递一个可选参数replacer，它可以是数组或者函数，用来指定对象序列化过程中哪些属性则应给被处理，哪些应该被排除。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">    <span class=\"attr\">b</span>: <span class=\"number\">45</span>,</span><br><span class=\"line\">    <span class=\"attr\">c</span>: <span class=\"string\">&quot;45&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">d</span>: [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(a, [<span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>]);  <span class=\"comment\">// &quot;&#123;&quot;b&quot;:45,&quot;c&quot;:&quot;45&quot;&#125;&quot;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>字符串、数字、布尔值和null的<code>JSON.stringify()</code>规则与toString基本相同。</li>\n<li>如果传递给<code>JSON.stringity()</code>的对象包含了<code>toJSON()</code>方法，那么该方法会在字符串化前调用，以便将对象转换成安全的JSON值</li>\n</ul>\n<p><strong>ToNumber</strong></p>\n<p>true转换成1，false转换为0.undefined转换为NaN，null转换为0。</p>\n<p>处理失败时返回 <strong>NAN</strong> (处理数字常量失败时会产生错误语法)；对以0开头的十六位进制数不按照十六位进制处理。而是按照十进制。</p>\n<p>对于对象：首先检查该值是否有<code>valueOf()</code>方法，如果有并且返回基本类型值，就使用该值进行强制类型转换。如果没有就是用<code>toString()</code>的返回值(如果存在)来进行强制类型转换。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">    <span class=\"attr\">valueOf</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&quot;42&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = &#123;</span><br><span class=\"line\">    <span class=\"attr\">toString</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&quot;42&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> c = [<span class=\"number\">4</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\">c.<span class=\"property\">toString</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">join</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Number</span>(a);  <span class=\"comment\">// 42</span></span><br><span class=\"line\"><span class=\"title class_\">Number</span>(b);  <span class=\"comment\">// 42</span></span><br><span class=\"line\"><span class=\"title class_\">Number</span>(c);  <span class=\"comment\">// 42</span></span><br><span class=\"line\"><span class=\"title class_\">Number</span>([]);  <span class=\"comment\">// 0</span></span><br><span class=\"line\"><span class=\"title class_\">Number</span>([<span class=\"string\">&quot;abc&quot;</span>]);  <span class=\"comment\">// NaN  </span></span><br></pre></td></tr></table></figure>\n\n<p><strong>ToBoolean</strong></p>\n<p>假值：</p>\n<ul>\n<li>undefined</li>\n<li>null</li>\n<li>false</li>\n<li>+0、-0和NaN</li>\n<li>“”</li>\n</ul>\n<p>假值的布尔类型转换结果为false,假值列表以外的值都是真值。</p>\n<p><strong>显式强制类型转换</strong></p>\n<p>字符串与数字之间的显式转换</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"string\">&quot;3.14&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> d = +c;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> c);  <span class=\"comment\">// string</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> d);  <span class=\"comment\">// number</span></span><br></pre></td></tr></table></figure>\n\n<p>上例中<code>+c</code> 是 <strong>+</strong> 运算符的一元形式。**+** 运算符显式的将c转换为数字，而非数字加法运算；另一个常见的用途就是将日期对象强制转换为数字，返回结果为Unix时间戳，以毫秒为单位（从1970年1月1日00:00:00UTC到当前时间），但是不建议使用。</p>\n<p><strong>隐式强制类型转换</strong></p>\n<p>隐式强制类型转换的作用是减少冗余，让代码更简洁。</p>\n<p>如果+的其中一个操作数是字符串（或者是通过一些步骤可以得到字符串），则执行字符串拼接，否则执行数字加法。</p>\n<p>我们可以将数字和空字符串<code>&quot;&quot;</code>相+将其转换为字符串。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">42</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a + <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(b); <span class=\"comment\">// &quot;42&quot;</span></span><br></pre></td></tr></table></figure>\n<p>下列情况会发生<strong>布尔值隐式强制类型转换</strong>：</p>\n<ul>\n<li>**<code>if()</code>**语句中的条件判断表达式。</li>\n<li>**<code>for(..; ..; ..;)</code>**语句中的条件判断表达式。</li>\n<li>**<code>while(..)</code><strong>和</strong><code>do..while(..)</code>**循环中的条件表达式。</li>\n<li>**<code>? : </code>**中的条件判读表达式。</li>\n<li>逻辑运算符 <strong><code>||</code></strong> 和 <strong><code>&amp;&amp;</code></strong> 左边的操作数。</li>\n</ul>\n<p><strong><code>||</code>和<code>&amp;&amp;</code></strong></p>\n<p>在JavaScript中它们返回的并不一定是布尔类型，而是两个操作数其中一个的值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">42</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"string\">&#x27;abc&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a || b);  <span class=\"comment\">// 42</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a &amp;&amp; b);  <span class=\"comment\">// &#x27;abc&#x27;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(c || b);  <span class=\"comment\">// &#x27;abc&#x27;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(c &amp;&amp; b);  <span class=\"comment\">// null</span></span><br></pre></td></tr></table></figure>\n<p><strong><code>||</code></strong> 和 <strong><code>&amp;&amp;</code></strong> 首先对第一个操作数执行条件判断。</p>\n<ul>\n<li>对于 <strong><code>||</code></strong> 来说， 如果条件判断结果为 <code>true</code> 就返回第一个操作数的值，否则就返回第二个操作数的值。</li>\n<li>对于 <strong><code>&amp;&amp;</code></strong> 则相反，如果条件判断结果为 <code>true</code>就返回第二个操作数的值，否则就返回第一个操作数的值。</li>\n</ul>\n<p>换一个角度理解：</p>\n<p><code>a || b</code> 相当于 <code>a ? a : b</code>， 注意的是a只执行一次。</p>\n<p><code>a &amp;&amp; b</code> 相当于 <code>a ? b : a</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\">a, b</span>) &#123;</span><br><span class=\"line\">    a = a || <span class=\"string\">&quot;hello&quot;</span>;</span><br><span class=\"line\">    b = b || <span class=\"string\">&quot;world&quot;</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a + <span class=\"string\">&quot; &quot;</span> + b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">foo</span>();  <span class=\"comment\">// &quot;hello world&quot;</span></span><br><span class=\"line\"><span class=\"title function_\">foo</span>(<span class=\"string\">&quot;yeah&quot;</span>, <span class=\"string\">&quot;yeah&quot;</span>);  <span class=\"comment\">// &quot;yeah yeah&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>宽松相等和严格相等</strong></p>\n<p><strong><code>==</code>允许在相等比较中进行强制类型转换，而<code>===</code>不允许</strong></p>\n<p>如果两个值的类型不同，我们就需要考虑有没有强制类型转换的必要，有就用 <code>==</code>，没有就用<code>===</code>，不用在乎性能。</p>\n<p>容易出错的一个地方：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">&quot;42&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a == b);  <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a == c);  <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>如果Type(x)是布尔类型，则返回<code>ToNumber(x) == y</code>的结果。</li>\n<li>如果Type(y)是布尔类型，则返回<code>x == ToNumber(y)</code>的结果。</li>\n</ul>\n<p><strong>避免使用 <code>== true</code> 和<code>== false</code></strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">&quot;42&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">/* 建议使用一下显示 */</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(a)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//  ..</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(!!a)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//  ..</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"title class_\">Boolean</span>(a))&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ..</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在 <code>==</code> 中 <strong>null</strong> 和 <strong>undefined</strong> 相等，除此之外其他值都不存在这种情况。</p>\n<p>注意：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"title class_\">Number</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">valueOf</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> i++ ;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> <span class=\"title class_\">Number</span>(<span class=\"number\">42</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (a == <span class=\"number\">2</span> &amp;&amp; a == <span class=\"number\">3</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;happened&quot;</span>);  <span class=\"comment\">// &quot;happened&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"title class_\">Number</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">valueOf</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> i++ ;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"title class_\">Number</span>(<span class=\"number\">42</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (a == <span class=\"number\">2</span> &amp;&amp; a == <span class=\"number\">3</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;happened&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>几种特殊情况：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot; == 0;  // true</span><br><span class=\"line\">&quot;&quot; == []; // true</span><br><span class=\"line\">0 == [];  // true</span><br></pre></td></tr></table></figure>\n<p>这几种特殊情况，在实际开发中会不小心使用上，特别是 <code>== &quot;&quot;</code>和 <code>== 0</code>，应当注意。</p>\n<p>以下两个原则：</p>\n<ul>\n<li>如果两边的值中有<code>true</code>或者<code>false</code>，千万不要使用 <code>==</code>。</li>\n<li>如果两边的值中有<code>[]</code>、<code>&quot;&quot;</code>或者<code>0</code>，尽量不要用<code>==</code>。</li>\n</ul>\n<p>这时最好用<code>===</code></p>\n<p>在js中 <code>&lt;=</code>是<strong>不大于</strong>的意思(即<code>!(a &gt; b)</code>，处理<code>!(b &lt; a)</code>)。同理<code>a&gt;= b</code>处理为<code>b &lt;= a</code>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = &#123;b: 42&#125;;</span><br><span class=\"line\">var b = &#123;b: 43&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">a &lt; b;  // false</span><br><span class=\"line\">a == b;  // false</span><br><span class=\"line\">a &gt; b;  //false</span><br><span class=\"line\"></span><br><span class=\"line\">a &lt;= b;  // true</span><br><span class=\"line\">a &gt;= b;  // true</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"第五章-语法\"><a href=\"#第五章-语法\" class=\"headerlink\" title=\"第五章 语法\"></a>第五章 语法</h3><p>语句都有一个结果值(undefined也算)</p>\n<p>代码块<code>&#123;..&#125;</code>的结果是最后一个语句&#x2F;表达式的结果。换句话说，代码块的返回值就如同<strong>一个隐式的返回</strong>，即返回最后一个语句的结果值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">42</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = (a++);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);  <span class=\"comment\">// 43</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(b);  <span class=\"comment\">// 42</span></span><br></pre></td></tr></table></figure>\n<p>有人误以为可以用括号<code>()</code>将<code>a++</code>的副作用封装起来，例如上例。但是并非如此，<code>()</code>本身并不是一个封装表达式，不会在表达式a++产生副作用之后执行，即便如此a++首先返回42。</p>\n<p><strong>链式赋值</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a, b , c;</span><br><span class=\"line\">a = b = c = <span class=\"number\">42</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> d = e = <span class=\"number\">42</span>;</span><br></pre></td></tr></table></figure>\n\n<p>a， b，c，d，e均被赋值为42。变量 e,没有在作用域中像<code>var e</code> 这样声明过，则<code>var d = e = 42</code>不会对变量e进行声明。</p>\n<p>JavaScript通过标签跳转能够实现goto的部分功能。<code>continue</code>和<code>break</code>语句都可以带一个标签。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">foo</span>: <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">4</span>; i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j=<span class=\"number\">0</span>; j&lt;<span class=\"number\">4</span>; j++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (j == i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span> foo;  <span class=\"comment\">// 跳到foo的下一个循环</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((j * i) % <span class=\"number\">2</span> == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;  <span class=\"comment\">//继续内层循环</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i, j)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意上例：<code>contiue foo</code> 并不是指“跳转到标签foo所在位置继续执行”，而是“执行foo循环的下一轮循环”，所以这里的foo并非goto。</p>\n<p>带标签的循环跳转一个更大的用处在于，和<code>break _</code> 一起使用可以实现从内部循环跳转到外层循环。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">foo</span>: <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">4</span>; i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j=<span class=\"number\">0</span>; j&lt;<span class=\"number\">4</span>; j++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i*j &gt;= <span class=\"number\">3</span>)&#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;stopping!&quot;</span>, i, j);</span><br><span class=\"line\">            <span class=\"keyword\">break</span> foo;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i, j);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意上例：<code>break foo</code> 并不是指“跳转到标签foo所在位置继续执行”，而是“跳出标签foo所在的循环&#x2F;代码块，继续执行后面的代码”，所以这里的foo并非goto。</p>\n<p>标签也可以用于非循环代码块，但是只有<code>break</code>才可以。我们可以对带标签的代码块使用<code>break __</code>，但是不能对带标签的非循环代码块使用<code>continue __</code>， 也不能对不带标签的代码块使用<code>break</code>。</p>\n<p>标签不允许使用双引号。</p>\n<p><strong>运算符优先级</strong></p>\n<ul>\n<li>用 <code>,</code>来连接连接一系列语句的时候，它的优先级最低，其他操作数的优先级都比它高。</li>\n<li><code>&amp;&amp;</code> 运算符优先于 <code>||</code>。而 <code>||</code>的优先级又高于 <code>? :</code>。</li>\n<li><code>? :</code>是右关联，而且它的组合方式会影响返回结果。<code>=</code>也是右关联。</li>\n</ul>\n<p><code>do..while</code>循环后面必须带**<code>;</code>**，而 <code>while</code>和<code>for</code>循环后则不需要。</p>\n<p><strong>try..finally</strong></p>\n<p><code>finally</code>中的代码总会在<code>try</code>之后执行，如果有<code>catch</code>的话则在<code>catch</code>之后执行。即无论出现什么情况最后一定会被调用。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">42</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;nerver runs&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">foo</span>();</span><br><span class=\"line\"><span class=\"comment\">// hello</span></span><br><span class=\"line\"><span class=\"comment\">// 42</span></span><br></pre></td></tr></table></figure>\n\n<p>如果<code>finally</code>中抛出异常（无论是有意还是无意），函数就会在此终止。如果此前<code>try</code>中已有<code>return</code>设置返回值，则该值会被丢弃。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">42</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">throw</span> <span class=\"string\">&quot;Oops!&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;nerver run&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">foo</span>();  <span class=\"comment\">// Uncaught Oops!</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>finally</code>中的<code>return</code>会覆盖<code>try</code>和<code>catch</code>中<code>return</code>的返回值。</li>\n<li>switch表达式的匹配算法与 <code>===</code>相同。</li>\n<li>尽量不要是用<code>arguments</code>，如果非用不可，也切勿同时使用<code>arguments</code>和其对应的命名参数。</li>\n</ul>\n<hr>\n","site":{"data":{}},"excerpt":"<p>《你不知道的JavaScript》系列图书是很早之前一位学长推荐的，从买来之后，一直找各个理由往后拖。</p>\n<p>自己虽然也能写一些js，但是，经过上次面试，才知道，自己的基础很差，当前是认真务实自己已经掌握的技术的基础。一步一个脚印，从头开始。</p>","more":"<h2 id=\"第一部分-类型和语法\"><a href=\"#第一部分-类型和语法\" class=\"headerlink\" title=\"第一部分 类型和语法\"></a>第一部分 类型和语法</h2><h3 id=\"第一章-类型\"><a href=\"#第一章-类型\" class=\"headerlink\" title=\"第一章 类型\"></a>第一章 类型</h3><p><strong>有以下七种内置类型</strong></p>\n<ul>\n<li>空值(null)</li>\n<li>未定义(undefined)</li>\n<li>布尔型(boolean)</li>\n<li>数字(number)</li>\n<li>字符串(string)</li>\n<li>对象(object)</li>\n<li>符号(symbol, ES6新增)</li>\n</ul>\n<p>可以使用 <code>typeof</code> 运算符查看类型</p>\n<p><strong>值和类型</strong></p>\n<p>变量没有类型，但它们持有的值有类型。类型定义了值的行为。</p>\n<p>typeof运算符总是返回一个字符串。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 十进制转换成二进制 */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">12</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a.<span class=\"title function_\">toString</span>(<span class=\"number\">2</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 字符串转换成整数和浮点数注意的地方 */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"string\">&quot;123456red&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"string\">&quot;12.2&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> d = <span class=\"string\">&quot;123&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> e = <span class=\"string\">&quot;ddd&quot;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>([<span class=\"built_in\">parseInt</span>(b), <span class=\"built_in\">parseInt</span>(c), <span class=\"built_in\">parseInt</span>(d), <span class=\"built_in\">parseInt</span>(e)]);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>([<span class=\"built_in\">parseFloat</span>(b), <span class=\"built_in\">parseFloat</span>(c), <span class=\"built_in\">parseFloat</span>(d), <span class=\"built_in\">parseFloat</span>(e)]);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"第二章-值\"><a href=\"#第二章-值\" class=\"headerlink\" title=\"第二章 值\"></a>第二章 值</h3><p><strong>数组</strong></p>\n<p>数组可以容纳任何类型的值，可以是字符串、数字、对象，甚至是其他数组。</p>\n<p>对数组声明后即可向其中加入值，不需要预先设定大小。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [];</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a.<span class=\"property\">length</span>);  <span class=\"comment\">// 0</span></span><br><span class=\"line\">a[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">a[<span class=\"number\">1</span>] = <span class=\"string\">&quot;2&quot;</span>;</span><br><span class=\"line\">a[<span class=\"number\">3</span>] = [<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a.<span class=\"property\">length</span>); <span class=\"comment\">// 4</span></span><br></pre></td></tr></table></figure>\n\n<p>上述代码没有设置 <code>a[2]</code> 单元，那么 <code>a[2]</code> 的值为 <strong>undefined</strong>。</p>\n<p><strong>字符串与数组一些比较</strong></p>\n<p>字符串和数组很相似，它们都是类数组，都有 <code>length</code>属性以及 <code>indexOf()</code>和 <code>concat()</code>方法。</p>\n<p>字符串是不可变的，而数组是可变的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 数组与字符串的对比 */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"string\">&quot;foo&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> g = [<span class=\"string\">&#x27;f&#x27;</span>, <span class=\"string\">&#x27;o&#x27;</span>, <span class=\"string\">&#x27;o&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> h = <span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">join</span>.<span class=\"title function_\">call</span>(f, <span class=\"string\">&quot;-&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">map</span>.<span class=\"title function_\">call</span>(f, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;.&quot;</span></span><br><span class=\"line\">&#125;).<span class=\"title function_\">join</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(&#123;<span class=\"string\">&quot;h&quot;</span>: h, <span class=\"string\">&quot;i&quot;</span>: i&#125;);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(g.<span class=\"title function_\">reverse</span>());  <span class=\"comment\">// 数组符串</span></span><br></pre></td></tr></table></figure>\n<p>数组有一个字符串没有的可变更成员的函数 <code>reverse()</code></p>\n<p><strong>简单字符串的反转实现：</strong></p>\n<p>先将字符串转换成数组，待处理完再将结果转换回字符串</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 简单字符串反转 */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> sReverse = <span class=\"string\">&quot;reverse&quot;</span>.<span class=\"title function_\">split</span>(<span class=\"string\">&quot;&quot;</span>).<span class=\"title function_\">reverse</span>().<span class=\"title function_\">join</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(sReverse);</span><br></pre></td></tr></table></figure>\n\n<p><strong>数字</strong></p>\n<p><code>toFixed()</code> 方法可以指定小数部分的显示位数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">42.49</span>;</span><br><span class=\"line\">a.<span class=\"title function_\">toFixed</span>(<span class=\"number\">0</span>);  <span class=\"comment\">// 43</span></span><br><span class=\"line\">a.<span class=\"title function_\">toFixed</span>(<span class=\"number\">1</span>); <span class=\"comment\">// 42.5</span></span><br><span class=\"line\">a.<span class=\"title function_\">toFixed</span>(<span class=\"number\">3</span>); <span class=\"comment\">// 42.490</span></span><br></pre></td></tr></table></figure>\n<p><strong>小数点后小数部分最后面的0也可以省略。</strong></p>\n<p>注意一下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 无效语法</span></span><br><span class=\"line\"><span class=\"number\">42.</span><span class=\"title function_\">toFixed</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 一下语法都有效</span></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"number\">42</span>).<span class=\"title function_\">toFixed</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"number\">0.42</span>.<span class=\"title function_\">toFixed</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"number\">42.</span>.<span class=\"title function_\">toFixed</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"number\">42</span> .<span class=\"title function_\">toFixed</span>(<span class=\"number\">3</span>); <span class=\"comment\">// 42后有空格</span></span><br></pre></td></tr></table></figure>\n\n<p><code>42.toFixed(3)</code>是无效语法，因为被视为常量42.0的一部分，所以没有 . 属性访问运算符来调用<code>toFixed()</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">0.1</span> + <span class=\"number\">0.2</span> === <span class=\"number\">0.3</span>) <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<p>二进制浮点数中的0.1和0.2并不是十分准确，他们相加的结果并非刚好0.3。</p>\n<p><strong>不是数字的数字</strong></p>\n<p>检查参数是否不是 NaN，也不是数字</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 检查参数是否不是 NaN，也不是数字 */</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"title class_\">Number</span>.<span class=\"property\">isNaN</span>)&#123;</span><br><span class=\"line\">    <span class=\"title class_\">Number</span>.<span class=\"property\">isNaN</span> = <span class=\"keyword\">function</span> (<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">            <span class=\"keyword\">typeof</span> n === <span class=\"string\">&quot;number&quot;</span> &amp;&amp;</span><br><span class=\"line\">            <span class=\"variable language_\">window</span>.<span class=\"built_in\">isNaN</span>(n)</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"built_in\">isNaN</span>(f));</span><br></pre></td></tr></table></figure>\n\n<p>NaN是javaScript中 <strong>唯一</strong>一个不等于自身的值。</p>\n<p><strong>值与引用</strong></p>\n<ul>\n<li>简单值(即标量基本类型值)总是通过值复制的方式赋值&#x2F;传递，包括null、undefined、字符串、数字、布尔和ES6中的symbol。</li>\n<li>复合值总是通过引用复制的方式来赋值&#x2F;传递，包括对象（包括数组和封装对象）和函数。</li>\n</ul>\n<p>由于引用指向的是值本身而非变量，所以一个引用无法更改另一个引用的人指向。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(&#123;<span class=\"string\">&quot;a&quot;</span>: a,<span class=\"string\">&quot;b&quot;</span>: b&#125;); <span class=\"comment\">// &#123;&quot;a&quot;: [1, 2, 3], &quot;b&quot;: [1, 2, 3]&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">b = [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(&#123;<span class=\"string\">&quot;a&quot;</span>: a,<span class=\"string\">&quot;b&quot;</span>: b&#125;); <span class=\"comment\">// &#123;&quot;a&quot;: [1, 2, 3], &quot;b&quot;: [4, 5, 6]&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>注意一下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\">x</span>) &#123;</span><br><span class=\"line\">    x.<span class=\"title function_\">push</span>(<span class=\"number\">4</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x); <span class=\"comment\">// [1, 2, 3, 4]</span></span><br><span class=\"line\"></span><br><span class=\"line\">    x = [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]; <span class=\"comment\">// x赋值新的数组，所以对以前数组没有产生影响。</span></span><br><span class=\"line\">    x.<span class=\"title function_\">push</span>(<span class=\"number\">7</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x); <span class=\"comment\">// [4, 5, 6, 7]</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"title function_\">foo</span>(a);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);  <span class=\"comment\">// [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure>\n<p>区别：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\">x</span>) &#123;</span><br><span class=\"line\">    x.<span class=\"title function_\">push</span>(<span class=\"number\">4</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x); <span class=\"comment\">// [1, 2, 3, 4]</span></span><br><span class=\"line\"></span><br><span class=\"line\">    x.<span class=\"property\">length</span> = <span class=\"number\">0</span>; <span class=\"comment\">// 清空数组，这里更改了a指向的数组的长度</span></span><br><span class=\"line\">    x.<span class=\"title function_\">push</span>(<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x); <span class=\"comment\">// [4, 5, 6, 7]</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"title function_\">foo</span>(a);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);  <span class=\"comment\">// [4, 5, 6, 7]</span></span><br></pre></td></tr></table></figure>\n<p>从上例可以看出，<code>x.length = 0</code> 和 <code>x.push(4, 5, 6, 7)</code> 并没有创建一个新的数组，而是更改了当前的数组。</p>\n<p><strong>补充</strong></p>\n<p>所有变量在赋值之前默认值都是 <code>undefined</code>。void运算符返回undefined。</p>\n<p>当JavaScript执行一个函数时，它首先会查找函数内所有的变量声明，它使用初始值 <strong>undefined</strong> 创建变量。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">main</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(foo);  <span class=\"comment\">// undefined</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> foo = <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">foo</span>);  <span class=\"comment\">// 1</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">foo</span> = <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">main</span>();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"第三章-原生函数\"><a href=\"#第三章-原生函数\" class=\"headerlink\" title=\"第三章 原生函数\"></a>第三章 原生函数</h3><p>通过构造函数(如new String(“abc”))创建出来的是封装了基本类型值的封装对象。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"title class_\">String</span>(<span class=\"string\">&quot;abc&quot;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> a);  <span class=\"comment\">// 是&quot;Object&quot;， 不是 &quot;String&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a <span class=\"keyword\">instanceof</span> <span class=\"title class_\">String</span>);  <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"title function_\">toString</span>().<span class=\"title function_\">call</span>(a);  <span class=\"comment\">// &quot;[object String]&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>封装对象包装</strong></p>\n<p>由于基本类型值没有<code>.length</code>和<code>.toString()</code>这样的属性和方法，需要通过封装对象才能访问，<br>此时js会自动为基本类型值包装一个封装对象。<br>（基本类型能够使用<code>.length</code>, <code>.toString()</code>等属性和方法，是因为js自动为其包装一个封装对象。）</p>\n<p>一般情况下，我们不需要直接使封装对象。</p>\n<p>在需要用到封装对象中的基本类型值的地方会发生隐性<strong>拆封</strong>。</p>\n<p><strong>原生函数作为构造函数</strong></p>\n<ul>\n<li>关于数组、对象、函数和正则表达式，我们通常喜欢以常量的形式来创建它们。</li>\n<li>应该尽量避免使用构造函数。</li>\n<li>Array构造函数只带一个数字参数的时候，该参数会被作为数组的预设长度，而非只充当数组中的一个元素。</li>\n<li>永远<strong>不要</strong>创建和使用<strong>空</strong>单元数组。</li>\n<li>强烈建议使用常量形式来定义正则表达式，这样不仅语法简单，执行效率也更高。因为js引擎在代码执行前会对他们进行预编译和缓存。</li>\n<li>创建日期对象必须使用<code>new Date()</code>。</li>\n<li>错误对象<code>Error()</code>通常与throw一起使用。</li>\n</ul>\n<p><strong>常用的字符串对象方法</strong></p>\n<ul>\n<li>indexof() 在字符串中找到指定子字符串的位置</li>\n<li>chartAt() 获得字符串指定位置上的字符</li>\n<li>substr()、substring()、slice() 获取字符串的指定部分</li>\n<li>toUpperCase()、toLowerCase() 将字符串转换为大写或小写</li>\n<li>trim() 去掉字符串前后的空格，返回新的字符串</li>\n</ul>\n<h3 id=\"第四章-强制类型转换\"><a href=\"#第四章-强制类型转换\" class=\"headerlink\" title=\"第四章 强制类型转换\"></a>第四章 强制类型转换</h3><p><strong>抽象值操作</strong></p>\n<p><strong>toString</strong></p>\n<p>负责处理非字符串到字符串的强制类型转换。</p>\n<ul>\n<li>基本类型值： <code>null</code> 转换为<code>&quot;null&quot;</code>，undefined转换为<code>&quot;undefined&quot;</code>，<code>true</code>转换为<code>&quot;true&quot;</code></li>\n<li>普通对象：如果对象有自己的<code>toString()</code>方法，字符串化时就会调用该方法并返回其值，否则返回内部属相<code>[[Class]]</code>的值。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a); <span class=\"comment\">// &quot;1, 2, 3&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>JSON字符串化</strong></p>\n<p>工具函数 <code>JSON.stringify(..)</code> 在将JSON对象序列化为字符串时也用到了toString，但JSON字符串并非严格意义上的强制类型转换。对大多数简单值来说，效果基本相同。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(<span class=\"number\">45</span>); <span class=\"comment\">// &quot;45&quot;</span></span><br><span class=\"line\"><span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(<span class=\"literal\">null</span>);  <span class=\"comment\">// &quot;null&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>JSON.stringify()</code>在对象中遇到<strong>undefined</strong>、<strong>function</strong>、<strong>symbol</strong>时会自动将其忽略，在数组中则会返回<strong>null</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(<span class=\"literal\">undefined</span>);  <span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;&#125;);  <span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>([<span class=\"number\">1</span>, <span class=\"literal\">undefined</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;&#125;, <span class=\"number\">4</span>]); <span class=\"comment\">// &quot;[1, null, null, 4]&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>对包含循环引用的对象执行JSON.stringify()会出错。</p>\n<p>我们可以向<code>JSON.stringify()</code>传递一个可选参数replacer，它可以是数组或者函数，用来指定对象序列化过程中哪些属性则应给被处理，哪些应该被排除。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">    <span class=\"attr\">b</span>: <span class=\"number\">45</span>,</span><br><span class=\"line\">    <span class=\"attr\">c</span>: <span class=\"string\">&quot;45&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">d</span>: [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(a, [<span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>]);  <span class=\"comment\">// &quot;&#123;&quot;b&quot;:45,&quot;c&quot;:&quot;45&quot;&#125;&quot;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>字符串、数字、布尔值和null的<code>JSON.stringify()</code>规则与toString基本相同。</li>\n<li>如果传递给<code>JSON.stringity()</code>的对象包含了<code>toJSON()</code>方法，那么该方法会在字符串化前调用，以便将对象转换成安全的JSON值</li>\n</ul>\n<p><strong>ToNumber</strong></p>\n<p>true转换成1，false转换为0.undefined转换为NaN，null转换为0。</p>\n<p>处理失败时返回 <strong>NAN</strong> (处理数字常量失败时会产生错误语法)；对以0开头的十六位进制数不按照十六位进制处理。而是按照十进制。</p>\n<p>对于对象：首先检查该值是否有<code>valueOf()</code>方法，如果有并且返回基本类型值，就使用该值进行强制类型转换。如果没有就是用<code>toString()</code>的返回值(如果存在)来进行强制类型转换。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">    <span class=\"attr\">valueOf</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&quot;42&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = &#123;</span><br><span class=\"line\">    <span class=\"attr\">toString</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&quot;42&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> c = [<span class=\"number\">4</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\">c.<span class=\"property\">toString</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">join</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Number</span>(a);  <span class=\"comment\">// 42</span></span><br><span class=\"line\"><span class=\"title class_\">Number</span>(b);  <span class=\"comment\">// 42</span></span><br><span class=\"line\"><span class=\"title class_\">Number</span>(c);  <span class=\"comment\">// 42</span></span><br><span class=\"line\"><span class=\"title class_\">Number</span>([]);  <span class=\"comment\">// 0</span></span><br><span class=\"line\"><span class=\"title class_\">Number</span>([<span class=\"string\">&quot;abc&quot;</span>]);  <span class=\"comment\">// NaN  </span></span><br></pre></td></tr></table></figure>\n\n<p><strong>ToBoolean</strong></p>\n<p>假值：</p>\n<ul>\n<li>undefined</li>\n<li>null</li>\n<li>false</li>\n<li>+0、-0和NaN</li>\n<li>“”</li>\n</ul>\n<p>假值的布尔类型转换结果为false,假值列表以外的值都是真值。</p>\n<p><strong>显式强制类型转换</strong></p>\n<p>字符串与数字之间的显式转换</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"string\">&quot;3.14&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> d = +c;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> c);  <span class=\"comment\">// string</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> d);  <span class=\"comment\">// number</span></span><br></pre></td></tr></table></figure>\n\n<p>上例中<code>+c</code> 是 <strong>+</strong> 运算符的一元形式。**+** 运算符显式的将c转换为数字，而非数字加法运算；另一个常见的用途就是将日期对象强制转换为数字，返回结果为Unix时间戳，以毫秒为单位（从1970年1月1日00:00:00UTC到当前时间），但是不建议使用。</p>\n<p><strong>隐式强制类型转换</strong></p>\n<p>隐式强制类型转换的作用是减少冗余，让代码更简洁。</p>\n<p>如果+的其中一个操作数是字符串（或者是通过一些步骤可以得到字符串），则执行字符串拼接，否则执行数字加法。</p>\n<p>我们可以将数字和空字符串<code>&quot;&quot;</code>相+将其转换为字符串。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">42</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a + <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(b); <span class=\"comment\">// &quot;42&quot;</span></span><br></pre></td></tr></table></figure>\n<p>下列情况会发生<strong>布尔值隐式强制类型转换</strong>：</p>\n<ul>\n<li>**<code>if()</code>**语句中的条件判断表达式。</li>\n<li>**<code>for(..; ..; ..;)</code>**语句中的条件判断表达式。</li>\n<li>**<code>while(..)</code><strong>和</strong><code>do..while(..)</code>**循环中的条件表达式。</li>\n<li>**<code>? : </code>**中的条件判读表达式。</li>\n<li>逻辑运算符 <strong><code>||</code></strong> 和 <strong><code>&amp;&amp;</code></strong> 左边的操作数。</li>\n</ul>\n<p><strong><code>||</code>和<code>&amp;&amp;</code></strong></p>\n<p>在JavaScript中它们返回的并不一定是布尔类型，而是两个操作数其中一个的值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">42</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"string\">&#x27;abc&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a || b);  <span class=\"comment\">// 42</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a &amp;&amp; b);  <span class=\"comment\">// &#x27;abc&#x27;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(c || b);  <span class=\"comment\">// &#x27;abc&#x27;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(c &amp;&amp; b);  <span class=\"comment\">// null</span></span><br></pre></td></tr></table></figure>\n<p><strong><code>||</code></strong> 和 <strong><code>&amp;&amp;</code></strong> 首先对第一个操作数执行条件判断。</p>\n<ul>\n<li>对于 <strong><code>||</code></strong> 来说， 如果条件判断结果为 <code>true</code> 就返回第一个操作数的值，否则就返回第二个操作数的值。</li>\n<li>对于 <strong><code>&amp;&amp;</code></strong> 则相反，如果条件判断结果为 <code>true</code>就返回第二个操作数的值，否则就返回第一个操作数的值。</li>\n</ul>\n<p>换一个角度理解：</p>\n<p><code>a || b</code> 相当于 <code>a ? a : b</code>， 注意的是a只执行一次。</p>\n<p><code>a &amp;&amp; b</code> 相当于 <code>a ? b : a</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\">a, b</span>) &#123;</span><br><span class=\"line\">    a = a || <span class=\"string\">&quot;hello&quot;</span>;</span><br><span class=\"line\">    b = b || <span class=\"string\">&quot;world&quot;</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a + <span class=\"string\">&quot; &quot;</span> + b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">foo</span>();  <span class=\"comment\">// &quot;hello world&quot;</span></span><br><span class=\"line\"><span class=\"title function_\">foo</span>(<span class=\"string\">&quot;yeah&quot;</span>, <span class=\"string\">&quot;yeah&quot;</span>);  <span class=\"comment\">// &quot;yeah yeah&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>宽松相等和严格相等</strong></p>\n<p><strong><code>==</code>允许在相等比较中进行强制类型转换，而<code>===</code>不允许</strong></p>\n<p>如果两个值的类型不同，我们就需要考虑有没有强制类型转换的必要，有就用 <code>==</code>，没有就用<code>===</code>，不用在乎性能。</p>\n<p>容易出错的一个地方：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">&quot;42&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a == b);  <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a == c);  <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>如果Type(x)是布尔类型，则返回<code>ToNumber(x) == y</code>的结果。</li>\n<li>如果Type(y)是布尔类型，则返回<code>x == ToNumber(y)</code>的结果。</li>\n</ul>\n<p><strong>避免使用 <code>== true</code> 和<code>== false</code></strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">&quot;42&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">/* 建议使用一下显示 */</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(a)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//  ..</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(!!a)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//  ..</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"title class_\">Boolean</span>(a))&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ..</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在 <code>==</code> 中 <strong>null</strong> 和 <strong>undefined</strong> 相等，除此之外其他值都不存在这种情况。</p>\n<p>注意：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"title class_\">Number</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">valueOf</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> i++ ;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> <span class=\"title class_\">Number</span>(<span class=\"number\">42</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (a == <span class=\"number\">2</span> &amp;&amp; a == <span class=\"number\">3</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;happened&quot;</span>);  <span class=\"comment\">// &quot;happened&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"title class_\">Number</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">valueOf</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> i++ ;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"title class_\">Number</span>(<span class=\"number\">42</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (a == <span class=\"number\">2</span> &amp;&amp; a == <span class=\"number\">3</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;happened&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>几种特殊情况：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot; == 0;  // true</span><br><span class=\"line\">&quot;&quot; == []; // true</span><br><span class=\"line\">0 == [];  // true</span><br></pre></td></tr></table></figure>\n<p>这几种特殊情况，在实际开发中会不小心使用上，特别是 <code>== &quot;&quot;</code>和 <code>== 0</code>，应当注意。</p>\n<p>以下两个原则：</p>\n<ul>\n<li>如果两边的值中有<code>true</code>或者<code>false</code>，千万不要使用 <code>==</code>。</li>\n<li>如果两边的值中有<code>[]</code>、<code>&quot;&quot;</code>或者<code>0</code>，尽量不要用<code>==</code>。</li>\n</ul>\n<p>这时最好用<code>===</code></p>\n<p>在js中 <code>&lt;=</code>是<strong>不大于</strong>的意思(即<code>!(a &gt; b)</code>，处理<code>!(b &lt; a)</code>)。同理<code>a&gt;= b</code>处理为<code>b &lt;= a</code>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = &#123;b: 42&#125;;</span><br><span class=\"line\">var b = &#123;b: 43&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">a &lt; b;  // false</span><br><span class=\"line\">a == b;  // false</span><br><span class=\"line\">a &gt; b;  //false</span><br><span class=\"line\"></span><br><span class=\"line\">a &lt;= b;  // true</span><br><span class=\"line\">a &gt;= b;  // true</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"第五章-语法\"><a href=\"#第五章-语法\" class=\"headerlink\" title=\"第五章 语法\"></a>第五章 语法</h3><p>语句都有一个结果值(undefined也算)</p>\n<p>代码块<code>&#123;..&#125;</code>的结果是最后一个语句&#x2F;表达式的结果。换句话说，代码块的返回值就如同<strong>一个隐式的返回</strong>，即返回最后一个语句的结果值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">42</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = (a++);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);  <span class=\"comment\">// 43</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(b);  <span class=\"comment\">// 42</span></span><br></pre></td></tr></table></figure>\n<p>有人误以为可以用括号<code>()</code>将<code>a++</code>的副作用封装起来，例如上例。但是并非如此，<code>()</code>本身并不是一个封装表达式，不会在表达式a++产生副作用之后执行，即便如此a++首先返回42。</p>\n<p><strong>链式赋值</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a, b , c;</span><br><span class=\"line\">a = b = c = <span class=\"number\">42</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> d = e = <span class=\"number\">42</span>;</span><br></pre></td></tr></table></figure>\n\n<p>a， b，c，d，e均被赋值为42。变量 e,没有在作用域中像<code>var e</code> 这样声明过，则<code>var d = e = 42</code>不会对变量e进行声明。</p>\n<p>JavaScript通过标签跳转能够实现goto的部分功能。<code>continue</code>和<code>break</code>语句都可以带一个标签。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">foo</span>: <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">4</span>; i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j=<span class=\"number\">0</span>; j&lt;<span class=\"number\">4</span>; j++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (j == i)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span> foo;  <span class=\"comment\">// 跳到foo的下一个循环</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((j * i) % <span class=\"number\">2</span> == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;  <span class=\"comment\">//继续内层循环</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i, j)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意上例：<code>contiue foo</code> 并不是指“跳转到标签foo所在位置继续执行”，而是“执行foo循环的下一轮循环”，所以这里的foo并非goto。</p>\n<p>带标签的循环跳转一个更大的用处在于，和<code>break _</code> 一起使用可以实现从内部循环跳转到外层循环。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">foo</span>: <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">4</span>; i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j=<span class=\"number\">0</span>; j&lt;<span class=\"number\">4</span>; j++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i*j &gt;= <span class=\"number\">3</span>)&#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;stopping!&quot;</span>, i, j);</span><br><span class=\"line\">            <span class=\"keyword\">break</span> foo;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i, j);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意上例：<code>break foo</code> 并不是指“跳转到标签foo所在位置继续执行”，而是“跳出标签foo所在的循环&#x2F;代码块，继续执行后面的代码”，所以这里的foo并非goto。</p>\n<p>标签也可以用于非循环代码块，但是只有<code>break</code>才可以。我们可以对带标签的代码块使用<code>break __</code>，但是不能对带标签的非循环代码块使用<code>continue __</code>， 也不能对不带标签的代码块使用<code>break</code>。</p>\n<p>标签不允许使用双引号。</p>\n<p><strong>运算符优先级</strong></p>\n<ul>\n<li>用 <code>,</code>来连接连接一系列语句的时候，它的优先级最低，其他操作数的优先级都比它高。</li>\n<li><code>&amp;&amp;</code> 运算符优先于 <code>||</code>。而 <code>||</code>的优先级又高于 <code>? :</code>。</li>\n<li><code>? :</code>是右关联，而且它的组合方式会影响返回结果。<code>=</code>也是右关联。</li>\n</ul>\n<p><code>do..while</code>循环后面必须带**<code>;</code>**，而 <code>while</code>和<code>for</code>循环后则不需要。</p>\n<p><strong>try..finally</strong></p>\n<p><code>finally</code>中的代码总会在<code>try</code>之后执行，如果有<code>catch</code>的话则在<code>catch</code>之后执行。即无论出现什么情况最后一定会被调用。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">42</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;nerver runs&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">foo</span>();</span><br><span class=\"line\"><span class=\"comment\">// hello</span></span><br><span class=\"line\"><span class=\"comment\">// 42</span></span><br></pre></td></tr></table></figure>\n\n<p>如果<code>finally</code>中抛出异常（无论是有意还是无意），函数就会在此终止。如果此前<code>try</code>中已有<code>return</code>设置返回值，则该值会被丢弃。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">42</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">throw</span> <span class=\"string\">&quot;Oops!&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;nerver run&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">foo</span>();  <span class=\"comment\">// Uncaught Oops!</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>finally</code>中的<code>return</code>会覆盖<code>try</code>和<code>catch</code>中<code>return</code>的返回值。</li>\n<li>switch表达式的匹配算法与 <code>===</code>相同。</li>\n<li>尽量不要是用<code>arguments</code>，如果非用不可，也切勿同时使用<code>arguments</code>和其对应的命名参数。</li>\n</ul>\n<hr>"},{"title":"使用Github的Actions自动构建个人博客","date":"2022-11-01T16:00:00.000Z","_content":"\n个人博客之前使用的是 hexo+travis自动构建github page，但是由于长时间未更新内容，travis也进行了迁移和收费等变更，导致更新blog-src的博客文章之后，不能自动生成静态网页并推送到zwwangoo.github.io这个仓库，正巧发现github自带的Actions功能已经能满足我的需求，那么简单折腾了一下，现在就不需要借用travis啦。\n之前的部署方式：[hexo+travis自动构建github page](https://zwwangoo.github.io/2018/04/21/hexo+travis自动构建github%20page/)\n\n本文参考: [Github Actions 通过 SSH 自动备份到代码托管网站](https://blog.csdn.net/z_johnny/article/details/104061608)\n\n## 前提条件：\n\n拥有github帐号，并创建了相关仓库，这里以我个人的为例：\n- `zwwangoo.github.io` github page仓库，这里存放编译生成的静态网站相关信息，访问https://zwwangoo.github.io看到的博客就是由此提供。\n- `blog-src` 博客源码存放的地方，也就是hexo相关的模板。\n\n<!--more-->\n\n## 秘钥准备\n\n为了方便运行GitHub Actions时登录GitHub账号，我们使用SSH方式登录。就是要把设备的私钥交给GitHub Actions，公钥交给GitHub，需要去Settings里去配置。\n\n使用ssh-keygen生成一组公私秘钥对：\n\n```\nssh-keygen -t rsa -C \"zwwangoo@gmail.com\"\n```\n\n- 生成的密钥一定要保存好了，最重要的是私钥，配置公钥，应该已经配好，不然如何上到的项目资源，配置路径：github网站–>Settings–>SSH and GPG keys\n- 配置仓库私钥，blog私有仓库的 Settings --> Secrets --> Actions 里添加私钥Secrets，以名称`token_Private_Keys`命名，输入对应的值，这个值就是私钥！\n\n## 配置GitHub Actions\n\nGitHub Actions 有一些自己的术语。\n\n- workflow （工作流程）：持续集成一次运行的过程，就是一个 workflow。\n- job （任务）：一个 workflow 由一个或多个 jobs 构成，含义是一次持续集成的运行，可以完成多个任务。\n- step（步骤）：每个 job 由多个 step 构成，一步步完成。\n- action （动作）：每个 step 可以依次执行一个或多个命令（action）\n\n在blog仓库选择Actions --> \"Publish Node.js Package\" 点击Configure之后按照以下内容填写：\n\n```\nname: Node.js Package\n\non:\n  push:\n    branches:\n    - main\n    - master\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 16\n      - name: Setup Git Infomation\n        run: | \n          git config --global user.name 'zwwangoo'\n          git config --global user.email 'w_angzhiwen@163.com' \n        \n      - name: Setup SSH Private Key\n        env:\n          token_Private_Keys: ${{ secrets.token_Private_Keys }}\n        run: |\n          mkdir -p ~/.ssh/\n          echo \"$token_Private_Keys\" > ~/.ssh/id_rsa \n          chmod 600 ~/.ssh/id_rsa\n          ssh-keyscan github.com >> ~/.ssh/known_hosts\n      - name: npm install, and push\n        run: |\n          npm install hexo hexo-cli\n          node_modules/hexo/bin/hexo d -g\n```\n\n注意修改你的git config 的 user.name 和 user.email\n提交文件","source":"_posts/使用Github的Actions自动构建个人博客.md","raw":"---\ntitle: 使用Github的Actions自动构建个人博客\ndate: 2022-11-02\ntags: [github,blog]\n---\n\n个人博客之前使用的是 hexo+travis自动构建github page，但是由于长时间未更新内容，travis也进行了迁移和收费等变更，导致更新blog-src的博客文章之后，不能自动生成静态网页并推送到zwwangoo.github.io这个仓库，正巧发现github自带的Actions功能已经能满足我的需求，那么简单折腾了一下，现在就不需要借用travis啦。\n之前的部署方式：[hexo+travis自动构建github page](https://zwwangoo.github.io/2018/04/21/hexo+travis自动构建github%20page/)\n\n本文参考: [Github Actions 通过 SSH 自动备份到代码托管网站](https://blog.csdn.net/z_johnny/article/details/104061608)\n\n## 前提条件：\n\n拥有github帐号，并创建了相关仓库，这里以我个人的为例：\n- `zwwangoo.github.io` github page仓库，这里存放编译生成的静态网站相关信息，访问https://zwwangoo.github.io看到的博客就是由此提供。\n- `blog-src` 博客源码存放的地方，也就是hexo相关的模板。\n\n<!--more-->\n\n## 秘钥准备\n\n为了方便运行GitHub Actions时登录GitHub账号，我们使用SSH方式登录。就是要把设备的私钥交给GitHub Actions，公钥交给GitHub，需要去Settings里去配置。\n\n使用ssh-keygen生成一组公私秘钥对：\n\n```\nssh-keygen -t rsa -C \"zwwangoo@gmail.com\"\n```\n\n- 生成的密钥一定要保存好了，最重要的是私钥，配置公钥，应该已经配好，不然如何上到的项目资源，配置路径：github网站–>Settings–>SSH and GPG keys\n- 配置仓库私钥，blog私有仓库的 Settings --> Secrets --> Actions 里添加私钥Secrets，以名称`token_Private_Keys`命名，输入对应的值，这个值就是私钥！\n\n## 配置GitHub Actions\n\nGitHub Actions 有一些自己的术语。\n\n- workflow （工作流程）：持续集成一次运行的过程，就是一个 workflow。\n- job （任务）：一个 workflow 由一个或多个 jobs 构成，含义是一次持续集成的运行，可以完成多个任务。\n- step（步骤）：每个 job 由多个 step 构成，一步步完成。\n- action （动作）：每个 step 可以依次执行一个或多个命令（action）\n\n在blog仓库选择Actions --> \"Publish Node.js Package\" 点击Configure之后按照以下内容填写：\n\n```\nname: Node.js Package\n\non:\n  push:\n    branches:\n    - main\n    - master\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 16\n      - name: Setup Git Infomation\n        run: | \n          git config --global user.name 'zwwangoo'\n          git config --global user.email 'w_angzhiwen@163.com' \n        \n      - name: Setup SSH Private Key\n        env:\n          token_Private_Keys: ${{ secrets.token_Private_Keys }}\n        run: |\n          mkdir -p ~/.ssh/\n          echo \"$token_Private_Keys\" > ~/.ssh/id_rsa \n          chmod 600 ~/.ssh/id_rsa\n          ssh-keyscan github.com >> ~/.ssh/known_hosts\n      - name: npm install, and push\n        run: |\n          npm install hexo hexo-cli\n          node_modules/hexo/bin/hexo d -g\n```\n\n注意修改你的git config 的 user.name 和 user.email\n提交文件","slug":"使用Github的Actions自动构建个人博客","published":1,"updated":"2022-11-01T16:41:04.786Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluqa1hja003rrlog2ddkgchc","content":"<p>个人博客之前使用的是 hexo+travis自动构建github page，但是由于长时间未更新内容，travis也进行了迁移和收费等变更，导致更新blog-src的博客文章之后，不能自动生成静态网页并推送到zwwangoo.github.io这个仓库，正巧发现github自带的Actions功能已经能满足我的需求，那么简单折腾了一下，现在就不需要借用travis啦。<br>之前的部署方式：<a href=\"https://zwwangoo.github.io/2018/04/21/hexo+travis%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BAgithub%20page/\">hexo+travis自动构建github page</a></p>\n<p>本文参考: <a href=\"https://blog.csdn.net/z_johnny/article/details/104061608\">Github Actions 通过 SSH 自动备份到代码托管网站</a></p>\n<h2 id=\"前提条件：\"><a href=\"#前提条件：\" class=\"headerlink\" title=\"前提条件：\"></a>前提条件：</h2><p>拥有github帐号，并创建了相关仓库，这里以我个人的为例：</p>\n<ul>\n<li><code>zwwangoo.github.io</code> github page仓库，这里存放编译生成的静态网站相关信息，访问<a href=\"https://zwwangoo.github.io看到的博客就是由此提供./\">https://zwwangoo.github.io看到的博客就是由此提供。</a></li>\n<li><code>blog-src</code> 博客源码存放的地方，也就是hexo相关的模板。</li>\n</ul>\n<span id=\"more\"></span>\n\n<h2 id=\"秘钥准备\"><a href=\"#秘钥准备\" class=\"headerlink\" title=\"秘钥准备\"></a>秘钥准备</h2><p>为了方便运行GitHub Actions时登录GitHub账号，我们使用SSH方式登录。就是要把设备的私钥交给GitHub Actions，公钥交给GitHub，需要去Settings里去配置。</p>\n<p>使用ssh-keygen生成一组公私秘钥对：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C &quot;zwwangoo@gmail.com&quot;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>生成的密钥一定要保存好了，最重要的是私钥，配置公钥，应该已经配好，不然如何上到的项目资源，配置路径：github网站–&gt;Settings–&gt;SSH and GPG keys</li>\n<li>配置仓库私钥，blog私有仓库的 Settings –&gt; Secrets –&gt; Actions 里添加私钥Secrets，以名称<code>token_Private_Keys</code>命名，输入对应的值，这个值就是私钥！</li>\n</ul>\n<h2 id=\"配置GitHub-Actions\"><a href=\"#配置GitHub-Actions\" class=\"headerlink\" title=\"配置GitHub Actions\"></a>配置GitHub Actions</h2><p>GitHub Actions 有一些自己的术语。</p>\n<ul>\n<li>workflow （工作流程）：持续集成一次运行的过程，就是一个 workflow。</li>\n<li>job （任务）：一个 workflow 由一个或多个 jobs 构成，含义是一次持续集成的运行，可以完成多个任务。</li>\n<li>step（步骤）：每个 job 由多个 step 构成，一步步完成。</li>\n<li>action （动作）：每个 step 可以依次执行一个或多个命令（action）</li>\n</ul>\n<p>在blog仓库选择Actions –&gt; “Publish Node.js Package” 点击Configure之后按照以下内容填写：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name: Node.js Package</span><br><span class=\"line\"></span><br><span class=\"line\">on:</span><br><span class=\"line\">  push:</span><br><span class=\"line\">    branches:</span><br><span class=\"line\">    - main</span><br><span class=\"line\">    - master</span><br><span class=\"line\"></span><br><span class=\"line\">jobs:</span><br><span class=\"line\">  build:</span><br><span class=\"line\">    runs-on: ubuntu-latest</span><br><span class=\"line\">    steps:</span><br><span class=\"line\">      - uses: actions/checkout@v3</span><br><span class=\"line\">      - uses: actions/setup-node@v3</span><br><span class=\"line\">        with:</span><br><span class=\"line\">          node-version: 16</span><br><span class=\"line\">      - name: Setup Git Infomation</span><br><span class=\"line\">        run: | </span><br><span class=\"line\">          git config --global user.name &#x27;zwwangoo&#x27;</span><br><span class=\"line\">          git config --global user.email &#x27;w_angzhiwen@163.com&#x27; </span><br><span class=\"line\">        </span><br><span class=\"line\">      - name: Setup SSH Private Key</span><br><span class=\"line\">        env:</span><br><span class=\"line\">          token_Private_Keys: $&#123;&#123; secrets.token_Private_Keys &#125;&#125;</span><br><span class=\"line\">        run: |</span><br><span class=\"line\">          mkdir -p ~/.ssh/</span><br><span class=\"line\">          echo &quot;$token_Private_Keys&quot; &gt; ~/.ssh/id_rsa </span><br><span class=\"line\">          chmod 600 ~/.ssh/id_rsa</span><br><span class=\"line\">          ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts</span><br><span class=\"line\">      - name: npm install, and push</span><br><span class=\"line\">        run: |</span><br><span class=\"line\">          npm install hexo hexo-cli</span><br><span class=\"line\">          node_modules/hexo/bin/hexo d -g</span><br></pre></td></tr></table></figure>\n\n<p>注意修改你的git config 的 user.name 和 user.email<br>提交文件</p>\n","site":{"data":{}},"excerpt":"<p>个人博客之前使用的是 hexo+travis自动构建github page，但是由于长时间未更新内容，travis也进行了迁移和收费等变更，导致更新blog-src的博客文章之后，不能自动生成静态网页并推送到zwwangoo.github.io这个仓库，正巧发现github自带的Actions功能已经能满足我的需求，那么简单折腾了一下，现在就不需要借用travis啦。<br>之前的部署方式：<a href=\"https://zwwangoo.github.io/2018/04/21/hexo+travis%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BAgithub%20page/\">hexo+travis自动构建github page</a></p>\n<p>本文参考: <a href=\"https://blog.csdn.net/z_johnny/article/details/104061608\">Github Actions 通过 SSH 自动备份到代码托管网站</a></p>\n<h2 id=\"前提条件：\"><a href=\"#前提条件：\" class=\"headerlink\" title=\"前提条件：\"></a>前提条件：</h2><p>拥有github帐号，并创建了相关仓库，这里以我个人的为例：</p>\n<ul>\n<li><code>zwwangoo.github.io</code> github page仓库，这里存放编译生成的静态网站相关信息，访问<a href=\"https://zwwangoo.github.io看到的博客就是由此提供./\">https://zwwangoo.github.io看到的博客就是由此提供。</a></li>\n<li><code>blog-src</code> 博客源码存放的地方，也就是hexo相关的模板。</li>\n</ul>","more":"<h2 id=\"秘钥准备\"><a href=\"#秘钥准备\" class=\"headerlink\" title=\"秘钥准备\"></a>秘钥准备</h2><p>为了方便运行GitHub Actions时登录GitHub账号，我们使用SSH方式登录。就是要把设备的私钥交给GitHub Actions，公钥交给GitHub，需要去Settings里去配置。</p>\n<p>使用ssh-keygen生成一组公私秘钥对：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C &quot;zwwangoo@gmail.com&quot;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>生成的密钥一定要保存好了，最重要的是私钥，配置公钥，应该已经配好，不然如何上到的项目资源，配置路径：github网站–&gt;Settings–&gt;SSH and GPG keys</li>\n<li>配置仓库私钥，blog私有仓库的 Settings –&gt; Secrets –&gt; Actions 里添加私钥Secrets，以名称<code>token_Private_Keys</code>命名，输入对应的值，这个值就是私钥！</li>\n</ul>\n<h2 id=\"配置GitHub-Actions\"><a href=\"#配置GitHub-Actions\" class=\"headerlink\" title=\"配置GitHub Actions\"></a>配置GitHub Actions</h2><p>GitHub Actions 有一些自己的术语。</p>\n<ul>\n<li>workflow （工作流程）：持续集成一次运行的过程，就是一个 workflow。</li>\n<li>job （任务）：一个 workflow 由一个或多个 jobs 构成，含义是一次持续集成的运行，可以完成多个任务。</li>\n<li>step（步骤）：每个 job 由多个 step 构成，一步步完成。</li>\n<li>action （动作）：每个 step 可以依次执行一个或多个命令（action）</li>\n</ul>\n<p>在blog仓库选择Actions –&gt; “Publish Node.js Package” 点击Configure之后按照以下内容填写：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name: Node.js Package</span><br><span class=\"line\"></span><br><span class=\"line\">on:</span><br><span class=\"line\">  push:</span><br><span class=\"line\">    branches:</span><br><span class=\"line\">    - main</span><br><span class=\"line\">    - master</span><br><span class=\"line\"></span><br><span class=\"line\">jobs:</span><br><span class=\"line\">  build:</span><br><span class=\"line\">    runs-on: ubuntu-latest</span><br><span class=\"line\">    steps:</span><br><span class=\"line\">      - uses: actions/checkout@v3</span><br><span class=\"line\">      - uses: actions/setup-node@v3</span><br><span class=\"line\">        with:</span><br><span class=\"line\">          node-version: 16</span><br><span class=\"line\">      - name: Setup Git Infomation</span><br><span class=\"line\">        run: | </span><br><span class=\"line\">          git config --global user.name &#x27;zwwangoo&#x27;</span><br><span class=\"line\">          git config --global user.email &#x27;w_angzhiwen@163.com&#x27; </span><br><span class=\"line\">        </span><br><span class=\"line\">      - name: Setup SSH Private Key</span><br><span class=\"line\">        env:</span><br><span class=\"line\">          token_Private_Keys: $&#123;&#123; secrets.token_Private_Keys &#125;&#125;</span><br><span class=\"line\">        run: |</span><br><span class=\"line\">          mkdir -p ~/.ssh/</span><br><span class=\"line\">          echo &quot;$token_Private_Keys&quot; &gt; ~/.ssh/id_rsa </span><br><span class=\"line\">          chmod 600 ~/.ssh/id_rsa</span><br><span class=\"line\">          ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts</span><br><span class=\"line\">      - name: npm install, and push</span><br><span class=\"line\">        run: |</span><br><span class=\"line\">          npm install hexo hexo-cli</span><br><span class=\"line\">          node_modules/hexo/bin/hexo d -g</span><br></pre></td></tr></table></figure>\n\n<p>注意修改你的git config 的 user.name 和 user.email<br>提交文件</p>"},{"title":"修改软件的艺术阅读笔记及思考","date":"2017-11-23T16:00:00.000Z","_content":"\n利用一周零散的时间，阅读了《修改软件的艺术》[点击这里去购买](http://www.ituring.com.cn/book/1749)这本书，在阅读的过程中，结合以前的项目开发过程，深有体会和感触。软件开发不是一蹴而就的，必须遵循一些准则，在编写的过程中，也要学会思考。\n\n全书首先是对当前的开发模式进行了介绍，并阐述了其中的弊端和缺陷。传统的瀑布式开发，让软件在后期进行修改现有功能和添加新功能的时候要付出的更多，导致更多的软件是开发失败的。一个软件成功交付也不能表示这个软件是成功的，除非交付之后没有人使用，不需要修改。在瀑布式开发中，开发者可能在几个月后才能看到它执行的结果，开发过程建立的一个测试模拟环境，已经脱离了软件上下文。从而引出，我们就需要寻找一种新的思路和开发流程——敏捷开发。\n\n<!-- more -->\n\n可能是第一次接触敏捷开发的思想，所以在阅读中，一直想找到对这个词的定义，想要能明白，敏捷开发的模式是如何的。但是书中并没有明确定义，所以只能通过整体的介绍和书中提出的9条构建易维护代码的最佳实践中总结了。\n\n\n## 在如何做之前先问做什么、为什么做、给谁做\n\n> 有时候开发者会把事情搞错，不是代码出错，而是 **代码应该做的事情** 没搞清楚，这时就需要产品负责人回答所有的问题，并且把控正确的方向，即使很多时候都没有绝对正确的答案。当产品负责人无法相应的时候，开发过程就会变得缓慢，开发者必须对他们所做的事情作出结果未知的揣测。\n\n这里说明了一名产品负责人的重要性，**产品负责人是产品的权威人士，是沟通的中枢。** 而开发者是要善于提问的，必须去思考，事无巨细的提出问题。但是也不需要拿到全面需求、知道做什么之前就开始编写软件，一边开发一边沟通，这样也是很高效的，而且会明显提高产品质量。\n\n> 需求文档并非被用户故事取代，而是被产品负责人和开发者之间的交互取代，被产品负责人和客户之间的交互取代。用户故事不能取代需求文档。（用户故事）我们不需要那么多细节，用户故事保证我们不仅仅在计划阶段，而且在整个开发阶段都保持对需求的关注。\n\n> 给定特定输入，应该得到特定的输出。无论你是否使用自动化测试，把验收标准和边界情况写在用户故事卡片上都是好的办法，可以用来提醒你需要处理哪些异常。\n\n本章阅读笔记：\n\n从接触软件开发到现在，完整的带了两个项目，但是我都不敢说这两个项目任何一个是成功的，虽然一个已经在天津市推广运行，另外一个每天几乎为1000名教职工提供服务。回顾整个开发过程，越发能体现出瀑布式开发的缺陷。在此之前，觉得项目时失败的，追究其原因，大概是因为当时开发技术的低级和软件思维正在形成中，不能很好的从全局去思考项目，但是一直认为这种开发模式时正确的：先是前期的需求分析，然后就是设计，再然后就是实现、集成，跳过了测试，最后就是部署和上线。在上线之后，才发现，各种Bug，然后就苦逼的修改，正在吃饭的时候，一个电话过来，就要放下刚吃两口的饭，跑到实验室，打开电脑“救火”;在添加新功能的时候，我都不愿意去翻以前的代码了，总是那么不堪入目。这两个项目，显然是失败的，现在不敢修改，只能是像一个破旧的衣裳，缝缝补补。\n\n虽然项目的开发是不理想的，但是，我还是从中学到了很多。阅读本章的时候，特别是对产品负责人的职责描述时，深有体会，在两个项目中，我都可以算是项目的负责人，负责把控整个项目的进度和方向，明显会感觉到产品负责人的重要型。在我自己迷茫的时候，整个项目时停滞不前的，项目组成员的开发效率也是低下的;当我明确方向时，整个项目组都明确方向，困难一个一个被攻破，推进迅速。当然，这个其中，少不了项目组成员（开发者）的工作和思考。\n\n在反思原有开发模式基础上，通过本章学习到了：\n\n- 整个项目组需要明确做什么、为什么做、给谁做的思想\n- 尝试用 **用户故事** 替代文档需求。缩短需求分析的时间，多创建用户故事模型。\n- 在开始做之前，要定制验收标准和边界情况，最好能做到自动化测试。\n\n注：当前没有发展成产品负责人的想法，只是在自己的项目中，可以通过实践，验证学得东西。\n\n## 小批次构建\n\n> 小批次构建让每个任务都可以有在段时间（理想情况是四个小时）内完成，保证任务都满足验收标准，或者至少产生可观察的结果。这有助于让任务更容易预估、完成和验收。\n\n我们应该用什么来衡量自己？\n> 我们应该用对客户的价值来衡量自己。\n\n> 如果一个用户故事是复杂型的，那么通常只有一个原因：其中有很多未知因素，我们处理复杂型用户故事的方式是“分离已知和未知”。我们不断地在未知的范围内进行迭代，未知的范围越来越小，直至消失。把未知和已知分离时分割包含未知因素的故事的第一步。一旦某些事无被标记为未知，就将其封装。\n\n探索未知事物的时候需要做的两件事：\n\n- 把未知变为已知。\n- 把未知进行封装。如果能把大的未知问题隐藏起来，那就隐藏起来，以后再处理(这里有封装的意思)。\n\n更短的反馈回路：\n反馈的回路可能有多个。与客户交流、迭代或者功能开发后期进行演示、编译器反馈、自动测试、回顾会议、代码审查等。\n\n> 优秀的软件开发实践需要在构建不同组成部分的同时保证软件的完整性，而且让各个部分尽可能独立。试着通过定义良好的接口来移除组建间的依赖。如果必须有某些依赖，让后来的故事依赖于之前的故事。一个故事应该时完成一个单一目的，或者一个目的可检验的某个方向（单一职责）。\n\n本章学习到了：\n\n- 封装未知，将大问题分割成小问题。（虽然一直也是这样做的）\n- 故事的单一职责。\n- 小批次构建是有必要的。\n\n## 持续集成\n\n持续集成时一种在构建时期而非发布前进行集成的实践，降低软件开发中的风险，同时做为一种反馈机制，对开发者有这重要的意义。\n\n定义完成：\n\n- 完成。写完一个功能，可以在开发环境中执行，在他的机器上可以得到一定结果，\n- 完整完成。在开发机器中正常执行，且经过集成。\n- 完美完成。在开发机器上正常执行，经过集成，清晰且健壮。\n\n> 构建软件时间，将新的功能签入版本库中，所有开发者都在同一分支上工作，且版本库中除源码之外，还有管理构建的其他文件，包括配置文件、数据库模型、测试代码和测试脚本、第三方库、安装脚本、文档、设计图例、用例、UML图例等。在测试系统中，完整复制生产环境。\n\n> 编写出优秀的单元测试，并且仅仅测试那些需要测试的代码，而不测试那些可能用到的代码。\n\n> 应该保持随时集成。持续的进行集成，尽快从头到尾完成一个用户故事。\n\n构建敏捷设施的7个策略：\n\n- 用版本库管理一切\n- 一次点击全部构建\n- 持续集成\n- 为任务定义验收标准\n- 编写可测试的代码\n- 保证必要的测试覆盖率\n- 即时修复失败的构建\n\n## 协作\n\n**我们拥有最宝贵的资源就是彼此**\n\n> 结对编程并非轮流使用计算机，而是让两个头脑解决同一个问题，比各自单独工作更迅速而且质量更好。结对编程可以防止团队成员过于专门化，并且帮助团队达成共识。\n\n结对编程的配对方式：\n- 根据开发者的强项和缺点来配对\n- 让最有经验的开发者和最少的结对\n- 随机配对\n\n> 一个想法在由你的脑海输入到计算机之前，必须要经过其他人的手\n\n伙伴编程：\n> 在每一天最后的一个小时里，你和你的伙伴对一天的开发进行审查。是结对编程的前身，安全尝试工作。\n\n代码审查：\n> 每当一个开发者完成了某一功能，他就可以向其他成员讲解他是如何编写的。 设计和代码的审查应该首先指出设计思路并说明为何选择这种设计。\n\n回顾会议：\n> 团队聚在一起，每个人都有机会发言，意思都差不多，我们做了什么，是如何做的，为什么做，下一次怎么做的更好等。\n\n重要的一点：\n\n>  **并不是所有人都适合结对，也不是所有的任务都适合结对。**\n\n除了结对编程之外，还有穿刺、群战、围攻、伙伴编程。通过加强学习、分享知识，可以改进我们的团队乃至整个产业。\n\n\n本章学习到了：\n\n对结对编程还是十分看好的，觉得这是能在很大程度上减少bug的方式。我有且只有一次这样的开发过程，那次连续一下午的代码编写中有种一气和成的爽快感觉。在开发“班车预约系统”的时候，那是一个核心模块，十分重要，当思路理清之后，老师就坐在我旁边，我边写着边讲这为什么那么做。虽然代码的整洁度不够，但是实现了基本的功能。整个编写的过程中，竟然没有出现几个bug，每当bug快要出现的时候，老师总是追问，为什么这样做，不这样做。这样一思考，就避免了bug的诞生。当时没有觉得这种开发方式有什么独特，当阅读完本章之后，觉得十分可以在团队中实施。\n\n\n## 编写整洁的代码\n\n对象应该具有定义良好的属性、专一的职责、隐藏的实现，它应该控制自己的状态，而且只应该被定义一次。\n\n- 高质量的代码应该内聚：\n\n> 如果内聚的类只代表一种事物，那么这个事物应该是可以被命名，但是不是它们的名字而是它们的行为决定了它们代表什么。\n\n- 高质量的代码是松散耦合的\n- 高质量的代码是封装良好的：\n\n>  它隐藏了实现细节，由外而内编程，根据所做的事情命名服务隐藏它是物和封装的。在软件中，你不知道的事情对你无害。用什么来隐藏怎么。\n\n- 高质量的代码时自主的：\n> 它管理自己的职责。如果发现某个方法过分依赖另外一个类的数据，那就应该将这个方法置于这个类中。\n\n- 高质量的代码时无冗余的：\n> 代码中的冗余是试图在不同的地方做相同的事情，无论做的是什么，冗余不仅仅是形式的重复，而且还是对意图的重复。\n\n**不要让完美成为优秀的敌人，在软件中无法实现完美的。**\n\n代码的集体所有权以为着团队中，每个人都可以维护任意部分的代码，即使并不是他们编写的。团队应该确定共同的代码规范、统一领域模型和开发实践、使用同样的词汇来描述设计。\n\n重构是编写代码的关键步骤，而且贯穿整个开发过程。在编写代码和新功能完成时进行重构。\n\n代码审查：学习他人风格，不断学习软件开发。阅读他人的代码，编写代码，不断练习。\n\n\n## 测试先行\n\n> 单元测试并不是测试整个用户故事，而是测试相对来说更小的单元。单元测试也可以当作内部文档来使用。这里的单元是指一个行为单元：一个对立的、可验证的行为。它必须对系统产生可观察的影响。而不和系统的其他行为耦合。一个单元代表一个行为，如果行为不变，测试也不应该变化。\n\n测试先行开发\n> 开发者先针对一个功能编写测试，然后实现那个功能让测试通过。你只需要编写测试覆盖的代码，这样测试覆盖率永远时百分之百。测试也是代码，是系统中的一部分。\n\n> 在敏捷软件开发中，并非在一开始就得到全部的需求，而是一边设计一边整理需求，虽然这样很容易作出一些错误的选择，但是迭代构建也比事前确定所有需求要高效的很多。\n\n**如果使用得当，测试先行开发可以帮助开发者编写容易测试和容易维护的代码，但是如果使用不恰当，TDD会成为累赘而非资源。**\n\n通过本章学习：\n\n- 测试先行的重要行\n- 就目前所说的这些理论，必须在开发中去尝试，在实践中体会真理。\n\n\n## 用测试描述行为\n\n最开始编写测试的时候还没有可以测试的代码。接下来开始编写能让测试通过所需的最简单的实现代码。下一步清理代码提升质量。周期循环。\n\n> 所有失败的测试都是因为某些已知原因而失败的，而不会因为其他原因失败，而那个测试是系统中唯一可以由此原因导致失败的测试。换句话说 **测试应该是独一无二的。**\n\n> 如果代码有多重执行路径，意味着代码的逻辑也会更复杂，所以应该用测试来覆盖代码。每个代码执行路径得到不同的结果，所以需要针对每一个路径进行单元测试。\n\n> 但是单元测试不能测试一系列正确顺序的调用或其他的类似场景，这里引入工作流测试，工作流所测试用所谓的模拟对象进行测试。模拟对象是真实对象的替代。\n\n在查找Bug的时候，我会尝试如构建那些可以得到bug在哪里（或者不会在哪里）的信息场景，然后逐步缩小代码范围，直到找到问题。（这是积累出来的经验）\n\n\n## 最后实现设计\n\n持续性开发：\n\n- 删除死代码\n\n> 死代码是指那些被注释掉或者不再被调用而永远得不到执行的代码，除了干扰其他开发者之外，它完全没有意义。**删了它**。\n\n- 保持名称更新\n- 集中决策\n- 抽象\n\n将编码和清理分开，当作不同的任务。只关注实现行为，让测试通过，这样编码更容易。将对象的创建和对象的使用分离。\n\n**用“见名知意”的命名取代注释描述代码，应该用注释来描述为什么要做这些事，而不是做什么。代码本身应该说明自己在做什么。**\n\n\n## 重构遗留代码\n\n重构是指在不改变外部行为的前提下对代码的内部结构进行重组或重新包装。\n\n修改代码的风险和成本都很高，所以要谨慎行事。对已有代码添加测试。\n\n- 以支持修改为目的重构\n- 以开闭原则为目的重构\n- 以提高可修改性为目的重构\n\n不用试图在一开始就找到最佳设计，我们可以随着重构来不断改进设计。\n\n何时进行重构：\n\n- 当关键代码维护不善的时候\n- 当唯一理解代码的人没空的时候\n- 当有信息可以揭示更好的设计的时候\n- 当修改bug的时候\n- 当需要添加新功能的时候\n- 当需要为遗留代码写文档的时候\n- 当从够比重写容易的时候\n\n**从遗留代码中学习**\n","source":"_posts/修改软件的艺术阅读笔记及思考.md","raw":"---\ntitle: 修改软件的艺术阅读笔记及思考\ndate: 2017-11-24\ntags: [阅读笔记, 开发技巧, TDD]\n---\n\n利用一周零散的时间，阅读了《修改软件的艺术》[点击这里去购买](http://www.ituring.com.cn/book/1749)这本书，在阅读的过程中，结合以前的项目开发过程，深有体会和感触。软件开发不是一蹴而就的，必须遵循一些准则，在编写的过程中，也要学会思考。\n\n全书首先是对当前的开发模式进行了介绍，并阐述了其中的弊端和缺陷。传统的瀑布式开发，让软件在后期进行修改现有功能和添加新功能的时候要付出的更多，导致更多的软件是开发失败的。一个软件成功交付也不能表示这个软件是成功的，除非交付之后没有人使用，不需要修改。在瀑布式开发中，开发者可能在几个月后才能看到它执行的结果，开发过程建立的一个测试模拟环境，已经脱离了软件上下文。从而引出，我们就需要寻找一种新的思路和开发流程——敏捷开发。\n\n<!-- more -->\n\n可能是第一次接触敏捷开发的思想，所以在阅读中，一直想找到对这个词的定义，想要能明白，敏捷开发的模式是如何的。但是书中并没有明确定义，所以只能通过整体的介绍和书中提出的9条构建易维护代码的最佳实践中总结了。\n\n\n## 在如何做之前先问做什么、为什么做、给谁做\n\n> 有时候开发者会把事情搞错，不是代码出错，而是 **代码应该做的事情** 没搞清楚，这时就需要产品负责人回答所有的问题，并且把控正确的方向，即使很多时候都没有绝对正确的答案。当产品负责人无法相应的时候，开发过程就会变得缓慢，开发者必须对他们所做的事情作出结果未知的揣测。\n\n这里说明了一名产品负责人的重要性，**产品负责人是产品的权威人士，是沟通的中枢。** 而开发者是要善于提问的，必须去思考，事无巨细的提出问题。但是也不需要拿到全面需求、知道做什么之前就开始编写软件，一边开发一边沟通，这样也是很高效的，而且会明显提高产品质量。\n\n> 需求文档并非被用户故事取代，而是被产品负责人和开发者之间的交互取代，被产品负责人和客户之间的交互取代。用户故事不能取代需求文档。（用户故事）我们不需要那么多细节，用户故事保证我们不仅仅在计划阶段，而且在整个开发阶段都保持对需求的关注。\n\n> 给定特定输入，应该得到特定的输出。无论你是否使用自动化测试，把验收标准和边界情况写在用户故事卡片上都是好的办法，可以用来提醒你需要处理哪些异常。\n\n本章阅读笔记：\n\n从接触软件开发到现在，完整的带了两个项目，但是我都不敢说这两个项目任何一个是成功的，虽然一个已经在天津市推广运行，另外一个每天几乎为1000名教职工提供服务。回顾整个开发过程，越发能体现出瀑布式开发的缺陷。在此之前，觉得项目时失败的，追究其原因，大概是因为当时开发技术的低级和软件思维正在形成中，不能很好的从全局去思考项目，但是一直认为这种开发模式时正确的：先是前期的需求分析，然后就是设计，再然后就是实现、集成，跳过了测试，最后就是部署和上线。在上线之后，才发现，各种Bug，然后就苦逼的修改，正在吃饭的时候，一个电话过来，就要放下刚吃两口的饭，跑到实验室，打开电脑“救火”;在添加新功能的时候，我都不愿意去翻以前的代码了，总是那么不堪入目。这两个项目，显然是失败的，现在不敢修改，只能是像一个破旧的衣裳，缝缝补补。\n\n虽然项目的开发是不理想的，但是，我还是从中学到了很多。阅读本章的时候，特别是对产品负责人的职责描述时，深有体会，在两个项目中，我都可以算是项目的负责人，负责把控整个项目的进度和方向，明显会感觉到产品负责人的重要型。在我自己迷茫的时候，整个项目时停滞不前的，项目组成员的开发效率也是低下的;当我明确方向时，整个项目组都明确方向，困难一个一个被攻破，推进迅速。当然，这个其中，少不了项目组成员（开发者）的工作和思考。\n\n在反思原有开发模式基础上，通过本章学习到了：\n\n- 整个项目组需要明确做什么、为什么做、给谁做的思想\n- 尝试用 **用户故事** 替代文档需求。缩短需求分析的时间，多创建用户故事模型。\n- 在开始做之前，要定制验收标准和边界情况，最好能做到自动化测试。\n\n注：当前没有发展成产品负责人的想法，只是在自己的项目中，可以通过实践，验证学得东西。\n\n## 小批次构建\n\n> 小批次构建让每个任务都可以有在段时间（理想情况是四个小时）内完成，保证任务都满足验收标准，或者至少产生可观察的结果。这有助于让任务更容易预估、完成和验收。\n\n我们应该用什么来衡量自己？\n> 我们应该用对客户的价值来衡量自己。\n\n> 如果一个用户故事是复杂型的，那么通常只有一个原因：其中有很多未知因素，我们处理复杂型用户故事的方式是“分离已知和未知”。我们不断地在未知的范围内进行迭代，未知的范围越来越小，直至消失。把未知和已知分离时分割包含未知因素的故事的第一步。一旦某些事无被标记为未知，就将其封装。\n\n探索未知事物的时候需要做的两件事：\n\n- 把未知变为已知。\n- 把未知进行封装。如果能把大的未知问题隐藏起来，那就隐藏起来，以后再处理(这里有封装的意思)。\n\n更短的反馈回路：\n反馈的回路可能有多个。与客户交流、迭代或者功能开发后期进行演示、编译器反馈、自动测试、回顾会议、代码审查等。\n\n> 优秀的软件开发实践需要在构建不同组成部分的同时保证软件的完整性，而且让各个部分尽可能独立。试着通过定义良好的接口来移除组建间的依赖。如果必须有某些依赖，让后来的故事依赖于之前的故事。一个故事应该时完成一个单一目的，或者一个目的可检验的某个方向（单一职责）。\n\n本章学习到了：\n\n- 封装未知，将大问题分割成小问题。（虽然一直也是这样做的）\n- 故事的单一职责。\n- 小批次构建是有必要的。\n\n## 持续集成\n\n持续集成时一种在构建时期而非发布前进行集成的实践，降低软件开发中的风险，同时做为一种反馈机制，对开发者有这重要的意义。\n\n定义完成：\n\n- 完成。写完一个功能，可以在开发环境中执行，在他的机器上可以得到一定结果，\n- 完整完成。在开发机器中正常执行，且经过集成。\n- 完美完成。在开发机器上正常执行，经过集成，清晰且健壮。\n\n> 构建软件时间，将新的功能签入版本库中，所有开发者都在同一分支上工作，且版本库中除源码之外，还有管理构建的其他文件，包括配置文件、数据库模型、测试代码和测试脚本、第三方库、安装脚本、文档、设计图例、用例、UML图例等。在测试系统中，完整复制生产环境。\n\n> 编写出优秀的单元测试，并且仅仅测试那些需要测试的代码，而不测试那些可能用到的代码。\n\n> 应该保持随时集成。持续的进行集成，尽快从头到尾完成一个用户故事。\n\n构建敏捷设施的7个策略：\n\n- 用版本库管理一切\n- 一次点击全部构建\n- 持续集成\n- 为任务定义验收标准\n- 编写可测试的代码\n- 保证必要的测试覆盖率\n- 即时修复失败的构建\n\n## 协作\n\n**我们拥有最宝贵的资源就是彼此**\n\n> 结对编程并非轮流使用计算机，而是让两个头脑解决同一个问题，比各自单独工作更迅速而且质量更好。结对编程可以防止团队成员过于专门化，并且帮助团队达成共识。\n\n结对编程的配对方式：\n- 根据开发者的强项和缺点来配对\n- 让最有经验的开发者和最少的结对\n- 随机配对\n\n> 一个想法在由你的脑海输入到计算机之前，必须要经过其他人的手\n\n伙伴编程：\n> 在每一天最后的一个小时里，你和你的伙伴对一天的开发进行审查。是结对编程的前身，安全尝试工作。\n\n代码审查：\n> 每当一个开发者完成了某一功能，他就可以向其他成员讲解他是如何编写的。 设计和代码的审查应该首先指出设计思路并说明为何选择这种设计。\n\n回顾会议：\n> 团队聚在一起，每个人都有机会发言，意思都差不多，我们做了什么，是如何做的，为什么做，下一次怎么做的更好等。\n\n重要的一点：\n\n>  **并不是所有人都适合结对，也不是所有的任务都适合结对。**\n\n除了结对编程之外，还有穿刺、群战、围攻、伙伴编程。通过加强学习、分享知识，可以改进我们的团队乃至整个产业。\n\n\n本章学习到了：\n\n对结对编程还是十分看好的，觉得这是能在很大程度上减少bug的方式。我有且只有一次这样的开发过程，那次连续一下午的代码编写中有种一气和成的爽快感觉。在开发“班车预约系统”的时候，那是一个核心模块，十分重要，当思路理清之后，老师就坐在我旁边，我边写着边讲这为什么那么做。虽然代码的整洁度不够，但是实现了基本的功能。整个编写的过程中，竟然没有出现几个bug，每当bug快要出现的时候，老师总是追问，为什么这样做，不这样做。这样一思考，就避免了bug的诞生。当时没有觉得这种开发方式有什么独特，当阅读完本章之后，觉得十分可以在团队中实施。\n\n\n## 编写整洁的代码\n\n对象应该具有定义良好的属性、专一的职责、隐藏的实现，它应该控制自己的状态，而且只应该被定义一次。\n\n- 高质量的代码应该内聚：\n\n> 如果内聚的类只代表一种事物，那么这个事物应该是可以被命名，但是不是它们的名字而是它们的行为决定了它们代表什么。\n\n- 高质量的代码是松散耦合的\n- 高质量的代码是封装良好的：\n\n>  它隐藏了实现细节，由外而内编程，根据所做的事情命名服务隐藏它是物和封装的。在软件中，你不知道的事情对你无害。用什么来隐藏怎么。\n\n- 高质量的代码时自主的：\n> 它管理自己的职责。如果发现某个方法过分依赖另外一个类的数据，那就应该将这个方法置于这个类中。\n\n- 高质量的代码时无冗余的：\n> 代码中的冗余是试图在不同的地方做相同的事情，无论做的是什么，冗余不仅仅是形式的重复，而且还是对意图的重复。\n\n**不要让完美成为优秀的敌人，在软件中无法实现完美的。**\n\n代码的集体所有权以为着团队中，每个人都可以维护任意部分的代码，即使并不是他们编写的。团队应该确定共同的代码规范、统一领域模型和开发实践、使用同样的词汇来描述设计。\n\n重构是编写代码的关键步骤，而且贯穿整个开发过程。在编写代码和新功能完成时进行重构。\n\n代码审查：学习他人风格，不断学习软件开发。阅读他人的代码，编写代码，不断练习。\n\n\n## 测试先行\n\n> 单元测试并不是测试整个用户故事，而是测试相对来说更小的单元。单元测试也可以当作内部文档来使用。这里的单元是指一个行为单元：一个对立的、可验证的行为。它必须对系统产生可观察的影响。而不和系统的其他行为耦合。一个单元代表一个行为，如果行为不变，测试也不应该变化。\n\n测试先行开发\n> 开发者先针对一个功能编写测试，然后实现那个功能让测试通过。你只需要编写测试覆盖的代码，这样测试覆盖率永远时百分之百。测试也是代码，是系统中的一部分。\n\n> 在敏捷软件开发中，并非在一开始就得到全部的需求，而是一边设计一边整理需求，虽然这样很容易作出一些错误的选择，但是迭代构建也比事前确定所有需求要高效的很多。\n\n**如果使用得当，测试先行开发可以帮助开发者编写容易测试和容易维护的代码，但是如果使用不恰当，TDD会成为累赘而非资源。**\n\n通过本章学习：\n\n- 测试先行的重要行\n- 就目前所说的这些理论，必须在开发中去尝试，在实践中体会真理。\n\n\n## 用测试描述行为\n\n最开始编写测试的时候还没有可以测试的代码。接下来开始编写能让测试通过所需的最简单的实现代码。下一步清理代码提升质量。周期循环。\n\n> 所有失败的测试都是因为某些已知原因而失败的，而不会因为其他原因失败，而那个测试是系统中唯一可以由此原因导致失败的测试。换句话说 **测试应该是独一无二的。**\n\n> 如果代码有多重执行路径，意味着代码的逻辑也会更复杂，所以应该用测试来覆盖代码。每个代码执行路径得到不同的结果，所以需要针对每一个路径进行单元测试。\n\n> 但是单元测试不能测试一系列正确顺序的调用或其他的类似场景，这里引入工作流测试，工作流所测试用所谓的模拟对象进行测试。模拟对象是真实对象的替代。\n\n在查找Bug的时候，我会尝试如构建那些可以得到bug在哪里（或者不会在哪里）的信息场景，然后逐步缩小代码范围，直到找到问题。（这是积累出来的经验）\n\n\n## 最后实现设计\n\n持续性开发：\n\n- 删除死代码\n\n> 死代码是指那些被注释掉或者不再被调用而永远得不到执行的代码，除了干扰其他开发者之外，它完全没有意义。**删了它**。\n\n- 保持名称更新\n- 集中决策\n- 抽象\n\n将编码和清理分开，当作不同的任务。只关注实现行为，让测试通过，这样编码更容易。将对象的创建和对象的使用分离。\n\n**用“见名知意”的命名取代注释描述代码，应该用注释来描述为什么要做这些事，而不是做什么。代码本身应该说明自己在做什么。**\n\n\n## 重构遗留代码\n\n重构是指在不改变外部行为的前提下对代码的内部结构进行重组或重新包装。\n\n修改代码的风险和成本都很高，所以要谨慎行事。对已有代码添加测试。\n\n- 以支持修改为目的重构\n- 以开闭原则为目的重构\n- 以提高可修改性为目的重构\n\n不用试图在一开始就找到最佳设计，我们可以随着重构来不断改进设计。\n\n何时进行重构：\n\n- 当关键代码维护不善的时候\n- 当唯一理解代码的人没空的时候\n- 当有信息可以揭示更好的设计的时候\n- 当修改bug的时候\n- 当需要添加新功能的时候\n- 当需要为遗留代码写文档的时候\n- 当从够比重写容易的时候\n\n**从遗留代码中学习**\n","slug":"修改软件的艺术阅读笔记及思考","published":1,"updated":"2021-06-20T10:25:20.130Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluqa1hjb003trlog7qp9hwe2","content":"<p>利用一周零散的时间，阅读了《修改软件的艺术》<a href=\"http://www.ituring.com.cn/book/1749\">点击这里去购买</a>这本书，在阅读的过程中，结合以前的项目开发过程，深有体会和感触。软件开发不是一蹴而就的，必须遵循一些准则，在编写的过程中，也要学会思考。</p>\n<p>全书首先是对当前的开发模式进行了介绍，并阐述了其中的弊端和缺陷。传统的瀑布式开发，让软件在后期进行修改现有功能和添加新功能的时候要付出的更多，导致更多的软件是开发失败的。一个软件成功交付也不能表示这个软件是成功的，除非交付之后没有人使用，不需要修改。在瀑布式开发中，开发者可能在几个月后才能看到它执行的结果，开发过程建立的一个测试模拟环境，已经脱离了软件上下文。从而引出，我们就需要寻找一种新的思路和开发流程——敏捷开发。</p>\n<span id=\"more\"></span>\n\n<p>可能是第一次接触敏捷开发的思想，所以在阅读中，一直想找到对这个词的定义，想要能明白，敏捷开发的模式是如何的。但是书中并没有明确定义，所以只能通过整体的介绍和书中提出的9条构建易维护代码的最佳实践中总结了。</p>\n<h2 id=\"在如何做之前先问做什么、为什么做、给谁做\"><a href=\"#在如何做之前先问做什么、为什么做、给谁做\" class=\"headerlink\" title=\"在如何做之前先问做什么、为什么做、给谁做\"></a>在如何做之前先问做什么、为什么做、给谁做</h2><blockquote>\n<p>有时候开发者会把事情搞错，不是代码出错，而是 <strong>代码应该做的事情</strong> 没搞清楚，这时就需要产品负责人回答所有的问题，并且把控正确的方向，即使很多时候都没有绝对正确的答案。当产品负责人无法相应的时候，开发过程就会变得缓慢，开发者必须对他们所做的事情作出结果未知的揣测。</p>\n</blockquote>\n<p>这里说明了一名产品负责人的重要性，<strong>产品负责人是产品的权威人士，是沟通的中枢。</strong> 而开发者是要善于提问的，必须去思考，事无巨细的提出问题。但是也不需要拿到全面需求、知道做什么之前就开始编写软件，一边开发一边沟通，这样也是很高效的，而且会明显提高产品质量。</p>\n<blockquote>\n<p>需求文档并非被用户故事取代，而是被产品负责人和开发者之间的交互取代，被产品负责人和客户之间的交互取代。用户故事不能取代需求文档。（用户故事）我们不需要那么多细节，用户故事保证我们不仅仅在计划阶段，而且在整个开发阶段都保持对需求的关注。</p>\n</blockquote>\n<blockquote>\n<p>给定特定输入，应该得到特定的输出。无论你是否使用自动化测试，把验收标准和边界情况写在用户故事卡片上都是好的办法，可以用来提醒你需要处理哪些异常。</p>\n</blockquote>\n<p>本章阅读笔记：</p>\n<p>从接触软件开发到现在，完整的带了两个项目，但是我都不敢说这两个项目任何一个是成功的，虽然一个已经在天津市推广运行，另外一个每天几乎为1000名教职工提供服务。回顾整个开发过程，越发能体现出瀑布式开发的缺陷。在此之前，觉得项目时失败的，追究其原因，大概是因为当时开发技术的低级和软件思维正在形成中，不能很好的从全局去思考项目，但是一直认为这种开发模式时正确的：先是前期的需求分析，然后就是设计，再然后就是实现、集成，跳过了测试，最后就是部署和上线。在上线之后，才发现，各种Bug，然后就苦逼的修改，正在吃饭的时候，一个电话过来，就要放下刚吃两口的饭，跑到实验室，打开电脑“救火”;在添加新功能的时候，我都不愿意去翻以前的代码了，总是那么不堪入目。这两个项目，显然是失败的，现在不敢修改，只能是像一个破旧的衣裳，缝缝补补。</p>\n<p>虽然项目的开发是不理想的，但是，我还是从中学到了很多。阅读本章的时候，特别是对产品负责人的职责描述时，深有体会，在两个项目中，我都可以算是项目的负责人，负责把控整个项目的进度和方向，明显会感觉到产品负责人的重要型。在我自己迷茫的时候，整个项目时停滞不前的，项目组成员的开发效率也是低下的;当我明确方向时，整个项目组都明确方向，困难一个一个被攻破，推进迅速。当然，这个其中，少不了项目组成员（开发者）的工作和思考。</p>\n<p>在反思原有开发模式基础上，通过本章学习到了：</p>\n<ul>\n<li>整个项目组需要明确做什么、为什么做、给谁做的思想</li>\n<li>尝试用 <strong>用户故事</strong> 替代文档需求。缩短需求分析的时间，多创建用户故事模型。</li>\n<li>在开始做之前，要定制验收标准和边界情况，最好能做到自动化测试。</li>\n</ul>\n<p>注：当前没有发展成产品负责人的想法，只是在自己的项目中，可以通过实践，验证学得东西。</p>\n<h2 id=\"小批次构建\"><a href=\"#小批次构建\" class=\"headerlink\" title=\"小批次构建\"></a>小批次构建</h2><blockquote>\n<p>小批次构建让每个任务都可以有在段时间（理想情况是四个小时）内完成，保证任务都满足验收标准，或者至少产生可观察的结果。这有助于让任务更容易预估、完成和验收。</p>\n</blockquote>\n<p>我们应该用什么来衡量自己？</p>\n<blockquote>\n<p>我们应该用对客户的价值来衡量自己。</p>\n</blockquote>\n<blockquote>\n<p>如果一个用户故事是复杂型的，那么通常只有一个原因：其中有很多未知因素，我们处理复杂型用户故事的方式是“分离已知和未知”。我们不断地在未知的范围内进行迭代，未知的范围越来越小，直至消失。把未知和已知分离时分割包含未知因素的故事的第一步。一旦某些事无被标记为未知，就将其封装。</p>\n</blockquote>\n<p>探索未知事物的时候需要做的两件事：</p>\n<ul>\n<li>把未知变为已知。</li>\n<li>把未知进行封装。如果能把大的未知问题隐藏起来，那就隐藏起来，以后再处理(这里有封装的意思)。</li>\n</ul>\n<p>更短的反馈回路：<br>反馈的回路可能有多个。与客户交流、迭代或者功能开发后期进行演示、编译器反馈、自动测试、回顾会议、代码审查等。</p>\n<blockquote>\n<p>优秀的软件开发实践需要在构建不同组成部分的同时保证软件的完整性，而且让各个部分尽可能独立。试着通过定义良好的接口来移除组建间的依赖。如果必须有某些依赖，让后来的故事依赖于之前的故事。一个故事应该时完成一个单一目的，或者一个目的可检验的某个方向（单一职责）。</p>\n</blockquote>\n<p>本章学习到了：</p>\n<ul>\n<li>封装未知，将大问题分割成小问题。（虽然一直也是这样做的）</li>\n<li>故事的单一职责。</li>\n<li>小批次构建是有必要的。</li>\n</ul>\n<h2 id=\"持续集成\"><a href=\"#持续集成\" class=\"headerlink\" title=\"持续集成\"></a>持续集成</h2><p>持续集成时一种在构建时期而非发布前进行集成的实践，降低软件开发中的风险，同时做为一种反馈机制，对开发者有这重要的意义。</p>\n<p>定义完成：</p>\n<ul>\n<li>完成。写完一个功能，可以在开发环境中执行，在他的机器上可以得到一定结果，</li>\n<li>完整完成。在开发机器中正常执行，且经过集成。</li>\n<li>完美完成。在开发机器上正常执行，经过集成，清晰且健壮。</li>\n</ul>\n<blockquote>\n<p>构建软件时间，将新的功能签入版本库中，所有开发者都在同一分支上工作，且版本库中除源码之外，还有管理构建的其他文件，包括配置文件、数据库模型、测试代码和测试脚本、第三方库、安装脚本、文档、设计图例、用例、UML图例等。在测试系统中，完整复制生产环境。</p>\n</blockquote>\n<blockquote>\n<p>编写出优秀的单元测试，并且仅仅测试那些需要测试的代码，而不测试那些可能用到的代码。</p>\n</blockquote>\n<blockquote>\n<p>应该保持随时集成。持续的进行集成，尽快从头到尾完成一个用户故事。</p>\n</blockquote>\n<p>构建敏捷设施的7个策略：</p>\n<ul>\n<li>用版本库管理一切</li>\n<li>一次点击全部构建</li>\n<li>持续集成</li>\n<li>为任务定义验收标准</li>\n<li>编写可测试的代码</li>\n<li>保证必要的测试覆盖率</li>\n<li>即时修复失败的构建</li>\n</ul>\n<h2 id=\"协作\"><a href=\"#协作\" class=\"headerlink\" title=\"协作\"></a>协作</h2><p><strong>我们拥有最宝贵的资源就是彼此</strong></p>\n<blockquote>\n<p>结对编程并非轮流使用计算机，而是让两个头脑解决同一个问题，比各自单独工作更迅速而且质量更好。结对编程可以防止团队成员过于专门化，并且帮助团队达成共识。</p>\n</blockquote>\n<p>结对编程的配对方式：</p>\n<ul>\n<li>根据开发者的强项和缺点来配对</li>\n<li>让最有经验的开发者和最少的结对</li>\n<li>随机配对</li>\n</ul>\n<blockquote>\n<p>一个想法在由你的脑海输入到计算机之前，必须要经过其他人的手</p>\n</blockquote>\n<p>伙伴编程：</p>\n<blockquote>\n<p>在每一天最后的一个小时里，你和你的伙伴对一天的开发进行审查。是结对编程的前身，安全尝试工作。</p>\n</blockquote>\n<p>代码审查：</p>\n<blockquote>\n<p>每当一个开发者完成了某一功能，他就可以向其他成员讲解他是如何编写的。 设计和代码的审查应该首先指出设计思路并说明为何选择这种设计。</p>\n</blockquote>\n<p>回顾会议：</p>\n<blockquote>\n<p>团队聚在一起，每个人都有机会发言，意思都差不多，我们做了什么，是如何做的，为什么做，下一次怎么做的更好等。</p>\n</blockquote>\n<p>重要的一点：</p>\n<blockquote>\n<p> <strong>并不是所有人都适合结对，也不是所有的任务都适合结对。</strong></p>\n</blockquote>\n<p>除了结对编程之外，还有穿刺、群战、围攻、伙伴编程。通过加强学习、分享知识，可以改进我们的团队乃至整个产业。</p>\n<p>本章学习到了：</p>\n<p>对结对编程还是十分看好的，觉得这是能在很大程度上减少bug的方式。我有且只有一次这样的开发过程，那次连续一下午的代码编写中有种一气和成的爽快感觉。在开发“班车预约系统”的时候，那是一个核心模块，十分重要，当思路理清之后，老师就坐在我旁边，我边写着边讲这为什么那么做。虽然代码的整洁度不够，但是实现了基本的功能。整个编写的过程中，竟然没有出现几个bug，每当bug快要出现的时候，老师总是追问，为什么这样做，不这样做。这样一思考，就避免了bug的诞生。当时没有觉得这种开发方式有什么独特，当阅读完本章之后，觉得十分可以在团队中实施。</p>\n<h2 id=\"编写整洁的代码\"><a href=\"#编写整洁的代码\" class=\"headerlink\" title=\"编写整洁的代码\"></a>编写整洁的代码</h2><p>对象应该具有定义良好的属性、专一的职责、隐藏的实现，它应该控制自己的状态，而且只应该被定义一次。</p>\n<ul>\n<li>高质量的代码应该内聚：</li>\n</ul>\n<blockquote>\n<p>如果内聚的类只代表一种事物，那么这个事物应该是可以被命名，但是不是它们的名字而是它们的行为决定了它们代表什么。</p>\n</blockquote>\n<ul>\n<li>高质量的代码是松散耦合的</li>\n<li>高质量的代码是封装良好的：</li>\n</ul>\n<blockquote>\n<p> 它隐藏了实现细节，由外而内编程，根据所做的事情命名服务隐藏它是物和封装的。在软件中，你不知道的事情对你无害。用什么来隐藏怎么。</p>\n</blockquote>\n<ul>\n<li><p>高质量的代码时自主的：</p>\n<blockquote>\n<p>它管理自己的职责。如果发现某个方法过分依赖另外一个类的数据，那就应该将这个方法置于这个类中。</p>\n</blockquote>\n</li>\n<li><p>高质量的代码时无冗余的：</p>\n<blockquote>\n<p>代码中的冗余是试图在不同的地方做相同的事情，无论做的是什么，冗余不仅仅是形式的重复，而且还是对意图的重复。</p>\n</blockquote>\n</li>\n</ul>\n<p><strong>不要让完美成为优秀的敌人，在软件中无法实现完美的。</strong></p>\n<p>代码的集体所有权以为着团队中，每个人都可以维护任意部分的代码，即使并不是他们编写的。团队应该确定共同的代码规范、统一领域模型和开发实践、使用同样的词汇来描述设计。</p>\n<p>重构是编写代码的关键步骤，而且贯穿整个开发过程。在编写代码和新功能完成时进行重构。</p>\n<p>代码审查：学习他人风格，不断学习软件开发。阅读他人的代码，编写代码，不断练习。</p>\n<h2 id=\"测试先行\"><a href=\"#测试先行\" class=\"headerlink\" title=\"测试先行\"></a>测试先行</h2><blockquote>\n<p>单元测试并不是测试整个用户故事，而是测试相对来说更小的单元。单元测试也可以当作内部文档来使用。这里的单元是指一个行为单元：一个对立的、可验证的行为。它必须对系统产生可观察的影响。而不和系统的其他行为耦合。一个单元代表一个行为，如果行为不变，测试也不应该变化。</p>\n</blockquote>\n<p>测试先行开发</p>\n<blockquote>\n<p>开发者先针对一个功能编写测试，然后实现那个功能让测试通过。你只需要编写测试覆盖的代码，这样测试覆盖率永远时百分之百。测试也是代码，是系统中的一部分。</p>\n</blockquote>\n<blockquote>\n<p>在敏捷软件开发中，并非在一开始就得到全部的需求，而是一边设计一边整理需求，虽然这样很容易作出一些错误的选择，但是迭代构建也比事前确定所有需求要高效的很多。</p>\n</blockquote>\n<p><strong>如果使用得当，测试先行开发可以帮助开发者编写容易测试和容易维护的代码，但是如果使用不恰当，TDD会成为累赘而非资源。</strong></p>\n<p>通过本章学习：</p>\n<ul>\n<li>测试先行的重要行</li>\n<li>就目前所说的这些理论，必须在开发中去尝试，在实践中体会真理。</li>\n</ul>\n<h2 id=\"用测试描述行为\"><a href=\"#用测试描述行为\" class=\"headerlink\" title=\"用测试描述行为\"></a>用测试描述行为</h2><p>最开始编写测试的时候还没有可以测试的代码。接下来开始编写能让测试通过所需的最简单的实现代码。下一步清理代码提升质量。周期循环。</p>\n<blockquote>\n<p>所有失败的测试都是因为某些已知原因而失败的，而不会因为其他原因失败，而那个测试是系统中唯一可以由此原因导致失败的测试。换句话说 <strong>测试应该是独一无二的。</strong></p>\n</blockquote>\n<blockquote>\n<p>如果代码有多重执行路径，意味着代码的逻辑也会更复杂，所以应该用测试来覆盖代码。每个代码执行路径得到不同的结果，所以需要针对每一个路径进行单元测试。</p>\n</blockquote>\n<blockquote>\n<p>但是单元测试不能测试一系列正确顺序的调用或其他的类似场景，这里引入工作流测试，工作流所测试用所谓的模拟对象进行测试。模拟对象是真实对象的替代。</p>\n</blockquote>\n<p>在查找Bug的时候，我会尝试如构建那些可以得到bug在哪里（或者不会在哪里）的信息场景，然后逐步缩小代码范围，直到找到问题。（这是积累出来的经验）</p>\n<h2 id=\"最后实现设计\"><a href=\"#最后实现设计\" class=\"headerlink\" title=\"最后实现设计\"></a>最后实现设计</h2><p>持续性开发：</p>\n<ul>\n<li>删除死代码</li>\n</ul>\n<blockquote>\n<p>死代码是指那些被注释掉或者不再被调用而永远得不到执行的代码，除了干扰其他开发者之外，它完全没有意义。<strong>删了它</strong>。</p>\n</blockquote>\n<ul>\n<li>保持名称更新</li>\n<li>集中决策</li>\n<li>抽象</li>\n</ul>\n<p>将编码和清理分开，当作不同的任务。只关注实现行为，让测试通过，这样编码更容易。将对象的创建和对象的使用分离。</p>\n<p><strong>用“见名知意”的命名取代注释描述代码，应该用注释来描述为什么要做这些事，而不是做什么。代码本身应该说明自己在做什么。</strong></p>\n<h2 id=\"重构遗留代码\"><a href=\"#重构遗留代码\" class=\"headerlink\" title=\"重构遗留代码\"></a>重构遗留代码</h2><p>重构是指在不改变外部行为的前提下对代码的内部结构进行重组或重新包装。</p>\n<p>修改代码的风险和成本都很高，所以要谨慎行事。对已有代码添加测试。</p>\n<ul>\n<li>以支持修改为目的重构</li>\n<li>以开闭原则为目的重构</li>\n<li>以提高可修改性为目的重构</li>\n</ul>\n<p>不用试图在一开始就找到最佳设计，我们可以随着重构来不断改进设计。</p>\n<p>何时进行重构：</p>\n<ul>\n<li>当关键代码维护不善的时候</li>\n<li>当唯一理解代码的人没空的时候</li>\n<li>当有信息可以揭示更好的设计的时候</li>\n<li>当修改bug的时候</li>\n<li>当需要添加新功能的时候</li>\n<li>当需要为遗留代码写文档的时候</li>\n<li>当从够比重写容易的时候</li>\n</ul>\n<p><strong>从遗留代码中学习</strong></p>\n","site":{"data":{}},"excerpt":"<p>利用一周零散的时间，阅读了《修改软件的艺术》<a href=\"http://www.ituring.com.cn/book/1749\">点击这里去购买</a>这本书，在阅读的过程中，结合以前的项目开发过程，深有体会和感触。软件开发不是一蹴而就的，必须遵循一些准则，在编写的过程中，也要学会思考。</p>\n<p>全书首先是对当前的开发模式进行了介绍，并阐述了其中的弊端和缺陷。传统的瀑布式开发，让软件在后期进行修改现有功能和添加新功能的时候要付出的更多，导致更多的软件是开发失败的。一个软件成功交付也不能表示这个软件是成功的，除非交付之后没有人使用，不需要修改。在瀑布式开发中，开发者可能在几个月后才能看到它执行的结果，开发过程建立的一个测试模拟环境，已经脱离了软件上下文。从而引出，我们就需要寻找一种新的思路和开发流程——敏捷开发。</p>","more":"<p>可能是第一次接触敏捷开发的思想，所以在阅读中，一直想找到对这个词的定义，想要能明白，敏捷开发的模式是如何的。但是书中并没有明确定义，所以只能通过整体的介绍和书中提出的9条构建易维护代码的最佳实践中总结了。</p>\n<h2 id=\"在如何做之前先问做什么、为什么做、给谁做\"><a href=\"#在如何做之前先问做什么、为什么做、给谁做\" class=\"headerlink\" title=\"在如何做之前先问做什么、为什么做、给谁做\"></a>在如何做之前先问做什么、为什么做、给谁做</h2><blockquote>\n<p>有时候开发者会把事情搞错，不是代码出错，而是 <strong>代码应该做的事情</strong> 没搞清楚，这时就需要产品负责人回答所有的问题，并且把控正确的方向，即使很多时候都没有绝对正确的答案。当产品负责人无法相应的时候，开发过程就会变得缓慢，开发者必须对他们所做的事情作出结果未知的揣测。</p>\n</blockquote>\n<p>这里说明了一名产品负责人的重要性，<strong>产品负责人是产品的权威人士，是沟通的中枢。</strong> 而开发者是要善于提问的，必须去思考，事无巨细的提出问题。但是也不需要拿到全面需求、知道做什么之前就开始编写软件，一边开发一边沟通，这样也是很高效的，而且会明显提高产品质量。</p>\n<blockquote>\n<p>需求文档并非被用户故事取代，而是被产品负责人和开发者之间的交互取代，被产品负责人和客户之间的交互取代。用户故事不能取代需求文档。（用户故事）我们不需要那么多细节，用户故事保证我们不仅仅在计划阶段，而且在整个开发阶段都保持对需求的关注。</p>\n</blockquote>\n<blockquote>\n<p>给定特定输入，应该得到特定的输出。无论你是否使用自动化测试，把验收标准和边界情况写在用户故事卡片上都是好的办法，可以用来提醒你需要处理哪些异常。</p>\n</blockquote>\n<p>本章阅读笔记：</p>\n<p>从接触软件开发到现在，完整的带了两个项目，但是我都不敢说这两个项目任何一个是成功的，虽然一个已经在天津市推广运行，另外一个每天几乎为1000名教职工提供服务。回顾整个开发过程，越发能体现出瀑布式开发的缺陷。在此之前，觉得项目时失败的，追究其原因，大概是因为当时开发技术的低级和软件思维正在形成中，不能很好的从全局去思考项目，但是一直认为这种开发模式时正确的：先是前期的需求分析，然后就是设计，再然后就是实现、集成，跳过了测试，最后就是部署和上线。在上线之后，才发现，各种Bug，然后就苦逼的修改，正在吃饭的时候，一个电话过来，就要放下刚吃两口的饭，跑到实验室，打开电脑“救火”;在添加新功能的时候，我都不愿意去翻以前的代码了，总是那么不堪入目。这两个项目，显然是失败的，现在不敢修改，只能是像一个破旧的衣裳，缝缝补补。</p>\n<p>虽然项目的开发是不理想的，但是，我还是从中学到了很多。阅读本章的时候，特别是对产品负责人的职责描述时，深有体会，在两个项目中，我都可以算是项目的负责人，负责把控整个项目的进度和方向，明显会感觉到产品负责人的重要型。在我自己迷茫的时候，整个项目时停滞不前的，项目组成员的开发效率也是低下的;当我明确方向时，整个项目组都明确方向，困难一个一个被攻破，推进迅速。当然，这个其中，少不了项目组成员（开发者）的工作和思考。</p>\n<p>在反思原有开发模式基础上，通过本章学习到了：</p>\n<ul>\n<li>整个项目组需要明确做什么、为什么做、给谁做的思想</li>\n<li>尝试用 <strong>用户故事</strong> 替代文档需求。缩短需求分析的时间，多创建用户故事模型。</li>\n<li>在开始做之前，要定制验收标准和边界情况，最好能做到自动化测试。</li>\n</ul>\n<p>注：当前没有发展成产品负责人的想法，只是在自己的项目中，可以通过实践，验证学得东西。</p>\n<h2 id=\"小批次构建\"><a href=\"#小批次构建\" class=\"headerlink\" title=\"小批次构建\"></a>小批次构建</h2><blockquote>\n<p>小批次构建让每个任务都可以有在段时间（理想情况是四个小时）内完成，保证任务都满足验收标准，或者至少产生可观察的结果。这有助于让任务更容易预估、完成和验收。</p>\n</blockquote>\n<p>我们应该用什么来衡量自己？</p>\n<blockquote>\n<p>我们应该用对客户的价值来衡量自己。</p>\n</blockquote>\n<blockquote>\n<p>如果一个用户故事是复杂型的，那么通常只有一个原因：其中有很多未知因素，我们处理复杂型用户故事的方式是“分离已知和未知”。我们不断地在未知的范围内进行迭代，未知的范围越来越小，直至消失。把未知和已知分离时分割包含未知因素的故事的第一步。一旦某些事无被标记为未知，就将其封装。</p>\n</blockquote>\n<p>探索未知事物的时候需要做的两件事：</p>\n<ul>\n<li>把未知变为已知。</li>\n<li>把未知进行封装。如果能把大的未知问题隐藏起来，那就隐藏起来，以后再处理(这里有封装的意思)。</li>\n</ul>\n<p>更短的反馈回路：<br>反馈的回路可能有多个。与客户交流、迭代或者功能开发后期进行演示、编译器反馈、自动测试、回顾会议、代码审查等。</p>\n<blockquote>\n<p>优秀的软件开发实践需要在构建不同组成部分的同时保证软件的完整性，而且让各个部分尽可能独立。试着通过定义良好的接口来移除组建间的依赖。如果必须有某些依赖，让后来的故事依赖于之前的故事。一个故事应该时完成一个单一目的，或者一个目的可检验的某个方向（单一职责）。</p>\n</blockquote>\n<p>本章学习到了：</p>\n<ul>\n<li>封装未知，将大问题分割成小问题。（虽然一直也是这样做的）</li>\n<li>故事的单一职责。</li>\n<li>小批次构建是有必要的。</li>\n</ul>\n<h2 id=\"持续集成\"><a href=\"#持续集成\" class=\"headerlink\" title=\"持续集成\"></a>持续集成</h2><p>持续集成时一种在构建时期而非发布前进行集成的实践，降低软件开发中的风险，同时做为一种反馈机制，对开发者有这重要的意义。</p>\n<p>定义完成：</p>\n<ul>\n<li>完成。写完一个功能，可以在开发环境中执行，在他的机器上可以得到一定结果，</li>\n<li>完整完成。在开发机器中正常执行，且经过集成。</li>\n<li>完美完成。在开发机器上正常执行，经过集成，清晰且健壮。</li>\n</ul>\n<blockquote>\n<p>构建软件时间，将新的功能签入版本库中，所有开发者都在同一分支上工作，且版本库中除源码之外，还有管理构建的其他文件，包括配置文件、数据库模型、测试代码和测试脚本、第三方库、安装脚本、文档、设计图例、用例、UML图例等。在测试系统中，完整复制生产环境。</p>\n</blockquote>\n<blockquote>\n<p>编写出优秀的单元测试，并且仅仅测试那些需要测试的代码，而不测试那些可能用到的代码。</p>\n</blockquote>\n<blockquote>\n<p>应该保持随时集成。持续的进行集成，尽快从头到尾完成一个用户故事。</p>\n</blockquote>\n<p>构建敏捷设施的7个策略：</p>\n<ul>\n<li>用版本库管理一切</li>\n<li>一次点击全部构建</li>\n<li>持续集成</li>\n<li>为任务定义验收标准</li>\n<li>编写可测试的代码</li>\n<li>保证必要的测试覆盖率</li>\n<li>即时修复失败的构建</li>\n</ul>\n<h2 id=\"协作\"><a href=\"#协作\" class=\"headerlink\" title=\"协作\"></a>协作</h2><p><strong>我们拥有最宝贵的资源就是彼此</strong></p>\n<blockquote>\n<p>结对编程并非轮流使用计算机，而是让两个头脑解决同一个问题，比各自单独工作更迅速而且质量更好。结对编程可以防止团队成员过于专门化，并且帮助团队达成共识。</p>\n</blockquote>\n<p>结对编程的配对方式：</p>\n<ul>\n<li>根据开发者的强项和缺点来配对</li>\n<li>让最有经验的开发者和最少的结对</li>\n<li>随机配对</li>\n</ul>\n<blockquote>\n<p>一个想法在由你的脑海输入到计算机之前，必须要经过其他人的手</p>\n</blockquote>\n<p>伙伴编程：</p>\n<blockquote>\n<p>在每一天最后的一个小时里，你和你的伙伴对一天的开发进行审查。是结对编程的前身，安全尝试工作。</p>\n</blockquote>\n<p>代码审查：</p>\n<blockquote>\n<p>每当一个开发者完成了某一功能，他就可以向其他成员讲解他是如何编写的。 设计和代码的审查应该首先指出设计思路并说明为何选择这种设计。</p>\n</blockquote>\n<p>回顾会议：</p>\n<blockquote>\n<p>团队聚在一起，每个人都有机会发言，意思都差不多，我们做了什么，是如何做的，为什么做，下一次怎么做的更好等。</p>\n</blockquote>\n<p>重要的一点：</p>\n<blockquote>\n<p> <strong>并不是所有人都适合结对，也不是所有的任务都适合结对。</strong></p>\n</blockquote>\n<p>除了结对编程之外，还有穿刺、群战、围攻、伙伴编程。通过加强学习、分享知识，可以改进我们的团队乃至整个产业。</p>\n<p>本章学习到了：</p>\n<p>对结对编程还是十分看好的，觉得这是能在很大程度上减少bug的方式。我有且只有一次这样的开发过程，那次连续一下午的代码编写中有种一气和成的爽快感觉。在开发“班车预约系统”的时候，那是一个核心模块，十分重要，当思路理清之后，老师就坐在我旁边，我边写着边讲这为什么那么做。虽然代码的整洁度不够，但是实现了基本的功能。整个编写的过程中，竟然没有出现几个bug，每当bug快要出现的时候，老师总是追问，为什么这样做，不这样做。这样一思考，就避免了bug的诞生。当时没有觉得这种开发方式有什么独特，当阅读完本章之后，觉得十分可以在团队中实施。</p>\n<h2 id=\"编写整洁的代码\"><a href=\"#编写整洁的代码\" class=\"headerlink\" title=\"编写整洁的代码\"></a>编写整洁的代码</h2><p>对象应该具有定义良好的属性、专一的职责、隐藏的实现，它应该控制自己的状态，而且只应该被定义一次。</p>\n<ul>\n<li>高质量的代码应该内聚：</li>\n</ul>\n<blockquote>\n<p>如果内聚的类只代表一种事物，那么这个事物应该是可以被命名，但是不是它们的名字而是它们的行为决定了它们代表什么。</p>\n</blockquote>\n<ul>\n<li>高质量的代码是松散耦合的</li>\n<li>高质量的代码是封装良好的：</li>\n</ul>\n<blockquote>\n<p> 它隐藏了实现细节，由外而内编程，根据所做的事情命名服务隐藏它是物和封装的。在软件中，你不知道的事情对你无害。用什么来隐藏怎么。</p>\n</blockquote>\n<ul>\n<li><p>高质量的代码时自主的：</p>\n<blockquote>\n<p>它管理自己的职责。如果发现某个方法过分依赖另外一个类的数据，那就应该将这个方法置于这个类中。</p>\n</blockquote>\n</li>\n<li><p>高质量的代码时无冗余的：</p>\n<blockquote>\n<p>代码中的冗余是试图在不同的地方做相同的事情，无论做的是什么，冗余不仅仅是形式的重复，而且还是对意图的重复。</p>\n</blockquote>\n</li>\n</ul>\n<p><strong>不要让完美成为优秀的敌人，在软件中无法实现完美的。</strong></p>\n<p>代码的集体所有权以为着团队中，每个人都可以维护任意部分的代码，即使并不是他们编写的。团队应该确定共同的代码规范、统一领域模型和开发实践、使用同样的词汇来描述设计。</p>\n<p>重构是编写代码的关键步骤，而且贯穿整个开发过程。在编写代码和新功能完成时进行重构。</p>\n<p>代码审查：学习他人风格，不断学习软件开发。阅读他人的代码，编写代码，不断练习。</p>\n<h2 id=\"测试先行\"><a href=\"#测试先行\" class=\"headerlink\" title=\"测试先行\"></a>测试先行</h2><blockquote>\n<p>单元测试并不是测试整个用户故事，而是测试相对来说更小的单元。单元测试也可以当作内部文档来使用。这里的单元是指一个行为单元：一个对立的、可验证的行为。它必须对系统产生可观察的影响。而不和系统的其他行为耦合。一个单元代表一个行为，如果行为不变，测试也不应该变化。</p>\n</blockquote>\n<p>测试先行开发</p>\n<blockquote>\n<p>开发者先针对一个功能编写测试，然后实现那个功能让测试通过。你只需要编写测试覆盖的代码，这样测试覆盖率永远时百分之百。测试也是代码，是系统中的一部分。</p>\n</blockquote>\n<blockquote>\n<p>在敏捷软件开发中，并非在一开始就得到全部的需求，而是一边设计一边整理需求，虽然这样很容易作出一些错误的选择，但是迭代构建也比事前确定所有需求要高效的很多。</p>\n</blockquote>\n<p><strong>如果使用得当，测试先行开发可以帮助开发者编写容易测试和容易维护的代码，但是如果使用不恰当，TDD会成为累赘而非资源。</strong></p>\n<p>通过本章学习：</p>\n<ul>\n<li>测试先行的重要行</li>\n<li>就目前所说的这些理论，必须在开发中去尝试，在实践中体会真理。</li>\n</ul>\n<h2 id=\"用测试描述行为\"><a href=\"#用测试描述行为\" class=\"headerlink\" title=\"用测试描述行为\"></a>用测试描述行为</h2><p>最开始编写测试的时候还没有可以测试的代码。接下来开始编写能让测试通过所需的最简单的实现代码。下一步清理代码提升质量。周期循环。</p>\n<blockquote>\n<p>所有失败的测试都是因为某些已知原因而失败的，而不会因为其他原因失败，而那个测试是系统中唯一可以由此原因导致失败的测试。换句话说 <strong>测试应该是独一无二的。</strong></p>\n</blockquote>\n<blockquote>\n<p>如果代码有多重执行路径，意味着代码的逻辑也会更复杂，所以应该用测试来覆盖代码。每个代码执行路径得到不同的结果，所以需要针对每一个路径进行单元测试。</p>\n</blockquote>\n<blockquote>\n<p>但是单元测试不能测试一系列正确顺序的调用或其他的类似场景，这里引入工作流测试，工作流所测试用所谓的模拟对象进行测试。模拟对象是真实对象的替代。</p>\n</blockquote>\n<p>在查找Bug的时候，我会尝试如构建那些可以得到bug在哪里（或者不会在哪里）的信息场景，然后逐步缩小代码范围，直到找到问题。（这是积累出来的经验）</p>\n<h2 id=\"最后实现设计\"><a href=\"#最后实现设计\" class=\"headerlink\" title=\"最后实现设计\"></a>最后实现设计</h2><p>持续性开发：</p>\n<ul>\n<li>删除死代码</li>\n</ul>\n<blockquote>\n<p>死代码是指那些被注释掉或者不再被调用而永远得不到执行的代码，除了干扰其他开发者之外，它完全没有意义。<strong>删了它</strong>。</p>\n</blockquote>\n<ul>\n<li>保持名称更新</li>\n<li>集中决策</li>\n<li>抽象</li>\n</ul>\n<p>将编码和清理分开，当作不同的任务。只关注实现行为，让测试通过，这样编码更容易。将对象的创建和对象的使用分离。</p>\n<p><strong>用“见名知意”的命名取代注释描述代码，应该用注释来描述为什么要做这些事，而不是做什么。代码本身应该说明自己在做什么。</strong></p>\n<h2 id=\"重构遗留代码\"><a href=\"#重构遗留代码\" class=\"headerlink\" title=\"重构遗留代码\"></a>重构遗留代码</h2><p>重构是指在不改变外部行为的前提下对代码的内部结构进行重组或重新包装。</p>\n<p>修改代码的风险和成本都很高，所以要谨慎行事。对已有代码添加测试。</p>\n<ul>\n<li>以支持修改为目的重构</li>\n<li>以开闭原则为目的重构</li>\n<li>以提高可修改性为目的重构</li>\n</ul>\n<p>不用试图在一开始就找到最佳设计，我们可以随着重构来不断改进设计。</p>\n<p>何时进行重构：</p>\n<ul>\n<li>当关键代码维护不善的时候</li>\n<li>当唯一理解代码的人没空的时候</li>\n<li>当有信息可以揭示更好的设计的时候</li>\n<li>当修改bug的时候</li>\n<li>当需要添加新功能的时候</li>\n<li>当需要为遗留代码写文档的时候</li>\n<li>当从够比重写容易的时候</li>\n</ul>\n<p><strong>从遗留代码中学习</strong></p>"},{"title":"喜欢的歌静静听","date":"2017-10-25T16:00:00.000Z","_content":"\n许久不见的一个哥们突然发来信息，“在吗？”。沉默了许久，打开输入框，却迟迟不能回复“在”。不是沉缅与往事，而是囊中羞涩……\n\n随之，电话已打过来，才知是自己想过了。“明年正月十二结婚，提前通知你，不要提前走了哈！”\n\n<!-- more -->\n\n恍惚见，那个懵懂的少年已经远去，那时的三人行，如今已然只剩下通讯录中的那串号码。那彼时熟悉的一张张脸庞，仿佛隔着尘沙，直至消失不见，越长大越孤单，回去不的只有过去，但是谁又要回去呢？时间是不停的推着我们前行，在某个路口遇到某个人，可能会相伴走一段，然后就在没有道别的时候就已再见。唯有的是，愿有你相伴的这段路，我与你共享这沿途的美景……\n\n我说，“好，到时候，我以茶代酒，陪你不醉不休……”\n\n![喜欢的歌静静听](http://oys3izcsg.bkt.clouddn.com/1110260921024a710a41601504.jpg)\n","source":"_posts/喜欢的歌静静听.md","raw":"---\ntitle: 喜欢的歌静静听\ndate: 2017-10-26\ntags: [心情]\n---\n\n许久不见的一个哥们突然发来信息，“在吗？”。沉默了许久，打开输入框，却迟迟不能回复“在”。不是沉缅与往事，而是囊中羞涩……\n\n随之，电话已打过来，才知是自己想过了。“明年正月十二结婚，提前通知你，不要提前走了哈！”\n\n<!-- more -->\n\n恍惚见，那个懵懂的少年已经远去，那时的三人行，如今已然只剩下通讯录中的那串号码。那彼时熟悉的一张张脸庞，仿佛隔着尘沙，直至消失不见，越长大越孤单，回去不的只有过去，但是谁又要回去呢？时间是不停的推着我们前行，在某个路口遇到某个人，可能会相伴走一段，然后就在没有道别的时候就已再见。唯有的是，愿有你相伴的这段路，我与你共享这沿途的美景……\n\n我说，“好，到时候，我以茶代酒，陪你不醉不休……”\n\n![喜欢的歌静静听](http://oys3izcsg.bkt.clouddn.com/1110260921024a710a41601504.jpg)\n","slug":"喜欢的歌静静听","published":1,"updated":"2021-06-20T10:25:20.130Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluqa1hjc003wrlog0kew5os5","content":"<p>许久不见的一个哥们突然发来信息，“在吗？”。沉默了许久，打开输入框，却迟迟不能回复“在”。不是沉缅与往事，而是囊中羞涩……</p>\n<p>随之，电话已打过来，才知是自己想过了。“明年正月十二结婚，提前通知你，不要提前走了哈！”</p>\n<span id=\"more\"></span>\n\n<p>恍惚见，那个懵懂的少年已经远去，那时的三人行，如今已然只剩下通讯录中的那串号码。那彼时熟悉的一张张脸庞，仿佛隔着尘沙，直至消失不见，越长大越孤单，回去不的只有过去，但是谁又要回去呢？时间是不停的推着我们前行，在某个路口遇到某个人，可能会相伴走一段，然后就在没有道别的时候就已再见。唯有的是，愿有你相伴的这段路，我与你共享这沿途的美景……</p>\n<p>我说，“好，到时候，我以茶代酒，陪你不醉不休……”</p>\n<p><img src=\"http://oys3izcsg.bkt.clouddn.com/1110260921024a710a41601504.jpg\" alt=\"喜欢的歌静静听\"></p>\n","site":{"data":{}},"excerpt":"<p>许久不见的一个哥们突然发来信息，“在吗？”。沉默了许久，打开输入框，却迟迟不能回复“在”。不是沉缅与往事，而是囊中羞涩……</p>\n<p>随之，电话已打过来，才知是自己想过了。“明年正月十二结婚，提前通知你，不要提前走了哈！”</p>","more":"<p>恍惚见，那个懵懂的少年已经远去，那时的三人行，如今已然只剩下通讯录中的那串号码。那彼时熟悉的一张张脸庞，仿佛隔着尘沙，直至消失不见，越长大越孤单，回去不的只有过去，但是谁又要回去呢？时间是不停的推着我们前行，在某个路口遇到某个人，可能会相伴走一段，然后就在没有道别的时候就已再见。唯有的是，愿有你相伴的这段路，我与你共享这沿途的美景……</p>\n<p>我说，“好，到时候，我以茶代酒，陪你不醉不休……”</p>\n<p><img src=\"http://oys3izcsg.bkt.clouddn.com/1110260921024a710a41601504.jpg\" alt=\"喜欢的歌静静听\"></p>"},{"title":"在路上（写给2017年的自己）","date":"2017-03-21T16:00:00.000Z","_content":"\n> 翻了翻日志，才知道上一篇文章竟是写在四年前，然再次提笔，才发现，时间，真的留不住呀，当时也是如此“风骚”的自己，如今已然提笔忘词，读着那时幼稚的文字，看来此时也只能是寥寥敷衍了。\n――写在文之前\n\n<!--more-->\n\n## 何人不忆\n\n\n突然想起某个老同学，翻翻联系人，发现还是能够联系上的，心中有点窃喜，好久不见，朋友你还好吗？很幸运的是那时肆意放荡的年纪有你相陪，也很期盼的是多年后我们还能够惦记着对方。\n\n\n在记忆中的你，永远是那么的亲切，此时突然感觉有很多的话要和你说呢，然而仔细想想，却又说不出口了。\n\n\n有些美好的人和事，也只能无奈的放在记忆中，当误闯入这片角落时，飞扬的尘土，遮蔽了湿润的双眼。回不去的时间，我只在此时，将最好的祝福都送于你。我也只能期望着再见面时，你喝酒我饮茶，陪你一醉方休。\n\n\n## 在此时，有谁\n\n\n从市中心搬到了整天妖风肆虐的荒郊野岭，原本已是只是用来夸张说笑的“两点一线的生活”如今变得贴切无比。从记忆中抽身出来，只能无奈的面对现实，喜欢自己的工作，但是却怕自己跟不上时代的脚步，从行行code中寻找bug，那么面对生活呢，却只能是装作无所不知的模样。\n\n\n还在祈祷着什么呢，已然身边有佳人作伴，我也只能闷头工作，嘴上说的永远比做的要多，可是嘴上说的也永远没有心里想的要多。冬去春来，怎知春寒料峭，我只为你遮风，还想为你挡雨。\n\n\n## 我在这里，愿\n\n\n向前眺望，象牙塔般的大学生活，从指尖悄悄溜走大半，剩下的是屈指可数的时日，给学弟学妹们聊着大学要如何的把握时间，如何的自主学习，那么“学习”对于我又是何言? \n\n\n整天忙碌在工作室，从“小王”到“文哥”变化的是时间的尺寸和成长的曲线，想将更多的时间投入到学习中，那怎样的定义才为“学习”，我只想从这里离开的时候，这里会承载着我大学生活中最美好的时光，纵然我们都已经选择不同的路，各自收拾行囊奔向自己的理想。\n\n\n走着、走着天就亮了，从这里，再做一个起点，出发。\n\n\n——2017年3月4日夜\n\n\n![1110260921024a710a41601504.jpg](https://i.loli.net/2017/07/19/596e32d91a359.jpg)\n","source":"_posts/在路上（写给2017年的自己）.md","raw":"---\ntitle: 在路上（写给2017年的自己）\ndate: 2017-03-22\ntags: [随笔]\n---\n\n> 翻了翻日志，才知道上一篇文章竟是写在四年前，然再次提笔，才发现，时间，真的留不住呀，当时也是如此“风骚”的自己，如今已然提笔忘词，读着那时幼稚的文字，看来此时也只能是寥寥敷衍了。\n――写在文之前\n\n<!--more-->\n\n## 何人不忆\n\n\n突然想起某个老同学，翻翻联系人，发现还是能够联系上的，心中有点窃喜，好久不见，朋友你还好吗？很幸运的是那时肆意放荡的年纪有你相陪，也很期盼的是多年后我们还能够惦记着对方。\n\n\n在记忆中的你，永远是那么的亲切，此时突然感觉有很多的话要和你说呢，然而仔细想想，却又说不出口了。\n\n\n有些美好的人和事，也只能无奈的放在记忆中，当误闯入这片角落时，飞扬的尘土，遮蔽了湿润的双眼。回不去的时间，我只在此时，将最好的祝福都送于你。我也只能期望着再见面时，你喝酒我饮茶，陪你一醉方休。\n\n\n## 在此时，有谁\n\n\n从市中心搬到了整天妖风肆虐的荒郊野岭，原本已是只是用来夸张说笑的“两点一线的生活”如今变得贴切无比。从记忆中抽身出来，只能无奈的面对现实，喜欢自己的工作，但是却怕自己跟不上时代的脚步，从行行code中寻找bug，那么面对生活呢，却只能是装作无所不知的模样。\n\n\n还在祈祷着什么呢，已然身边有佳人作伴，我也只能闷头工作，嘴上说的永远比做的要多，可是嘴上说的也永远没有心里想的要多。冬去春来，怎知春寒料峭，我只为你遮风，还想为你挡雨。\n\n\n## 我在这里，愿\n\n\n向前眺望，象牙塔般的大学生活，从指尖悄悄溜走大半，剩下的是屈指可数的时日，给学弟学妹们聊着大学要如何的把握时间，如何的自主学习，那么“学习”对于我又是何言? \n\n\n整天忙碌在工作室，从“小王”到“文哥”变化的是时间的尺寸和成长的曲线，想将更多的时间投入到学习中，那怎样的定义才为“学习”，我只想从这里离开的时候，这里会承载着我大学生活中最美好的时光，纵然我们都已经选择不同的路，各自收拾行囊奔向自己的理想。\n\n\n走着、走着天就亮了，从这里，再做一个起点，出发。\n\n\n——2017年3月4日夜\n\n\n![1110260921024a710a41601504.jpg](https://i.loli.net/2017/07/19/596e32d91a359.jpg)\n","slug":"在路上（写给2017年的自己）","published":1,"updated":"2021-06-20T10:25:20.131Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluqa1hjc003yrloggwk1do3p","content":"<blockquote>\n<p>翻了翻日志，才知道上一篇文章竟是写在四年前，然再次提笔，才发现，时间，真的留不住呀，当时也是如此“风骚”的自己，如今已然提笔忘词，读着那时幼稚的文字，看来此时也只能是寥寥敷衍了。<br>――写在文之前</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h2 id=\"何人不忆\"><a href=\"#何人不忆\" class=\"headerlink\" title=\"何人不忆\"></a>何人不忆</h2><p>突然想起某个老同学，翻翻联系人，发现还是能够联系上的，心中有点窃喜，好久不见，朋友你还好吗？很幸运的是那时肆意放荡的年纪有你相陪，也很期盼的是多年后我们还能够惦记着对方。</p>\n<p>在记忆中的你，永远是那么的亲切，此时突然感觉有很多的话要和你说呢，然而仔细想想，却又说不出口了。</p>\n<p>有些美好的人和事，也只能无奈的放在记忆中，当误闯入这片角落时，飞扬的尘土，遮蔽了湿润的双眼。回不去的时间，我只在此时，将最好的祝福都送于你。我也只能期望着再见面时，你喝酒我饮茶，陪你一醉方休。</p>\n<h2 id=\"在此时，有谁\"><a href=\"#在此时，有谁\" class=\"headerlink\" title=\"在此时，有谁\"></a>在此时，有谁</h2><p>从市中心搬到了整天妖风肆虐的荒郊野岭，原本已是只是用来夸张说笑的“两点一线的生活”如今变得贴切无比。从记忆中抽身出来，只能无奈的面对现实，喜欢自己的工作，但是却怕自己跟不上时代的脚步，从行行code中寻找bug，那么面对生活呢，却只能是装作无所不知的模样。</p>\n<p>还在祈祷着什么呢，已然身边有佳人作伴，我也只能闷头工作，嘴上说的永远比做的要多，可是嘴上说的也永远没有心里想的要多。冬去春来，怎知春寒料峭，我只为你遮风，还想为你挡雨。</p>\n<h2 id=\"我在这里，愿\"><a href=\"#我在这里，愿\" class=\"headerlink\" title=\"我在这里，愿\"></a>我在这里，愿</h2><p>向前眺望，象牙塔般的大学生活，从指尖悄悄溜走大半，剩下的是屈指可数的时日，给学弟学妹们聊着大学要如何的把握时间，如何的自主学习，那么“学习”对于我又是何言? </p>\n<p>整天忙碌在工作室，从“小王”到“文哥”变化的是时间的尺寸和成长的曲线，想将更多的时间投入到学习中，那怎样的定义才为“学习”，我只想从这里离开的时候，这里会承载着我大学生活中最美好的时光，纵然我们都已经选择不同的路，各自收拾行囊奔向自己的理想。</p>\n<p>走着、走着天就亮了，从这里，再做一个起点，出发。</p>\n<p>——2017年3月4日夜</p>\n<p><img src=\"https://i.loli.net/2017/07/19/596e32d91a359.jpg\" alt=\"1110260921024a710a41601504.jpg\"></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>翻了翻日志，才知道上一篇文章竟是写在四年前，然再次提笔，才发现，时间，真的留不住呀，当时也是如此“风骚”的自己，如今已然提笔忘词，读着那时幼稚的文字，看来此时也只能是寥寥敷衍了。<br>――写在文之前</p>\n</blockquote>","more":"<h2 id=\"何人不忆\"><a href=\"#何人不忆\" class=\"headerlink\" title=\"何人不忆\"></a>何人不忆</h2><p>突然想起某个老同学，翻翻联系人，发现还是能够联系上的，心中有点窃喜，好久不见，朋友你还好吗？很幸运的是那时肆意放荡的年纪有你相陪，也很期盼的是多年后我们还能够惦记着对方。</p>\n<p>在记忆中的你，永远是那么的亲切，此时突然感觉有很多的话要和你说呢，然而仔细想想，却又说不出口了。</p>\n<p>有些美好的人和事，也只能无奈的放在记忆中，当误闯入这片角落时，飞扬的尘土，遮蔽了湿润的双眼。回不去的时间，我只在此时，将最好的祝福都送于你。我也只能期望着再见面时，你喝酒我饮茶，陪你一醉方休。</p>\n<h2 id=\"在此时，有谁\"><a href=\"#在此时，有谁\" class=\"headerlink\" title=\"在此时，有谁\"></a>在此时，有谁</h2><p>从市中心搬到了整天妖风肆虐的荒郊野岭，原本已是只是用来夸张说笑的“两点一线的生活”如今变得贴切无比。从记忆中抽身出来，只能无奈的面对现实，喜欢自己的工作，但是却怕自己跟不上时代的脚步，从行行code中寻找bug，那么面对生活呢，却只能是装作无所不知的模样。</p>\n<p>还在祈祷着什么呢，已然身边有佳人作伴，我也只能闷头工作，嘴上说的永远比做的要多，可是嘴上说的也永远没有心里想的要多。冬去春来，怎知春寒料峭，我只为你遮风，还想为你挡雨。</p>\n<h2 id=\"我在这里，愿\"><a href=\"#我在这里，愿\" class=\"headerlink\" title=\"我在这里，愿\"></a>我在这里，愿</h2><p>向前眺望，象牙塔般的大学生活，从指尖悄悄溜走大半，剩下的是屈指可数的时日，给学弟学妹们聊着大学要如何的把握时间，如何的自主学习，那么“学习”对于我又是何言? </p>\n<p>整天忙碌在工作室，从“小王”到“文哥”变化的是时间的尺寸和成长的曲线，想将更多的时间投入到学习中，那怎样的定义才为“学习”，我只想从这里离开的时候，这里会承载着我大学生活中最美好的时光，纵然我们都已经选择不同的路，各自收拾行囊奔向自己的理想。</p>\n<p>走着、走着天就亮了，从这里，再做一个起点，出发。</p>\n<p>——2017年3月4日夜</p>\n<p><img src=\"https://i.loli.net/2017/07/19/596e32d91a359.jpg\" alt=\"1110260921024a710a41601504.jpg\"></p>"},{"title":"大话设计模式阅读笔记","date":"2019-01-30T16:00:00.000Z","_content":"\n\n[《大话设计模式》](https://item.jd.com/10079261.html)这本书买了很久，但是一直没有坚持看完。毕业之后，丢了很多书在学校，但是这本书没有舍得丢下。现在看来当初是明智的，再次阅读的时候，才发现这本书浅显易懂，有趣，通过一个个小故事，缓缓道来设计模式的妙用。在阅读的时候，有很多的收获，其实说的这些模式，虽然没有真正的去了解，但是发现在开发过程中，很多都是常用到的，没有总结出来而已。在阅读的过程中，很多时候有感，但是又觉得差一点就能突破。在这里做下阅读笔记，算是阅读的输出。\n\n\n原书中的代码都是用C#是实现的，在阅读的过程中，我根据对Python的掌握进行了转换。 [demo仓库地址](https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua)\n\n<!--more-->\n\n# 设计模式的基本原则\n\n## 开放-封闭原则\n\n**对于拓展是开放的，对于更改是封闭的。**\n\n\n无论模块是多么的封闭，都会存在一些无法对之封闭的变化，既然不可能完全封闭，设计人员必须对于他设计的模块应该对哪种变化做出选择。他必须先猜测出最有可能发生的种类，然后构造抽象来隔离那些变化。\n\n面对需求，对程序的改动是通过新代码进行的，而不是更改现有的代码。\n\n拒绝不成熟的抽象和抽象本省一样重要。\n\n## 单一职责原则\n\n**就一个类而言，应该仅有一个引起它变化的原因。**\n\n\n软件设计真正要做的许多内容，就是发现职责并把这些职责分离。其实要去判断是否应该分离出类来，也不难，那就是你能够想到对于一个动机去改变一个类，那么这个类就是具有多于一个的职责。\n\n## 依赖倒转原则\n\n**A、高层模块不应该依赖低层模块，两个都应该依赖抽象**\n**B、抽象不应该依赖细节。细节应该依赖抽象。**\n\n依赖倒转原则其实可以说是面向对象设计的标志，用哪种语言来写程序不重要，如果编写时，考虑都是如何针对抽象编程而不是针对细节编程，即程序中所有的依赖关系都是终止于抽象类，或者接口，那就是面向对象的设计，反之就是过程化的设计了。\n\n## 里氏替换原则\n\n**子类必须能够替换掉它们的父类。换句话你说，任何基类可以出现的地方，子类一定可以出现。** 里氏替换原则是继承复用的基石，只有当衍生类可以替换基类，软件单位的功能不受到影响时，基类才能真正被复用，而衍生类也能够在基类的基础上增加新的行为。\n\n里氏代换原则是对“开-闭”原则的补充。实现“开闭”原则的关键步骤就是抽象化。而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。里氏替换原则中，子类对父类的方法尽量不要重写和重载。因为父类代表了定义好的结构，通过这个规范的接口与外界交互，子类不应该随便破坏它。\n\n## 迪米特法则(最少知道原则)\n\n**一个类对自己依赖的类知道的越少越好。**\n\n无论被依赖的类多么复杂，都应该将逻辑封装在方法的内部，通过公用方法提供给外部。这样当被依赖的类变化时，才能最少的影响该类。\n\n最少知道原则的另外一个表达方式是：只与直接的朋友通信，类之间只要有耦合关系，就叫朋友关系。耦合分为依赖、关联、聚合、组合等。我们称出现为成员变量、方法参数、方法返回值中的类为直接朋友。局部变量、临时变量则不是直接关系。我们要求陌生的类不要作为局部变量出现在类中。\n\n迪米特法则是面向对象的根本思想，是强调了类的松耦合关系。类之间的耦合越弱，越有利于复用，一个处在弱耦合的类被修改，不会对关系的类造成波及。\n\n## 合成复用原则\n\n**尽量首先使用合成\\聚合的方式，而不是使用继承。**\n\n\n# 设计模式分类：\n\n- 创建型模式，共五种：[工厂方法模式](#工厂方法模式)、[抽象工厂模式](#抽象工厂模式)、[单例模式](#单例模式)、[建造者模式](#建造者模式)、[原型模式](#原型模式)。\n- 结构型模式，共七种：[适配器模式](#适配器模式)、[装饰器模式](#装饰模式)、[代理模式](#代理模式)、[外观模式](#外观模式)、[桥接模式](#桥接模式)、[组合模式](#组合模式)、[享元模式](#享元模式)。\n- 行为型模式，共十一种：[策略模式](#策略模式)、[模板方法模式](#模板方法模式)、[观察者模式](#观察者模式)、[迭代器模式](#迭代器模式)、[职责链模式](#职责链模式)、[命令模式](#命令模式)、[备忘录模式](#备忘录模式)、[状态模式](#状态模式)、[访问者模式](#访问者模式)、[中介者模式](#中介者模式)、[解释器模式](#解释器模式)。\n\n\n参考\n\n- [23种设计模式汇总整理](https://blog.csdn.net/jason0539/article/details/44956775)\n\n# 设计模式详述\n\n源码仓库[https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua](https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua)\n\n## 简单工厂模式\n\n```\n>>> oper = OperationFactory.create_operate('+')\n>>> oper.number1 = 12\n>>> oper.number2 = 13\n>>> oper.get_result()\n25\n>>> oper = OperationFactory.create_operate('/')\n>>> oper.number1 = 12\n>>> oper.number2 = 0\n>>> oper.get_result()\nTraceback (most recent call last):\n\t...\nValueError: 除数不能为0\n```\n\n## 策略模式\n\n[strategy.py](https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua/strategy.py)\n\n策略模式：它定义了算法家族，分别封装起来，让他们之间可以相互替换，此模式让算法的变化，不会影响到使用算法的客户。\n\n```\n\n>>> csuper = CashContext('正常收费')\n>>> csuper.get_result(20)\n20.0\n>>> csuper = CashContext('满300返100')\n>>> csuper.get_result(300)\n200.0\n>>> csuper.get_result(200)\n200.0\n>>> csuper = CashContext('打八折')\n>>> csuper.get_result(300)\n240.0\n```\n\n策略模式就是用来封装算法的，但是在实践中，我们可以用它来封装几乎任何类型的规则，只要在分析过程中根据需要在不同时间应用不同的业务规则，就可以考虑使用策略模式处理这种变化的可能性。\n\n\n## 装饰模式\n\n[decorator.py](https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua/decorator.py)\n\n装饰模式：动态地给一个对象添加一些额外的职责，就增加功能来说，装饰模式比生成子类更灵活。\n\n装饰模式的优点就是把类中的装饰功能从类中搬移去除，这样可以简化原有的类。有效地把类的核心职责和装饰功能区分开了，而且可以去除相关类中的重复的装饰逻辑。\n\n\n## 代理模式\n\n[proxy.py](https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua/proxy.py)\n\n为其他对象提供一种代理以控制对这个对象的访问。\n\n代码示例：A追求C，委托B送礼物给C。需求的重点是A和C不能直接接触::\n\n```\n>>> jiaojiao = SchoolGirl()\n>>> jiaojiao.name = '李娇娇'\n```\n\n## 工厂方法模式\n\n[factory_method.py](https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua/factory_method.py)\n\n\n工厂方法模式，定义一个用于创建对象的接口，让子类决定实例化哪个类。工厂方法使一个类的实例化延迟到其子类。\n\n代码示例：学习雷锋好榜样，继承雷锋精神的大学生和社区的构建::\n\n```\n>>> factory = UndergraduateFactory()\n>>> student = factory.create_leifeng()\n>>> student.buyrice()\n买米\n>>> student.sweep()\n扫地\n>>> student.wash()\n洗衣\n\n```\n\n工厂方法把简单工厂的内部逻辑判断移到了客户端代码来进行。\n\n## 原型模式\n\n[prototype.py](https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua/prototype.py)\n\n原型模式：用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。其实就是从一个对象再创建另外一个可定制的对象，并且不需要知道任何创建的细节::\n\n```\n\n>>> a = Resume('大鸟')\n>>> a.set_personal_info('男', '29')\n>>> a.set_work_experience('1998-2000', 'xx公司')\n\n>>> b = a.clone()\n>>> b.set_work_experience('2000-2006', 'xx企业')\n\n>>> c = a.clone()\n>>> c.set_personal_info('男', '24')\n\n>>> a.display()\n大鸟 男 29\n工作经历: 1998-2000 xx公司\n>>> b.display()\n大鸟 男 29\n工作经历: 2000-2006 xx企业\n>>> c.display()\n大鸟 男 24\n工作经历: 1998-2000 xx公司\n```\n\n一般在初始化的信息不发生变化的情况下，克隆是最好的办法，它既隐藏了对象的创建细节，又对性能是大大的提升。\n\n\n## 模板方法模式\n\n[template_method.py](https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua/template_method.py)\n\n模板方法模式：定义一个操作中的算法的骨架，而将一些步骤延迟到子类中，模板方法是的子类可以不改变一个算法的结构即可重新定义该算法的特定步骤::\n\n```\n>>> a = ConcreteClassA()\n>>> a.template_method()\n具体类A方法1实现\n具体类A方法2实现\n>>> b = ConcreteClassB()\n>>> b.template_method()\n具体类B方法1实现\n具体类B方法2实现\n```\n\n\n## 外观模式\n\n[facade.py](https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua/facade.py)\n\n外观模式：为子系统中的一组接口提供一个一致的界面，此模式定义了一个高层接口，这个接口使得这一子系统更加容易使用::\n```\n>>> facade = Facade()\n>>> facade.method_a()\n--- 方法组A() ---\n子系统方法一\n子系统方法二\n子系统方法四\n>>> facade.method_b()\n--- 方法组B() ---\n子系统方法二\n子系统方法三\n```\n\n外观模式完美的体现了依赖倒转原则和迪米特法则的思想，是常用的模式之一。经典的三层架构，就需要考虑在层与层之间建立外观Facade。\n\n\n## 建造者模式\n\n[builder.py](https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua/builder.py)\n\n建造者模式：将一个复杂对象的构建与它的表示分离，是的同样的构建过程，可以创建不同的表示::\n\n```\n>>> director = Director()\n>>> b1 = ConcreateBuilder1()\n>>> b2 = ConcreateBuilder2()\n\n>>> director.construct(b1)\n>>> p1 = b1.get_result()\n>>> p1.show()\n产品 创建 ----\n部件A\n部件B\n\n>>> director.construct(b2)\n>>> p2 = b2.get_result()\n>>> p2.show()\n产品 创建 ----\n部件X\n部件Y\n```\n\n建造者模式是当常见复杂对象的算法应该独立于该对象的组成部分以及它们的装配方式时使用的模式。\n\n如果我们用了建造者模式，那么用户就只需指定需要建造的类型就可以得到他们，而具体建造的过程和细节就不需要知道了。\n\n\n## 观察者模式\n\n[observer.py](https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua/observer.py)\n\n观察者模式：定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主体对象。这个主题对象在状态发生变化时，会通知所有的观察者对象，让它们能够自动更新自己::\n\n```\n>>> s = ConcreteSubject()\n>>> s.attach(ConcreteObserver(s, 'X'))\n>>> s.attach(ConcreteObserver(s, 'Y'))\n>>> s.attach(ConcreteObserver(s, 'Z'))\n\n>>> s.subject_state = 'ABC'\n>>> s.notify()\n观察者X的新状态是ABC\n观察者Y的新状态是ABC\n观察者Z的新状态是ABC\n```\n\n当一个对象的改变需要同时改变其他对象的时候，且它不知道具体有多少对象有待改变时，应该考虑使用观察者模式。\n\n观察者模式所做的工作其实就是解除耦合，让耦合的双方都依赖抽象，而不是依赖于具体。从而使得各自的变化都不会影响另一边的变化。是依赖倒转原则的最佳体现。\n\n\n但是抽象通知者还是依赖抽象观察者。在代码中抽象观察者中有一个update()方法，具体观察者中都要实现该方法，但是在实际中，可能有一些不一样的操作，根本就不是同名的方法。这是不足的地方。\n\n\n## 抽象工厂模式\n\n[abstract_factory.py](https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua/abstract_factory.py)\n\n抽象工厂方法：提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类::\n\n```\n>>> user = User()\n>>> dept = Department()\n>>> factory = SqlserverFactory()\n>>> iu = factory.create_user()\n>>> iu.insert(user)\n在sql server 中给User表增加一条记录\n>>> iu.get_user(1)\n在sql server 中根据ID得到User表一条记录\n\n>>> factory = AccessFactory()\n>>> id = factory.create_department()\n>>> id.insert(dept)\n在Access中给Department表增加一条记录\n>>> id.get_dept(1)\n在Access中根据ID得到Department表一条记录\n>>> iu = factory.create_user()\n>>> iu.insert(user)\n在Access中给User表增加一条记录\n>>> iu.get_user(1)\n在Access中根据Id得到User表一条记录\n\n```\n\n抽象工厂模式的优点：\n\n- 1、易于交换产品系列，由于具体工厂类，在一个应用中只需要在初始化的时候出现一次，这就使得改变一个应用的具体工厂变得非常容易，它只需要改变具体工厂即可使用不 同\n的产品配置。\n- 2、让具体的创建实例过程和客户端分离，客户端是通过它们的抽象接口操作实例，产品的具体类名也被具体工厂的实现分离，不会出现在客户代码中。\n\n缺点：\n新增或修改时，可能需要大量的改动。\n\n\n## 状态模式\n\n[state.py](https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua/state.py)\n\n状态模式：当一个对象的内在状态改变时，允许改变其行为，这个对象看起来像是一个改变了其类::\n\n```\n>>> c = Context(ConcreteStateA())\n>>> c.request()\n当前状态：stateB\n>>> c.request()\n当前状态：stateA\n>>> c.request()\n当前状态：stateB\n>>> c.request()\n当前状态：stateA\n>>> c.request()\n当前状态：stateB\n```\n\n状态模式主要解决的是当控制一个对象状态转换的条件表达式过于复杂时的情况，把状态的判断转移到表示不同状态的一系列类中可以把复杂的判断逻辑简化。\n\n状态模式的好处是将与特定状态相关的行为局部化，并且将不同状态的行为分割开来。\n\n\n## 适配器模式\n\n[adapter.py](https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua/adapter.py)\n\n适配器模式：将一个类的接口转换成客户希望的另外一个接口。使得原本由于接口不兼容而不能一起工作的那些类可以一起工作::\n\n```\n>>> target = Adapter()\n>>> target.request()\n特殊请求\n```\n\n\n## 备忘录模式\n\n[memento.py](https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua/memento.py)\n\n备忘录模式：在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样就可以将该对象恢复到原先保存的状态::\n\n```\n>>> o = Originator()\n>>> o.state = 'ON'  # 初始状态\n>>> o.show()\nstate= ON\n\n>>> caretaker = Caretaker()\n>>> caretaker.memento = o.create_memento()\n\n>>> o.state = 'OFF'  # 改变状态\n>>> o.show()\nstate= OFF\n\n>>> o.set_memento(caretaker.memento)  # 恢复\n>>> o.show()\nstate= ON\n```\n\n缺点：当需要备忘的对象状态数据很大很多时，那么在资源消耗上，备忘录对象会非常消耗资源。\n\n\n## 组合模式\n\n[composite.py](https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua/composite.py)\n\n组合模式：将对象组合成树形结构以表示部分整体的层次结构，组合模式使得用户对单个对象和组合对象的使用具有一致性::\n\n```\n>>> root = Composite('root')\n>>> root.add(Leaf('Leaf A'))\n>>> root.add(Leaf('Leaf B'))\n\n>>> comp = Composite('Composite X')\n>>> comp.add(Leaf('Leaf A'))\n>>> comp.add(Leaf('Leaf B'))\n\n>>> root.add(comp)\n\n>>> comp2 = Composite('Composite XY')\n>>> comp2.add(Leaf('Leaf A'))\n>>> comp2.add(Leaf('Leaf B'))\n\n>>> comp.add(comp2)\n\n>>> root.display(1)\n- root\n-- Leaf A\n-- Leaf B\n-- Composite X\n--- Leaf A\n--- Leaf B\n--- Composite XY\n---- Leaf A\n---- Leaf B\n```\n\n组合模式定义了包含基本对象和组合对象的类层次结构，基本对象可以被组合成更复杂的组合对象，而这个组合对象又可以被组合这样不断地递归下去。\n\n\n## 迭代器模式\n\n[iterator.py](https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua/iterator.py)\n\n迭代器模式：提供一种方法顺序访问一个聚合对象中各个元素，而不是暴露该对象的内部表示。代码事例为乘务员迭代检票的模拟演示::\n\n```\n>>> a = ConcreteAggregate()\n>>> a[0] = '大鸟'\n>>> a[1] = '小菜'\n>>> a[2] = '行李'\n>>> a[3] = '老外'\n>>> a[4] = '员工'\n>>> a[5] = '小偷'\n\n>>> i = ConcreteIterator(a)\n>>> item = i.first()\n>>> while not i.is_done():\n...     print('{} 请买票!'.format(i.current_item()))\n...     i.next()\n大鸟 请买票!\n小菜 请买票!\n行李 请买票!\n老外 请买票!\n员工 请买票!\n小偷 请买票!\n```\n\n为遍历不同的聚合结构提供如开始、下一个、是否结束、当前哪一项等统一的接口。现在高级编程语言如C#、JAVA、Python等本身已经把这个模式做在语言中。\n\n\n## 单例模式\n\n[singleton.py](https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua/singleton.py)\n\n单例模式：保证一个类仅有一个实例，并提供一个访问它的全局访问点::\n\n```\n>>> singleton1 = Singleton('wen') # doctest: +ELLIPSIS\n单例：...\n>>> singleton2 = Singleton('wen1')  # doctest: +ELLIPSIS\n单例：...\n>>> print(singleton1 is singleton2)\nTrue\n```\n\n通常我们可以让一个全局变量使得一个对象被访问，但是它不能防止你实例化多个对象，一个最好的办法就是：让类自身负责它的唯一实例。这个类可以保证没有其他的实例可以被创建，并且它可以提供一个访问该实例的方法。\n\n\n## 桥接模式\n\n[bridge.py](https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua/bridge.py)\n\n桥接模式：将抽象部分与它的实现部分分离，使他们都可以独立的变化::\n\n```\n\n>>> ab = RefinedAbstraction()\n>>> ab.implementor = ConcreteImplementorA()\n>>> ab.operation()\n具体实现A的方法执行。\n\n>>> ab.implementor = ConcreteImplementorB()\n>>> ab.operation()\n具体实现B的方法执行。\n```\n\n## 命令模式\n\n[command.py](https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua/command.py)\n\n命令模式：将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化；对请求排队或记录请求日志，以及支持可撤销的操作。\n\n```\n>>> r = Receiver()\n>>> c = ConcreteCommand(r)\n>>> i = Invoker()\n>>> i.command = c\n>>> i.execute_command()\n执行请求！\n```\n\n命令模式的优点：\n- 1 能较容易的设计一个命令队列\n- 2 在需要的情况下，可以较容易的将命令记入日志\n- 3 允许接收请求的一方决定是否要否决请求\n- 4 可以容易的实现对请求的撤销和重做\n- 5 由于加新的具体命令类不影响其他的类，因此增加新的具体命令类很容易\n- 6 命令模式把请求一个操作的对象与知道怎么执行一个操作的对象分割开。\n\n\n## 职责链模式\n\n[chain_of_responsibility.py](https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua/chain_of_responsibility.py)\n\n职责链模式：使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。将这个对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。\n\n```\n>>> h1 = ConcreteHandler1()\n>>> h2 = ConcreteHandler2()\n>>> h3 = ConcreteHandler3()\n\n>>> h1.successor = h2  # 设置职责链上家和下家\n>>> h2.successor = h3\n\n>>> requests = [2, 5, 14, 22, 18, 3, 27, 20]\n\n>>> for request in requests:\n...     h1.handle_request(request)\nConcreteHandler1 处理请求 2\nConcreteHandler1 处理请求 5\nConcreteHandler2 处理请求 14\nConcreteHandler3 处理请求 22\nConcreteHandler2 处理请求 18\nConcreteHandler1 处理请求 3\nConcreteHandler3 处理请求 27\nConcreteHandler3 处理请求 20\n```\n\n需要注意的地方，一个请求极有可能到了链的末端都得不到处理，或者因为没有正确配置而得不到处理。\n\n\n## 中介者模式\n\n[mediator.py](https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua/mediator.py)\n\n中介者模式：用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显式的相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互::\n```\n\n>>> m = ConcreteMediator()\n>>> c1 = ConcreteHandler1(m)\n>>> c2 = ConcreteHandler2(m)\n\n>>> m.colleague1 = c1\n>>> m.colleague2 = c2\n\n>>> c1.send('吃饭了吗？')\n同事2得到消息： 吃饭了吗？\n>>> c2.send('没有呢，你打算请客？')\n同事1得到消息： 没有呢，你打算请客？\n```\n\n\n## 享元模式\n\n[flyweight.py](https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua/flyweight.py)\n\n享元模式：运用共享技术有效地支持大量细粒度的对象::\n\n```\n>>> extrinsicstate = 22\n>>> f = FlyweightFactory()\n>>> fx = f.get_flyweight('X')\n>>> fx.operation(extrinsicstate - 1)\n具体Flyweight: 21\n\n>>> fy = f.get_flyweight('Y')\n>>> fy.operation(extrinsicstate - 2)\n具体Flyweight: 20\n\n>>> uf = UnsharedConcreteFlyweight()\n>>> uf.operation(extrinsicstate - 3)\n不共享的具体Flyweight: 19\n```\n\n享元模式可以避免大量非常相似类的开销。在程序设计中，有时需要生成大量的细粒度的类示例来表示数据，如果能够发现这些实例除了几个参数外基本上都相同的，有时就能够受大幅度的减少需要实例化的类数量。如果把这些参数移到类实例的外面，在方法调用的时候将它们传递进来，就可以通过共享大幅度的减少单个实例的数目。\n\n应用场合：如果一个应用程序使用了大量的对象，而大量的这些对象造成了很大的存储开销时，应该考虑使用，还有就是对象的大多数状态可以外部状态，如果删除对象的外部状态，那么可以用相对较少的共享对象取代很多的组对象，此时可以考虑使用享元模式。\n\n## 解释器模式\n\n[interpreter.py](https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua/interpreter.py)\n \n解释器模式：给定一个语言，定义它的文法的一种表示，并定义一个解释器，这个解释器使用该表示来解释语言中的句子::\n\n```\n>>> context = Context()\n>>> ll = []\n>>> ll.append(TerminalExpression())\n>>> ll.append(TerminalExpression())\n>>> ll.append(NonterminalExpression())\n>>> ll.append(TerminalExpression())\n\n>>> for exp in ll:\n...     exp.interpret(context)\n终端解释器\n终端解释器\n非终端解释器\n终端解释器\n```\n\n比如，在字符串搜索匹配的字符或判断一个字符串是否符合我们规定的格式，我们会用到的正则表达式技术，就是该模式的很好应用。\n\n优点：容易的改变和扩展文法，因为该模式使用类来表示文法规则，你可使用继承来改变或扩展该方法。也比较容易实现文法，因为定义抽象语法树中各个节点的类的实现大体类似，这些类都易于直接编写。\n\n缺点：该模式为文法中的每一条规则至少定义了一个类，因此包含许多规则的文法就很难管理和维护。建议当文法非常复杂时，使用其他的技术如语法分析程序或编译器生成器来处理。\n\n\n## 访问者模式\n\n[visitor.py](https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua/visitor.py)\n\n\n访问者模式：表示一个作用于某对象结构中各元素的操作。它使你可以在不改变各元素的类的前提下定义于这些元素的新操作::\n\n```\n>>> o = ObjectStructure()\n>>> o.attach(ConcreteElementA())\n>>> o.attach(ConcreteElementB())\n\n>>> v1 = ConcreteVisitor1()\n>>> v2 = ConcreteVisitor2()\n\n>>> o.accept(v1)\nConcreteElementA被ConcreteVisitor1访问\nConcreteElementB被ConcreteVisitor1访问\n\n>>> o.accept(v2)\nConcreteElementA被ConcreteVisitor2访问\nConcreteElementB被ConcreteVisitor2访问\n```\n\n访问者模式适用于数据结构相对稳定的系统，它把数据结构作用于结构上的操作之间的耦合解脱开，使得操作集合可以相对自由地演化。\n\n如果系统有比较稳定的数据结构又有易于变化的算法的话，使用访问者模式是比较合适的因为该模式使得算法操作的增加变得容易。\n\n缺点：就是使增加新的数据结构变得困难了。该模式较为复杂。当你真正需要它的时候，才考虑使用它。\n","source":"_posts/大话设计模式阅读笔记.md","raw":"---\ntitle: 大话设计模式阅读笔记\ndate: 2019-01-31\ntags: [阅读笔记, 设计模式, python]\n---\n\n\n[《大话设计模式》](https://item.jd.com/10079261.html)这本书买了很久，但是一直没有坚持看完。毕业之后，丢了很多书在学校，但是这本书没有舍得丢下。现在看来当初是明智的，再次阅读的时候，才发现这本书浅显易懂，有趣，通过一个个小故事，缓缓道来设计模式的妙用。在阅读的时候，有很多的收获，其实说的这些模式，虽然没有真正的去了解，但是发现在开发过程中，很多都是常用到的，没有总结出来而已。在阅读的过程中，很多时候有感，但是又觉得差一点就能突破。在这里做下阅读笔记，算是阅读的输出。\n\n\n原书中的代码都是用C#是实现的，在阅读的过程中，我根据对Python的掌握进行了转换。 [demo仓库地址](https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua)\n\n<!--more-->\n\n# 设计模式的基本原则\n\n## 开放-封闭原则\n\n**对于拓展是开放的，对于更改是封闭的。**\n\n\n无论模块是多么的封闭，都会存在一些无法对之封闭的变化，既然不可能完全封闭，设计人员必须对于他设计的模块应该对哪种变化做出选择。他必须先猜测出最有可能发生的种类，然后构造抽象来隔离那些变化。\n\n面对需求，对程序的改动是通过新代码进行的，而不是更改现有的代码。\n\n拒绝不成熟的抽象和抽象本省一样重要。\n\n## 单一职责原则\n\n**就一个类而言，应该仅有一个引起它变化的原因。**\n\n\n软件设计真正要做的许多内容，就是发现职责并把这些职责分离。其实要去判断是否应该分离出类来，也不难，那就是你能够想到对于一个动机去改变一个类，那么这个类就是具有多于一个的职责。\n\n## 依赖倒转原则\n\n**A、高层模块不应该依赖低层模块，两个都应该依赖抽象**\n**B、抽象不应该依赖细节。细节应该依赖抽象。**\n\n依赖倒转原则其实可以说是面向对象设计的标志，用哪种语言来写程序不重要，如果编写时，考虑都是如何针对抽象编程而不是针对细节编程，即程序中所有的依赖关系都是终止于抽象类，或者接口，那就是面向对象的设计，反之就是过程化的设计了。\n\n## 里氏替换原则\n\n**子类必须能够替换掉它们的父类。换句话你说，任何基类可以出现的地方，子类一定可以出现。** 里氏替换原则是继承复用的基石，只有当衍生类可以替换基类，软件单位的功能不受到影响时，基类才能真正被复用，而衍生类也能够在基类的基础上增加新的行为。\n\n里氏代换原则是对“开-闭”原则的补充。实现“开闭”原则的关键步骤就是抽象化。而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。里氏替换原则中，子类对父类的方法尽量不要重写和重载。因为父类代表了定义好的结构，通过这个规范的接口与外界交互，子类不应该随便破坏它。\n\n## 迪米特法则(最少知道原则)\n\n**一个类对自己依赖的类知道的越少越好。**\n\n无论被依赖的类多么复杂，都应该将逻辑封装在方法的内部，通过公用方法提供给外部。这样当被依赖的类变化时，才能最少的影响该类。\n\n最少知道原则的另外一个表达方式是：只与直接的朋友通信，类之间只要有耦合关系，就叫朋友关系。耦合分为依赖、关联、聚合、组合等。我们称出现为成员变量、方法参数、方法返回值中的类为直接朋友。局部变量、临时变量则不是直接关系。我们要求陌生的类不要作为局部变量出现在类中。\n\n迪米特法则是面向对象的根本思想，是强调了类的松耦合关系。类之间的耦合越弱，越有利于复用，一个处在弱耦合的类被修改，不会对关系的类造成波及。\n\n## 合成复用原则\n\n**尽量首先使用合成\\聚合的方式，而不是使用继承。**\n\n\n# 设计模式分类：\n\n- 创建型模式，共五种：[工厂方法模式](#工厂方法模式)、[抽象工厂模式](#抽象工厂模式)、[单例模式](#单例模式)、[建造者模式](#建造者模式)、[原型模式](#原型模式)。\n- 结构型模式，共七种：[适配器模式](#适配器模式)、[装饰器模式](#装饰模式)、[代理模式](#代理模式)、[外观模式](#外观模式)、[桥接模式](#桥接模式)、[组合模式](#组合模式)、[享元模式](#享元模式)。\n- 行为型模式，共十一种：[策略模式](#策略模式)、[模板方法模式](#模板方法模式)、[观察者模式](#观察者模式)、[迭代器模式](#迭代器模式)、[职责链模式](#职责链模式)、[命令模式](#命令模式)、[备忘录模式](#备忘录模式)、[状态模式](#状态模式)、[访问者模式](#访问者模式)、[中介者模式](#中介者模式)、[解释器模式](#解释器模式)。\n\n\n参考\n\n- [23种设计模式汇总整理](https://blog.csdn.net/jason0539/article/details/44956775)\n\n# 设计模式详述\n\n源码仓库[https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua](https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua)\n\n## 简单工厂模式\n\n```\n>>> oper = OperationFactory.create_operate('+')\n>>> oper.number1 = 12\n>>> oper.number2 = 13\n>>> oper.get_result()\n25\n>>> oper = OperationFactory.create_operate('/')\n>>> oper.number1 = 12\n>>> oper.number2 = 0\n>>> oper.get_result()\nTraceback (most recent call last):\n\t...\nValueError: 除数不能为0\n```\n\n## 策略模式\n\n[strategy.py](https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua/strategy.py)\n\n策略模式：它定义了算法家族，分别封装起来，让他们之间可以相互替换，此模式让算法的变化，不会影响到使用算法的客户。\n\n```\n\n>>> csuper = CashContext('正常收费')\n>>> csuper.get_result(20)\n20.0\n>>> csuper = CashContext('满300返100')\n>>> csuper.get_result(300)\n200.0\n>>> csuper.get_result(200)\n200.0\n>>> csuper = CashContext('打八折')\n>>> csuper.get_result(300)\n240.0\n```\n\n策略模式就是用来封装算法的，但是在实践中，我们可以用它来封装几乎任何类型的规则，只要在分析过程中根据需要在不同时间应用不同的业务规则，就可以考虑使用策略模式处理这种变化的可能性。\n\n\n## 装饰模式\n\n[decorator.py](https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua/decorator.py)\n\n装饰模式：动态地给一个对象添加一些额外的职责，就增加功能来说，装饰模式比生成子类更灵活。\n\n装饰模式的优点就是把类中的装饰功能从类中搬移去除，这样可以简化原有的类。有效地把类的核心职责和装饰功能区分开了，而且可以去除相关类中的重复的装饰逻辑。\n\n\n## 代理模式\n\n[proxy.py](https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua/proxy.py)\n\n为其他对象提供一种代理以控制对这个对象的访问。\n\n代码示例：A追求C，委托B送礼物给C。需求的重点是A和C不能直接接触::\n\n```\n>>> jiaojiao = SchoolGirl()\n>>> jiaojiao.name = '李娇娇'\n```\n\n## 工厂方法模式\n\n[factory_method.py](https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua/factory_method.py)\n\n\n工厂方法模式，定义一个用于创建对象的接口，让子类决定实例化哪个类。工厂方法使一个类的实例化延迟到其子类。\n\n代码示例：学习雷锋好榜样，继承雷锋精神的大学生和社区的构建::\n\n```\n>>> factory = UndergraduateFactory()\n>>> student = factory.create_leifeng()\n>>> student.buyrice()\n买米\n>>> student.sweep()\n扫地\n>>> student.wash()\n洗衣\n\n```\n\n工厂方法把简单工厂的内部逻辑判断移到了客户端代码来进行。\n\n## 原型模式\n\n[prototype.py](https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua/prototype.py)\n\n原型模式：用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。其实就是从一个对象再创建另外一个可定制的对象，并且不需要知道任何创建的细节::\n\n```\n\n>>> a = Resume('大鸟')\n>>> a.set_personal_info('男', '29')\n>>> a.set_work_experience('1998-2000', 'xx公司')\n\n>>> b = a.clone()\n>>> b.set_work_experience('2000-2006', 'xx企业')\n\n>>> c = a.clone()\n>>> c.set_personal_info('男', '24')\n\n>>> a.display()\n大鸟 男 29\n工作经历: 1998-2000 xx公司\n>>> b.display()\n大鸟 男 29\n工作经历: 2000-2006 xx企业\n>>> c.display()\n大鸟 男 24\n工作经历: 1998-2000 xx公司\n```\n\n一般在初始化的信息不发生变化的情况下，克隆是最好的办法，它既隐藏了对象的创建细节，又对性能是大大的提升。\n\n\n## 模板方法模式\n\n[template_method.py](https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua/template_method.py)\n\n模板方法模式：定义一个操作中的算法的骨架，而将一些步骤延迟到子类中，模板方法是的子类可以不改变一个算法的结构即可重新定义该算法的特定步骤::\n\n```\n>>> a = ConcreteClassA()\n>>> a.template_method()\n具体类A方法1实现\n具体类A方法2实现\n>>> b = ConcreteClassB()\n>>> b.template_method()\n具体类B方法1实现\n具体类B方法2实现\n```\n\n\n## 外观模式\n\n[facade.py](https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua/facade.py)\n\n外观模式：为子系统中的一组接口提供一个一致的界面，此模式定义了一个高层接口，这个接口使得这一子系统更加容易使用::\n```\n>>> facade = Facade()\n>>> facade.method_a()\n--- 方法组A() ---\n子系统方法一\n子系统方法二\n子系统方法四\n>>> facade.method_b()\n--- 方法组B() ---\n子系统方法二\n子系统方法三\n```\n\n外观模式完美的体现了依赖倒转原则和迪米特法则的思想，是常用的模式之一。经典的三层架构，就需要考虑在层与层之间建立外观Facade。\n\n\n## 建造者模式\n\n[builder.py](https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua/builder.py)\n\n建造者模式：将一个复杂对象的构建与它的表示分离，是的同样的构建过程，可以创建不同的表示::\n\n```\n>>> director = Director()\n>>> b1 = ConcreateBuilder1()\n>>> b2 = ConcreateBuilder2()\n\n>>> director.construct(b1)\n>>> p1 = b1.get_result()\n>>> p1.show()\n产品 创建 ----\n部件A\n部件B\n\n>>> director.construct(b2)\n>>> p2 = b2.get_result()\n>>> p2.show()\n产品 创建 ----\n部件X\n部件Y\n```\n\n建造者模式是当常见复杂对象的算法应该独立于该对象的组成部分以及它们的装配方式时使用的模式。\n\n如果我们用了建造者模式，那么用户就只需指定需要建造的类型就可以得到他们，而具体建造的过程和细节就不需要知道了。\n\n\n## 观察者模式\n\n[observer.py](https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua/observer.py)\n\n观察者模式：定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主体对象。这个主题对象在状态发生变化时，会通知所有的观察者对象，让它们能够自动更新自己::\n\n```\n>>> s = ConcreteSubject()\n>>> s.attach(ConcreteObserver(s, 'X'))\n>>> s.attach(ConcreteObserver(s, 'Y'))\n>>> s.attach(ConcreteObserver(s, 'Z'))\n\n>>> s.subject_state = 'ABC'\n>>> s.notify()\n观察者X的新状态是ABC\n观察者Y的新状态是ABC\n观察者Z的新状态是ABC\n```\n\n当一个对象的改变需要同时改变其他对象的时候，且它不知道具体有多少对象有待改变时，应该考虑使用观察者模式。\n\n观察者模式所做的工作其实就是解除耦合，让耦合的双方都依赖抽象，而不是依赖于具体。从而使得各自的变化都不会影响另一边的变化。是依赖倒转原则的最佳体现。\n\n\n但是抽象通知者还是依赖抽象观察者。在代码中抽象观察者中有一个update()方法，具体观察者中都要实现该方法，但是在实际中，可能有一些不一样的操作，根本就不是同名的方法。这是不足的地方。\n\n\n## 抽象工厂模式\n\n[abstract_factory.py](https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua/abstract_factory.py)\n\n抽象工厂方法：提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类::\n\n```\n>>> user = User()\n>>> dept = Department()\n>>> factory = SqlserverFactory()\n>>> iu = factory.create_user()\n>>> iu.insert(user)\n在sql server 中给User表增加一条记录\n>>> iu.get_user(1)\n在sql server 中根据ID得到User表一条记录\n\n>>> factory = AccessFactory()\n>>> id = factory.create_department()\n>>> id.insert(dept)\n在Access中给Department表增加一条记录\n>>> id.get_dept(1)\n在Access中根据ID得到Department表一条记录\n>>> iu = factory.create_user()\n>>> iu.insert(user)\n在Access中给User表增加一条记录\n>>> iu.get_user(1)\n在Access中根据Id得到User表一条记录\n\n```\n\n抽象工厂模式的优点：\n\n- 1、易于交换产品系列，由于具体工厂类，在一个应用中只需要在初始化的时候出现一次，这就使得改变一个应用的具体工厂变得非常容易，它只需要改变具体工厂即可使用不 同\n的产品配置。\n- 2、让具体的创建实例过程和客户端分离，客户端是通过它们的抽象接口操作实例，产品的具体类名也被具体工厂的实现分离，不会出现在客户代码中。\n\n缺点：\n新增或修改时，可能需要大量的改动。\n\n\n## 状态模式\n\n[state.py](https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua/state.py)\n\n状态模式：当一个对象的内在状态改变时，允许改变其行为，这个对象看起来像是一个改变了其类::\n\n```\n>>> c = Context(ConcreteStateA())\n>>> c.request()\n当前状态：stateB\n>>> c.request()\n当前状态：stateA\n>>> c.request()\n当前状态：stateB\n>>> c.request()\n当前状态：stateA\n>>> c.request()\n当前状态：stateB\n```\n\n状态模式主要解决的是当控制一个对象状态转换的条件表达式过于复杂时的情况，把状态的判断转移到表示不同状态的一系列类中可以把复杂的判断逻辑简化。\n\n状态模式的好处是将与特定状态相关的行为局部化，并且将不同状态的行为分割开来。\n\n\n## 适配器模式\n\n[adapter.py](https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua/adapter.py)\n\n适配器模式：将一个类的接口转换成客户希望的另外一个接口。使得原本由于接口不兼容而不能一起工作的那些类可以一起工作::\n\n```\n>>> target = Adapter()\n>>> target.request()\n特殊请求\n```\n\n\n## 备忘录模式\n\n[memento.py](https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua/memento.py)\n\n备忘录模式：在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样就可以将该对象恢复到原先保存的状态::\n\n```\n>>> o = Originator()\n>>> o.state = 'ON'  # 初始状态\n>>> o.show()\nstate= ON\n\n>>> caretaker = Caretaker()\n>>> caretaker.memento = o.create_memento()\n\n>>> o.state = 'OFF'  # 改变状态\n>>> o.show()\nstate= OFF\n\n>>> o.set_memento(caretaker.memento)  # 恢复\n>>> o.show()\nstate= ON\n```\n\n缺点：当需要备忘的对象状态数据很大很多时，那么在资源消耗上，备忘录对象会非常消耗资源。\n\n\n## 组合模式\n\n[composite.py](https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua/composite.py)\n\n组合模式：将对象组合成树形结构以表示部分整体的层次结构，组合模式使得用户对单个对象和组合对象的使用具有一致性::\n\n```\n>>> root = Composite('root')\n>>> root.add(Leaf('Leaf A'))\n>>> root.add(Leaf('Leaf B'))\n\n>>> comp = Composite('Composite X')\n>>> comp.add(Leaf('Leaf A'))\n>>> comp.add(Leaf('Leaf B'))\n\n>>> root.add(comp)\n\n>>> comp2 = Composite('Composite XY')\n>>> comp2.add(Leaf('Leaf A'))\n>>> comp2.add(Leaf('Leaf B'))\n\n>>> comp.add(comp2)\n\n>>> root.display(1)\n- root\n-- Leaf A\n-- Leaf B\n-- Composite X\n--- Leaf A\n--- Leaf B\n--- Composite XY\n---- Leaf A\n---- Leaf B\n```\n\n组合模式定义了包含基本对象和组合对象的类层次结构，基本对象可以被组合成更复杂的组合对象，而这个组合对象又可以被组合这样不断地递归下去。\n\n\n## 迭代器模式\n\n[iterator.py](https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua/iterator.py)\n\n迭代器模式：提供一种方法顺序访问一个聚合对象中各个元素，而不是暴露该对象的内部表示。代码事例为乘务员迭代检票的模拟演示::\n\n```\n>>> a = ConcreteAggregate()\n>>> a[0] = '大鸟'\n>>> a[1] = '小菜'\n>>> a[2] = '行李'\n>>> a[3] = '老外'\n>>> a[4] = '员工'\n>>> a[5] = '小偷'\n\n>>> i = ConcreteIterator(a)\n>>> item = i.first()\n>>> while not i.is_done():\n...     print('{} 请买票!'.format(i.current_item()))\n...     i.next()\n大鸟 请买票!\n小菜 请买票!\n行李 请买票!\n老外 请买票!\n员工 请买票!\n小偷 请买票!\n```\n\n为遍历不同的聚合结构提供如开始、下一个、是否结束、当前哪一项等统一的接口。现在高级编程语言如C#、JAVA、Python等本身已经把这个模式做在语言中。\n\n\n## 单例模式\n\n[singleton.py](https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua/singleton.py)\n\n单例模式：保证一个类仅有一个实例，并提供一个访问它的全局访问点::\n\n```\n>>> singleton1 = Singleton('wen') # doctest: +ELLIPSIS\n单例：...\n>>> singleton2 = Singleton('wen1')  # doctest: +ELLIPSIS\n单例：...\n>>> print(singleton1 is singleton2)\nTrue\n```\n\n通常我们可以让一个全局变量使得一个对象被访问，但是它不能防止你实例化多个对象，一个最好的办法就是：让类自身负责它的唯一实例。这个类可以保证没有其他的实例可以被创建，并且它可以提供一个访问该实例的方法。\n\n\n## 桥接模式\n\n[bridge.py](https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua/bridge.py)\n\n桥接模式：将抽象部分与它的实现部分分离，使他们都可以独立的变化::\n\n```\n\n>>> ab = RefinedAbstraction()\n>>> ab.implementor = ConcreteImplementorA()\n>>> ab.operation()\n具体实现A的方法执行。\n\n>>> ab.implementor = ConcreteImplementorB()\n>>> ab.operation()\n具体实现B的方法执行。\n```\n\n## 命令模式\n\n[command.py](https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua/command.py)\n\n命令模式：将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化；对请求排队或记录请求日志，以及支持可撤销的操作。\n\n```\n>>> r = Receiver()\n>>> c = ConcreteCommand(r)\n>>> i = Invoker()\n>>> i.command = c\n>>> i.execute_command()\n执行请求！\n```\n\n命令模式的优点：\n- 1 能较容易的设计一个命令队列\n- 2 在需要的情况下，可以较容易的将命令记入日志\n- 3 允许接收请求的一方决定是否要否决请求\n- 4 可以容易的实现对请求的撤销和重做\n- 5 由于加新的具体命令类不影响其他的类，因此增加新的具体命令类很容易\n- 6 命令模式把请求一个操作的对象与知道怎么执行一个操作的对象分割开。\n\n\n## 职责链模式\n\n[chain_of_responsibility.py](https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua/chain_of_responsibility.py)\n\n职责链模式：使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。将这个对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。\n\n```\n>>> h1 = ConcreteHandler1()\n>>> h2 = ConcreteHandler2()\n>>> h3 = ConcreteHandler3()\n\n>>> h1.successor = h2  # 设置职责链上家和下家\n>>> h2.successor = h3\n\n>>> requests = [2, 5, 14, 22, 18, 3, 27, 20]\n\n>>> for request in requests:\n...     h1.handle_request(request)\nConcreteHandler1 处理请求 2\nConcreteHandler1 处理请求 5\nConcreteHandler2 处理请求 14\nConcreteHandler3 处理请求 22\nConcreteHandler2 处理请求 18\nConcreteHandler1 处理请求 3\nConcreteHandler3 处理请求 27\nConcreteHandler3 处理请求 20\n```\n\n需要注意的地方，一个请求极有可能到了链的末端都得不到处理，或者因为没有正确配置而得不到处理。\n\n\n## 中介者模式\n\n[mediator.py](https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua/mediator.py)\n\n中介者模式：用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显式的相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互::\n```\n\n>>> m = ConcreteMediator()\n>>> c1 = ConcreteHandler1(m)\n>>> c2 = ConcreteHandler2(m)\n\n>>> m.colleague1 = c1\n>>> m.colleague2 = c2\n\n>>> c1.send('吃饭了吗？')\n同事2得到消息： 吃饭了吗？\n>>> c2.send('没有呢，你打算请客？')\n同事1得到消息： 没有呢，你打算请客？\n```\n\n\n## 享元模式\n\n[flyweight.py](https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua/flyweight.py)\n\n享元模式：运用共享技术有效地支持大量细粒度的对象::\n\n```\n>>> extrinsicstate = 22\n>>> f = FlyweightFactory()\n>>> fx = f.get_flyweight('X')\n>>> fx.operation(extrinsicstate - 1)\n具体Flyweight: 21\n\n>>> fy = f.get_flyweight('Y')\n>>> fy.operation(extrinsicstate - 2)\n具体Flyweight: 20\n\n>>> uf = UnsharedConcreteFlyweight()\n>>> uf.operation(extrinsicstate - 3)\n不共享的具体Flyweight: 19\n```\n\n享元模式可以避免大量非常相似类的开销。在程序设计中，有时需要生成大量的细粒度的类示例来表示数据，如果能够发现这些实例除了几个参数外基本上都相同的，有时就能够受大幅度的减少需要实例化的类数量。如果把这些参数移到类实例的外面，在方法调用的时候将它们传递进来，就可以通过共享大幅度的减少单个实例的数目。\n\n应用场合：如果一个应用程序使用了大量的对象，而大量的这些对象造成了很大的存储开销时，应该考虑使用，还有就是对象的大多数状态可以外部状态，如果删除对象的外部状态，那么可以用相对较少的共享对象取代很多的组对象，此时可以考虑使用享元模式。\n\n## 解释器模式\n\n[interpreter.py](https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua/interpreter.py)\n \n解释器模式：给定一个语言，定义它的文法的一种表示，并定义一个解释器，这个解释器使用该表示来解释语言中的句子::\n\n```\n>>> context = Context()\n>>> ll = []\n>>> ll.append(TerminalExpression())\n>>> ll.append(TerminalExpression())\n>>> ll.append(NonterminalExpression())\n>>> ll.append(TerminalExpression())\n\n>>> for exp in ll:\n...     exp.interpret(context)\n终端解释器\n终端解释器\n非终端解释器\n终端解释器\n```\n\n比如，在字符串搜索匹配的字符或判断一个字符串是否符合我们规定的格式，我们会用到的正则表达式技术，就是该模式的很好应用。\n\n优点：容易的改变和扩展文法，因为该模式使用类来表示文法规则，你可使用继承来改变或扩展该方法。也比较容易实现文法，因为定义抽象语法树中各个节点的类的实现大体类似，这些类都易于直接编写。\n\n缺点：该模式为文法中的每一条规则至少定义了一个类，因此包含许多规则的文法就很难管理和维护。建议当文法非常复杂时，使用其他的技术如语法分析程序或编译器生成器来处理。\n\n\n## 访问者模式\n\n[visitor.py](https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua/visitor.py)\n\n\n访问者模式：表示一个作用于某对象结构中各元素的操作。它使你可以在不改变各元素的类的前提下定义于这些元素的新操作::\n\n```\n>>> o = ObjectStructure()\n>>> o.attach(ConcreteElementA())\n>>> o.attach(ConcreteElementB())\n\n>>> v1 = ConcreteVisitor1()\n>>> v2 = ConcreteVisitor2()\n\n>>> o.accept(v1)\nConcreteElementA被ConcreteVisitor1访问\nConcreteElementB被ConcreteVisitor1访问\n\n>>> o.accept(v2)\nConcreteElementA被ConcreteVisitor2访问\nConcreteElementB被ConcreteVisitor2访问\n```\n\n访问者模式适用于数据结构相对稳定的系统，它把数据结构作用于结构上的操作之间的耦合解脱开，使得操作集合可以相对自由地演化。\n\n如果系统有比较稳定的数据结构又有易于变化的算法的话，使用访问者模式是比较合适的因为该模式使得算法操作的增加变得容易。\n\n缺点：就是使增加新的数据结构变得困难了。该模式较为复杂。当你真正需要它的时候，才考虑使用它。\n","slug":"大话设计模式阅读笔记","published":1,"updated":"2021-06-20T10:25:20.131Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluqa1hjd0041rlog48yvfjuh","content":"<p><a href=\"https://item.jd.com/10079261.html\">《大话设计模式》</a>这本书买了很久，但是一直没有坚持看完。毕业之后，丢了很多书在学校，但是这本书没有舍得丢下。现在看来当初是明智的，再次阅读的时候，才发现这本书浅显易懂，有趣，通过一个个小故事，缓缓道来设计模式的妙用。在阅读的时候，有很多的收获，其实说的这些模式，虽然没有真正的去了解，但是发现在开发过程中，很多都是常用到的，没有总结出来而已。在阅读的过程中，很多时候有感，但是又觉得差一点就能突破。在这里做下阅读笔记，算是阅读的输出。</p>\n<p>原书中的代码都是用C#是实现的，在阅读的过程中，我根据对Python的掌握进行了转换。 <a href=\"https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua\">demo仓库地址</a></p>\n<span id=\"more\"></span>\n\n<h1 id=\"设计模式的基本原则\"><a href=\"#设计模式的基本原则\" class=\"headerlink\" title=\"设计模式的基本原则\"></a>设计模式的基本原则</h1><h2 id=\"开放-封闭原则\"><a href=\"#开放-封闭原则\" class=\"headerlink\" title=\"开放-封闭原则\"></a>开放-封闭原则</h2><p><strong>对于拓展是开放的，对于更改是封闭的。</strong></p>\n<p>无论模块是多么的封闭，都会存在一些无法对之封闭的变化，既然不可能完全封闭，设计人员必须对于他设计的模块应该对哪种变化做出选择。他必须先猜测出最有可能发生的种类，然后构造抽象来隔离那些变化。</p>\n<p>面对需求，对程序的改动是通过新代码进行的，而不是更改现有的代码。</p>\n<p>拒绝不成熟的抽象和抽象本省一样重要。</p>\n<h2 id=\"单一职责原则\"><a href=\"#单一职责原则\" class=\"headerlink\" title=\"单一职责原则\"></a>单一职责原则</h2><p><strong>就一个类而言，应该仅有一个引起它变化的原因。</strong></p>\n<p>软件设计真正要做的许多内容，就是发现职责并把这些职责分离。其实要去判断是否应该分离出类来，也不难，那就是你能够想到对于一个动机去改变一个类，那么这个类就是具有多于一个的职责。</p>\n<h2 id=\"依赖倒转原则\"><a href=\"#依赖倒转原则\" class=\"headerlink\" title=\"依赖倒转原则\"></a>依赖倒转原则</h2><p><strong>A、高层模块不应该依赖低层模块，两个都应该依赖抽象</strong><br><strong>B、抽象不应该依赖细节。细节应该依赖抽象。</strong></p>\n<p>依赖倒转原则其实可以说是面向对象设计的标志，用哪种语言来写程序不重要，如果编写时，考虑都是如何针对抽象编程而不是针对细节编程，即程序中所有的依赖关系都是终止于抽象类，或者接口，那就是面向对象的设计，反之就是过程化的设计了。</p>\n<h2 id=\"里氏替换原则\"><a href=\"#里氏替换原则\" class=\"headerlink\" title=\"里氏替换原则\"></a>里氏替换原则</h2><p><strong>子类必须能够替换掉它们的父类。换句话你说，任何基类可以出现的地方，子类一定可以出现。</strong> 里氏替换原则是继承复用的基石，只有当衍生类可以替换基类，软件单位的功能不受到影响时，基类才能真正被复用，而衍生类也能够在基类的基础上增加新的行为。</p>\n<p>里氏代换原则是对“开-闭”原则的补充。实现“开闭”原则的关键步骤就是抽象化。而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。里氏替换原则中，子类对父类的方法尽量不要重写和重载。因为父类代表了定义好的结构，通过这个规范的接口与外界交互，子类不应该随便破坏它。</p>\n<h2 id=\"迪米特法则-最少知道原则\"><a href=\"#迪米特法则-最少知道原则\" class=\"headerlink\" title=\"迪米特法则(最少知道原则)\"></a>迪米特法则(最少知道原则)</h2><p><strong>一个类对自己依赖的类知道的越少越好。</strong></p>\n<p>无论被依赖的类多么复杂，都应该将逻辑封装在方法的内部，通过公用方法提供给外部。这样当被依赖的类变化时，才能最少的影响该类。</p>\n<p>最少知道原则的另外一个表达方式是：只与直接的朋友通信，类之间只要有耦合关系，就叫朋友关系。耦合分为依赖、关联、聚合、组合等。我们称出现为成员变量、方法参数、方法返回值中的类为直接朋友。局部变量、临时变量则不是直接关系。我们要求陌生的类不要作为局部变量出现在类中。</p>\n<p>迪米特法则是面向对象的根本思想，是强调了类的松耦合关系。类之间的耦合越弱，越有利于复用，一个处在弱耦合的类被修改，不会对关系的类造成波及。</p>\n<h2 id=\"合成复用原则\"><a href=\"#合成复用原则\" class=\"headerlink\" title=\"合成复用原则\"></a>合成复用原则</h2><p><strong>尽量首先使用合成\\聚合的方式，而不是使用继承。</strong></p>\n<h1 id=\"设计模式分类：\"><a href=\"#设计模式分类：\" class=\"headerlink\" title=\"设计模式分类：\"></a>设计模式分类：</h1><ul>\n<li>创建型模式，共五种：<a href=\"#%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F\">工厂方法模式</a>、<a href=\"#%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F\">抽象工厂模式</a>、<a href=\"#%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F\">单例模式</a>、<a href=\"#%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F\">建造者模式</a>、<a href=\"#%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F\">原型模式</a>。</li>\n<li>结构型模式，共七种：<a href=\"#%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F\">适配器模式</a>、<a href=\"#%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F\">装饰器模式</a>、<a href=\"#%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F\">代理模式</a>、<a href=\"#%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F\">外观模式</a>、<a href=\"#%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F\">桥接模式</a>、<a href=\"#%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F\">组合模式</a>、<a href=\"#%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F\">享元模式</a>。</li>\n<li>行为型模式，共十一种：<a href=\"#%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F\">策略模式</a>、<a href=\"#%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F\">模板方法模式</a>、<a href=\"#%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F\">观察者模式</a>、<a href=\"#%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F\">迭代器模式</a>、<a href=\"#%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F\">职责链模式</a>、<a href=\"#%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F\">命令模式</a>、<a href=\"#%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F\">备忘录模式</a>、<a href=\"#%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F\">状态模式</a>、<a href=\"#%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F\">访问者模式</a>、<a href=\"#%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F\">中介者模式</a>、<a href=\"#%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F\">解释器模式</a>。</li>\n</ul>\n<p>参考</p>\n<ul>\n<li><a href=\"https://blog.csdn.net/jason0539/article/details/44956775\">23种设计模式汇总整理</a></li>\n</ul>\n<h1 id=\"设计模式详述\"><a href=\"#设计模式详述\" class=\"headerlink\" title=\"设计模式详述\"></a>设计模式详述</h1><p>源码仓库<a href=\"https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua\">https://github.com/suAdminWen/studyForPython/tree/master/design_patterns&#x2F;dahua</a></p>\n<h2 id=\"简单工厂模式\"><a href=\"#简单工厂模式\" class=\"headerlink\" title=\"简单工厂模式\"></a>简单工厂模式</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; oper = OperationFactory.create_operate(&#x27;+&#x27;)</span><br><span class=\"line\">&gt;&gt;&gt; oper.number1 = 12</span><br><span class=\"line\">&gt;&gt;&gt; oper.number2 = 13</span><br><span class=\"line\">&gt;&gt;&gt; oper.get_result()</span><br><span class=\"line\">25</span><br><span class=\"line\">&gt;&gt;&gt; oper = OperationFactory.create_operate(&#x27;/&#x27;)</span><br><span class=\"line\">&gt;&gt;&gt; oper.number1 = 12</span><br><span class=\"line\">&gt;&gt;&gt; oper.number2 = 0</span><br><span class=\"line\">&gt;&gt;&gt; oper.get_result()</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">\t...</span><br><span class=\"line\">ValueError: 除数不能为0</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"策略模式\"><a href=\"#策略模式\" class=\"headerlink\" title=\"策略模式\"></a>策略模式</h2><p><a href=\"https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua/strategy.py\">strategy.py</a></p>\n<p>策略模式：它定义了算法家族，分别封装起来，让他们之间可以相互替换，此模式让算法的变化，不会影响到使用算法的客户。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; csuper = CashContext(&#x27;正常收费&#x27;)</span><br><span class=\"line\">&gt;&gt;&gt; csuper.get_result(20)</span><br><span class=\"line\">20.0</span><br><span class=\"line\">&gt;&gt;&gt; csuper = CashContext(&#x27;满300返100&#x27;)</span><br><span class=\"line\">&gt;&gt;&gt; csuper.get_result(300)</span><br><span class=\"line\">200.0</span><br><span class=\"line\">&gt;&gt;&gt; csuper.get_result(200)</span><br><span class=\"line\">200.0</span><br><span class=\"line\">&gt;&gt;&gt; csuper = CashContext(&#x27;打八折&#x27;)</span><br><span class=\"line\">&gt;&gt;&gt; csuper.get_result(300)</span><br><span class=\"line\">240.0</span><br></pre></td></tr></table></figure>\n\n<p>策略模式就是用来封装算法的，但是在实践中，我们可以用它来封装几乎任何类型的规则，只要在分析过程中根据需要在不同时间应用不同的业务规则，就可以考虑使用策略模式处理这种变化的可能性。</p>\n<h2 id=\"装饰模式\"><a href=\"#装饰模式\" class=\"headerlink\" title=\"装饰模式\"></a>装饰模式</h2><p><a href=\"https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua/decorator.py\">decorator.py</a></p>\n<p>装饰模式：动态地给一个对象添加一些额外的职责，就增加功能来说，装饰模式比生成子类更灵活。</p>\n<p>装饰模式的优点就是把类中的装饰功能从类中搬移去除，这样可以简化原有的类。有效地把类的核心职责和装饰功能区分开了，而且可以去除相关类中的重复的装饰逻辑。</p>\n<h2 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h2><p><a href=\"https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua/proxy.py\">proxy.py</a></p>\n<p>为其他对象提供一种代理以控制对这个对象的访问。</p>\n<p>代码示例：A追求C，委托B送礼物给C。需求的重点是A和C不能直接接触::</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; jiaojiao = SchoolGirl()</span><br><span class=\"line\">&gt;&gt;&gt; jiaojiao.name = &#x27;李娇娇&#x27;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"工厂方法模式\"><a href=\"#工厂方法模式\" class=\"headerlink\" title=\"工厂方法模式\"></a>工厂方法模式</h2><p><a href=\"https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua/factory_method.py\">factory_method.py</a></p>\n<p>工厂方法模式，定义一个用于创建对象的接口，让子类决定实例化哪个类。工厂方法使一个类的实例化延迟到其子类。</p>\n<p>代码示例：学习雷锋好榜样，继承雷锋精神的大学生和社区的构建::</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; factory = UndergraduateFactory()</span><br><span class=\"line\">&gt;&gt;&gt; student = factory.create_leifeng()</span><br><span class=\"line\">&gt;&gt;&gt; student.buyrice()</span><br><span class=\"line\">买米</span><br><span class=\"line\">&gt;&gt;&gt; student.sweep()</span><br><span class=\"line\">扫地</span><br><span class=\"line\">&gt;&gt;&gt; student.wash()</span><br><span class=\"line\">洗衣</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>工厂方法把简单工厂的内部逻辑判断移到了客户端代码来进行。</p>\n<h2 id=\"原型模式\"><a href=\"#原型模式\" class=\"headerlink\" title=\"原型模式\"></a>原型模式</h2><p><a href=\"https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua/prototype.py\">prototype.py</a></p>\n<p>原型模式：用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。其实就是从一个对象再创建另外一个可定制的对象，并且不需要知道任何创建的细节::</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; a = Resume(&#x27;大鸟&#x27;)</span><br><span class=\"line\">&gt;&gt;&gt; a.set_personal_info(&#x27;男&#x27;, &#x27;29&#x27;)</span><br><span class=\"line\">&gt;&gt;&gt; a.set_work_experience(&#x27;1998-2000&#x27;, &#x27;xx公司&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; b = a.clone()</span><br><span class=\"line\">&gt;&gt;&gt; b.set_work_experience(&#x27;2000-2006&#x27;, &#x27;xx企业&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; c = a.clone()</span><br><span class=\"line\">&gt;&gt;&gt; c.set_personal_info(&#x27;男&#x27;, &#x27;24&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; a.display()</span><br><span class=\"line\">大鸟 男 29</span><br><span class=\"line\">工作经历: 1998-2000 xx公司</span><br><span class=\"line\">&gt;&gt;&gt; b.display()</span><br><span class=\"line\">大鸟 男 29</span><br><span class=\"line\">工作经历: 2000-2006 xx企业</span><br><span class=\"line\">&gt;&gt;&gt; c.display()</span><br><span class=\"line\">大鸟 男 24</span><br><span class=\"line\">工作经历: 1998-2000 xx公司</span><br></pre></td></tr></table></figure>\n\n<p>一般在初始化的信息不发生变化的情况下，克隆是最好的办法，它既隐藏了对象的创建细节，又对性能是大大的提升。</p>\n<h2 id=\"模板方法模式\"><a href=\"#模板方法模式\" class=\"headerlink\" title=\"模板方法模式\"></a>模板方法模式</h2><p><a href=\"https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua/template_method.py\">template_method.py</a></p>\n<p>模板方法模式：定义一个操作中的算法的骨架，而将一些步骤延迟到子类中，模板方法是的子类可以不改变一个算法的结构即可重新定义该算法的特定步骤::</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; a = ConcreteClassA()</span><br><span class=\"line\">&gt;&gt;&gt; a.template_method()</span><br><span class=\"line\">具体类A方法1实现</span><br><span class=\"line\">具体类A方法2实现</span><br><span class=\"line\">&gt;&gt;&gt; b = ConcreteClassB()</span><br><span class=\"line\">&gt;&gt;&gt; b.template_method()</span><br><span class=\"line\">具体类B方法1实现</span><br><span class=\"line\">具体类B方法2实现</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"外观模式\"><a href=\"#外观模式\" class=\"headerlink\" title=\"外观模式\"></a>外观模式</h2><p><a href=\"https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua/facade.py\">facade.py</a></p>\n<p>外观模式：为子系统中的一组接口提供一个一致的界面，此模式定义了一个高层接口，这个接口使得这一子系统更加容易使用::</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; facade = Facade()</span><br><span class=\"line\">&gt;&gt;&gt; facade.method_a()</span><br><span class=\"line\">--- 方法组A() ---</span><br><span class=\"line\">子系统方法一</span><br><span class=\"line\">子系统方法二</span><br><span class=\"line\">子系统方法四</span><br><span class=\"line\">&gt;&gt;&gt; facade.method_b()</span><br><span class=\"line\">--- 方法组B() ---</span><br><span class=\"line\">子系统方法二</span><br><span class=\"line\">子系统方法三</span><br></pre></td></tr></table></figure>\n\n<p>外观模式完美的体现了依赖倒转原则和迪米特法则的思想，是常用的模式之一。经典的三层架构，就需要考虑在层与层之间建立外观Facade。</p>\n<h2 id=\"建造者模式\"><a href=\"#建造者模式\" class=\"headerlink\" title=\"建造者模式\"></a>建造者模式</h2><p><a href=\"https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua/builder.py\">builder.py</a></p>\n<p>建造者模式：将一个复杂对象的构建与它的表示分离，是的同样的构建过程，可以创建不同的表示::</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; director = Director()</span><br><span class=\"line\">&gt;&gt;&gt; b1 = ConcreateBuilder1()</span><br><span class=\"line\">&gt;&gt;&gt; b2 = ConcreateBuilder2()</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; director.construct(b1)</span><br><span class=\"line\">&gt;&gt;&gt; p1 = b1.get_result()</span><br><span class=\"line\">&gt;&gt;&gt; p1.show()</span><br><span class=\"line\">产品 创建 ----</span><br><span class=\"line\">部件A</span><br><span class=\"line\">部件B</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; director.construct(b2)</span><br><span class=\"line\">&gt;&gt;&gt; p2 = b2.get_result()</span><br><span class=\"line\">&gt;&gt;&gt; p2.show()</span><br><span class=\"line\">产品 创建 ----</span><br><span class=\"line\">部件X</span><br><span class=\"line\">部件Y</span><br></pre></td></tr></table></figure>\n\n<p>建造者模式是当常见复杂对象的算法应该独立于该对象的组成部分以及它们的装配方式时使用的模式。</p>\n<p>如果我们用了建造者模式，那么用户就只需指定需要建造的类型就可以得到他们，而具体建造的过程和细节就不需要知道了。</p>\n<h2 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h2><p><a href=\"https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua/observer.py\">observer.py</a></p>\n<p>观察者模式：定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主体对象。这个主题对象在状态发生变化时，会通知所有的观察者对象，让它们能够自动更新自己::</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; s = ConcreteSubject()</span><br><span class=\"line\">&gt;&gt;&gt; s.attach(ConcreteObserver(s, &#x27;X&#x27;))</span><br><span class=\"line\">&gt;&gt;&gt; s.attach(ConcreteObserver(s, &#x27;Y&#x27;))</span><br><span class=\"line\">&gt;&gt;&gt; s.attach(ConcreteObserver(s, &#x27;Z&#x27;))</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; s.subject_state = &#x27;ABC&#x27;</span><br><span class=\"line\">&gt;&gt;&gt; s.notify()</span><br><span class=\"line\">观察者X的新状态是ABC</span><br><span class=\"line\">观察者Y的新状态是ABC</span><br><span class=\"line\">观察者Z的新状态是ABC</span><br></pre></td></tr></table></figure>\n\n<p>当一个对象的改变需要同时改变其他对象的时候，且它不知道具体有多少对象有待改变时，应该考虑使用观察者模式。</p>\n<p>观察者模式所做的工作其实就是解除耦合，让耦合的双方都依赖抽象，而不是依赖于具体。从而使得各自的变化都不会影响另一边的变化。是依赖倒转原则的最佳体现。</p>\n<p>但是抽象通知者还是依赖抽象观察者。在代码中抽象观察者中有一个update()方法，具体观察者中都要实现该方法，但是在实际中，可能有一些不一样的操作，根本就不是同名的方法。这是不足的地方。</p>\n<h2 id=\"抽象工厂模式\"><a href=\"#抽象工厂模式\" class=\"headerlink\" title=\"抽象工厂模式\"></a>抽象工厂模式</h2><p><a href=\"https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua/abstract_factory.py\">abstract_factory.py</a></p>\n<p>抽象工厂方法：提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类::</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; user = User()</span><br><span class=\"line\">&gt;&gt;&gt; dept = Department()</span><br><span class=\"line\">&gt;&gt;&gt; factory = SqlserverFactory()</span><br><span class=\"line\">&gt;&gt;&gt; iu = factory.create_user()</span><br><span class=\"line\">&gt;&gt;&gt; iu.insert(user)</span><br><span class=\"line\">在sql server 中给User表增加一条记录</span><br><span class=\"line\">&gt;&gt;&gt; iu.get_user(1)</span><br><span class=\"line\">在sql server 中根据ID得到User表一条记录</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; factory = AccessFactory()</span><br><span class=\"line\">&gt;&gt;&gt; id = factory.create_department()</span><br><span class=\"line\">&gt;&gt;&gt; id.insert(dept)</span><br><span class=\"line\">在Access中给Department表增加一条记录</span><br><span class=\"line\">&gt;&gt;&gt; id.get_dept(1)</span><br><span class=\"line\">在Access中根据ID得到Department表一条记录</span><br><span class=\"line\">&gt;&gt;&gt; iu = factory.create_user()</span><br><span class=\"line\">&gt;&gt;&gt; iu.insert(user)</span><br><span class=\"line\">在Access中给User表增加一条记录</span><br><span class=\"line\">&gt;&gt;&gt; iu.get_user(1)</span><br><span class=\"line\">在Access中根据Id得到User表一条记录</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>抽象工厂模式的优点：</p>\n<ul>\n<li>1、易于交换产品系列，由于具体工厂类，在一个应用中只需要在初始化的时候出现一次，这就使得改变一个应用的具体工厂变得非常容易，它只需要改变具体工厂即可使用不 同<br>的产品配置。</li>\n<li>2、让具体的创建实例过程和客户端分离，客户端是通过它们的抽象接口操作实例，产品的具体类名也被具体工厂的实现分离，不会出现在客户代码中。</li>\n</ul>\n<p>缺点：<br>新增或修改时，可能需要大量的改动。</p>\n<h2 id=\"状态模式\"><a href=\"#状态模式\" class=\"headerlink\" title=\"状态模式\"></a>状态模式</h2><p><a href=\"https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua/state.py\">state.py</a></p>\n<p>状态模式：当一个对象的内在状态改变时，允许改变其行为，这个对象看起来像是一个改变了其类::</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; c = Context(ConcreteStateA())</span><br><span class=\"line\">&gt;&gt;&gt; c.request()</span><br><span class=\"line\">当前状态：stateB</span><br><span class=\"line\">&gt;&gt;&gt; c.request()</span><br><span class=\"line\">当前状态：stateA</span><br><span class=\"line\">&gt;&gt;&gt; c.request()</span><br><span class=\"line\">当前状态：stateB</span><br><span class=\"line\">&gt;&gt;&gt; c.request()</span><br><span class=\"line\">当前状态：stateA</span><br><span class=\"line\">&gt;&gt;&gt; c.request()</span><br><span class=\"line\">当前状态：stateB</span><br></pre></td></tr></table></figure>\n\n<p>状态模式主要解决的是当控制一个对象状态转换的条件表达式过于复杂时的情况，把状态的判断转移到表示不同状态的一系列类中可以把复杂的判断逻辑简化。</p>\n<p>状态模式的好处是将与特定状态相关的行为局部化，并且将不同状态的行为分割开来。</p>\n<h2 id=\"适配器模式\"><a href=\"#适配器模式\" class=\"headerlink\" title=\"适配器模式\"></a>适配器模式</h2><p><a href=\"https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua/adapter.py\">adapter.py</a></p>\n<p>适配器模式：将一个类的接口转换成客户希望的另外一个接口。使得原本由于接口不兼容而不能一起工作的那些类可以一起工作::</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; target = Adapter()</span><br><span class=\"line\">&gt;&gt;&gt; target.request()</span><br><span class=\"line\">特殊请求</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"备忘录模式\"><a href=\"#备忘录模式\" class=\"headerlink\" title=\"备忘录模式\"></a>备忘录模式</h2><p><a href=\"https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua/memento.py\">memento.py</a></p>\n<p>备忘录模式：在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样就可以将该对象恢复到原先保存的状态::</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; o = Originator()</span><br><span class=\"line\">&gt;&gt;&gt; o.state = &#x27;ON&#x27;  # 初始状态</span><br><span class=\"line\">&gt;&gt;&gt; o.show()</span><br><span class=\"line\">state= ON</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; caretaker = Caretaker()</span><br><span class=\"line\">&gt;&gt;&gt; caretaker.memento = o.create_memento()</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; o.state = &#x27;OFF&#x27;  # 改变状态</span><br><span class=\"line\">&gt;&gt;&gt; o.show()</span><br><span class=\"line\">state= OFF</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; o.set_memento(caretaker.memento)  # 恢复</span><br><span class=\"line\">&gt;&gt;&gt; o.show()</span><br><span class=\"line\">state= ON</span><br></pre></td></tr></table></figure>\n\n<p>缺点：当需要备忘的对象状态数据很大很多时，那么在资源消耗上，备忘录对象会非常消耗资源。</p>\n<h2 id=\"组合模式\"><a href=\"#组合模式\" class=\"headerlink\" title=\"组合模式\"></a>组合模式</h2><p><a href=\"https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua/composite.py\">composite.py</a></p>\n<p>组合模式：将对象组合成树形结构以表示部分整体的层次结构，组合模式使得用户对单个对象和组合对象的使用具有一致性::</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; root = Composite(&#x27;root&#x27;)</span><br><span class=\"line\">&gt;&gt;&gt; root.add(Leaf(&#x27;Leaf A&#x27;))</span><br><span class=\"line\">&gt;&gt;&gt; root.add(Leaf(&#x27;Leaf B&#x27;))</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; comp = Composite(&#x27;Composite X&#x27;)</span><br><span class=\"line\">&gt;&gt;&gt; comp.add(Leaf(&#x27;Leaf A&#x27;))</span><br><span class=\"line\">&gt;&gt;&gt; comp.add(Leaf(&#x27;Leaf B&#x27;))</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; root.add(comp)</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; comp2 = Composite(&#x27;Composite XY&#x27;)</span><br><span class=\"line\">&gt;&gt;&gt; comp2.add(Leaf(&#x27;Leaf A&#x27;))</span><br><span class=\"line\">&gt;&gt;&gt; comp2.add(Leaf(&#x27;Leaf B&#x27;))</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; comp.add(comp2)</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; root.display(1)</span><br><span class=\"line\">- root</span><br><span class=\"line\">-- Leaf A</span><br><span class=\"line\">-- Leaf B</span><br><span class=\"line\">-- Composite X</span><br><span class=\"line\">--- Leaf A</span><br><span class=\"line\">--- Leaf B</span><br><span class=\"line\">--- Composite XY</span><br><span class=\"line\">---- Leaf A</span><br><span class=\"line\">---- Leaf B</span><br></pre></td></tr></table></figure>\n\n<p>组合模式定义了包含基本对象和组合对象的类层次结构，基本对象可以被组合成更复杂的组合对象，而这个组合对象又可以被组合这样不断地递归下去。</p>\n<h2 id=\"迭代器模式\"><a href=\"#迭代器模式\" class=\"headerlink\" title=\"迭代器模式\"></a>迭代器模式</h2><p><a href=\"https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua/iterator.py\">iterator.py</a></p>\n<p>迭代器模式：提供一种方法顺序访问一个聚合对象中各个元素，而不是暴露该对象的内部表示。代码事例为乘务员迭代检票的模拟演示::</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; a = ConcreteAggregate()</span><br><span class=\"line\">&gt;&gt;&gt; a[0] = &#x27;大鸟&#x27;</span><br><span class=\"line\">&gt;&gt;&gt; a[1] = &#x27;小菜&#x27;</span><br><span class=\"line\">&gt;&gt;&gt; a[2] = &#x27;行李&#x27;</span><br><span class=\"line\">&gt;&gt;&gt; a[3] = &#x27;老外&#x27;</span><br><span class=\"line\">&gt;&gt;&gt; a[4] = &#x27;员工&#x27;</span><br><span class=\"line\">&gt;&gt;&gt; a[5] = &#x27;小偷&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; i = ConcreteIterator(a)</span><br><span class=\"line\">&gt;&gt;&gt; item = i.first()</span><br><span class=\"line\">&gt;&gt;&gt; while not i.is_done():</span><br><span class=\"line\">...     print(&#x27;&#123;&#125; 请买票!&#x27;.format(i.current_item()))</span><br><span class=\"line\">...     i.next()</span><br><span class=\"line\">大鸟 请买票!</span><br><span class=\"line\">小菜 请买票!</span><br><span class=\"line\">行李 请买票!</span><br><span class=\"line\">老外 请买票!</span><br><span class=\"line\">员工 请买票!</span><br><span class=\"line\">小偷 请买票!</span><br></pre></td></tr></table></figure>\n\n<p>为遍历不同的聚合结构提供如开始、下一个、是否结束、当前哪一项等统一的接口。现在高级编程语言如C#、JAVA、Python等本身已经把这个模式做在语言中。</p>\n<h2 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h2><p><a href=\"https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua/singleton.py\">singleton.py</a></p>\n<p>单例模式：保证一个类仅有一个实例，并提供一个访问它的全局访问点::</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; singleton1 = Singleton(&#x27;wen&#x27;) # doctest: +ELLIPSIS</span><br><span class=\"line\">单例：...</span><br><span class=\"line\">&gt;&gt;&gt; singleton2 = Singleton(&#x27;wen1&#x27;)  # doctest: +ELLIPSIS</span><br><span class=\"line\">单例：...</span><br><span class=\"line\">&gt;&gt;&gt; print(singleton1 is singleton2)</span><br><span class=\"line\">True</span><br></pre></td></tr></table></figure>\n\n<p>通常我们可以让一个全局变量使得一个对象被访问，但是它不能防止你实例化多个对象，一个最好的办法就是：让类自身负责它的唯一实例。这个类可以保证没有其他的实例可以被创建，并且它可以提供一个访问该实例的方法。</p>\n<h2 id=\"桥接模式\"><a href=\"#桥接模式\" class=\"headerlink\" title=\"桥接模式\"></a>桥接模式</h2><p><a href=\"https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua/bridge.py\">bridge.py</a></p>\n<p>桥接模式：将抽象部分与它的实现部分分离，使他们都可以独立的变化::</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; ab = RefinedAbstraction()</span><br><span class=\"line\">&gt;&gt;&gt; ab.implementor = ConcreteImplementorA()</span><br><span class=\"line\">&gt;&gt;&gt; ab.operation()</span><br><span class=\"line\">具体实现A的方法执行。</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; ab.implementor = ConcreteImplementorB()</span><br><span class=\"line\">&gt;&gt;&gt; ab.operation()</span><br><span class=\"line\">具体实现B的方法执行。</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"命令模式\"><a href=\"#命令模式\" class=\"headerlink\" title=\"命令模式\"></a>命令模式</h2><p><a href=\"https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua/command.py\">command.py</a></p>\n<p>命令模式：将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化；对请求排队或记录请求日志，以及支持可撤销的操作。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; r = Receiver()</span><br><span class=\"line\">&gt;&gt;&gt; c = ConcreteCommand(r)</span><br><span class=\"line\">&gt;&gt;&gt; i = Invoker()</span><br><span class=\"line\">&gt;&gt;&gt; i.command = c</span><br><span class=\"line\">&gt;&gt;&gt; i.execute_command()</span><br><span class=\"line\">执行请求！</span><br></pre></td></tr></table></figure>\n\n<p>命令模式的优点：</p>\n<ul>\n<li>1 能较容易的设计一个命令队列</li>\n<li>2 在需要的情况下，可以较容易的将命令记入日志</li>\n<li>3 允许接收请求的一方决定是否要否决请求</li>\n<li>4 可以容易的实现对请求的撤销和重做</li>\n<li>5 由于加新的具体命令类不影响其他的类，因此增加新的具体命令类很容易</li>\n<li>6 命令模式把请求一个操作的对象与知道怎么执行一个操作的对象分割开。</li>\n</ul>\n<h2 id=\"职责链模式\"><a href=\"#职责链模式\" class=\"headerlink\" title=\"职责链模式\"></a>职责链模式</h2><p><a href=\"https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua/chain_of_responsibility.py\">chain_of_responsibility.py</a></p>\n<p>职责链模式：使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。将这个对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; h1 = ConcreteHandler1()</span><br><span class=\"line\">&gt;&gt;&gt; h2 = ConcreteHandler2()</span><br><span class=\"line\">&gt;&gt;&gt; h3 = ConcreteHandler3()</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; h1.successor = h2  # 设置职责链上家和下家</span><br><span class=\"line\">&gt;&gt;&gt; h2.successor = h3</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; requests = [2, 5, 14, 22, 18, 3, 27, 20]</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; for request in requests:</span><br><span class=\"line\">...     h1.handle_request(request)</span><br><span class=\"line\">ConcreteHandler1 处理请求 2</span><br><span class=\"line\">ConcreteHandler1 处理请求 5</span><br><span class=\"line\">ConcreteHandler2 处理请求 14</span><br><span class=\"line\">ConcreteHandler3 处理请求 22</span><br><span class=\"line\">ConcreteHandler2 处理请求 18</span><br><span class=\"line\">ConcreteHandler1 处理请求 3</span><br><span class=\"line\">ConcreteHandler3 处理请求 27</span><br><span class=\"line\">ConcreteHandler3 处理请求 20</span><br></pre></td></tr></table></figure>\n\n<p>需要注意的地方，一个请求极有可能到了链的末端都得不到处理，或者因为没有正确配置而得不到处理。</p>\n<h2 id=\"中介者模式\"><a href=\"#中介者模式\" class=\"headerlink\" title=\"中介者模式\"></a>中介者模式</h2><p><a href=\"https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua/mediator.py\">mediator.py</a></p>\n<p>中介者模式：用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显式的相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互::</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; m = ConcreteMediator()</span><br><span class=\"line\">&gt;&gt;&gt; c1 = ConcreteHandler1(m)</span><br><span class=\"line\">&gt;&gt;&gt; c2 = ConcreteHandler2(m)</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; m.colleague1 = c1</span><br><span class=\"line\">&gt;&gt;&gt; m.colleague2 = c2</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; c1.send(&#x27;吃饭了吗？&#x27;)</span><br><span class=\"line\">同事2得到消息： 吃饭了吗？</span><br><span class=\"line\">&gt;&gt;&gt; c2.send(&#x27;没有呢，你打算请客？&#x27;)</span><br><span class=\"line\">同事1得到消息： 没有呢，你打算请客？</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"享元模式\"><a href=\"#享元模式\" class=\"headerlink\" title=\"享元模式\"></a>享元模式</h2><p><a href=\"https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua/flyweight.py\">flyweight.py</a></p>\n<p>享元模式：运用共享技术有效地支持大量细粒度的对象::</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; extrinsicstate = 22</span><br><span class=\"line\">&gt;&gt;&gt; f = FlyweightFactory()</span><br><span class=\"line\">&gt;&gt;&gt; fx = f.get_flyweight(&#x27;X&#x27;)</span><br><span class=\"line\">&gt;&gt;&gt; fx.operation(extrinsicstate - 1)</span><br><span class=\"line\">具体Flyweight: 21</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; fy = f.get_flyweight(&#x27;Y&#x27;)</span><br><span class=\"line\">&gt;&gt;&gt; fy.operation(extrinsicstate - 2)</span><br><span class=\"line\">具体Flyweight: 20</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; uf = UnsharedConcreteFlyweight()</span><br><span class=\"line\">&gt;&gt;&gt; uf.operation(extrinsicstate - 3)</span><br><span class=\"line\">不共享的具体Flyweight: 19</span><br></pre></td></tr></table></figure>\n\n<p>享元模式可以避免大量非常相似类的开销。在程序设计中，有时需要生成大量的细粒度的类示例来表示数据，如果能够发现这些实例除了几个参数外基本上都相同的，有时就能够受大幅度的减少需要实例化的类数量。如果把这些参数移到类实例的外面，在方法调用的时候将它们传递进来，就可以通过共享大幅度的减少单个实例的数目。</p>\n<p>应用场合：如果一个应用程序使用了大量的对象，而大量的这些对象造成了很大的存储开销时，应该考虑使用，还有就是对象的大多数状态可以外部状态，如果删除对象的外部状态，那么可以用相对较少的共享对象取代很多的组对象，此时可以考虑使用享元模式。</p>\n<h2 id=\"解释器模式\"><a href=\"#解释器模式\" class=\"headerlink\" title=\"解释器模式\"></a>解释器模式</h2><p><a href=\"https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua/interpreter.py\">interpreter.py</a></p>\n<p>解释器模式：给定一个语言，定义它的文法的一种表示，并定义一个解释器，这个解释器使用该表示来解释语言中的句子::</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; context = Context()</span><br><span class=\"line\">&gt;&gt;&gt; ll = []</span><br><span class=\"line\">&gt;&gt;&gt; ll.append(TerminalExpression())</span><br><span class=\"line\">&gt;&gt;&gt; ll.append(TerminalExpression())</span><br><span class=\"line\">&gt;&gt;&gt; ll.append(NonterminalExpression())</span><br><span class=\"line\">&gt;&gt;&gt; ll.append(TerminalExpression())</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; for exp in ll:</span><br><span class=\"line\">...     exp.interpret(context)</span><br><span class=\"line\">终端解释器</span><br><span class=\"line\">终端解释器</span><br><span class=\"line\">非终端解释器</span><br><span class=\"line\">终端解释器</span><br></pre></td></tr></table></figure>\n\n<p>比如，在字符串搜索匹配的字符或判断一个字符串是否符合我们规定的格式，我们会用到的正则表达式技术，就是该模式的很好应用。</p>\n<p>优点：容易的改变和扩展文法，因为该模式使用类来表示文法规则，你可使用继承来改变或扩展该方法。也比较容易实现文法，因为定义抽象语法树中各个节点的类的实现大体类似，这些类都易于直接编写。</p>\n<p>缺点：该模式为文法中的每一条规则至少定义了一个类，因此包含许多规则的文法就很难管理和维护。建议当文法非常复杂时，使用其他的技术如语法分析程序或编译器生成器来处理。</p>\n<h2 id=\"访问者模式\"><a href=\"#访问者模式\" class=\"headerlink\" title=\"访问者模式\"></a>访问者模式</h2><p><a href=\"https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua/visitor.py\">visitor.py</a></p>\n<p>访问者模式：表示一个作用于某对象结构中各元素的操作。它使你可以在不改变各元素的类的前提下定义于这些元素的新操作::</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; o = ObjectStructure()</span><br><span class=\"line\">&gt;&gt;&gt; o.attach(ConcreteElementA())</span><br><span class=\"line\">&gt;&gt;&gt; o.attach(ConcreteElementB())</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; v1 = ConcreteVisitor1()</span><br><span class=\"line\">&gt;&gt;&gt; v2 = ConcreteVisitor2()</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; o.accept(v1)</span><br><span class=\"line\">ConcreteElementA被ConcreteVisitor1访问</span><br><span class=\"line\">ConcreteElementB被ConcreteVisitor1访问</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; o.accept(v2)</span><br><span class=\"line\">ConcreteElementA被ConcreteVisitor2访问</span><br><span class=\"line\">ConcreteElementB被ConcreteVisitor2访问</span><br></pre></td></tr></table></figure>\n\n<p>访问者模式适用于数据结构相对稳定的系统，它把数据结构作用于结构上的操作之间的耦合解脱开，使得操作集合可以相对自由地演化。</p>\n<p>如果系统有比较稳定的数据结构又有易于变化的算法的话，使用访问者模式是比较合适的因为该模式使得算法操作的增加变得容易。</p>\n<p>缺点：就是使增加新的数据结构变得困难了。该模式较为复杂。当你真正需要它的时候，才考虑使用它。</p>\n","site":{"data":{}},"excerpt":"<p><a href=\"https://item.jd.com/10079261.html\">《大话设计模式》</a>这本书买了很久，但是一直没有坚持看完。毕业之后，丢了很多书在学校，但是这本书没有舍得丢下。现在看来当初是明智的，再次阅读的时候，才发现这本书浅显易懂，有趣，通过一个个小故事，缓缓道来设计模式的妙用。在阅读的时候，有很多的收获，其实说的这些模式，虽然没有真正的去了解，但是发现在开发过程中，很多都是常用到的，没有总结出来而已。在阅读的过程中，很多时候有感，但是又觉得差一点就能突破。在这里做下阅读笔记，算是阅读的输出。</p>\n<p>原书中的代码都是用C#是实现的，在阅读的过程中，我根据对Python的掌握进行了转换。 <a href=\"https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua\">demo仓库地址</a></p>","more":"<h1 id=\"设计模式的基本原则\"><a href=\"#设计模式的基本原则\" class=\"headerlink\" title=\"设计模式的基本原则\"></a>设计模式的基本原则</h1><h2 id=\"开放-封闭原则\"><a href=\"#开放-封闭原则\" class=\"headerlink\" title=\"开放-封闭原则\"></a>开放-封闭原则</h2><p><strong>对于拓展是开放的，对于更改是封闭的。</strong></p>\n<p>无论模块是多么的封闭，都会存在一些无法对之封闭的变化，既然不可能完全封闭，设计人员必须对于他设计的模块应该对哪种变化做出选择。他必须先猜测出最有可能发生的种类，然后构造抽象来隔离那些变化。</p>\n<p>面对需求，对程序的改动是通过新代码进行的，而不是更改现有的代码。</p>\n<p>拒绝不成熟的抽象和抽象本省一样重要。</p>\n<h2 id=\"单一职责原则\"><a href=\"#单一职责原则\" class=\"headerlink\" title=\"单一职责原则\"></a>单一职责原则</h2><p><strong>就一个类而言，应该仅有一个引起它变化的原因。</strong></p>\n<p>软件设计真正要做的许多内容，就是发现职责并把这些职责分离。其实要去判断是否应该分离出类来，也不难，那就是你能够想到对于一个动机去改变一个类，那么这个类就是具有多于一个的职责。</p>\n<h2 id=\"依赖倒转原则\"><a href=\"#依赖倒转原则\" class=\"headerlink\" title=\"依赖倒转原则\"></a>依赖倒转原则</h2><p><strong>A、高层模块不应该依赖低层模块，两个都应该依赖抽象</strong><br><strong>B、抽象不应该依赖细节。细节应该依赖抽象。</strong></p>\n<p>依赖倒转原则其实可以说是面向对象设计的标志，用哪种语言来写程序不重要，如果编写时，考虑都是如何针对抽象编程而不是针对细节编程，即程序中所有的依赖关系都是终止于抽象类，或者接口，那就是面向对象的设计，反之就是过程化的设计了。</p>\n<h2 id=\"里氏替换原则\"><a href=\"#里氏替换原则\" class=\"headerlink\" title=\"里氏替换原则\"></a>里氏替换原则</h2><p><strong>子类必须能够替换掉它们的父类。换句话你说，任何基类可以出现的地方，子类一定可以出现。</strong> 里氏替换原则是继承复用的基石，只有当衍生类可以替换基类，软件单位的功能不受到影响时，基类才能真正被复用，而衍生类也能够在基类的基础上增加新的行为。</p>\n<p>里氏代换原则是对“开-闭”原则的补充。实现“开闭”原则的关键步骤就是抽象化。而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。里氏替换原则中，子类对父类的方法尽量不要重写和重载。因为父类代表了定义好的结构，通过这个规范的接口与外界交互，子类不应该随便破坏它。</p>\n<h2 id=\"迪米特法则-最少知道原则\"><a href=\"#迪米特法则-最少知道原则\" class=\"headerlink\" title=\"迪米特法则(最少知道原则)\"></a>迪米特法则(最少知道原则)</h2><p><strong>一个类对自己依赖的类知道的越少越好。</strong></p>\n<p>无论被依赖的类多么复杂，都应该将逻辑封装在方法的内部，通过公用方法提供给外部。这样当被依赖的类变化时，才能最少的影响该类。</p>\n<p>最少知道原则的另外一个表达方式是：只与直接的朋友通信，类之间只要有耦合关系，就叫朋友关系。耦合分为依赖、关联、聚合、组合等。我们称出现为成员变量、方法参数、方法返回值中的类为直接朋友。局部变量、临时变量则不是直接关系。我们要求陌生的类不要作为局部变量出现在类中。</p>\n<p>迪米特法则是面向对象的根本思想，是强调了类的松耦合关系。类之间的耦合越弱，越有利于复用，一个处在弱耦合的类被修改，不会对关系的类造成波及。</p>\n<h2 id=\"合成复用原则\"><a href=\"#合成复用原则\" class=\"headerlink\" title=\"合成复用原则\"></a>合成复用原则</h2><p><strong>尽量首先使用合成\\聚合的方式，而不是使用继承。</strong></p>\n<h1 id=\"设计模式分类：\"><a href=\"#设计模式分类：\" class=\"headerlink\" title=\"设计模式分类：\"></a>设计模式分类：</h1><ul>\n<li>创建型模式，共五种：<a href=\"#%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F\">工厂方法模式</a>、<a href=\"#%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F\">抽象工厂模式</a>、<a href=\"#%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F\">单例模式</a>、<a href=\"#%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F\">建造者模式</a>、<a href=\"#%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F\">原型模式</a>。</li>\n<li>结构型模式，共七种：<a href=\"#%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F\">适配器模式</a>、<a href=\"#%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F\">装饰器模式</a>、<a href=\"#%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F\">代理模式</a>、<a href=\"#%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F\">外观模式</a>、<a href=\"#%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F\">桥接模式</a>、<a href=\"#%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F\">组合模式</a>、<a href=\"#%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F\">享元模式</a>。</li>\n<li>行为型模式，共十一种：<a href=\"#%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F\">策略模式</a>、<a href=\"#%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F\">模板方法模式</a>、<a href=\"#%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F\">观察者模式</a>、<a href=\"#%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F\">迭代器模式</a>、<a href=\"#%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F\">职责链模式</a>、<a href=\"#%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F\">命令模式</a>、<a href=\"#%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F\">备忘录模式</a>、<a href=\"#%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F\">状态模式</a>、<a href=\"#%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F\">访问者模式</a>、<a href=\"#%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F\">中介者模式</a>、<a href=\"#%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F\">解释器模式</a>。</li>\n</ul>\n<p>参考</p>\n<ul>\n<li><a href=\"https://blog.csdn.net/jason0539/article/details/44956775\">23种设计模式汇总整理</a></li>\n</ul>\n<h1 id=\"设计模式详述\"><a href=\"#设计模式详述\" class=\"headerlink\" title=\"设计模式详述\"></a>设计模式详述</h1><p>源码仓库<a href=\"https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua\">https://github.com/suAdminWen/studyForPython/tree/master/design_patterns&#x2F;dahua</a></p>\n<h2 id=\"简单工厂模式\"><a href=\"#简单工厂模式\" class=\"headerlink\" title=\"简单工厂模式\"></a>简单工厂模式</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; oper = OperationFactory.create_operate(&#x27;+&#x27;)</span><br><span class=\"line\">&gt;&gt;&gt; oper.number1 = 12</span><br><span class=\"line\">&gt;&gt;&gt; oper.number2 = 13</span><br><span class=\"line\">&gt;&gt;&gt; oper.get_result()</span><br><span class=\"line\">25</span><br><span class=\"line\">&gt;&gt;&gt; oper = OperationFactory.create_operate(&#x27;/&#x27;)</span><br><span class=\"line\">&gt;&gt;&gt; oper.number1 = 12</span><br><span class=\"line\">&gt;&gt;&gt; oper.number2 = 0</span><br><span class=\"line\">&gt;&gt;&gt; oper.get_result()</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">\t...</span><br><span class=\"line\">ValueError: 除数不能为0</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"策略模式\"><a href=\"#策略模式\" class=\"headerlink\" title=\"策略模式\"></a>策略模式</h2><p><a href=\"https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua/strategy.py\">strategy.py</a></p>\n<p>策略模式：它定义了算法家族，分别封装起来，让他们之间可以相互替换，此模式让算法的变化，不会影响到使用算法的客户。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; csuper = CashContext(&#x27;正常收费&#x27;)</span><br><span class=\"line\">&gt;&gt;&gt; csuper.get_result(20)</span><br><span class=\"line\">20.0</span><br><span class=\"line\">&gt;&gt;&gt; csuper = CashContext(&#x27;满300返100&#x27;)</span><br><span class=\"line\">&gt;&gt;&gt; csuper.get_result(300)</span><br><span class=\"line\">200.0</span><br><span class=\"line\">&gt;&gt;&gt; csuper.get_result(200)</span><br><span class=\"line\">200.0</span><br><span class=\"line\">&gt;&gt;&gt; csuper = CashContext(&#x27;打八折&#x27;)</span><br><span class=\"line\">&gt;&gt;&gt; csuper.get_result(300)</span><br><span class=\"line\">240.0</span><br></pre></td></tr></table></figure>\n\n<p>策略模式就是用来封装算法的，但是在实践中，我们可以用它来封装几乎任何类型的规则，只要在分析过程中根据需要在不同时间应用不同的业务规则，就可以考虑使用策略模式处理这种变化的可能性。</p>\n<h2 id=\"装饰模式\"><a href=\"#装饰模式\" class=\"headerlink\" title=\"装饰模式\"></a>装饰模式</h2><p><a href=\"https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua/decorator.py\">decorator.py</a></p>\n<p>装饰模式：动态地给一个对象添加一些额外的职责，就增加功能来说，装饰模式比生成子类更灵活。</p>\n<p>装饰模式的优点就是把类中的装饰功能从类中搬移去除，这样可以简化原有的类。有效地把类的核心职责和装饰功能区分开了，而且可以去除相关类中的重复的装饰逻辑。</p>\n<h2 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h2><p><a href=\"https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua/proxy.py\">proxy.py</a></p>\n<p>为其他对象提供一种代理以控制对这个对象的访问。</p>\n<p>代码示例：A追求C，委托B送礼物给C。需求的重点是A和C不能直接接触::</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; jiaojiao = SchoolGirl()</span><br><span class=\"line\">&gt;&gt;&gt; jiaojiao.name = &#x27;李娇娇&#x27;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"工厂方法模式\"><a href=\"#工厂方法模式\" class=\"headerlink\" title=\"工厂方法模式\"></a>工厂方法模式</h2><p><a href=\"https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua/factory_method.py\">factory_method.py</a></p>\n<p>工厂方法模式，定义一个用于创建对象的接口，让子类决定实例化哪个类。工厂方法使一个类的实例化延迟到其子类。</p>\n<p>代码示例：学习雷锋好榜样，继承雷锋精神的大学生和社区的构建::</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; factory = UndergraduateFactory()</span><br><span class=\"line\">&gt;&gt;&gt; student = factory.create_leifeng()</span><br><span class=\"line\">&gt;&gt;&gt; student.buyrice()</span><br><span class=\"line\">买米</span><br><span class=\"line\">&gt;&gt;&gt; student.sweep()</span><br><span class=\"line\">扫地</span><br><span class=\"line\">&gt;&gt;&gt; student.wash()</span><br><span class=\"line\">洗衣</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>工厂方法把简单工厂的内部逻辑判断移到了客户端代码来进行。</p>\n<h2 id=\"原型模式\"><a href=\"#原型模式\" class=\"headerlink\" title=\"原型模式\"></a>原型模式</h2><p><a href=\"https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua/prototype.py\">prototype.py</a></p>\n<p>原型模式：用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。其实就是从一个对象再创建另外一个可定制的对象，并且不需要知道任何创建的细节::</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; a = Resume(&#x27;大鸟&#x27;)</span><br><span class=\"line\">&gt;&gt;&gt; a.set_personal_info(&#x27;男&#x27;, &#x27;29&#x27;)</span><br><span class=\"line\">&gt;&gt;&gt; a.set_work_experience(&#x27;1998-2000&#x27;, &#x27;xx公司&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; b = a.clone()</span><br><span class=\"line\">&gt;&gt;&gt; b.set_work_experience(&#x27;2000-2006&#x27;, &#x27;xx企业&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; c = a.clone()</span><br><span class=\"line\">&gt;&gt;&gt; c.set_personal_info(&#x27;男&#x27;, &#x27;24&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; a.display()</span><br><span class=\"line\">大鸟 男 29</span><br><span class=\"line\">工作经历: 1998-2000 xx公司</span><br><span class=\"line\">&gt;&gt;&gt; b.display()</span><br><span class=\"line\">大鸟 男 29</span><br><span class=\"line\">工作经历: 2000-2006 xx企业</span><br><span class=\"line\">&gt;&gt;&gt; c.display()</span><br><span class=\"line\">大鸟 男 24</span><br><span class=\"line\">工作经历: 1998-2000 xx公司</span><br></pre></td></tr></table></figure>\n\n<p>一般在初始化的信息不发生变化的情况下，克隆是最好的办法，它既隐藏了对象的创建细节，又对性能是大大的提升。</p>\n<h2 id=\"模板方法模式\"><a href=\"#模板方法模式\" class=\"headerlink\" title=\"模板方法模式\"></a>模板方法模式</h2><p><a href=\"https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua/template_method.py\">template_method.py</a></p>\n<p>模板方法模式：定义一个操作中的算法的骨架，而将一些步骤延迟到子类中，模板方法是的子类可以不改变一个算法的结构即可重新定义该算法的特定步骤::</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; a = ConcreteClassA()</span><br><span class=\"line\">&gt;&gt;&gt; a.template_method()</span><br><span class=\"line\">具体类A方法1实现</span><br><span class=\"line\">具体类A方法2实现</span><br><span class=\"line\">&gt;&gt;&gt; b = ConcreteClassB()</span><br><span class=\"line\">&gt;&gt;&gt; b.template_method()</span><br><span class=\"line\">具体类B方法1实现</span><br><span class=\"line\">具体类B方法2实现</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"外观模式\"><a href=\"#外观模式\" class=\"headerlink\" title=\"外观模式\"></a>外观模式</h2><p><a href=\"https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua/facade.py\">facade.py</a></p>\n<p>外观模式：为子系统中的一组接口提供一个一致的界面，此模式定义了一个高层接口，这个接口使得这一子系统更加容易使用::</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; facade = Facade()</span><br><span class=\"line\">&gt;&gt;&gt; facade.method_a()</span><br><span class=\"line\">--- 方法组A() ---</span><br><span class=\"line\">子系统方法一</span><br><span class=\"line\">子系统方法二</span><br><span class=\"line\">子系统方法四</span><br><span class=\"line\">&gt;&gt;&gt; facade.method_b()</span><br><span class=\"line\">--- 方法组B() ---</span><br><span class=\"line\">子系统方法二</span><br><span class=\"line\">子系统方法三</span><br></pre></td></tr></table></figure>\n\n<p>外观模式完美的体现了依赖倒转原则和迪米特法则的思想，是常用的模式之一。经典的三层架构，就需要考虑在层与层之间建立外观Facade。</p>\n<h2 id=\"建造者模式\"><a href=\"#建造者模式\" class=\"headerlink\" title=\"建造者模式\"></a>建造者模式</h2><p><a href=\"https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua/builder.py\">builder.py</a></p>\n<p>建造者模式：将一个复杂对象的构建与它的表示分离，是的同样的构建过程，可以创建不同的表示::</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; director = Director()</span><br><span class=\"line\">&gt;&gt;&gt; b1 = ConcreateBuilder1()</span><br><span class=\"line\">&gt;&gt;&gt; b2 = ConcreateBuilder2()</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; director.construct(b1)</span><br><span class=\"line\">&gt;&gt;&gt; p1 = b1.get_result()</span><br><span class=\"line\">&gt;&gt;&gt; p1.show()</span><br><span class=\"line\">产品 创建 ----</span><br><span class=\"line\">部件A</span><br><span class=\"line\">部件B</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; director.construct(b2)</span><br><span class=\"line\">&gt;&gt;&gt; p2 = b2.get_result()</span><br><span class=\"line\">&gt;&gt;&gt; p2.show()</span><br><span class=\"line\">产品 创建 ----</span><br><span class=\"line\">部件X</span><br><span class=\"line\">部件Y</span><br></pre></td></tr></table></figure>\n\n<p>建造者模式是当常见复杂对象的算法应该独立于该对象的组成部分以及它们的装配方式时使用的模式。</p>\n<p>如果我们用了建造者模式，那么用户就只需指定需要建造的类型就可以得到他们，而具体建造的过程和细节就不需要知道了。</p>\n<h2 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h2><p><a href=\"https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua/observer.py\">observer.py</a></p>\n<p>观察者模式：定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主体对象。这个主题对象在状态发生变化时，会通知所有的观察者对象，让它们能够自动更新自己::</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; s = ConcreteSubject()</span><br><span class=\"line\">&gt;&gt;&gt; s.attach(ConcreteObserver(s, &#x27;X&#x27;))</span><br><span class=\"line\">&gt;&gt;&gt; s.attach(ConcreteObserver(s, &#x27;Y&#x27;))</span><br><span class=\"line\">&gt;&gt;&gt; s.attach(ConcreteObserver(s, &#x27;Z&#x27;))</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; s.subject_state = &#x27;ABC&#x27;</span><br><span class=\"line\">&gt;&gt;&gt; s.notify()</span><br><span class=\"line\">观察者X的新状态是ABC</span><br><span class=\"line\">观察者Y的新状态是ABC</span><br><span class=\"line\">观察者Z的新状态是ABC</span><br></pre></td></tr></table></figure>\n\n<p>当一个对象的改变需要同时改变其他对象的时候，且它不知道具体有多少对象有待改变时，应该考虑使用观察者模式。</p>\n<p>观察者模式所做的工作其实就是解除耦合，让耦合的双方都依赖抽象，而不是依赖于具体。从而使得各自的变化都不会影响另一边的变化。是依赖倒转原则的最佳体现。</p>\n<p>但是抽象通知者还是依赖抽象观察者。在代码中抽象观察者中有一个update()方法，具体观察者中都要实现该方法，但是在实际中，可能有一些不一样的操作，根本就不是同名的方法。这是不足的地方。</p>\n<h2 id=\"抽象工厂模式\"><a href=\"#抽象工厂模式\" class=\"headerlink\" title=\"抽象工厂模式\"></a>抽象工厂模式</h2><p><a href=\"https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua/abstract_factory.py\">abstract_factory.py</a></p>\n<p>抽象工厂方法：提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类::</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; user = User()</span><br><span class=\"line\">&gt;&gt;&gt; dept = Department()</span><br><span class=\"line\">&gt;&gt;&gt; factory = SqlserverFactory()</span><br><span class=\"line\">&gt;&gt;&gt; iu = factory.create_user()</span><br><span class=\"line\">&gt;&gt;&gt; iu.insert(user)</span><br><span class=\"line\">在sql server 中给User表增加一条记录</span><br><span class=\"line\">&gt;&gt;&gt; iu.get_user(1)</span><br><span class=\"line\">在sql server 中根据ID得到User表一条记录</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; factory = AccessFactory()</span><br><span class=\"line\">&gt;&gt;&gt; id = factory.create_department()</span><br><span class=\"line\">&gt;&gt;&gt; id.insert(dept)</span><br><span class=\"line\">在Access中给Department表增加一条记录</span><br><span class=\"line\">&gt;&gt;&gt; id.get_dept(1)</span><br><span class=\"line\">在Access中根据ID得到Department表一条记录</span><br><span class=\"line\">&gt;&gt;&gt; iu = factory.create_user()</span><br><span class=\"line\">&gt;&gt;&gt; iu.insert(user)</span><br><span class=\"line\">在Access中给User表增加一条记录</span><br><span class=\"line\">&gt;&gt;&gt; iu.get_user(1)</span><br><span class=\"line\">在Access中根据Id得到User表一条记录</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>抽象工厂模式的优点：</p>\n<ul>\n<li>1、易于交换产品系列，由于具体工厂类，在一个应用中只需要在初始化的时候出现一次，这就使得改变一个应用的具体工厂变得非常容易，它只需要改变具体工厂即可使用不 同<br>的产品配置。</li>\n<li>2、让具体的创建实例过程和客户端分离，客户端是通过它们的抽象接口操作实例，产品的具体类名也被具体工厂的实现分离，不会出现在客户代码中。</li>\n</ul>\n<p>缺点：<br>新增或修改时，可能需要大量的改动。</p>\n<h2 id=\"状态模式\"><a href=\"#状态模式\" class=\"headerlink\" title=\"状态模式\"></a>状态模式</h2><p><a href=\"https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua/state.py\">state.py</a></p>\n<p>状态模式：当一个对象的内在状态改变时，允许改变其行为，这个对象看起来像是一个改变了其类::</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; c = Context(ConcreteStateA())</span><br><span class=\"line\">&gt;&gt;&gt; c.request()</span><br><span class=\"line\">当前状态：stateB</span><br><span class=\"line\">&gt;&gt;&gt; c.request()</span><br><span class=\"line\">当前状态：stateA</span><br><span class=\"line\">&gt;&gt;&gt; c.request()</span><br><span class=\"line\">当前状态：stateB</span><br><span class=\"line\">&gt;&gt;&gt; c.request()</span><br><span class=\"line\">当前状态：stateA</span><br><span class=\"line\">&gt;&gt;&gt; c.request()</span><br><span class=\"line\">当前状态：stateB</span><br></pre></td></tr></table></figure>\n\n<p>状态模式主要解决的是当控制一个对象状态转换的条件表达式过于复杂时的情况，把状态的判断转移到表示不同状态的一系列类中可以把复杂的判断逻辑简化。</p>\n<p>状态模式的好处是将与特定状态相关的行为局部化，并且将不同状态的行为分割开来。</p>\n<h2 id=\"适配器模式\"><a href=\"#适配器模式\" class=\"headerlink\" title=\"适配器模式\"></a>适配器模式</h2><p><a href=\"https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua/adapter.py\">adapter.py</a></p>\n<p>适配器模式：将一个类的接口转换成客户希望的另外一个接口。使得原本由于接口不兼容而不能一起工作的那些类可以一起工作::</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; target = Adapter()</span><br><span class=\"line\">&gt;&gt;&gt; target.request()</span><br><span class=\"line\">特殊请求</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"备忘录模式\"><a href=\"#备忘录模式\" class=\"headerlink\" title=\"备忘录模式\"></a>备忘录模式</h2><p><a href=\"https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua/memento.py\">memento.py</a></p>\n<p>备忘录模式：在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样就可以将该对象恢复到原先保存的状态::</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; o = Originator()</span><br><span class=\"line\">&gt;&gt;&gt; o.state = &#x27;ON&#x27;  # 初始状态</span><br><span class=\"line\">&gt;&gt;&gt; o.show()</span><br><span class=\"line\">state= ON</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; caretaker = Caretaker()</span><br><span class=\"line\">&gt;&gt;&gt; caretaker.memento = o.create_memento()</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; o.state = &#x27;OFF&#x27;  # 改变状态</span><br><span class=\"line\">&gt;&gt;&gt; o.show()</span><br><span class=\"line\">state= OFF</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; o.set_memento(caretaker.memento)  # 恢复</span><br><span class=\"line\">&gt;&gt;&gt; o.show()</span><br><span class=\"line\">state= ON</span><br></pre></td></tr></table></figure>\n\n<p>缺点：当需要备忘的对象状态数据很大很多时，那么在资源消耗上，备忘录对象会非常消耗资源。</p>\n<h2 id=\"组合模式\"><a href=\"#组合模式\" class=\"headerlink\" title=\"组合模式\"></a>组合模式</h2><p><a href=\"https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua/composite.py\">composite.py</a></p>\n<p>组合模式：将对象组合成树形结构以表示部分整体的层次结构，组合模式使得用户对单个对象和组合对象的使用具有一致性::</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; root = Composite(&#x27;root&#x27;)</span><br><span class=\"line\">&gt;&gt;&gt; root.add(Leaf(&#x27;Leaf A&#x27;))</span><br><span class=\"line\">&gt;&gt;&gt; root.add(Leaf(&#x27;Leaf B&#x27;))</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; comp = Composite(&#x27;Composite X&#x27;)</span><br><span class=\"line\">&gt;&gt;&gt; comp.add(Leaf(&#x27;Leaf A&#x27;))</span><br><span class=\"line\">&gt;&gt;&gt; comp.add(Leaf(&#x27;Leaf B&#x27;))</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; root.add(comp)</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; comp2 = Composite(&#x27;Composite XY&#x27;)</span><br><span class=\"line\">&gt;&gt;&gt; comp2.add(Leaf(&#x27;Leaf A&#x27;))</span><br><span class=\"line\">&gt;&gt;&gt; comp2.add(Leaf(&#x27;Leaf B&#x27;))</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; comp.add(comp2)</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; root.display(1)</span><br><span class=\"line\">- root</span><br><span class=\"line\">-- Leaf A</span><br><span class=\"line\">-- Leaf B</span><br><span class=\"line\">-- Composite X</span><br><span class=\"line\">--- Leaf A</span><br><span class=\"line\">--- Leaf B</span><br><span class=\"line\">--- Composite XY</span><br><span class=\"line\">---- Leaf A</span><br><span class=\"line\">---- Leaf B</span><br></pre></td></tr></table></figure>\n\n<p>组合模式定义了包含基本对象和组合对象的类层次结构，基本对象可以被组合成更复杂的组合对象，而这个组合对象又可以被组合这样不断地递归下去。</p>\n<h2 id=\"迭代器模式\"><a href=\"#迭代器模式\" class=\"headerlink\" title=\"迭代器模式\"></a>迭代器模式</h2><p><a href=\"https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua/iterator.py\">iterator.py</a></p>\n<p>迭代器模式：提供一种方法顺序访问一个聚合对象中各个元素，而不是暴露该对象的内部表示。代码事例为乘务员迭代检票的模拟演示::</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; a = ConcreteAggregate()</span><br><span class=\"line\">&gt;&gt;&gt; a[0] = &#x27;大鸟&#x27;</span><br><span class=\"line\">&gt;&gt;&gt; a[1] = &#x27;小菜&#x27;</span><br><span class=\"line\">&gt;&gt;&gt; a[2] = &#x27;行李&#x27;</span><br><span class=\"line\">&gt;&gt;&gt; a[3] = &#x27;老外&#x27;</span><br><span class=\"line\">&gt;&gt;&gt; a[4] = &#x27;员工&#x27;</span><br><span class=\"line\">&gt;&gt;&gt; a[5] = &#x27;小偷&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; i = ConcreteIterator(a)</span><br><span class=\"line\">&gt;&gt;&gt; item = i.first()</span><br><span class=\"line\">&gt;&gt;&gt; while not i.is_done():</span><br><span class=\"line\">...     print(&#x27;&#123;&#125; 请买票!&#x27;.format(i.current_item()))</span><br><span class=\"line\">...     i.next()</span><br><span class=\"line\">大鸟 请买票!</span><br><span class=\"line\">小菜 请买票!</span><br><span class=\"line\">行李 请买票!</span><br><span class=\"line\">老外 请买票!</span><br><span class=\"line\">员工 请买票!</span><br><span class=\"line\">小偷 请买票!</span><br></pre></td></tr></table></figure>\n\n<p>为遍历不同的聚合结构提供如开始、下一个、是否结束、当前哪一项等统一的接口。现在高级编程语言如C#、JAVA、Python等本身已经把这个模式做在语言中。</p>\n<h2 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h2><p><a href=\"https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua/singleton.py\">singleton.py</a></p>\n<p>单例模式：保证一个类仅有一个实例，并提供一个访问它的全局访问点::</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; singleton1 = Singleton(&#x27;wen&#x27;) # doctest: +ELLIPSIS</span><br><span class=\"line\">单例：...</span><br><span class=\"line\">&gt;&gt;&gt; singleton2 = Singleton(&#x27;wen1&#x27;)  # doctest: +ELLIPSIS</span><br><span class=\"line\">单例：...</span><br><span class=\"line\">&gt;&gt;&gt; print(singleton1 is singleton2)</span><br><span class=\"line\">True</span><br></pre></td></tr></table></figure>\n\n<p>通常我们可以让一个全局变量使得一个对象被访问，但是它不能防止你实例化多个对象，一个最好的办法就是：让类自身负责它的唯一实例。这个类可以保证没有其他的实例可以被创建，并且它可以提供一个访问该实例的方法。</p>\n<h2 id=\"桥接模式\"><a href=\"#桥接模式\" class=\"headerlink\" title=\"桥接模式\"></a>桥接模式</h2><p><a href=\"https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua/bridge.py\">bridge.py</a></p>\n<p>桥接模式：将抽象部分与它的实现部分分离，使他们都可以独立的变化::</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; ab = RefinedAbstraction()</span><br><span class=\"line\">&gt;&gt;&gt; ab.implementor = ConcreteImplementorA()</span><br><span class=\"line\">&gt;&gt;&gt; ab.operation()</span><br><span class=\"line\">具体实现A的方法执行。</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; ab.implementor = ConcreteImplementorB()</span><br><span class=\"line\">&gt;&gt;&gt; ab.operation()</span><br><span class=\"line\">具体实现B的方法执行。</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"命令模式\"><a href=\"#命令模式\" class=\"headerlink\" title=\"命令模式\"></a>命令模式</h2><p><a href=\"https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua/command.py\">command.py</a></p>\n<p>命令模式：将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化；对请求排队或记录请求日志，以及支持可撤销的操作。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; r = Receiver()</span><br><span class=\"line\">&gt;&gt;&gt; c = ConcreteCommand(r)</span><br><span class=\"line\">&gt;&gt;&gt; i = Invoker()</span><br><span class=\"line\">&gt;&gt;&gt; i.command = c</span><br><span class=\"line\">&gt;&gt;&gt; i.execute_command()</span><br><span class=\"line\">执行请求！</span><br></pre></td></tr></table></figure>\n\n<p>命令模式的优点：</p>\n<ul>\n<li>1 能较容易的设计一个命令队列</li>\n<li>2 在需要的情况下，可以较容易的将命令记入日志</li>\n<li>3 允许接收请求的一方决定是否要否决请求</li>\n<li>4 可以容易的实现对请求的撤销和重做</li>\n<li>5 由于加新的具体命令类不影响其他的类，因此增加新的具体命令类很容易</li>\n<li>6 命令模式把请求一个操作的对象与知道怎么执行一个操作的对象分割开。</li>\n</ul>\n<h2 id=\"职责链模式\"><a href=\"#职责链模式\" class=\"headerlink\" title=\"职责链模式\"></a>职责链模式</h2><p><a href=\"https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua/chain_of_responsibility.py\">chain_of_responsibility.py</a></p>\n<p>职责链模式：使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。将这个对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; h1 = ConcreteHandler1()</span><br><span class=\"line\">&gt;&gt;&gt; h2 = ConcreteHandler2()</span><br><span class=\"line\">&gt;&gt;&gt; h3 = ConcreteHandler3()</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; h1.successor = h2  # 设置职责链上家和下家</span><br><span class=\"line\">&gt;&gt;&gt; h2.successor = h3</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; requests = [2, 5, 14, 22, 18, 3, 27, 20]</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; for request in requests:</span><br><span class=\"line\">...     h1.handle_request(request)</span><br><span class=\"line\">ConcreteHandler1 处理请求 2</span><br><span class=\"line\">ConcreteHandler1 处理请求 5</span><br><span class=\"line\">ConcreteHandler2 处理请求 14</span><br><span class=\"line\">ConcreteHandler3 处理请求 22</span><br><span class=\"line\">ConcreteHandler2 处理请求 18</span><br><span class=\"line\">ConcreteHandler1 处理请求 3</span><br><span class=\"line\">ConcreteHandler3 处理请求 27</span><br><span class=\"line\">ConcreteHandler3 处理请求 20</span><br></pre></td></tr></table></figure>\n\n<p>需要注意的地方，一个请求极有可能到了链的末端都得不到处理，或者因为没有正确配置而得不到处理。</p>\n<h2 id=\"中介者模式\"><a href=\"#中介者模式\" class=\"headerlink\" title=\"中介者模式\"></a>中介者模式</h2><p><a href=\"https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua/mediator.py\">mediator.py</a></p>\n<p>中介者模式：用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显式的相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互::</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; m = ConcreteMediator()</span><br><span class=\"line\">&gt;&gt;&gt; c1 = ConcreteHandler1(m)</span><br><span class=\"line\">&gt;&gt;&gt; c2 = ConcreteHandler2(m)</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; m.colleague1 = c1</span><br><span class=\"line\">&gt;&gt;&gt; m.colleague2 = c2</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; c1.send(&#x27;吃饭了吗？&#x27;)</span><br><span class=\"line\">同事2得到消息： 吃饭了吗？</span><br><span class=\"line\">&gt;&gt;&gt; c2.send(&#x27;没有呢，你打算请客？&#x27;)</span><br><span class=\"line\">同事1得到消息： 没有呢，你打算请客？</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"享元模式\"><a href=\"#享元模式\" class=\"headerlink\" title=\"享元模式\"></a>享元模式</h2><p><a href=\"https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua/flyweight.py\">flyweight.py</a></p>\n<p>享元模式：运用共享技术有效地支持大量细粒度的对象::</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; extrinsicstate = 22</span><br><span class=\"line\">&gt;&gt;&gt; f = FlyweightFactory()</span><br><span class=\"line\">&gt;&gt;&gt; fx = f.get_flyweight(&#x27;X&#x27;)</span><br><span class=\"line\">&gt;&gt;&gt; fx.operation(extrinsicstate - 1)</span><br><span class=\"line\">具体Flyweight: 21</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; fy = f.get_flyweight(&#x27;Y&#x27;)</span><br><span class=\"line\">&gt;&gt;&gt; fy.operation(extrinsicstate - 2)</span><br><span class=\"line\">具体Flyweight: 20</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; uf = UnsharedConcreteFlyweight()</span><br><span class=\"line\">&gt;&gt;&gt; uf.operation(extrinsicstate - 3)</span><br><span class=\"line\">不共享的具体Flyweight: 19</span><br></pre></td></tr></table></figure>\n\n<p>享元模式可以避免大量非常相似类的开销。在程序设计中，有时需要生成大量的细粒度的类示例来表示数据，如果能够发现这些实例除了几个参数外基本上都相同的，有时就能够受大幅度的减少需要实例化的类数量。如果把这些参数移到类实例的外面，在方法调用的时候将它们传递进来，就可以通过共享大幅度的减少单个实例的数目。</p>\n<p>应用场合：如果一个应用程序使用了大量的对象，而大量的这些对象造成了很大的存储开销时，应该考虑使用，还有就是对象的大多数状态可以外部状态，如果删除对象的外部状态，那么可以用相对较少的共享对象取代很多的组对象，此时可以考虑使用享元模式。</p>\n<h2 id=\"解释器模式\"><a href=\"#解释器模式\" class=\"headerlink\" title=\"解释器模式\"></a>解释器模式</h2><p><a href=\"https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua/interpreter.py\">interpreter.py</a></p>\n<p>解释器模式：给定一个语言，定义它的文法的一种表示，并定义一个解释器，这个解释器使用该表示来解释语言中的句子::</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; context = Context()</span><br><span class=\"line\">&gt;&gt;&gt; ll = []</span><br><span class=\"line\">&gt;&gt;&gt; ll.append(TerminalExpression())</span><br><span class=\"line\">&gt;&gt;&gt; ll.append(TerminalExpression())</span><br><span class=\"line\">&gt;&gt;&gt; ll.append(NonterminalExpression())</span><br><span class=\"line\">&gt;&gt;&gt; ll.append(TerminalExpression())</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; for exp in ll:</span><br><span class=\"line\">...     exp.interpret(context)</span><br><span class=\"line\">终端解释器</span><br><span class=\"line\">终端解释器</span><br><span class=\"line\">非终端解释器</span><br><span class=\"line\">终端解释器</span><br></pre></td></tr></table></figure>\n\n<p>比如，在字符串搜索匹配的字符或判断一个字符串是否符合我们规定的格式，我们会用到的正则表达式技术，就是该模式的很好应用。</p>\n<p>优点：容易的改变和扩展文法，因为该模式使用类来表示文法规则，你可使用继承来改变或扩展该方法。也比较容易实现文法，因为定义抽象语法树中各个节点的类的实现大体类似，这些类都易于直接编写。</p>\n<p>缺点：该模式为文法中的每一条规则至少定义了一个类，因此包含许多规则的文法就很难管理和维护。建议当文法非常复杂时，使用其他的技术如语法分析程序或编译器生成器来处理。</p>\n<h2 id=\"访问者模式\"><a href=\"#访问者模式\" class=\"headerlink\" title=\"访问者模式\"></a>访问者模式</h2><p><a href=\"https://github.com/suAdminWen/studyForPython/tree/master/design_patterns/dahua/visitor.py\">visitor.py</a></p>\n<p>访问者模式：表示一个作用于某对象结构中各元素的操作。它使你可以在不改变各元素的类的前提下定义于这些元素的新操作::</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; o = ObjectStructure()</span><br><span class=\"line\">&gt;&gt;&gt; o.attach(ConcreteElementA())</span><br><span class=\"line\">&gt;&gt;&gt; o.attach(ConcreteElementB())</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; v1 = ConcreteVisitor1()</span><br><span class=\"line\">&gt;&gt;&gt; v2 = ConcreteVisitor2()</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; o.accept(v1)</span><br><span class=\"line\">ConcreteElementA被ConcreteVisitor1访问</span><br><span class=\"line\">ConcreteElementB被ConcreteVisitor1访问</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; o.accept(v2)</span><br><span class=\"line\">ConcreteElementA被ConcreteVisitor2访问</span><br><span class=\"line\">ConcreteElementB被ConcreteVisitor2访问</span><br></pre></td></tr></table></figure>\n\n<p>访问者模式适用于数据结构相对稳定的系统，它把数据结构作用于结构上的操作之间的耦合解脱开，使得操作集合可以相对自由地演化。</p>\n<p>如果系统有比较稳定的数据结构又有易于变化的算法的话，使用访问者模式是比较合适的因为该模式使得算法操作的增加变得容易。</p>\n<p>缺点：就是使增加新的数据结构变得困难了。该模式较为复杂。当你真正需要它的时候，才考虑使用它。</p>"},{"title":"使用git在服务器上部署git仓库并实现提交代码时同步代码到生产环境","date":"2017-10-26T16:00:00.000Z","_content":"\n最近由于需要对正在运行的系统进行新功能添加，本来是可以通过github进行代码维护，但是由于这个项目涉及一些问题，目前还不能开源，所以只能是手动覆盖bug文件，生产环境上的代码反而是最新的了。\n\n之前有个思路，就是将git仓库部署到生产环境所在的服务器中，今天做了一下尝试，效果还不错，特意再次做出总结。具体实现的目标就是：\n\n<!-- more -->\n\n使用git在服务器上部署git仓库并实现提交代码时同步代码到生产环境，参考[这里棒棒哒](https://my.oschina.net/u/190049/blog/488588).废话少说，进入正题。\n\n首先，需要在服务器上安装git，这里就不再罗嗦，不会装的，出门左转[点击这里](https://git-scm.com/)。\n\n以下代码命令和代码实例中说明一下几点：\n\n- 所有服务器上的操作，为了避免遇到权限的问题，是直接进入`su`超级用户下的操作。\n- 创建的项目名为`my_site`。\n- 在服务器上，我选择将仓库创建在`/var/`下，生产环境项目代码放在`/projects/my_site/`。阅读者可以自行更改，但是需要记住更改后的路径。\n- 为了隐私，实例的服务器ip用`serverhost`代替，用户用user代替。\n\n## 在服务器上创建git仓库\n\n我选择在`/var/`下创建：\n\n    mkdir git  && cd git\n    mkdir my_site.git && cd my_site.git\n    git init --bare\n\n`--bare`的意思是，该文件夹是我们的代码仓库，它将不会放源代码而只是做版本控制。\n\n## 创建钩子\n\n将会使用post-receive钩子，更多相关的信息可以参考官方文档。\n\n    ls\n\n可以看到hooks已创建，而且里面也有各种钩子的样例。\n\n![11.jpg](http://upload-images.jianshu.io/upload_images/3248493-23f7a5b78a55b7f6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n创建我们自己的post-receive：\n\n```shell\ncd hooks\nvim post-receive\n```\n在`post-receive`中需要同步的语句\n\n```\n#!/bin/sh\ngit --work-tree=/projects/my_site/ --git-dir=/var/git/your_site.git checkout -f\n```\n\n编辑完成之后保存。\n\n将git仓库设成可读写的：\n\n    chmod 777 -R *\n\n如果生产环境项目所在目录`/projects/my_site/`不存在，要记得创建，同时让其的权限成为任何人都可读写！\n\n```\nmkdir /projects/my_site/\ncd /projects/ && chmod 777 -R *\n```\n\n服务器上的仓库和同步钩子配置到此完毕，下面需要我们在本地编写项目并上传至服务器仓库。\n\n## 本地项目推送\n\n一般情况是你**已经有**了自己的git项目了，那么只需要添加仓库地址就行了。\n\n    git remote add server ssh://user@serverhost/var/git/my_site.git\n\n'server'只是这个远程连接的名称，你可以同时有多个远程连接，每次push的时候指定名称即可将代码上传到不同的仓库。\n\n如果你本地还没有项目代码：\n\n```\ncd my_site\ngit init\ngit add *\ngit commit -m \"commit\"\ngit remote add server ssh://user@serverhost/var/git/my_site.git\ngit push server master\n```\nmaster指定的是master分支，如果你有其他分支也可以push其他分支。\n\n补充：\n\n我们也可以从git仓库中clone代码到本地：\n\n    git clone ssh://user@serverhost/var/git/my_site.git\n\n--","source":"_posts/使用git在服务器上部署git仓库并实现提交代码时同步代码到生产环境.md","raw":"---\ntitle: 使用git在服务器上部署git仓库并实现提交代码时同步代码到生产环境\ndate: 2017-10-27\ntags: [git, 服务器]\n---\n\n最近由于需要对正在运行的系统进行新功能添加，本来是可以通过github进行代码维护，但是由于这个项目涉及一些问题，目前还不能开源，所以只能是手动覆盖bug文件，生产环境上的代码反而是最新的了。\n\n之前有个思路，就是将git仓库部署到生产环境所在的服务器中，今天做了一下尝试，效果还不错，特意再次做出总结。具体实现的目标就是：\n\n<!-- more -->\n\n使用git在服务器上部署git仓库并实现提交代码时同步代码到生产环境，参考[这里棒棒哒](https://my.oschina.net/u/190049/blog/488588).废话少说，进入正题。\n\n首先，需要在服务器上安装git，这里就不再罗嗦，不会装的，出门左转[点击这里](https://git-scm.com/)。\n\n以下代码命令和代码实例中说明一下几点：\n\n- 所有服务器上的操作，为了避免遇到权限的问题，是直接进入`su`超级用户下的操作。\n- 创建的项目名为`my_site`。\n- 在服务器上，我选择将仓库创建在`/var/`下，生产环境项目代码放在`/projects/my_site/`。阅读者可以自行更改，但是需要记住更改后的路径。\n- 为了隐私，实例的服务器ip用`serverhost`代替，用户用user代替。\n\n## 在服务器上创建git仓库\n\n我选择在`/var/`下创建：\n\n    mkdir git  && cd git\n    mkdir my_site.git && cd my_site.git\n    git init --bare\n\n`--bare`的意思是，该文件夹是我们的代码仓库，它将不会放源代码而只是做版本控制。\n\n## 创建钩子\n\n将会使用post-receive钩子，更多相关的信息可以参考官方文档。\n\n    ls\n\n可以看到hooks已创建，而且里面也有各种钩子的样例。\n\n![11.jpg](http://upload-images.jianshu.io/upload_images/3248493-23f7a5b78a55b7f6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n创建我们自己的post-receive：\n\n```shell\ncd hooks\nvim post-receive\n```\n在`post-receive`中需要同步的语句\n\n```\n#!/bin/sh\ngit --work-tree=/projects/my_site/ --git-dir=/var/git/your_site.git checkout -f\n```\n\n编辑完成之后保存。\n\n将git仓库设成可读写的：\n\n    chmod 777 -R *\n\n如果生产环境项目所在目录`/projects/my_site/`不存在，要记得创建，同时让其的权限成为任何人都可读写！\n\n```\nmkdir /projects/my_site/\ncd /projects/ && chmod 777 -R *\n```\n\n服务器上的仓库和同步钩子配置到此完毕，下面需要我们在本地编写项目并上传至服务器仓库。\n\n## 本地项目推送\n\n一般情况是你**已经有**了自己的git项目了，那么只需要添加仓库地址就行了。\n\n    git remote add server ssh://user@serverhost/var/git/my_site.git\n\n'server'只是这个远程连接的名称，你可以同时有多个远程连接，每次push的时候指定名称即可将代码上传到不同的仓库。\n\n如果你本地还没有项目代码：\n\n```\ncd my_site\ngit init\ngit add *\ngit commit -m \"commit\"\ngit remote add server ssh://user@serverhost/var/git/my_site.git\ngit push server master\n```\nmaster指定的是master分支，如果你有其他分支也可以push其他分支。\n\n补充：\n\n我们也可以从git仓库中clone代码到本地：\n\n    git clone ssh://user@serverhost/var/git/my_site.git\n\n--","slug":"使用git在服务器上部署git仓库并实现提交代码时同步代码到生产环境","published":1,"updated":"2021-06-20T10:25:20.130Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluqa1hjd0043rlog7btr0gys","content":"<p>最近由于需要对正在运行的系统进行新功能添加，本来是可以通过github进行代码维护，但是由于这个项目涉及一些问题，目前还不能开源，所以只能是手动覆盖bug文件，生产环境上的代码反而是最新的了。</p>\n<p>之前有个思路，就是将git仓库部署到生产环境所在的服务器中，今天做了一下尝试，效果还不错，特意再次做出总结。具体实现的目标就是：</p>\n<span id=\"more\"></span>\n\n<p>使用git在服务器上部署git仓库并实现提交代码时同步代码到生产环境，参考<a href=\"https://my.oschina.net/u/190049/blog/488588\">这里棒棒哒</a>.废话少说，进入正题。</p>\n<p>首先，需要在服务器上安装git，这里就不再罗嗦，不会装的，出门左转<a href=\"https://git-scm.com/\">点击这里</a>。</p>\n<p>以下代码命令和代码实例中说明一下几点：</p>\n<ul>\n<li>所有服务器上的操作，为了避免遇到权限的问题，是直接进入<code>su</code>超级用户下的操作。</li>\n<li>创建的项目名为<code>my_site</code>。</li>\n<li>在服务器上，我选择将仓库创建在<code>/var/</code>下，生产环境项目代码放在<code>/projects/my_site/</code>。阅读者可以自行更改，但是需要记住更改后的路径。</li>\n<li>为了隐私，实例的服务器ip用<code>serverhost</code>代替，用户用user代替。</li>\n</ul>\n<h2 id=\"在服务器上创建git仓库\"><a href=\"#在服务器上创建git仓库\" class=\"headerlink\" title=\"在服务器上创建git仓库\"></a>在服务器上创建git仓库</h2><p>我选择在<code>/var/</code>下创建：</p>\n<pre><code>mkdir git  &amp;&amp; cd git\nmkdir my_site.git &amp;&amp; cd my_site.git\ngit init --bare\n</code></pre>\n<p><code>--bare</code>的意思是，该文件夹是我们的代码仓库，它将不会放源代码而只是做版本控制。</p>\n<h2 id=\"创建钩子\"><a href=\"#创建钩子\" class=\"headerlink\" title=\"创建钩子\"></a>创建钩子</h2><p>将会使用post-receive钩子，更多相关的信息可以参考官方文档。</p>\n<pre><code>ls\n</code></pre>\n<p>可以看到hooks已创建，而且里面也有各种钩子的样例。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3248493-23f7a5b78a55b7f6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"11.jpg\"></p>\n<p>创建我们自己的post-receive：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd hooks</span><br><span class=\"line\">vim post-receive</span><br></pre></td></tr></table></figure>\n<p>在<code>post-receive</code>中需要同步的语句</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/sh</span><br><span class=\"line\">git --work-tree=/projects/my_site/ --git-dir=/var/git/your_site.git checkout -f</span><br></pre></td></tr></table></figure>\n\n<p>编辑完成之后保存。</p>\n<p>将git仓库设成可读写的：</p>\n<pre><code>chmod 777 -R *\n</code></pre>\n<p>如果生产环境项目所在目录<code>/projects/my_site/</code>不存在，要记得创建，同时让其的权限成为任何人都可读写！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /projects/my_site/</span><br><span class=\"line\">cd /projects/ &amp;&amp; chmod 777 -R *</span><br></pre></td></tr></table></figure>\n\n<p>服务器上的仓库和同步钩子配置到此完毕，下面需要我们在本地编写项目并上传至服务器仓库。</p>\n<h2 id=\"本地项目推送\"><a href=\"#本地项目推送\" class=\"headerlink\" title=\"本地项目推送\"></a>本地项目推送</h2><p>一般情况是你<strong>已经有</strong>了自己的git项目了，那么只需要添加仓库地址就行了。</p>\n<pre><code>git remote add server ssh://user@serverhost/var/git/my_site.git\n</code></pre>\n<p>‘server’只是这个远程连接的名称，你可以同时有多个远程连接，每次push的时候指定名称即可将代码上传到不同的仓库。</p>\n<p>如果你本地还没有项目代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd my_site</span><br><span class=\"line\">git init</span><br><span class=\"line\">git add *</span><br><span class=\"line\">git commit -m &quot;commit&quot;</span><br><span class=\"line\">git remote add server ssh://user@serverhost/var/git/my_site.git</span><br><span class=\"line\">git push server master</span><br></pre></td></tr></table></figure>\n<p>master指定的是master分支，如果你有其他分支也可以push其他分支。</p>\n<p>补充：</p>\n<p>我们也可以从git仓库中clone代码到本地：</p>\n<pre><code>git clone ssh://user@serverhost/var/git/my_site.git\n</code></pre>\n<p>–</p>\n","site":{"data":{}},"excerpt":"<p>最近由于需要对正在运行的系统进行新功能添加，本来是可以通过github进行代码维护，但是由于这个项目涉及一些问题，目前还不能开源，所以只能是手动覆盖bug文件，生产环境上的代码反而是最新的了。</p>\n<p>之前有个思路，就是将git仓库部署到生产环境所在的服务器中，今天做了一下尝试，效果还不错，特意再次做出总结。具体实现的目标就是：</p>","more":"<p>使用git在服务器上部署git仓库并实现提交代码时同步代码到生产环境，参考<a href=\"https://my.oschina.net/u/190049/blog/488588\">这里棒棒哒</a>.废话少说，进入正题。</p>\n<p>首先，需要在服务器上安装git，这里就不再罗嗦，不会装的，出门左转<a href=\"https://git-scm.com/\">点击这里</a>。</p>\n<p>以下代码命令和代码实例中说明一下几点：</p>\n<ul>\n<li>所有服务器上的操作，为了避免遇到权限的问题，是直接进入<code>su</code>超级用户下的操作。</li>\n<li>创建的项目名为<code>my_site</code>。</li>\n<li>在服务器上，我选择将仓库创建在<code>/var/</code>下，生产环境项目代码放在<code>/projects/my_site/</code>。阅读者可以自行更改，但是需要记住更改后的路径。</li>\n<li>为了隐私，实例的服务器ip用<code>serverhost</code>代替，用户用user代替。</li>\n</ul>\n<h2 id=\"在服务器上创建git仓库\"><a href=\"#在服务器上创建git仓库\" class=\"headerlink\" title=\"在服务器上创建git仓库\"></a>在服务器上创建git仓库</h2><p>我选择在<code>/var/</code>下创建：</p>\n<pre><code>mkdir git  &amp;&amp; cd git\nmkdir my_site.git &amp;&amp; cd my_site.git\ngit init --bare\n</code></pre>\n<p><code>--bare</code>的意思是，该文件夹是我们的代码仓库，它将不会放源代码而只是做版本控制。</p>\n<h2 id=\"创建钩子\"><a href=\"#创建钩子\" class=\"headerlink\" title=\"创建钩子\"></a>创建钩子</h2><p>将会使用post-receive钩子，更多相关的信息可以参考官方文档。</p>\n<pre><code>ls\n</code></pre>\n<p>可以看到hooks已创建，而且里面也有各种钩子的样例。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/3248493-23f7a5b78a55b7f6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"11.jpg\"></p>\n<p>创建我们自己的post-receive：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd hooks</span><br><span class=\"line\">vim post-receive</span><br></pre></td></tr></table></figure>\n<p>在<code>post-receive</code>中需要同步的语句</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/sh</span><br><span class=\"line\">git --work-tree=/projects/my_site/ --git-dir=/var/git/your_site.git checkout -f</span><br></pre></td></tr></table></figure>\n\n<p>编辑完成之后保存。</p>\n<p>将git仓库设成可读写的：</p>\n<pre><code>chmod 777 -R *\n</code></pre>\n<p>如果生产环境项目所在目录<code>/projects/my_site/</code>不存在，要记得创建，同时让其的权限成为任何人都可读写！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /projects/my_site/</span><br><span class=\"line\">cd /projects/ &amp;&amp; chmod 777 -R *</span><br></pre></td></tr></table></figure>\n\n<p>服务器上的仓库和同步钩子配置到此完毕，下面需要我们在本地编写项目并上传至服务器仓库。</p>\n<h2 id=\"本地项目推送\"><a href=\"#本地项目推送\" class=\"headerlink\" title=\"本地项目推送\"></a>本地项目推送</h2><p>一般情况是你<strong>已经有</strong>了自己的git项目了，那么只需要添加仓库地址就行了。</p>\n<pre><code>git remote add server ssh://user@serverhost/var/git/my_site.git\n</code></pre>\n<p>‘server’只是这个远程连接的名称，你可以同时有多个远程连接，每次push的时候指定名称即可将代码上传到不同的仓库。</p>\n<p>如果你本地还没有项目代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd my_site</span><br><span class=\"line\">git init</span><br><span class=\"line\">git add *</span><br><span class=\"line\">git commit -m &quot;commit&quot;</span><br><span class=\"line\">git remote add server ssh://user@serverhost/var/git/my_site.git</span><br><span class=\"line\">git push server master</span><br></pre></td></tr></table></figure>\n<p>master指定的是master分支，如果你有其他分支也可以push其他分支。</p>\n<p>补充：</p>\n<p>我们也可以从git仓库中clone代码到本地：</p>\n<pre><code>git clone ssh://user@serverhost/var/git/my_site.git\n</code></pre>\n<p>–</p>"},{"title":"妙计旅行面试经历和总结","date":"2017-08-03T16:00:00.000Z","_content":"\n> 井蛙不可以语于海者，拘于虚也。\n\n## 初入公司\n\n早上5点多的火车，赶往北京，火车还未到达北京，就感觉热浪滚滚而来。转地铁2号线，到达妙计公司的时间在9点半左右。\n\n\n公司坐落在雍和宫国子监院内，初入大门，感觉公司挺有氛围的，古典与现代结合，环境着实不错。出入大门需要门禁，但是有门卫大叔。在门卫处签到后，被通知到餐厅处等候。\n\n\n餐厅大约能容纳三四十人同时就餐，有空调。比预约的时间早半个小时，所以只能耐心等待，但是也没有等待太久，且在此同时还有其他面试着陆续到来。HR送来笔试题卷。题卷共三页，单面。大致翻了翻，觉得心里变得很踏实了，因为 **没有几题会做的**。\n\n<!-- more -->\n\n## 笔试题卷\n\n\n题卷主要分为两大部门，一部分是关于python的，另外一部分是关于Linux的。我应聘的方向是python运维实习生。\n\n\n### python部分：\n\n- range和xrange的区别\n- 单下划线和双下划线的区别\n- 常用的数据结构类型，并说明是否可变\n- lambda函数\n- map函数。 `map(lamdba x:x*2,[1,2,3])` 问输出\n- reduce函数\n- 手写代码解析字符串，获取关键值，存入mysql数据库\n- 手写代码实现输出文件最新追加的字符串\n\n\n### Linux部分\n\n- 基本命令的含义。ls 、cp、mv、du等等\n- 文件权限的问题\n- shell脚本的编写\n- 其他的记不清了\n\n\n## 面试问答\n\n\n当然，题卷做的惨不忍睹，我想可能是做的太差，所以面试的技术主管问的问题都是基本的问题。先是针对题卷的问题进行提问，后是看太不理想了就转问简历上的问题，问了做过的项目和相关基础，反而没有问关于运维的东西。提到的知识点有：`set()`、如何出来同一个ip多次访问同一个站点的问题等等，都是些基础。对自己的评价就是 **一问三不知**。\n\n\n整个面试环节不超过半个小时。面试官没有那么严肃，也没有问技术相关之外的话题，没有让我自我介绍，在面试的过程中，对我不知道的问题也引导让我回答，还算nice，年龄也不大。\n\n\n从笔试到面试结束，我都显得很冷静，没有之前想想的那么紧张，可能是自己已经提前知道了结果吧，知道没有一点希望可能成功。\n\n\n## 总结\n\n\n总的来说，这次面试是十分失败的。总结一下几点：\n\n- 投递的方向不对口。本来应该是python web方向，怎么就投了运维！\n- 准备的不够。通知面试之后，更多关注的是自己从来没有了解的知识，没有认真复习已经会的东西。没有把自己包装好。正因为基础的东西都没能展示出来，面试官才不会深入。\n- 手写代码能力太差。题卷后面部分都是需要手写代码的地方，愣是一个字没写。这一块就足以导致整个面试失败了。对于手写代码的地方其实都有思路，但是由于能力差和开始前的自己的定论，所以就没有写。\n- 简历上的东西准备的不是很好。熟练的技能没有很好的展示出来。\n- 没有突出比别人优秀的地方。\n\n\n毕竟是第一次面试，结果在意料之中，所以接下来会好好准备每一场面试，不经历个十来次，怎叫锻炼。另外，各大企业校招已经开始，应该关注了！\n\n\n## 花费：\n\n- 住宿：50\n- 车费：40.5往火车 35.5反火车 8（地铁）\n- 餐饮：20午饭 11.5饮料\n\n**共： 165.5(元)**\n","source":"_posts/妙计旅行面试经历和总结.md","raw":"---\ntitle: 妙计旅行面试经历和总结\ndate: 2017-08-04\ntags: [面经]\n---\n\n> 井蛙不可以语于海者，拘于虚也。\n\n## 初入公司\n\n早上5点多的火车，赶往北京，火车还未到达北京，就感觉热浪滚滚而来。转地铁2号线，到达妙计公司的时间在9点半左右。\n\n\n公司坐落在雍和宫国子监院内，初入大门，感觉公司挺有氛围的，古典与现代结合，环境着实不错。出入大门需要门禁，但是有门卫大叔。在门卫处签到后，被通知到餐厅处等候。\n\n\n餐厅大约能容纳三四十人同时就餐，有空调。比预约的时间早半个小时，所以只能耐心等待，但是也没有等待太久，且在此同时还有其他面试着陆续到来。HR送来笔试题卷。题卷共三页，单面。大致翻了翻，觉得心里变得很踏实了，因为 **没有几题会做的**。\n\n<!-- more -->\n\n## 笔试题卷\n\n\n题卷主要分为两大部门，一部分是关于python的，另外一部分是关于Linux的。我应聘的方向是python运维实习生。\n\n\n### python部分：\n\n- range和xrange的区别\n- 单下划线和双下划线的区别\n- 常用的数据结构类型，并说明是否可变\n- lambda函数\n- map函数。 `map(lamdba x:x*2,[1,2,3])` 问输出\n- reduce函数\n- 手写代码解析字符串，获取关键值，存入mysql数据库\n- 手写代码实现输出文件最新追加的字符串\n\n\n### Linux部分\n\n- 基本命令的含义。ls 、cp、mv、du等等\n- 文件权限的问题\n- shell脚本的编写\n- 其他的记不清了\n\n\n## 面试问答\n\n\n当然，题卷做的惨不忍睹，我想可能是做的太差，所以面试的技术主管问的问题都是基本的问题。先是针对题卷的问题进行提问，后是看太不理想了就转问简历上的问题，问了做过的项目和相关基础，反而没有问关于运维的东西。提到的知识点有：`set()`、如何出来同一个ip多次访问同一个站点的问题等等，都是些基础。对自己的评价就是 **一问三不知**。\n\n\n整个面试环节不超过半个小时。面试官没有那么严肃，也没有问技术相关之外的话题，没有让我自我介绍，在面试的过程中，对我不知道的问题也引导让我回答，还算nice，年龄也不大。\n\n\n从笔试到面试结束，我都显得很冷静，没有之前想想的那么紧张，可能是自己已经提前知道了结果吧，知道没有一点希望可能成功。\n\n\n## 总结\n\n\n总的来说，这次面试是十分失败的。总结一下几点：\n\n- 投递的方向不对口。本来应该是python web方向，怎么就投了运维！\n- 准备的不够。通知面试之后，更多关注的是自己从来没有了解的知识，没有认真复习已经会的东西。没有把自己包装好。正因为基础的东西都没能展示出来，面试官才不会深入。\n- 手写代码能力太差。题卷后面部分都是需要手写代码的地方，愣是一个字没写。这一块就足以导致整个面试失败了。对于手写代码的地方其实都有思路，但是由于能力差和开始前的自己的定论，所以就没有写。\n- 简历上的东西准备的不是很好。熟练的技能没有很好的展示出来。\n- 没有突出比别人优秀的地方。\n\n\n毕竟是第一次面试，结果在意料之中，所以接下来会好好准备每一场面试，不经历个十来次，怎叫锻炼。另外，各大企业校招已经开始，应该关注了！\n\n\n## 花费：\n\n- 住宿：50\n- 车费：40.5往火车 35.5反火车 8（地铁）\n- 餐饮：20午饭 11.5饮料\n\n**共： 165.5(元)**\n","slug":"妙计旅行面试经历和总结","published":1,"updated":"2021-06-20T10:25:20.131Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluqa1hje0046rlog9i1m0z27","content":"<blockquote>\n<p>井蛙不可以语于海者，拘于虚也。</p>\n</blockquote>\n<h2 id=\"初入公司\"><a href=\"#初入公司\" class=\"headerlink\" title=\"初入公司\"></a>初入公司</h2><p>早上5点多的火车，赶往北京，火车还未到达北京，就感觉热浪滚滚而来。转地铁2号线，到达妙计公司的时间在9点半左右。</p>\n<p>公司坐落在雍和宫国子监院内，初入大门，感觉公司挺有氛围的，古典与现代结合，环境着实不错。出入大门需要门禁，但是有门卫大叔。在门卫处签到后，被通知到餐厅处等候。</p>\n<p>餐厅大约能容纳三四十人同时就餐，有空调。比预约的时间早半个小时，所以只能耐心等待，但是也没有等待太久，且在此同时还有其他面试着陆续到来。HR送来笔试题卷。题卷共三页，单面。大致翻了翻，觉得心里变得很踏实了，因为 <strong>没有几题会做的</strong>。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"笔试题卷\"><a href=\"#笔试题卷\" class=\"headerlink\" title=\"笔试题卷\"></a>笔试题卷</h2><p>题卷主要分为两大部门，一部分是关于python的，另外一部分是关于Linux的。我应聘的方向是python运维实习生。</p>\n<h3 id=\"python部分：\"><a href=\"#python部分：\" class=\"headerlink\" title=\"python部分：\"></a>python部分：</h3><ul>\n<li>range和xrange的区别</li>\n<li>单下划线和双下划线的区别</li>\n<li>常用的数据结构类型，并说明是否可变</li>\n<li>lambda函数</li>\n<li>map函数。 <code>map(lamdba x:x*2,[1,2,3])</code> 问输出</li>\n<li>reduce函数</li>\n<li>手写代码解析字符串，获取关键值，存入mysql数据库</li>\n<li>手写代码实现输出文件最新追加的字符串</li>\n</ul>\n<h3 id=\"Linux部分\"><a href=\"#Linux部分\" class=\"headerlink\" title=\"Linux部分\"></a>Linux部分</h3><ul>\n<li>基本命令的含义。ls 、cp、mv、du等等</li>\n<li>文件权限的问题</li>\n<li>shell脚本的编写</li>\n<li>其他的记不清了</li>\n</ul>\n<h2 id=\"面试问答\"><a href=\"#面试问答\" class=\"headerlink\" title=\"面试问答\"></a>面试问答</h2><p>当然，题卷做的惨不忍睹，我想可能是做的太差，所以面试的技术主管问的问题都是基本的问题。先是针对题卷的问题进行提问，后是看太不理想了就转问简历上的问题，问了做过的项目和相关基础，反而没有问关于运维的东西。提到的知识点有：<code>set()</code>、如何出来同一个ip多次访问同一个站点的问题等等，都是些基础。对自己的评价就是 <strong>一问三不知</strong>。</p>\n<p>整个面试环节不超过半个小时。面试官没有那么严肃，也没有问技术相关之外的话题，没有让我自我介绍，在面试的过程中，对我不知道的问题也引导让我回答，还算nice，年龄也不大。</p>\n<p>从笔试到面试结束，我都显得很冷静，没有之前想想的那么紧张，可能是自己已经提前知道了结果吧，知道没有一点希望可能成功。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>总的来说，这次面试是十分失败的。总结一下几点：</p>\n<ul>\n<li>投递的方向不对口。本来应该是python web方向，怎么就投了运维！</li>\n<li>准备的不够。通知面试之后，更多关注的是自己从来没有了解的知识，没有认真复习已经会的东西。没有把自己包装好。正因为基础的东西都没能展示出来，面试官才不会深入。</li>\n<li>手写代码能力太差。题卷后面部分都是需要手写代码的地方，愣是一个字没写。这一块就足以导致整个面试失败了。对于手写代码的地方其实都有思路，但是由于能力差和开始前的自己的定论，所以就没有写。</li>\n<li>简历上的东西准备的不是很好。熟练的技能没有很好的展示出来。</li>\n<li>没有突出比别人优秀的地方。</li>\n</ul>\n<p>毕竟是第一次面试，结果在意料之中，所以接下来会好好准备每一场面试，不经历个十来次，怎叫锻炼。另外，各大企业校招已经开始，应该关注了！</p>\n<h2 id=\"花费：\"><a href=\"#花费：\" class=\"headerlink\" title=\"花费：\"></a>花费：</h2><ul>\n<li>住宿：50</li>\n<li>车费：40.5往火车 35.5反火车 8（地铁）</li>\n<li>餐饮：20午饭 11.5饮料</li>\n</ul>\n<p><strong>共： 165.5(元)</strong></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>井蛙不可以语于海者，拘于虚也。</p>\n</blockquote>\n<h2 id=\"初入公司\"><a href=\"#初入公司\" class=\"headerlink\" title=\"初入公司\"></a>初入公司</h2><p>早上5点多的火车，赶往北京，火车还未到达北京，就感觉热浪滚滚而来。转地铁2号线，到达妙计公司的时间在9点半左右。</p>\n<p>公司坐落在雍和宫国子监院内，初入大门，感觉公司挺有氛围的，古典与现代结合，环境着实不错。出入大门需要门禁，但是有门卫大叔。在门卫处签到后，被通知到餐厅处等候。</p>\n<p>餐厅大约能容纳三四十人同时就餐，有空调。比预约的时间早半个小时，所以只能耐心等待，但是也没有等待太久，且在此同时还有其他面试着陆续到来。HR送来笔试题卷。题卷共三页，单面。大致翻了翻，觉得心里变得很踏实了，因为 <strong>没有几题会做的</strong>。</p>","more":"<h2 id=\"笔试题卷\"><a href=\"#笔试题卷\" class=\"headerlink\" title=\"笔试题卷\"></a>笔试题卷</h2><p>题卷主要分为两大部门，一部分是关于python的，另外一部分是关于Linux的。我应聘的方向是python运维实习生。</p>\n<h3 id=\"python部分：\"><a href=\"#python部分：\" class=\"headerlink\" title=\"python部分：\"></a>python部分：</h3><ul>\n<li>range和xrange的区别</li>\n<li>单下划线和双下划线的区别</li>\n<li>常用的数据结构类型，并说明是否可变</li>\n<li>lambda函数</li>\n<li>map函数。 <code>map(lamdba x:x*2,[1,2,3])</code> 问输出</li>\n<li>reduce函数</li>\n<li>手写代码解析字符串，获取关键值，存入mysql数据库</li>\n<li>手写代码实现输出文件最新追加的字符串</li>\n</ul>\n<h3 id=\"Linux部分\"><a href=\"#Linux部分\" class=\"headerlink\" title=\"Linux部分\"></a>Linux部分</h3><ul>\n<li>基本命令的含义。ls 、cp、mv、du等等</li>\n<li>文件权限的问题</li>\n<li>shell脚本的编写</li>\n<li>其他的记不清了</li>\n</ul>\n<h2 id=\"面试问答\"><a href=\"#面试问答\" class=\"headerlink\" title=\"面试问答\"></a>面试问答</h2><p>当然，题卷做的惨不忍睹，我想可能是做的太差，所以面试的技术主管问的问题都是基本的问题。先是针对题卷的问题进行提问，后是看太不理想了就转问简历上的问题，问了做过的项目和相关基础，反而没有问关于运维的东西。提到的知识点有：<code>set()</code>、如何出来同一个ip多次访问同一个站点的问题等等，都是些基础。对自己的评价就是 <strong>一问三不知</strong>。</p>\n<p>整个面试环节不超过半个小时。面试官没有那么严肃，也没有问技术相关之外的话题，没有让我自我介绍，在面试的过程中，对我不知道的问题也引导让我回答，还算nice，年龄也不大。</p>\n<p>从笔试到面试结束，我都显得很冷静，没有之前想想的那么紧张，可能是自己已经提前知道了结果吧，知道没有一点希望可能成功。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>总的来说，这次面试是十分失败的。总结一下几点：</p>\n<ul>\n<li>投递的方向不对口。本来应该是python web方向，怎么就投了运维！</li>\n<li>准备的不够。通知面试之后，更多关注的是自己从来没有了解的知识，没有认真复习已经会的东西。没有把自己包装好。正因为基础的东西都没能展示出来，面试官才不会深入。</li>\n<li>手写代码能力太差。题卷后面部分都是需要手写代码的地方，愣是一个字没写。这一块就足以导致整个面试失败了。对于手写代码的地方其实都有思路，但是由于能力差和开始前的自己的定论，所以就没有写。</li>\n<li>简历上的东西准备的不是很好。熟练的技能没有很好的展示出来。</li>\n<li>没有突出比别人优秀的地方。</li>\n</ul>\n<p>毕竟是第一次面试，结果在意料之中，所以接下来会好好准备每一场面试，不经历个十来次，怎叫锻炼。另外，各大企业校招已经开始，应该关注了！</p>\n<h2 id=\"花费：\"><a href=\"#花费：\" class=\"headerlink\" title=\"花费：\"></a>花费：</h2><ul>\n<li>住宿：50</li>\n<li>车费：40.5往火车 35.5反火车 8（地铁）</li>\n<li>餐饮：20午饭 11.5饮料</li>\n</ul>\n<p><strong>共： 165.5(元)</strong></p>"},{"title":"实战MySQL双热机备份--主从备份","date":"2019-04-08T16:00:00.000Z","_content":"\n经过惊心动魄的两个小时，终于完成了对约车系统的数据库热备份(主从备份)。其实来说热备份并不难实现，在本地模拟的时候，不到十分钟就解决了，但是生产环境上的MySQL版本为5.5，从MySQL版本为5.7 不同的版本之间出了一些问题，不得不升级生产环境上的MySQL，然后的然后，收获最大的经验就是：在生产环境上，不管干什么操作，多备份几份数据库，多在不同的地方备份数据库！！可能某个误操作，让你惊了一身冷汗！但是还好，我有多个备份！！\n\n后来冷静的发现，其实备份丢失了也没有什么大的问题，毕竟机智的我开启了log-bin，有我需要的日志就可以了。\n\n下面记录一下本次实战MySQL双机热备份的过程，供以后参考。\n\n参考：\n\n- [学一点 mysql 双机异地热备份----快速理解mysql主从，主主备份原理及实践](https://www.cnblogs.com/shuidao/p/3551238.html)\n- [Mysql双机热备实现](https://blog.csdn.net/zheng963/article/details/72385123)\n- [利用 MySql日志文件 恢复数据](https://blog.csdn.net/dbanote/article/details/39692219)\n- [Ubuntu 14.04升级mysql到5.7](https://www.typechodev.com/case/754.html)\n\n<!--more-->\n\n## 环境说明\n\nA 服务器（主服务器master）：192.168.121.122  Ubuntu16.04 Server\nB 服务器（从服务器slave）： 192.168.121.108  Ubuntu16.04 Server\n\nMySQL版本皆为5.7.25，查看当前MySQL版本：\n\n```bash\nmysql --version\n```\n\n将主服务器需要同步的数据库内容进行备份一份，上传到从服务器上，保证始初时两服务器中数据库内容一致。\n\n##  在服务器开启远程登录\n\n### 1 授权用户可以远程访问\n\nmysql -u root -p输入密码进行登录，\n\n之后执行命令：\n\n```mysql\ngrant all privileges on *.* to 'root'@'%' identified by 'password';\n```\n\n对该条命令的说明：\n\n- 第一个\\*是数据库，可以改成允许访问的数据库名称\n- 第二个\\* 是数据库的表名称，\\*代表允许访问任意的表\n- root代表远程登录使用的用户名，可以自定义\n- %代表允许任意ip登录，如果你想指定特定的IP，可以把%替换掉就可以了\n- password代表远程登录时使用的密码，可以自定义\n\n让权限立即生效, 执行\n\n```mysql\nflush privileges;\n```\n\n如果不希望使用root用户进行远程登录请参考[服务器配置远程数据库访问](https://suadminwen.github.io/2016/10/18/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE%E8%BF%9C%E7%A8%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BF%E9%97%AE/)\n\n\n### 2 修改配置文件\n\nmysql 5.5版本，修改/etc/my.cnf，mysql 5.7 修改 /etc/mysql/mysql.conf.d/mysqld.cnf 文件，编辑该文件，找到bind-address = 127.0.0.1这一句，然后在前面加个#号注释掉，保存退出；\n\n### 3 重启服务\n\n```\nsudo service mysql restart\n```\n\n## 主服务器master的配置\n\n开启远程登录：\n账号 root\n密码 123456。\n\n### 修改配置文件\n\n修改 /etc/mysql/mysql.conf.d/mysqld.cnf 文件，在[mysqld]下修改即可：\n\n```\n[mysqld]\nserver-id = 1\nlog-bin=/var/log/mysql/mysql-bin.log  //其中这两行是本来就有的，可以不用动，添加下面两行即可\n\nbinlog-do-db = busbook\nbinlog-ignore-db = mysql  // 这行可以不用写\n```\n\n修改说明\n\n- binlog-do-db 用来表示，只把哪些数据库的改动记录到binary日志中。 可以写多行，表示关注多个数据库。\n- binlog-ignore-db 表示，需要忽略哪些数据库。\n\n### 重启服务器\n\n修改完配置文件后，保存后，重启一下mysql服务，如果成功则没问题。\n\n### 查看主服务器状态\n\n为了保证操作过程中没有数据变化，需要锁住当前的数据库，登录MySQL服务后，通过命令：\n\n```\nflush tables with read lock;\n```\n\n然后查看状态：\n\n```\nshow master status\\G\n```\n这里给出实例输出，因为这个输出很重要：\n\n```\nmysql> show master status\\G\n*************************** 1. row ***************************\n             File: mysql-bin.000002\n         Position: 154\n     Binlog_Do_DB: busbook\n Binlog_Ignore_DB: \nExecuted_Gtid_Set: \n1 row in set (0.00 sec)\n```\n**记住这里的输出关键`File`和`Position`的值，等会在从服务器的配置中会用到。**\n\n主服务器已经做完了， 可以解除锁定了:\n\n```\nublock tables;\n```\n\n## 从服务器slave的配置\n\n我这里只做了主从服务器的备份，没有做主主服务器的备份，所以只需要完成如下操作即可。\n\n### 修改配置文件\n\n修改 /etc/mysql/mysql.conf.d/mysqld.cnf 文件，在[mysqld]下修改即可：\n\n```\n[mysqld]\nserver-id = 2\nlog_bin = /var/log/mysql/mysql-bin.log\n\nreplicate-do-db   = busbook\n# replicate-ignore-db = mysql\nrelay_log \t\t  = /var/log/mysql/mysql-relay-bin.log\nlog-slave-updates = ON\n```\n\n修改说明:\n\n- server-id 必须保证每个服务器不一样。 这可能和循环同步有关。 防止进入死循环。\n- replicate-do-db 可以指定需要复制的数据库。\n- replicate-ignore-db 复制时需要排除的数据库。\n- relay_log 中继日志的名字。复制线程需要先把远程的变化拷贝到这个中继日志中， 再执行。\n- log-slave-updates 意思是，中继日志执行之后，这些变化是否需要计入自己的binarylog。 当你的B服务器需要作为另外一个服务器的主服务器的时候需要打开。  就是双主互相备份，或者多主循环备份。 \n\n### 重启服务器\n\n修改完配置文件后，保存后，重启一下mysql服务，如果成功则没问题。\n\n### 用change master 语句指定同步位置\n\n这步是最关键的一步了，在进入mysql操作界面后，输入如下指令：\n\n```\nstop slave;\n```\n\n先停步slave服务线程，这个是很重要的，如果不这样做会造成以下操作不成功。\n\n```\nmysql> change master to\n> master_host='192.168.121.122',master_user='root',master_password='123456',\n> master_log_file=' mysql-bin.000002',master_log_pos=154;\n```\n说明：\n- master_log_file, master_log_pos由主服务器（Master）查出的状态值中确定。 master_log_file对应File, master_log_pos对应Position。\n\n则可以开启slave线程了：\n\n```\nstart slave;\n```\n\n### 查看从服务器（Slave）状态\n\n查看状态：\n\n```\nshow slave status\\G\n```\n\n实例输出：\n\n```\nmysql> show slave status\\G\n*************************** 1. row ***************************\n               Slave_IO_State: Waiting for master to send event\n                  Master_Host: 192.168.121.122\n                  Master_User: root\n                  Master_Port: 3306\n                Connect_Retry: 60\n              Master_Log_File: mysql-bin.000002\n          Read_Master_Log_Pos: 154\n               Relay_Log_File: mysqld-relay-bin.000006\n                Relay_Log_Pos: 367\n        Relay_Master_Log_File: mysql-bin.000002\n             Slave_IO_Running: Yes\n            Slave_SQL_Running: Yes\n              Replicate_Do_DB: busbook\n          Replicate_Ignore_DB: \n           Replicate_Do_Table: \n       Replicate_Ignore_Table: \n      Replicate_Wild_Do_Table: \n  Replicate_Wild_Ignore_Table: \n                   Last_Errno: 0\n                   Last_Error: \n                 Skip_Counter: 0\n          Exec_Master_Log_Pos: 154\n              Relay_Log_Space: 741\n              Until_Condition: None\n               Until_Log_File: \n                Until_Log_Pos: 0\n           Master_SSL_Allowed: No\n           Master_SSL_CA_File: \n           Master_SSL_CA_Path: \n              Master_SSL_Cert: \n            Master_SSL_Cipher: \n               Master_SSL_Key: \n        Seconds_Behind_Master: 0\nMaster_SSL_Verify_Server_Cert: No\n                Last_IO_Errno: 0\n                Last_IO_Error: \n               Last_SQL_Errno: 0\n               Last_SQL_Error: \n  Replicate_Ignore_Server_Ids: \n             Master_Server_Id: 1\n                  Master_UUID: 9198b1a6-58db-11e9-9f47-08002777fdc0\n             Master_Info_File: /var/lib/mysql/master.info\n                    SQL_Delay: 0\n          SQL_Remaining_Delay: NULL\n      Slave_SQL_Running_State: Slave has read all relay log; waiting for more updates\n           Master_Retry_Count: 86400\n                  Master_Bind: \n      Last_IO_Error_Timestamp: \n     Last_SQL_Error_Timestamp: \n               Master_SSL_Crl: \n           Master_SSL_Crlpath: \n           Retrieved_Gtid_Set: \n            Executed_Gtid_Set: \n                Auto_Position: 0\n         Replicate_Rewrite_DB: \n                 Channel_Name: \n           Master_TLS_Version: \n1 row in set (0.00 sec)\n\n```\n\n如果看到以下两行值均为YES，则表示设置从服务器成功。\n\n```\nSlave_IO_Running: Yes\nSlave_SQL_Running: Yes\n```\n如果其中一个是No， 那就说明不成功。需要查看mysql的错误日志。有时候密码填错了， 有时候防火墙的3306没有打开。ip地址不对，等等。 都会导致失败。错误日志一般在/var/log/mysql/error.log，是否进行修改过，需要查看配置文件中的具体配置。\n\n到此，基本上完成了MySL主从备份的过程，可以进行测试，改变主服务器的数据，查看从服务器时，发现已经同步发生改变，即为成功。\n","source":"_posts/实战MySQL双热机备份--主从备份.md","raw":"---\ntitle: 实战MySQL双热机备份--主从备份\ndate: 2019-04-09\ntags: [数据库, Linux]\n---\n\n经过惊心动魄的两个小时，终于完成了对约车系统的数据库热备份(主从备份)。其实来说热备份并不难实现，在本地模拟的时候，不到十分钟就解决了，但是生产环境上的MySQL版本为5.5，从MySQL版本为5.7 不同的版本之间出了一些问题，不得不升级生产环境上的MySQL，然后的然后，收获最大的经验就是：在生产环境上，不管干什么操作，多备份几份数据库，多在不同的地方备份数据库！！可能某个误操作，让你惊了一身冷汗！但是还好，我有多个备份！！\n\n后来冷静的发现，其实备份丢失了也没有什么大的问题，毕竟机智的我开启了log-bin，有我需要的日志就可以了。\n\n下面记录一下本次实战MySQL双机热备份的过程，供以后参考。\n\n参考：\n\n- [学一点 mysql 双机异地热备份----快速理解mysql主从，主主备份原理及实践](https://www.cnblogs.com/shuidao/p/3551238.html)\n- [Mysql双机热备实现](https://blog.csdn.net/zheng963/article/details/72385123)\n- [利用 MySql日志文件 恢复数据](https://blog.csdn.net/dbanote/article/details/39692219)\n- [Ubuntu 14.04升级mysql到5.7](https://www.typechodev.com/case/754.html)\n\n<!--more-->\n\n## 环境说明\n\nA 服务器（主服务器master）：192.168.121.122  Ubuntu16.04 Server\nB 服务器（从服务器slave）： 192.168.121.108  Ubuntu16.04 Server\n\nMySQL版本皆为5.7.25，查看当前MySQL版本：\n\n```bash\nmysql --version\n```\n\n将主服务器需要同步的数据库内容进行备份一份，上传到从服务器上，保证始初时两服务器中数据库内容一致。\n\n##  在服务器开启远程登录\n\n### 1 授权用户可以远程访问\n\nmysql -u root -p输入密码进行登录，\n\n之后执行命令：\n\n```mysql\ngrant all privileges on *.* to 'root'@'%' identified by 'password';\n```\n\n对该条命令的说明：\n\n- 第一个\\*是数据库，可以改成允许访问的数据库名称\n- 第二个\\* 是数据库的表名称，\\*代表允许访问任意的表\n- root代表远程登录使用的用户名，可以自定义\n- %代表允许任意ip登录，如果你想指定特定的IP，可以把%替换掉就可以了\n- password代表远程登录时使用的密码，可以自定义\n\n让权限立即生效, 执行\n\n```mysql\nflush privileges;\n```\n\n如果不希望使用root用户进行远程登录请参考[服务器配置远程数据库访问](https://suadminwen.github.io/2016/10/18/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE%E8%BF%9C%E7%A8%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BF%E9%97%AE/)\n\n\n### 2 修改配置文件\n\nmysql 5.5版本，修改/etc/my.cnf，mysql 5.7 修改 /etc/mysql/mysql.conf.d/mysqld.cnf 文件，编辑该文件，找到bind-address = 127.0.0.1这一句，然后在前面加个#号注释掉，保存退出；\n\n### 3 重启服务\n\n```\nsudo service mysql restart\n```\n\n## 主服务器master的配置\n\n开启远程登录：\n账号 root\n密码 123456。\n\n### 修改配置文件\n\n修改 /etc/mysql/mysql.conf.d/mysqld.cnf 文件，在[mysqld]下修改即可：\n\n```\n[mysqld]\nserver-id = 1\nlog-bin=/var/log/mysql/mysql-bin.log  //其中这两行是本来就有的，可以不用动，添加下面两行即可\n\nbinlog-do-db = busbook\nbinlog-ignore-db = mysql  // 这行可以不用写\n```\n\n修改说明\n\n- binlog-do-db 用来表示，只把哪些数据库的改动记录到binary日志中。 可以写多行，表示关注多个数据库。\n- binlog-ignore-db 表示，需要忽略哪些数据库。\n\n### 重启服务器\n\n修改完配置文件后，保存后，重启一下mysql服务，如果成功则没问题。\n\n### 查看主服务器状态\n\n为了保证操作过程中没有数据变化，需要锁住当前的数据库，登录MySQL服务后，通过命令：\n\n```\nflush tables with read lock;\n```\n\n然后查看状态：\n\n```\nshow master status\\G\n```\n这里给出实例输出，因为这个输出很重要：\n\n```\nmysql> show master status\\G\n*************************** 1. row ***************************\n             File: mysql-bin.000002\n         Position: 154\n     Binlog_Do_DB: busbook\n Binlog_Ignore_DB: \nExecuted_Gtid_Set: \n1 row in set (0.00 sec)\n```\n**记住这里的输出关键`File`和`Position`的值，等会在从服务器的配置中会用到。**\n\n主服务器已经做完了， 可以解除锁定了:\n\n```\nublock tables;\n```\n\n## 从服务器slave的配置\n\n我这里只做了主从服务器的备份，没有做主主服务器的备份，所以只需要完成如下操作即可。\n\n### 修改配置文件\n\n修改 /etc/mysql/mysql.conf.d/mysqld.cnf 文件，在[mysqld]下修改即可：\n\n```\n[mysqld]\nserver-id = 2\nlog_bin = /var/log/mysql/mysql-bin.log\n\nreplicate-do-db   = busbook\n# replicate-ignore-db = mysql\nrelay_log \t\t  = /var/log/mysql/mysql-relay-bin.log\nlog-slave-updates = ON\n```\n\n修改说明:\n\n- server-id 必须保证每个服务器不一样。 这可能和循环同步有关。 防止进入死循环。\n- replicate-do-db 可以指定需要复制的数据库。\n- replicate-ignore-db 复制时需要排除的数据库。\n- relay_log 中继日志的名字。复制线程需要先把远程的变化拷贝到这个中继日志中， 再执行。\n- log-slave-updates 意思是，中继日志执行之后，这些变化是否需要计入自己的binarylog。 当你的B服务器需要作为另外一个服务器的主服务器的时候需要打开。  就是双主互相备份，或者多主循环备份。 \n\n### 重启服务器\n\n修改完配置文件后，保存后，重启一下mysql服务，如果成功则没问题。\n\n### 用change master 语句指定同步位置\n\n这步是最关键的一步了，在进入mysql操作界面后，输入如下指令：\n\n```\nstop slave;\n```\n\n先停步slave服务线程，这个是很重要的，如果不这样做会造成以下操作不成功。\n\n```\nmysql> change master to\n> master_host='192.168.121.122',master_user='root',master_password='123456',\n> master_log_file=' mysql-bin.000002',master_log_pos=154;\n```\n说明：\n- master_log_file, master_log_pos由主服务器（Master）查出的状态值中确定。 master_log_file对应File, master_log_pos对应Position。\n\n则可以开启slave线程了：\n\n```\nstart slave;\n```\n\n### 查看从服务器（Slave）状态\n\n查看状态：\n\n```\nshow slave status\\G\n```\n\n实例输出：\n\n```\nmysql> show slave status\\G\n*************************** 1. row ***************************\n               Slave_IO_State: Waiting for master to send event\n                  Master_Host: 192.168.121.122\n                  Master_User: root\n                  Master_Port: 3306\n                Connect_Retry: 60\n              Master_Log_File: mysql-bin.000002\n          Read_Master_Log_Pos: 154\n               Relay_Log_File: mysqld-relay-bin.000006\n                Relay_Log_Pos: 367\n        Relay_Master_Log_File: mysql-bin.000002\n             Slave_IO_Running: Yes\n            Slave_SQL_Running: Yes\n              Replicate_Do_DB: busbook\n          Replicate_Ignore_DB: \n           Replicate_Do_Table: \n       Replicate_Ignore_Table: \n      Replicate_Wild_Do_Table: \n  Replicate_Wild_Ignore_Table: \n                   Last_Errno: 0\n                   Last_Error: \n                 Skip_Counter: 0\n          Exec_Master_Log_Pos: 154\n              Relay_Log_Space: 741\n              Until_Condition: None\n               Until_Log_File: \n                Until_Log_Pos: 0\n           Master_SSL_Allowed: No\n           Master_SSL_CA_File: \n           Master_SSL_CA_Path: \n              Master_SSL_Cert: \n            Master_SSL_Cipher: \n               Master_SSL_Key: \n        Seconds_Behind_Master: 0\nMaster_SSL_Verify_Server_Cert: No\n                Last_IO_Errno: 0\n                Last_IO_Error: \n               Last_SQL_Errno: 0\n               Last_SQL_Error: \n  Replicate_Ignore_Server_Ids: \n             Master_Server_Id: 1\n                  Master_UUID: 9198b1a6-58db-11e9-9f47-08002777fdc0\n             Master_Info_File: /var/lib/mysql/master.info\n                    SQL_Delay: 0\n          SQL_Remaining_Delay: NULL\n      Slave_SQL_Running_State: Slave has read all relay log; waiting for more updates\n           Master_Retry_Count: 86400\n                  Master_Bind: \n      Last_IO_Error_Timestamp: \n     Last_SQL_Error_Timestamp: \n               Master_SSL_Crl: \n           Master_SSL_Crlpath: \n           Retrieved_Gtid_Set: \n            Executed_Gtid_Set: \n                Auto_Position: 0\n         Replicate_Rewrite_DB: \n                 Channel_Name: \n           Master_TLS_Version: \n1 row in set (0.00 sec)\n\n```\n\n如果看到以下两行值均为YES，则表示设置从服务器成功。\n\n```\nSlave_IO_Running: Yes\nSlave_SQL_Running: Yes\n```\n如果其中一个是No， 那就说明不成功。需要查看mysql的错误日志。有时候密码填错了， 有时候防火墙的3306没有打开。ip地址不对，等等。 都会导致失败。错误日志一般在/var/log/mysql/error.log，是否进行修改过，需要查看配置文件中的具体配置。\n\n到此，基本上完成了MySL主从备份的过程，可以进行测试，改变主服务器的数据，查看从服务器时，发现已经同步发生改变，即为成功。\n","slug":"实战MySQL双热机备份--主从备份","published":1,"updated":"2021-06-20T10:25:20.131Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluqa1hje0048rlog8bcx5wk1","content":"<p>经过惊心动魄的两个小时，终于完成了对约车系统的数据库热备份(主从备份)。其实来说热备份并不难实现，在本地模拟的时候，不到十分钟就解决了，但是生产环境上的MySQL版本为5.5，从MySQL版本为5.7 不同的版本之间出了一些问题，不得不升级生产环境上的MySQL，然后的然后，收获最大的经验就是：在生产环境上，不管干什么操作，多备份几份数据库，多在不同的地方备份数据库！！可能某个误操作，让你惊了一身冷汗！但是还好，我有多个备份！！</p>\n<p>后来冷静的发现，其实备份丢失了也没有什么大的问题，毕竟机智的我开启了log-bin，有我需要的日志就可以了。</p>\n<p>下面记录一下本次实战MySQL双机热备份的过程，供以后参考。</p>\n<p>参考：</p>\n<ul>\n<li><a href=\"https://www.cnblogs.com/shuidao/p/3551238.html\">学一点 mysql 双机异地热备份—-快速理解mysql主从，主主备份原理及实践</a></li>\n<li><a href=\"https://blog.csdn.net/zheng963/article/details/72385123\">Mysql双机热备实现</a></li>\n<li><a href=\"https://blog.csdn.net/dbanote/article/details/39692219\">利用 MySql日志文件 恢复数据</a></li>\n<li><a href=\"https://www.typechodev.com/case/754.html\">Ubuntu 14.04升级mysql到5.7</a></li>\n</ul>\n<span id=\"more\"></span>\n\n<h2 id=\"环境说明\"><a href=\"#环境说明\" class=\"headerlink\" title=\"环境说明\"></a>环境说明</h2><p>A 服务器（主服务器master）：192.168.121.122  Ubuntu16.04 Server<br>B 服务器（从服务器slave）： 192.168.121.108  Ubuntu16.04 Server</p>\n<p>MySQL版本皆为5.7.25，查看当前MySQL版本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql --version</span><br></pre></td></tr></table></figure>\n\n<p>将主服务器需要同步的数据库内容进行备份一份，上传到从服务器上，保证始初时两服务器中数据库内容一致。</p>\n<h2 id=\"在服务器开启远程登录\"><a href=\"#在服务器开启远程登录\" class=\"headerlink\" title=\"在服务器开启远程登录\"></a>在服务器开启远程登录</h2><h3 id=\"1-授权用户可以远程访问\"><a href=\"#1-授权用户可以远程访问\" class=\"headerlink\" title=\"1 授权用户可以远程访问\"></a>1 授权用户可以远程访问</h3><p>mysql -u root -p输入密码进行登录，</p>\n<p>之后执行命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grant all privileges on *.* to &#x27;root&#x27;@&#x27;%&#x27; identified by &#x27;password&#x27;;</span><br></pre></td></tr></table></figure>\n\n<p>对该条命令的说明：</p>\n<ul>\n<li>第一个*是数据库，可以改成允许访问的数据库名称</li>\n<li>第二个* 是数据库的表名称，*代表允许访问任意的表</li>\n<li>root代表远程登录使用的用户名，可以自定义</li>\n<li>%代表允许任意ip登录，如果你想指定特定的IP，可以把%替换掉就可以了</li>\n<li>password代表远程登录时使用的密码，可以自定义</li>\n</ul>\n<p>让权限立即生效, 执行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flush privileges;</span><br></pre></td></tr></table></figure>\n\n<p>如果不希望使用root用户进行远程登录请参考<a href=\"https://suadminwen.github.io/2016/10/18/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE%E8%BF%9C%E7%A8%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BF%E9%97%AE/\">服务器配置远程数据库访问</a></p>\n<h3 id=\"2-修改配置文件\"><a href=\"#2-修改配置文件\" class=\"headerlink\" title=\"2 修改配置文件\"></a>2 修改配置文件</h3><p>mysql 5.5版本，修改&#x2F;etc&#x2F;my.cnf，mysql 5.7 修改 &#x2F;etc&#x2F;mysql&#x2F;mysql.conf.d&#x2F;mysqld.cnf 文件，编辑该文件，找到bind-address &#x3D; 127.0.0.1这一句，然后在前面加个#号注释掉，保存退出；</p>\n<h3 id=\"3-重启服务\"><a href=\"#3-重启服务\" class=\"headerlink\" title=\"3 重启服务\"></a>3 重启服务</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service mysql restart</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"主服务器master的配置\"><a href=\"#主服务器master的配置\" class=\"headerlink\" title=\"主服务器master的配置\"></a>主服务器master的配置</h2><p>开启远程登录：<br>账号 root<br>密码 123456。</p>\n<h3 id=\"修改配置文件\"><a href=\"#修改配置文件\" class=\"headerlink\" title=\"修改配置文件\"></a>修改配置文件</h3><p>修改 &#x2F;etc&#x2F;mysql&#x2F;mysql.conf.d&#x2F;mysqld.cnf 文件，在[mysqld]下修改即可：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\">server-id = 1</span><br><span class=\"line\">log-bin=/var/log/mysql/mysql-bin.log  //其中这两行是本来就有的，可以不用动，添加下面两行即可</span><br><span class=\"line\"></span><br><span class=\"line\">binlog-do-db = busbook</span><br><span class=\"line\">binlog-ignore-db = mysql  // 这行可以不用写</span><br></pre></td></tr></table></figure>\n\n<p>修改说明</p>\n<ul>\n<li>binlog-do-db 用来表示，只把哪些数据库的改动记录到binary日志中。 可以写多行，表示关注多个数据库。</li>\n<li>binlog-ignore-db 表示，需要忽略哪些数据库。</li>\n</ul>\n<h3 id=\"重启服务器\"><a href=\"#重启服务器\" class=\"headerlink\" title=\"重启服务器\"></a>重启服务器</h3><p>修改完配置文件后，保存后，重启一下mysql服务，如果成功则没问题。</p>\n<h3 id=\"查看主服务器状态\"><a href=\"#查看主服务器状态\" class=\"headerlink\" title=\"查看主服务器状态\"></a>查看主服务器状态</h3><p>为了保证操作过程中没有数据变化，需要锁住当前的数据库，登录MySQL服务后，通过命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flush tables with read lock;</span><br></pre></td></tr></table></figure>\n\n<p>然后查看状态：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show master status\\G</span><br></pre></td></tr></table></figure>\n<p>这里给出实例输出，因为这个输出很重要：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show master status\\G</span><br><span class=\"line\">*************************** 1. row ***************************</span><br><span class=\"line\">             File: mysql-bin.000002</span><br><span class=\"line\">         Position: 154</span><br><span class=\"line\">     Binlog_Do_DB: busbook</span><br><span class=\"line\"> Binlog_Ignore_DB: </span><br><span class=\"line\">Executed_Gtid_Set: </span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n<p><strong>记住这里的输出关键<code>File</code>和<code>Position</code>的值，等会在从服务器的配置中会用到。</strong></p>\n<p>主服务器已经做完了， 可以解除锁定了:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ublock tables;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"从服务器slave的配置\"><a href=\"#从服务器slave的配置\" class=\"headerlink\" title=\"从服务器slave的配置\"></a>从服务器slave的配置</h2><p>我这里只做了主从服务器的备份，没有做主主服务器的备份，所以只需要完成如下操作即可。</p>\n<h3 id=\"修改配置文件-1\"><a href=\"#修改配置文件-1\" class=\"headerlink\" title=\"修改配置文件\"></a>修改配置文件</h3><p>修改 &#x2F;etc&#x2F;mysql&#x2F;mysql.conf.d&#x2F;mysqld.cnf 文件，在[mysqld]下修改即可：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\">server-id = 2</span><br><span class=\"line\">log_bin = /var/log/mysql/mysql-bin.log</span><br><span class=\"line\"></span><br><span class=\"line\">replicate-do-db   = busbook</span><br><span class=\"line\"># replicate-ignore-db = mysql</span><br><span class=\"line\">relay_log \t\t  = /var/log/mysql/mysql-relay-bin.log</span><br><span class=\"line\">log-slave-updates = ON</span><br></pre></td></tr></table></figure>\n\n<p>修改说明:</p>\n<ul>\n<li>server-id 必须保证每个服务器不一样。 这可能和循环同步有关。 防止进入死循环。</li>\n<li>replicate-do-db 可以指定需要复制的数据库。</li>\n<li>replicate-ignore-db 复制时需要排除的数据库。</li>\n<li>relay_log 中继日志的名字。复制线程需要先把远程的变化拷贝到这个中继日志中， 再执行。</li>\n<li>log-slave-updates 意思是，中继日志执行之后，这些变化是否需要计入自己的binarylog。 当你的B服务器需要作为另外一个服务器的主服务器的时候需要打开。  就是双主互相备份，或者多主循环备份。</li>\n</ul>\n<h3 id=\"重启服务器-1\"><a href=\"#重启服务器-1\" class=\"headerlink\" title=\"重启服务器\"></a>重启服务器</h3><p>修改完配置文件后，保存后，重启一下mysql服务，如果成功则没问题。</p>\n<h3 id=\"用change-master-语句指定同步位置\"><a href=\"#用change-master-语句指定同步位置\" class=\"headerlink\" title=\"用change master 语句指定同步位置\"></a>用change master 语句指定同步位置</h3><p>这步是最关键的一步了，在进入mysql操作界面后，输入如下指令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stop slave;</span><br></pre></td></tr></table></figure>\n\n<p>先停步slave服务线程，这个是很重要的，如果不这样做会造成以下操作不成功。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; change master to</span><br><span class=\"line\">&gt; master_host=&#x27;192.168.121.122&#x27;,master_user=&#x27;root&#x27;,master_password=&#x27;123456&#x27;,</span><br><span class=\"line\">&gt; master_log_file=&#x27; mysql-bin.000002&#x27;,master_log_pos=154;</span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<ul>\n<li>master_log_file, master_log_pos由主服务器（Master）查出的状态值中确定。 master_log_file对应File, master_log_pos对应Position。</li>\n</ul>\n<p>则可以开启slave线程了：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">start slave;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看从服务器（Slave）状态\"><a href=\"#查看从服务器（Slave）状态\" class=\"headerlink\" title=\"查看从服务器（Slave）状态\"></a>查看从服务器（Slave）状态</h3><p>查看状态：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show slave status\\G</span><br></pre></td></tr></table></figure>\n\n<p>实例输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show slave status\\G</span><br><span class=\"line\">*************************** 1. row ***************************</span><br><span class=\"line\">               Slave_IO_State: Waiting for master to send event</span><br><span class=\"line\">                  Master_Host: 192.168.121.122</span><br><span class=\"line\">                  Master_User: root</span><br><span class=\"line\">                  Master_Port: 3306</span><br><span class=\"line\">                Connect_Retry: 60</span><br><span class=\"line\">              Master_Log_File: mysql-bin.000002</span><br><span class=\"line\">          Read_Master_Log_Pos: 154</span><br><span class=\"line\">               Relay_Log_File: mysqld-relay-bin.000006</span><br><span class=\"line\">                Relay_Log_Pos: 367</span><br><span class=\"line\">        Relay_Master_Log_File: mysql-bin.000002</span><br><span class=\"line\">             Slave_IO_Running: Yes</span><br><span class=\"line\">            Slave_SQL_Running: Yes</span><br><span class=\"line\">              Replicate_Do_DB: busbook</span><br><span class=\"line\">          Replicate_Ignore_DB: </span><br><span class=\"line\">           Replicate_Do_Table: </span><br><span class=\"line\">       Replicate_Ignore_Table: </span><br><span class=\"line\">      Replicate_Wild_Do_Table: </span><br><span class=\"line\">  Replicate_Wild_Ignore_Table: </span><br><span class=\"line\">                   Last_Errno: 0</span><br><span class=\"line\">                   Last_Error: </span><br><span class=\"line\">                 Skip_Counter: 0</span><br><span class=\"line\">          Exec_Master_Log_Pos: 154</span><br><span class=\"line\">              Relay_Log_Space: 741</span><br><span class=\"line\">              Until_Condition: None</span><br><span class=\"line\">               Until_Log_File: </span><br><span class=\"line\">                Until_Log_Pos: 0</span><br><span class=\"line\">           Master_SSL_Allowed: No</span><br><span class=\"line\">           Master_SSL_CA_File: </span><br><span class=\"line\">           Master_SSL_CA_Path: </span><br><span class=\"line\">              Master_SSL_Cert: </span><br><span class=\"line\">            Master_SSL_Cipher: </span><br><span class=\"line\">               Master_SSL_Key: </span><br><span class=\"line\">        Seconds_Behind_Master: 0</span><br><span class=\"line\">Master_SSL_Verify_Server_Cert: No</span><br><span class=\"line\">                Last_IO_Errno: 0</span><br><span class=\"line\">                Last_IO_Error: </span><br><span class=\"line\">               Last_SQL_Errno: 0</span><br><span class=\"line\">               Last_SQL_Error: </span><br><span class=\"line\">  Replicate_Ignore_Server_Ids: </span><br><span class=\"line\">             Master_Server_Id: 1</span><br><span class=\"line\">                  Master_UUID: 9198b1a6-58db-11e9-9f47-08002777fdc0</span><br><span class=\"line\">             Master_Info_File: /var/lib/mysql/master.info</span><br><span class=\"line\">                    SQL_Delay: 0</span><br><span class=\"line\">          SQL_Remaining_Delay: NULL</span><br><span class=\"line\">      Slave_SQL_Running_State: Slave has read all relay log; waiting for more updates</span><br><span class=\"line\">           Master_Retry_Count: 86400</span><br><span class=\"line\">                  Master_Bind: </span><br><span class=\"line\">      Last_IO_Error_Timestamp: </span><br><span class=\"line\">     Last_SQL_Error_Timestamp: </span><br><span class=\"line\">               Master_SSL_Crl: </span><br><span class=\"line\">           Master_SSL_Crlpath: </span><br><span class=\"line\">           Retrieved_Gtid_Set: </span><br><span class=\"line\">            Executed_Gtid_Set: </span><br><span class=\"line\">                Auto_Position: 0</span><br><span class=\"line\">         Replicate_Rewrite_DB: </span><br><span class=\"line\">                 Channel_Name: </span><br><span class=\"line\">           Master_TLS_Version: </span><br><span class=\"line\">1 row in set (0.00 sec)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>如果看到以下两行值均为YES，则表示设置从服务器成功。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Slave_IO_Running: Yes</span><br><span class=\"line\">Slave_SQL_Running: Yes</span><br></pre></td></tr></table></figure>\n<p>如果其中一个是No， 那就说明不成功。需要查看mysql的错误日志。有时候密码填错了， 有时候防火墙的3306没有打开。ip地址不对，等等。 都会导致失败。错误日志一般在&#x2F;var&#x2F;log&#x2F;mysql&#x2F;error.log，是否进行修改过，需要查看配置文件中的具体配置。</p>\n<p>到此，基本上完成了MySL主从备份的过程，可以进行测试，改变主服务器的数据，查看从服务器时，发现已经同步发生改变，即为成功。</p>\n","site":{"data":{}},"excerpt":"<p>经过惊心动魄的两个小时，终于完成了对约车系统的数据库热备份(主从备份)。其实来说热备份并不难实现，在本地模拟的时候，不到十分钟就解决了，但是生产环境上的MySQL版本为5.5，从MySQL版本为5.7 不同的版本之间出了一些问题，不得不升级生产环境上的MySQL，然后的然后，收获最大的经验就是：在生产环境上，不管干什么操作，多备份几份数据库，多在不同的地方备份数据库！！可能某个误操作，让你惊了一身冷汗！但是还好，我有多个备份！！</p>\n<p>后来冷静的发现，其实备份丢失了也没有什么大的问题，毕竟机智的我开启了log-bin，有我需要的日志就可以了。</p>\n<p>下面记录一下本次实战MySQL双机热备份的过程，供以后参考。</p>\n<p>参考：</p>\n<ul>\n<li><a href=\"https://www.cnblogs.com/shuidao/p/3551238.html\">学一点 mysql 双机异地热备份—-快速理解mysql主从，主主备份原理及实践</a></li>\n<li><a href=\"https://blog.csdn.net/zheng963/article/details/72385123\">Mysql双机热备实现</a></li>\n<li><a href=\"https://blog.csdn.net/dbanote/article/details/39692219\">利用 MySql日志文件 恢复数据</a></li>\n<li><a href=\"https://www.typechodev.com/case/754.html\">Ubuntu 14.04升级mysql到5.7</a></li>\n</ul>","more":"<h2 id=\"环境说明\"><a href=\"#环境说明\" class=\"headerlink\" title=\"环境说明\"></a>环境说明</h2><p>A 服务器（主服务器master）：192.168.121.122  Ubuntu16.04 Server<br>B 服务器（从服务器slave）： 192.168.121.108  Ubuntu16.04 Server</p>\n<p>MySQL版本皆为5.7.25，查看当前MySQL版本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql --version</span><br></pre></td></tr></table></figure>\n\n<p>将主服务器需要同步的数据库内容进行备份一份，上传到从服务器上，保证始初时两服务器中数据库内容一致。</p>\n<h2 id=\"在服务器开启远程登录\"><a href=\"#在服务器开启远程登录\" class=\"headerlink\" title=\"在服务器开启远程登录\"></a>在服务器开启远程登录</h2><h3 id=\"1-授权用户可以远程访问\"><a href=\"#1-授权用户可以远程访问\" class=\"headerlink\" title=\"1 授权用户可以远程访问\"></a>1 授权用户可以远程访问</h3><p>mysql -u root -p输入密码进行登录，</p>\n<p>之后执行命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grant all privileges on *.* to &#x27;root&#x27;@&#x27;%&#x27; identified by &#x27;password&#x27;;</span><br></pre></td></tr></table></figure>\n\n<p>对该条命令的说明：</p>\n<ul>\n<li>第一个*是数据库，可以改成允许访问的数据库名称</li>\n<li>第二个* 是数据库的表名称，*代表允许访问任意的表</li>\n<li>root代表远程登录使用的用户名，可以自定义</li>\n<li>%代表允许任意ip登录，如果你想指定特定的IP，可以把%替换掉就可以了</li>\n<li>password代表远程登录时使用的密码，可以自定义</li>\n</ul>\n<p>让权限立即生效, 执行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flush privileges;</span><br></pre></td></tr></table></figure>\n\n<p>如果不希望使用root用户进行远程登录请参考<a href=\"https://suadminwen.github.io/2016/10/18/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE%E8%BF%9C%E7%A8%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BF%E9%97%AE/\">服务器配置远程数据库访问</a></p>\n<h3 id=\"2-修改配置文件\"><a href=\"#2-修改配置文件\" class=\"headerlink\" title=\"2 修改配置文件\"></a>2 修改配置文件</h3><p>mysql 5.5版本，修改&#x2F;etc&#x2F;my.cnf，mysql 5.7 修改 &#x2F;etc&#x2F;mysql&#x2F;mysql.conf.d&#x2F;mysqld.cnf 文件，编辑该文件，找到bind-address &#x3D; 127.0.0.1这一句，然后在前面加个#号注释掉，保存退出；</p>\n<h3 id=\"3-重启服务\"><a href=\"#3-重启服务\" class=\"headerlink\" title=\"3 重启服务\"></a>3 重启服务</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service mysql restart</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"主服务器master的配置\"><a href=\"#主服务器master的配置\" class=\"headerlink\" title=\"主服务器master的配置\"></a>主服务器master的配置</h2><p>开启远程登录：<br>账号 root<br>密码 123456。</p>\n<h3 id=\"修改配置文件\"><a href=\"#修改配置文件\" class=\"headerlink\" title=\"修改配置文件\"></a>修改配置文件</h3><p>修改 &#x2F;etc&#x2F;mysql&#x2F;mysql.conf.d&#x2F;mysqld.cnf 文件，在[mysqld]下修改即可：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\">server-id = 1</span><br><span class=\"line\">log-bin=/var/log/mysql/mysql-bin.log  //其中这两行是本来就有的，可以不用动，添加下面两行即可</span><br><span class=\"line\"></span><br><span class=\"line\">binlog-do-db = busbook</span><br><span class=\"line\">binlog-ignore-db = mysql  // 这行可以不用写</span><br></pre></td></tr></table></figure>\n\n<p>修改说明</p>\n<ul>\n<li>binlog-do-db 用来表示，只把哪些数据库的改动记录到binary日志中。 可以写多行，表示关注多个数据库。</li>\n<li>binlog-ignore-db 表示，需要忽略哪些数据库。</li>\n</ul>\n<h3 id=\"重启服务器\"><a href=\"#重启服务器\" class=\"headerlink\" title=\"重启服务器\"></a>重启服务器</h3><p>修改完配置文件后，保存后，重启一下mysql服务，如果成功则没问题。</p>\n<h3 id=\"查看主服务器状态\"><a href=\"#查看主服务器状态\" class=\"headerlink\" title=\"查看主服务器状态\"></a>查看主服务器状态</h3><p>为了保证操作过程中没有数据变化，需要锁住当前的数据库，登录MySQL服务后，通过命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flush tables with read lock;</span><br></pre></td></tr></table></figure>\n\n<p>然后查看状态：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show master status\\G</span><br></pre></td></tr></table></figure>\n<p>这里给出实例输出，因为这个输出很重要：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show master status\\G</span><br><span class=\"line\">*************************** 1. row ***************************</span><br><span class=\"line\">             File: mysql-bin.000002</span><br><span class=\"line\">         Position: 154</span><br><span class=\"line\">     Binlog_Do_DB: busbook</span><br><span class=\"line\"> Binlog_Ignore_DB: </span><br><span class=\"line\">Executed_Gtid_Set: </span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n<p><strong>记住这里的输出关键<code>File</code>和<code>Position</code>的值，等会在从服务器的配置中会用到。</strong></p>\n<p>主服务器已经做完了， 可以解除锁定了:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ublock tables;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"从服务器slave的配置\"><a href=\"#从服务器slave的配置\" class=\"headerlink\" title=\"从服务器slave的配置\"></a>从服务器slave的配置</h2><p>我这里只做了主从服务器的备份，没有做主主服务器的备份，所以只需要完成如下操作即可。</p>\n<h3 id=\"修改配置文件-1\"><a href=\"#修改配置文件-1\" class=\"headerlink\" title=\"修改配置文件\"></a>修改配置文件</h3><p>修改 &#x2F;etc&#x2F;mysql&#x2F;mysql.conf.d&#x2F;mysqld.cnf 文件，在[mysqld]下修改即可：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\">server-id = 2</span><br><span class=\"line\">log_bin = /var/log/mysql/mysql-bin.log</span><br><span class=\"line\"></span><br><span class=\"line\">replicate-do-db   = busbook</span><br><span class=\"line\"># replicate-ignore-db = mysql</span><br><span class=\"line\">relay_log \t\t  = /var/log/mysql/mysql-relay-bin.log</span><br><span class=\"line\">log-slave-updates = ON</span><br></pre></td></tr></table></figure>\n\n<p>修改说明:</p>\n<ul>\n<li>server-id 必须保证每个服务器不一样。 这可能和循环同步有关。 防止进入死循环。</li>\n<li>replicate-do-db 可以指定需要复制的数据库。</li>\n<li>replicate-ignore-db 复制时需要排除的数据库。</li>\n<li>relay_log 中继日志的名字。复制线程需要先把远程的变化拷贝到这个中继日志中， 再执行。</li>\n<li>log-slave-updates 意思是，中继日志执行之后，这些变化是否需要计入自己的binarylog。 当你的B服务器需要作为另外一个服务器的主服务器的时候需要打开。  就是双主互相备份，或者多主循环备份。</li>\n</ul>\n<h3 id=\"重启服务器-1\"><a href=\"#重启服务器-1\" class=\"headerlink\" title=\"重启服务器\"></a>重启服务器</h3><p>修改完配置文件后，保存后，重启一下mysql服务，如果成功则没问题。</p>\n<h3 id=\"用change-master-语句指定同步位置\"><a href=\"#用change-master-语句指定同步位置\" class=\"headerlink\" title=\"用change master 语句指定同步位置\"></a>用change master 语句指定同步位置</h3><p>这步是最关键的一步了，在进入mysql操作界面后，输入如下指令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stop slave;</span><br></pre></td></tr></table></figure>\n\n<p>先停步slave服务线程，这个是很重要的，如果不这样做会造成以下操作不成功。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; change master to</span><br><span class=\"line\">&gt; master_host=&#x27;192.168.121.122&#x27;,master_user=&#x27;root&#x27;,master_password=&#x27;123456&#x27;,</span><br><span class=\"line\">&gt; master_log_file=&#x27; mysql-bin.000002&#x27;,master_log_pos=154;</span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<ul>\n<li>master_log_file, master_log_pos由主服务器（Master）查出的状态值中确定。 master_log_file对应File, master_log_pos对应Position。</li>\n</ul>\n<p>则可以开启slave线程了：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">start slave;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看从服务器（Slave）状态\"><a href=\"#查看从服务器（Slave）状态\" class=\"headerlink\" title=\"查看从服务器（Slave）状态\"></a>查看从服务器（Slave）状态</h3><p>查看状态：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show slave status\\G</span><br></pre></td></tr></table></figure>\n\n<p>实例输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show slave status\\G</span><br><span class=\"line\">*************************** 1. row ***************************</span><br><span class=\"line\">               Slave_IO_State: Waiting for master to send event</span><br><span class=\"line\">                  Master_Host: 192.168.121.122</span><br><span class=\"line\">                  Master_User: root</span><br><span class=\"line\">                  Master_Port: 3306</span><br><span class=\"line\">                Connect_Retry: 60</span><br><span class=\"line\">              Master_Log_File: mysql-bin.000002</span><br><span class=\"line\">          Read_Master_Log_Pos: 154</span><br><span class=\"line\">               Relay_Log_File: mysqld-relay-bin.000006</span><br><span class=\"line\">                Relay_Log_Pos: 367</span><br><span class=\"line\">        Relay_Master_Log_File: mysql-bin.000002</span><br><span class=\"line\">             Slave_IO_Running: Yes</span><br><span class=\"line\">            Slave_SQL_Running: Yes</span><br><span class=\"line\">              Replicate_Do_DB: busbook</span><br><span class=\"line\">          Replicate_Ignore_DB: </span><br><span class=\"line\">           Replicate_Do_Table: </span><br><span class=\"line\">       Replicate_Ignore_Table: </span><br><span class=\"line\">      Replicate_Wild_Do_Table: </span><br><span class=\"line\">  Replicate_Wild_Ignore_Table: </span><br><span class=\"line\">                   Last_Errno: 0</span><br><span class=\"line\">                   Last_Error: </span><br><span class=\"line\">                 Skip_Counter: 0</span><br><span class=\"line\">          Exec_Master_Log_Pos: 154</span><br><span class=\"line\">              Relay_Log_Space: 741</span><br><span class=\"line\">              Until_Condition: None</span><br><span class=\"line\">               Until_Log_File: </span><br><span class=\"line\">                Until_Log_Pos: 0</span><br><span class=\"line\">           Master_SSL_Allowed: No</span><br><span class=\"line\">           Master_SSL_CA_File: </span><br><span class=\"line\">           Master_SSL_CA_Path: </span><br><span class=\"line\">              Master_SSL_Cert: </span><br><span class=\"line\">            Master_SSL_Cipher: </span><br><span class=\"line\">               Master_SSL_Key: </span><br><span class=\"line\">        Seconds_Behind_Master: 0</span><br><span class=\"line\">Master_SSL_Verify_Server_Cert: No</span><br><span class=\"line\">                Last_IO_Errno: 0</span><br><span class=\"line\">                Last_IO_Error: </span><br><span class=\"line\">               Last_SQL_Errno: 0</span><br><span class=\"line\">               Last_SQL_Error: </span><br><span class=\"line\">  Replicate_Ignore_Server_Ids: </span><br><span class=\"line\">             Master_Server_Id: 1</span><br><span class=\"line\">                  Master_UUID: 9198b1a6-58db-11e9-9f47-08002777fdc0</span><br><span class=\"line\">             Master_Info_File: /var/lib/mysql/master.info</span><br><span class=\"line\">                    SQL_Delay: 0</span><br><span class=\"line\">          SQL_Remaining_Delay: NULL</span><br><span class=\"line\">      Slave_SQL_Running_State: Slave has read all relay log; waiting for more updates</span><br><span class=\"line\">           Master_Retry_Count: 86400</span><br><span class=\"line\">                  Master_Bind: </span><br><span class=\"line\">      Last_IO_Error_Timestamp: </span><br><span class=\"line\">     Last_SQL_Error_Timestamp: </span><br><span class=\"line\">               Master_SSL_Crl: </span><br><span class=\"line\">           Master_SSL_Crlpath: </span><br><span class=\"line\">           Retrieved_Gtid_Set: </span><br><span class=\"line\">            Executed_Gtid_Set: </span><br><span class=\"line\">                Auto_Position: 0</span><br><span class=\"line\">         Replicate_Rewrite_DB: </span><br><span class=\"line\">                 Channel_Name: </span><br><span class=\"line\">           Master_TLS_Version: </span><br><span class=\"line\">1 row in set (0.00 sec)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>如果看到以下两行值均为YES，则表示设置从服务器成功。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Slave_IO_Running: Yes</span><br><span class=\"line\">Slave_SQL_Running: Yes</span><br></pre></td></tr></table></figure>\n<p>如果其中一个是No， 那就说明不成功。需要查看mysql的错误日志。有时候密码填错了， 有时候防火墙的3306没有打开。ip地址不对，等等。 都会导致失败。错误日志一般在&#x2F;var&#x2F;log&#x2F;mysql&#x2F;error.log，是否进行修改过，需要查看配置文件中的具体配置。</p>\n<p>到此，基本上完成了MySL主从备份的过程，可以进行测试，改变主服务器的数据，查看从服务器时，发现已经同步发生改变，即为成功。</p>"},{"title":"实现python tornado框架下的大文件秒传等技术（1）","date":"2017-07-26T16:00:00.000Z","_content":"\n\n能不能实现这个功能，先做下去再说。\n\n\n## 为什么选用tornado\n\nTornado 是一个Python web框架和异步网络库，主要是想使用它的异步非阻塞的性质，在前期可能体现不出tornado的特性，主要参考[这篇文章](https://www.idaima.com/article/17099)实现基本的功能，然后在深入tornado，在项目中充分发挥它的独到之处。这应该是一篇持久的更新博客，后期需要有tornado的开发经验。\n\n## 搭建基本框架\n\n之前一直在做django的项目，习惯也喜欢django的那套文件结构，在这个项目里，将仍然沿用这套结构。\n\n<!--more-->\n\n### 文件目录\n\n如下图：\n\n![Image 1.png](https://i.loli.net/2017/07/27/5979a07a6f3c2.png)\n\n#### manage.py 入口文件，\n\n启动项目时，`python manage.py`\n\n\n```python\n# coding: utf-8\nimport tornado.ioloop\nimport os\nimport sys\n\nfrom tornado.options import options, parse_command_line\nfrom urls import application\n\nreload(sys)\nsys.setdefaultencoding('utf8')\n\n\nif __name__ == \"__main__\":\n    parse_command_line()\n    application.listen(options.port)\n    tornado.ioloop.IOLoop.current().start()\n```\n\n#### settings.py 配置文件\n\n- 端口：8888\n- 静态文件目录：static\n- 模板文件目录：templates\n\n\n```python\n# coding: utf-8\nimport os\n\nfrom tornado.options import define, options, parse_command_line\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\ndefine(\"port\", default=8888, help=\"run on the given port\", type=int)\ndefine(\"debug\", default=True, help=\"run in debug mode\")\ndefine(\"address\", default=\"127.0.0.1\", help=\"run in the given address\")\n\nsettings = {\n    \"cookie_secret\": \"61oETzKXQAGaYdkL5gEmGeJJFuYh7EQnp2XdTP1o/Vo=\",\n    \"template_path\": os.path.join(os.path.dirname(__file__), \"templates\"),\n    \"static_path\": os.path.join(os.path.dirname(__file__), \"static\"),\n    \"xsrf_cookies\": False,\n}\n```\n\n#### url.py 路由\n\n配置 `/` 路由，跳转文件上传界面\n\n\n```python\n# coding: utf-8\n\nimport tornado.web\n\nfrom settings import settings\nfrom views import MainHandler\n\napplication = tornado.web.Application([\n    (r\"^/\", MainHandler),\n\n], **settings)\n```\n\n\n#### views.py 处理函数（视图）\n\ntornado处理请求时不需要加上 return\n\n\n```python\n# coding: utf-8\n\nimport tornado.web\nimport os\n\nclass MainHandler(tornado.web.RequestHandler):\n\n    def get(self):\n        self.render(\"upload.html\")\n```\n\n\n#### static 静态文件目录\n\n这里存放 js、css、images等等静态文件，上传的文件也放在这。\n\n#### templates 模板文件目录\n\n这是放着所有的网页\n\n\n[源代码在这里](https://github.com/suAdminWen/file_upload)\n","source":"_posts/实现python tornado框架下的大文件秒传等技术（1）.md","raw":"---\ntitle: 实现python tornado框架下的大文件秒传等技术（1）\ndate: 2017-07-27\ntags: [tornado, python, 技术]\n---\n\n\n能不能实现这个功能，先做下去再说。\n\n\n## 为什么选用tornado\n\nTornado 是一个Python web框架和异步网络库，主要是想使用它的异步非阻塞的性质，在前期可能体现不出tornado的特性，主要参考[这篇文章](https://www.idaima.com/article/17099)实现基本的功能，然后在深入tornado，在项目中充分发挥它的独到之处。这应该是一篇持久的更新博客，后期需要有tornado的开发经验。\n\n## 搭建基本框架\n\n之前一直在做django的项目，习惯也喜欢django的那套文件结构，在这个项目里，将仍然沿用这套结构。\n\n<!--more-->\n\n### 文件目录\n\n如下图：\n\n![Image 1.png](https://i.loli.net/2017/07/27/5979a07a6f3c2.png)\n\n#### manage.py 入口文件，\n\n启动项目时，`python manage.py`\n\n\n```python\n# coding: utf-8\nimport tornado.ioloop\nimport os\nimport sys\n\nfrom tornado.options import options, parse_command_line\nfrom urls import application\n\nreload(sys)\nsys.setdefaultencoding('utf8')\n\n\nif __name__ == \"__main__\":\n    parse_command_line()\n    application.listen(options.port)\n    tornado.ioloop.IOLoop.current().start()\n```\n\n#### settings.py 配置文件\n\n- 端口：8888\n- 静态文件目录：static\n- 模板文件目录：templates\n\n\n```python\n# coding: utf-8\nimport os\n\nfrom tornado.options import define, options, parse_command_line\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\ndefine(\"port\", default=8888, help=\"run on the given port\", type=int)\ndefine(\"debug\", default=True, help=\"run in debug mode\")\ndefine(\"address\", default=\"127.0.0.1\", help=\"run in the given address\")\n\nsettings = {\n    \"cookie_secret\": \"61oETzKXQAGaYdkL5gEmGeJJFuYh7EQnp2XdTP1o/Vo=\",\n    \"template_path\": os.path.join(os.path.dirname(__file__), \"templates\"),\n    \"static_path\": os.path.join(os.path.dirname(__file__), \"static\"),\n    \"xsrf_cookies\": False,\n}\n```\n\n#### url.py 路由\n\n配置 `/` 路由，跳转文件上传界面\n\n\n```python\n# coding: utf-8\n\nimport tornado.web\n\nfrom settings import settings\nfrom views import MainHandler\n\napplication = tornado.web.Application([\n    (r\"^/\", MainHandler),\n\n], **settings)\n```\n\n\n#### views.py 处理函数（视图）\n\ntornado处理请求时不需要加上 return\n\n\n```python\n# coding: utf-8\n\nimport tornado.web\nimport os\n\nclass MainHandler(tornado.web.RequestHandler):\n\n    def get(self):\n        self.render(\"upload.html\")\n```\n\n\n#### static 静态文件目录\n\n这里存放 js、css、images等等静态文件，上传的文件也放在这。\n\n#### templates 模板文件目录\n\n这是放着所有的网页\n\n\n[源代码在这里](https://github.com/suAdminWen/file_upload)\n","slug":"实现python tornado框架下的大文件秒传等技术（1）","published":1,"updated":"2021-06-20T10:25:20.131Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluqa1hjf004arlog2x5e91hy","content":"<p>能不能实现这个功能，先做下去再说。</p>\n<h2 id=\"为什么选用tornado\"><a href=\"#为什么选用tornado\" class=\"headerlink\" title=\"为什么选用tornado\"></a>为什么选用tornado</h2><p>Tornado 是一个Python web框架和异步网络库，主要是想使用它的异步非阻塞的性质，在前期可能体现不出tornado的特性，主要参考<a href=\"https://www.idaima.com/article/17099\">这篇文章</a>实现基本的功能，然后在深入tornado，在项目中充分发挥它的独到之处。这应该是一篇持久的更新博客，后期需要有tornado的开发经验。</p>\n<h2 id=\"搭建基本框架\"><a href=\"#搭建基本框架\" class=\"headerlink\" title=\"搭建基本框架\"></a>搭建基本框架</h2><p>之前一直在做django的项目，习惯也喜欢django的那套文件结构，在这个项目里，将仍然沿用这套结构。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"文件目录\"><a href=\"#文件目录\" class=\"headerlink\" title=\"文件目录\"></a>文件目录</h3><p>如下图：</p>\n<p><img src=\"https://i.loli.net/2017/07/27/5979a07a6f3c2.png\" alt=\"Image 1.png\"></p>\n<h4 id=\"manage-py-入口文件，\"><a href=\"#manage-py-入口文件，\" class=\"headerlink\" title=\"manage.py 入口文件，\"></a>manage.py 入口文件，</h4><p>启动项目时，<code>python manage.py</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding: utf-8</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> tornado.ioloop</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> tornado.options <span class=\"keyword\">import</span> options, parse_command_line</span><br><span class=\"line\"><span class=\"keyword\">from</span> urls <span class=\"keyword\">import</span> application</span><br><span class=\"line\"></span><br><span class=\"line\">reload(sys)</span><br><span class=\"line\">sys.setdefaultencoding(<span class=\"string\">&#x27;utf8&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    parse_command_line()</span><br><span class=\"line\">    application.listen(options.port)</span><br><span class=\"line\">    tornado.ioloop.IOLoop.current().start()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"settings-py-配置文件\"><a href=\"#settings-py-配置文件\" class=\"headerlink\" title=\"settings.py 配置文件\"></a>settings.py 配置文件</h4><ul>\n<li>端口：8888</li>\n<li>静态文件目录：static</li>\n<li>模板文件目录：templates</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding: utf-8</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> tornado.options <span class=\"keyword\">import</span> define, options, parse_command_line</span><br><span class=\"line\"></span><br><span class=\"line\">BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))</span><br><span class=\"line\"></span><br><span class=\"line\">define(<span class=\"string\">&quot;port&quot;</span>, default=<span class=\"number\">8888</span>, <span class=\"built_in\">help</span>=<span class=\"string\">&quot;run on the given port&quot;</span>, <span class=\"built_in\">type</span>=<span class=\"built_in\">int</span>)</span><br><span class=\"line\">define(<span class=\"string\">&quot;debug&quot;</span>, default=<span class=\"literal\">True</span>, <span class=\"built_in\">help</span>=<span class=\"string\">&quot;run in debug mode&quot;</span>)</span><br><span class=\"line\">define(<span class=\"string\">&quot;address&quot;</span>, default=<span class=\"string\">&quot;127.0.0.1&quot;</span>, <span class=\"built_in\">help</span>=<span class=\"string\">&quot;run in the given address&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">settings = &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;cookie_secret&quot;</span>: <span class=\"string\">&quot;61oETzKXQAGaYdkL5gEmGeJJFuYh7EQnp2XdTP1o/Vo=&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;template_path&quot;</span>: os.path.join(os.path.dirname(__file__), <span class=\"string\">&quot;templates&quot;</span>),</span><br><span class=\"line\">    <span class=\"string\">&quot;static_path&quot;</span>: os.path.join(os.path.dirname(__file__), <span class=\"string\">&quot;static&quot;</span>),</span><br><span class=\"line\">    <span class=\"string\">&quot;xsrf_cookies&quot;</span>: <span class=\"literal\">False</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"url-py-路由\"><a href=\"#url-py-路由\" class=\"headerlink\" title=\"url.py 路由\"></a>url.py 路由</h4><p>配置 <code>/</code> 路由，跳转文件上传界面</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding: utf-8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> tornado.web</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> settings <span class=\"keyword\">import</span> settings</span><br><span class=\"line\"><span class=\"keyword\">from</span> views <span class=\"keyword\">import</span> MainHandler</span><br><span class=\"line\"></span><br><span class=\"line\">application = tornado.web.Application([</span><br><span class=\"line\">    (<span class=\"string\">r&quot;^/&quot;</span>, MainHandler),</span><br><span class=\"line\"></span><br><span class=\"line\">], **settings)</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"views-py-处理函数（视图）\"><a href=\"#views-py-处理函数（视图）\" class=\"headerlink\" title=\"views.py 处理函数（视图）\"></a>views.py 处理函数（视图）</h4><p>tornado处理请求时不需要加上 return</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding: utf-8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> tornado.web</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MainHandler</span>(tornado.web.RequestHandler):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.render(<span class=\"string\">&quot;upload.html&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"static-静态文件目录\"><a href=\"#static-静态文件目录\" class=\"headerlink\" title=\"static 静态文件目录\"></a>static 静态文件目录</h4><p>这里存放 js、css、images等等静态文件，上传的文件也放在这。</p>\n<h4 id=\"templates-模板文件目录\"><a href=\"#templates-模板文件目录\" class=\"headerlink\" title=\"templates 模板文件目录\"></a>templates 模板文件目录</h4><p>这是放着所有的网页</p>\n<p><a href=\"https://github.com/suAdminWen/file_upload\">源代码在这里</a></p>\n","site":{"data":{}},"excerpt":"<p>能不能实现这个功能，先做下去再说。</p>\n<h2 id=\"为什么选用tornado\"><a href=\"#为什么选用tornado\" class=\"headerlink\" title=\"为什么选用tornado\"></a>为什么选用tornado</h2><p>Tornado 是一个Python web框架和异步网络库，主要是想使用它的异步非阻塞的性质，在前期可能体现不出tornado的特性，主要参考<a href=\"https://www.idaima.com/article/17099\">这篇文章</a>实现基本的功能，然后在深入tornado，在项目中充分发挥它的独到之处。这应该是一篇持久的更新博客，后期需要有tornado的开发经验。</p>\n<h2 id=\"搭建基本框架\"><a href=\"#搭建基本框架\" class=\"headerlink\" title=\"搭建基本框架\"></a>搭建基本框架</h2><p>之前一直在做django的项目，习惯也喜欢django的那套文件结构，在这个项目里，将仍然沿用这套结构。</p>","more":"<h3 id=\"文件目录\"><a href=\"#文件目录\" class=\"headerlink\" title=\"文件目录\"></a>文件目录</h3><p>如下图：</p>\n<p><img src=\"https://i.loli.net/2017/07/27/5979a07a6f3c2.png\" alt=\"Image 1.png\"></p>\n<h4 id=\"manage-py-入口文件，\"><a href=\"#manage-py-入口文件，\" class=\"headerlink\" title=\"manage.py 入口文件，\"></a>manage.py 入口文件，</h4><p>启动项目时，<code>python manage.py</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding: utf-8</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> tornado.ioloop</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> tornado.options <span class=\"keyword\">import</span> options, parse_command_line</span><br><span class=\"line\"><span class=\"keyword\">from</span> urls <span class=\"keyword\">import</span> application</span><br><span class=\"line\"></span><br><span class=\"line\">reload(sys)</span><br><span class=\"line\">sys.setdefaultencoding(<span class=\"string\">&#x27;utf8&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    parse_command_line()</span><br><span class=\"line\">    application.listen(options.port)</span><br><span class=\"line\">    tornado.ioloop.IOLoop.current().start()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"settings-py-配置文件\"><a href=\"#settings-py-配置文件\" class=\"headerlink\" title=\"settings.py 配置文件\"></a>settings.py 配置文件</h4><ul>\n<li>端口：8888</li>\n<li>静态文件目录：static</li>\n<li>模板文件目录：templates</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding: utf-8</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> tornado.options <span class=\"keyword\">import</span> define, options, parse_command_line</span><br><span class=\"line\"></span><br><span class=\"line\">BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))</span><br><span class=\"line\"></span><br><span class=\"line\">define(<span class=\"string\">&quot;port&quot;</span>, default=<span class=\"number\">8888</span>, <span class=\"built_in\">help</span>=<span class=\"string\">&quot;run on the given port&quot;</span>, <span class=\"built_in\">type</span>=<span class=\"built_in\">int</span>)</span><br><span class=\"line\">define(<span class=\"string\">&quot;debug&quot;</span>, default=<span class=\"literal\">True</span>, <span class=\"built_in\">help</span>=<span class=\"string\">&quot;run in debug mode&quot;</span>)</span><br><span class=\"line\">define(<span class=\"string\">&quot;address&quot;</span>, default=<span class=\"string\">&quot;127.0.0.1&quot;</span>, <span class=\"built_in\">help</span>=<span class=\"string\">&quot;run in the given address&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">settings = &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;cookie_secret&quot;</span>: <span class=\"string\">&quot;61oETzKXQAGaYdkL5gEmGeJJFuYh7EQnp2XdTP1o/Vo=&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;template_path&quot;</span>: os.path.join(os.path.dirname(__file__), <span class=\"string\">&quot;templates&quot;</span>),</span><br><span class=\"line\">    <span class=\"string\">&quot;static_path&quot;</span>: os.path.join(os.path.dirname(__file__), <span class=\"string\">&quot;static&quot;</span>),</span><br><span class=\"line\">    <span class=\"string\">&quot;xsrf_cookies&quot;</span>: <span class=\"literal\">False</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"url-py-路由\"><a href=\"#url-py-路由\" class=\"headerlink\" title=\"url.py 路由\"></a>url.py 路由</h4><p>配置 <code>/</code> 路由，跳转文件上传界面</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding: utf-8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> tornado.web</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> settings <span class=\"keyword\">import</span> settings</span><br><span class=\"line\"><span class=\"keyword\">from</span> views <span class=\"keyword\">import</span> MainHandler</span><br><span class=\"line\"></span><br><span class=\"line\">application = tornado.web.Application([</span><br><span class=\"line\">    (<span class=\"string\">r&quot;^/&quot;</span>, MainHandler),</span><br><span class=\"line\"></span><br><span class=\"line\">], **settings)</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"views-py-处理函数（视图）\"><a href=\"#views-py-处理函数（视图）\" class=\"headerlink\" title=\"views.py 处理函数（视图）\"></a>views.py 处理函数（视图）</h4><p>tornado处理请求时不需要加上 return</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding: utf-8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> tornado.web</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MainHandler</span>(tornado.web.RequestHandler):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.render(<span class=\"string\">&quot;upload.html&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"static-静态文件目录\"><a href=\"#static-静态文件目录\" class=\"headerlink\" title=\"static 静态文件目录\"></a>static 静态文件目录</h4><p>这里存放 js、css、images等等静态文件，上传的文件也放在这。</p>\n<h4 id=\"templates-模板文件目录\"><a href=\"#templates-模板文件目录\" class=\"headerlink\" title=\"templates 模板文件目录\"></a>templates 模板文件目录</h4><p>这是放着所有的网页</p>\n<p><a href=\"https://github.com/suAdminWen/file_upload\">源代码在这里</a></p>"},{"title":"实现python tornado框架下的大文件秒传等技术（2）","date":"2017-07-27T16:00:00.000Z","_content":"\n这一步实现了tornado基本的文件上传和保存，使用js的Ajax异步提交文件表单\n\n## 前台界面\n\n### css样式表\n\n在 **static/css** 目录下创建样式表 **stylesheet.css**\n\n<!--more-->\n\n```css\n* {\n    font-family: \"微软雅黑\";\n    margin: 0;\n    padding: 0;\n}\n\n.container {\n    padding-top: 10px;\n    padding-left: 10px;\n}\n\n.container input {\n    width: 120px;\n    height: 30px;\n    background-color: blue;\n    color: white;\n    border: 0;\n    line-height: 30px;\n    border-radius: 5px;\n    margin-right: 5px;\n    outline: none;\n    cursor: pointer;\n}\n\n#filelist {\n    width: 800px;\n    border: solid 1px #eee;\n    border-collapse: collapse;\n    margin: 10px;\n}\n\n#filelist td {\n    border-bottom: solid 1px #eee;\n    height: 30px;\n    font-size: 12px;\n    /*line-height:30px ;*/\n    padding: 0 3px;\n}\n\n.filename {\n    width: 200px;\n    text-align: center;\n}\n\n.filestatus {\n    width: 100px;\n    text-align: center;\n}\n\n.fileprogress {\n    text-align: center;\n}\n\n.domprogress {\n    width: 320px;\n}\n\n.domsize {\n    display: block;\n}\n\n#tdmsg {\n    text-align: center;\n}\n\n#fileselect {\n    display: none;\n}\n\nspan.domtime {\n    display:block;\n}\n```\n\n\n### HTML \n\n在 **temples** 中创建上传文件界面  **upload.html**\n\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <link rel=\"stylesheet\" href=\"{ { static_url('css/stylesheet.css') } }\">\n</head>\n<body>\n    <div class=\"container\">\n        <input type=\"file\" name=\"fileselect\" id=\"fileselect\" value=\"\" multiple/>\n        <input type=\"button\" id=\"btnselect\" value=\"选择上传的文件\" />\n        <input type=\"button\" id=\"btnupload\" value=\"开始上传\" />\n    </div>\n    <table cellspacing=\"0\" cellpadding=\"0\" id=\"filelist\">\n        <tr>\n            <td class=\"filename\">文件名</td>\n            <td class=\"fileprogress\">进度</td>\n            <td class=\"filestatus\">状态</td>\n        </tr>\n        <!--<tr><td>人民的名义.avi </td><td><progress value=\"10\" max=\"100\" class=\"domprogress\"></progress><span class=\"dompercent\">10%</span><span class=\"domsize\">0/1.86GB</span></td><td class=\"filestatus\"><span class=\"domstatus\">排队中</span></td></tr>-->\n        <tr id=\"trmsg\">\n            <td colspan=\"3\" id=\"tdmsg\">请选择要上传的文件! 技术支持QQ：1205352402</td>\n        </tr>\n\n    </table>\n</body>\n<script type=\"text/javascript\" src=\"{ { static_url('js/jquery-2.0.3.min.js') } }\"></script>\n<script type=\"text/javascript\" src=\"{ { static_url('js/spark-md5.js') } }\"></script>\n</html>\n```\n\n这里用到了html5的一个标签 `<progress>`，用来刻画上传的进度\n\n\n### js\n\n引入jquery库和一些需要的库，这些都放在 **static/js** 目录下\n\n这里需要一个md5加密的js库，点击[这里](https://raw.githubusercontent.com/satazor/SparkMD5/master/spark-md5.js)\n\n下面的代码暂时写在网页中，用来控制界面样式，当选中上传的文件时，界面会有一些变化。\n\n\n```html\n<script type=\"text/javascript\">\n    $(\"#btnselect\").click(function() {\n        $(\"#fileselect\").click();\n    });\n    $(\"#fileselect\").change(function() {\n        var files = this.files;\n        if(files.length > 0) {\n            $(\"#trmsg\").remove();\n            $(files).each(function(index, item) {\n                console.log(index, item);\n                var filesize = 0;\n                if((item.size / 1024 / 1024 / 1024) >= 1) {\n                    filesize = (item.size / 1024 / 1024 / 1024).toFixed(2) + \"GB\"; // b=>kb=>mb=>gb\n                } else if((item.size / 1024 / 1024 / 1024) < 1 && (item.size / 1024 / 1024) >= 1) {\n                    filesize = (item.size / 1024 / 1024).toFixed(2) + \"MB\";\n                } else if((item.size / 1024 / 1024) < 1 && (item.size / 1024) >= 1) {\n                    filesize = (item.size / 1024).toFixed(2) + \"KB\";\n                } else {\n                    filesize = item.size + \"B\";\n                }\n\n                var htmlstr = '<tr><td>' + item.name + '</td><td><progress value=\"0\" max=\"100\" class=\"domprogress\"></progress><span class=\"dompercent\"> 0/'+filesize+'</span><span class=\"domtime\">总共耗时：0 秒</span></td><td class=\"filestatus\"><span class=\"domstatus\">排队中</span></td></tr>';\n                $(\"#filelist\").append(htmlstr);\n\n            });\n        }\n    });\n</script>\n```\n\n\n上完css和js，选中需要上传的文件之后的界面是这样的\n\n![Image 2.png](https://i.loli.net/2017/07/28/597aff863150c.png)\n\n当然也可以选择多个文件。\n\n\n## 上传文件初次尝试\n\n### 前台js代码，实现异步提交文件()在上面js代码后面继续写\n\n#### **开始上传** \n\n按钮点击事件\n\n\n```js\n$(\"#btnupload\").click(function () {\n    var files = $(\"#fileselect\")[0].files;\n    $(files).each(function (index) {\n        yyupload(files[index]);\n    });\n});\n```\n\n获取所有需要上传的文件，对每一个文件进行处理，将文件传给 `yyupload()`函数进行处理。\n\n```js\nfunction yyupload(file) {\n    upload(file);\n}\n```\n\n\n这里应给多文件进行一些处理，现在为了实现简单的文件上传，所以 `yyupload()`对文件暂时无处理，直接传给上传函数 `upload()`\n\n\n```js\nfunction upload(file) {\n    var k = 0;\n    var fd = new FormData();\n    fd.append(\"file\", file);\n    fd.append(\"filename\", file.name);\n    fd.append(\"filesize\", file.size);\n\n    var xhr = new XMLHttpRequest();\n    xhr.open(\"post\", \"/uploadfile\", true);\n    xhr.onreadystatechange = function () {\n        if (xhr.readyState === 4 && xhr.status === 200){\n            console.log(\"上传成功\");\n            k = 0;\n        }else if (xhr.status === 500){\n            setTimeout(function () {\n                if(k < 3){\n                    console.log(\"sendfinish\");\n                }\n                k++;\n            }, 3000);\n        }\n    };\n    xhr.send(fd);\n}\n```\n\n`upload()`函数中，使用了 `FormData`对象和 `XMLHttpRequest`对象。([参考这里](https://developer.mozilla.org/zh-CN/docs/Web/API/FormData/Using_FormData_Objects))\n\n- *FormData* 通过FormData对象可以组装一组用 XMLHttpRequest发送请求的键/值对。它可以更灵活方便的发送表单数据，因为可以独立于表单使用\n- *XMLHttpRequest* 是一个API, 它为客户端提供了在客户端和服务器之间传输数据的功能。它提供了一个通过 URL 来获取数据的简单方式，并且不会使整个页面刷新。这使得网页只更新一部分页面而不会打扰到用户。XMLHttpRequest 在 AJAX 中被大量使用。\n\n### 后台处理\n\n#### 处理视图 `UploadJobHandler`\n\n在 **views.py**中创建处理视图 `UploadJobHandler`\n\n\n```python\n\nfrom settings import BASE_DIR\n\nclass UploadJobHandler(tornado.web.RequestHandler):\n\n    def post(self):\n        file_metas = self.request.files[\"file\"]\n        if len(file_metas) <= 0:\n            self.write(\"获取服务器上传文件失败！\")\n\n        metas = file_metas[0]\n        filename = self.get_argument(\"filename\")\n        tempfilename = filename + \".part\"\n        newname = os.path.join(BASE_DIR, \"file_upload/static/upload/\" + tempfilename)\n        with open(newname, \"wb+\") as f:\n            f.write(metas[\"body\"])\n        self.write(\"finished!\")\n```\n\n\n这里将上传的文件添加后缀 **.part**，放在 `static/upload/` 下。\n\n#### 添加路由 `/uploadfile`\n\n在 **urls.py** 添加 `/uploadfile` 路由，其对应的视图为 `UploadJobHandler`。添加之后 **urls.py**中代码如下：\n\n\n```python\n# coding: utf-8\n\nimport tornado.web\n\nfrom settings import settings\nfrom views import MainHandler, UploadJobHandler\n\napplication = tornado.web.Application([\n    (r'^/', MainHandler),\n    (r'^/uploadfile$', UploadJobHandler),\n\n], **settings)\n```\n\n代码编写完成之后，重启服务。此时文件结构如下图：\n![Image 3.png](https://i.loli.net/2017/07/28/597b0ade0d554.png)","source":"_posts/实现python tornado框架下的大文件秒传等技术（2）.md","raw":"---\ntitle: 实现python tornado框架下的大文件秒传等技术（2）\ndate: 2017-07-28\ntags: [tornado, python, 技术]\n---\n\n这一步实现了tornado基本的文件上传和保存，使用js的Ajax异步提交文件表单\n\n## 前台界面\n\n### css样式表\n\n在 **static/css** 目录下创建样式表 **stylesheet.css**\n\n<!--more-->\n\n```css\n* {\n    font-family: \"微软雅黑\";\n    margin: 0;\n    padding: 0;\n}\n\n.container {\n    padding-top: 10px;\n    padding-left: 10px;\n}\n\n.container input {\n    width: 120px;\n    height: 30px;\n    background-color: blue;\n    color: white;\n    border: 0;\n    line-height: 30px;\n    border-radius: 5px;\n    margin-right: 5px;\n    outline: none;\n    cursor: pointer;\n}\n\n#filelist {\n    width: 800px;\n    border: solid 1px #eee;\n    border-collapse: collapse;\n    margin: 10px;\n}\n\n#filelist td {\n    border-bottom: solid 1px #eee;\n    height: 30px;\n    font-size: 12px;\n    /*line-height:30px ;*/\n    padding: 0 3px;\n}\n\n.filename {\n    width: 200px;\n    text-align: center;\n}\n\n.filestatus {\n    width: 100px;\n    text-align: center;\n}\n\n.fileprogress {\n    text-align: center;\n}\n\n.domprogress {\n    width: 320px;\n}\n\n.domsize {\n    display: block;\n}\n\n#tdmsg {\n    text-align: center;\n}\n\n#fileselect {\n    display: none;\n}\n\nspan.domtime {\n    display:block;\n}\n```\n\n\n### HTML \n\n在 **temples** 中创建上传文件界面  **upload.html**\n\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <link rel=\"stylesheet\" href=\"{ { static_url('css/stylesheet.css') } }\">\n</head>\n<body>\n    <div class=\"container\">\n        <input type=\"file\" name=\"fileselect\" id=\"fileselect\" value=\"\" multiple/>\n        <input type=\"button\" id=\"btnselect\" value=\"选择上传的文件\" />\n        <input type=\"button\" id=\"btnupload\" value=\"开始上传\" />\n    </div>\n    <table cellspacing=\"0\" cellpadding=\"0\" id=\"filelist\">\n        <tr>\n            <td class=\"filename\">文件名</td>\n            <td class=\"fileprogress\">进度</td>\n            <td class=\"filestatus\">状态</td>\n        </tr>\n        <!--<tr><td>人民的名义.avi </td><td><progress value=\"10\" max=\"100\" class=\"domprogress\"></progress><span class=\"dompercent\">10%</span><span class=\"domsize\">0/1.86GB</span></td><td class=\"filestatus\"><span class=\"domstatus\">排队中</span></td></tr>-->\n        <tr id=\"trmsg\">\n            <td colspan=\"3\" id=\"tdmsg\">请选择要上传的文件! 技术支持QQ：1205352402</td>\n        </tr>\n\n    </table>\n</body>\n<script type=\"text/javascript\" src=\"{ { static_url('js/jquery-2.0.3.min.js') } }\"></script>\n<script type=\"text/javascript\" src=\"{ { static_url('js/spark-md5.js') } }\"></script>\n</html>\n```\n\n这里用到了html5的一个标签 `<progress>`，用来刻画上传的进度\n\n\n### js\n\n引入jquery库和一些需要的库，这些都放在 **static/js** 目录下\n\n这里需要一个md5加密的js库，点击[这里](https://raw.githubusercontent.com/satazor/SparkMD5/master/spark-md5.js)\n\n下面的代码暂时写在网页中，用来控制界面样式，当选中上传的文件时，界面会有一些变化。\n\n\n```html\n<script type=\"text/javascript\">\n    $(\"#btnselect\").click(function() {\n        $(\"#fileselect\").click();\n    });\n    $(\"#fileselect\").change(function() {\n        var files = this.files;\n        if(files.length > 0) {\n            $(\"#trmsg\").remove();\n            $(files).each(function(index, item) {\n                console.log(index, item);\n                var filesize = 0;\n                if((item.size / 1024 / 1024 / 1024) >= 1) {\n                    filesize = (item.size / 1024 / 1024 / 1024).toFixed(2) + \"GB\"; // b=>kb=>mb=>gb\n                } else if((item.size / 1024 / 1024 / 1024) < 1 && (item.size / 1024 / 1024) >= 1) {\n                    filesize = (item.size / 1024 / 1024).toFixed(2) + \"MB\";\n                } else if((item.size / 1024 / 1024) < 1 && (item.size / 1024) >= 1) {\n                    filesize = (item.size / 1024).toFixed(2) + \"KB\";\n                } else {\n                    filesize = item.size + \"B\";\n                }\n\n                var htmlstr = '<tr><td>' + item.name + '</td><td><progress value=\"0\" max=\"100\" class=\"domprogress\"></progress><span class=\"dompercent\"> 0/'+filesize+'</span><span class=\"domtime\">总共耗时：0 秒</span></td><td class=\"filestatus\"><span class=\"domstatus\">排队中</span></td></tr>';\n                $(\"#filelist\").append(htmlstr);\n\n            });\n        }\n    });\n</script>\n```\n\n\n上完css和js，选中需要上传的文件之后的界面是这样的\n\n![Image 2.png](https://i.loli.net/2017/07/28/597aff863150c.png)\n\n当然也可以选择多个文件。\n\n\n## 上传文件初次尝试\n\n### 前台js代码，实现异步提交文件()在上面js代码后面继续写\n\n#### **开始上传** \n\n按钮点击事件\n\n\n```js\n$(\"#btnupload\").click(function () {\n    var files = $(\"#fileselect\")[0].files;\n    $(files).each(function (index) {\n        yyupload(files[index]);\n    });\n});\n```\n\n获取所有需要上传的文件，对每一个文件进行处理，将文件传给 `yyupload()`函数进行处理。\n\n```js\nfunction yyupload(file) {\n    upload(file);\n}\n```\n\n\n这里应给多文件进行一些处理，现在为了实现简单的文件上传，所以 `yyupload()`对文件暂时无处理，直接传给上传函数 `upload()`\n\n\n```js\nfunction upload(file) {\n    var k = 0;\n    var fd = new FormData();\n    fd.append(\"file\", file);\n    fd.append(\"filename\", file.name);\n    fd.append(\"filesize\", file.size);\n\n    var xhr = new XMLHttpRequest();\n    xhr.open(\"post\", \"/uploadfile\", true);\n    xhr.onreadystatechange = function () {\n        if (xhr.readyState === 4 && xhr.status === 200){\n            console.log(\"上传成功\");\n            k = 0;\n        }else if (xhr.status === 500){\n            setTimeout(function () {\n                if(k < 3){\n                    console.log(\"sendfinish\");\n                }\n                k++;\n            }, 3000);\n        }\n    };\n    xhr.send(fd);\n}\n```\n\n`upload()`函数中，使用了 `FormData`对象和 `XMLHttpRequest`对象。([参考这里](https://developer.mozilla.org/zh-CN/docs/Web/API/FormData/Using_FormData_Objects))\n\n- *FormData* 通过FormData对象可以组装一组用 XMLHttpRequest发送请求的键/值对。它可以更灵活方便的发送表单数据，因为可以独立于表单使用\n- *XMLHttpRequest* 是一个API, 它为客户端提供了在客户端和服务器之间传输数据的功能。它提供了一个通过 URL 来获取数据的简单方式，并且不会使整个页面刷新。这使得网页只更新一部分页面而不会打扰到用户。XMLHttpRequest 在 AJAX 中被大量使用。\n\n### 后台处理\n\n#### 处理视图 `UploadJobHandler`\n\n在 **views.py**中创建处理视图 `UploadJobHandler`\n\n\n```python\n\nfrom settings import BASE_DIR\n\nclass UploadJobHandler(tornado.web.RequestHandler):\n\n    def post(self):\n        file_metas = self.request.files[\"file\"]\n        if len(file_metas) <= 0:\n            self.write(\"获取服务器上传文件失败！\")\n\n        metas = file_metas[0]\n        filename = self.get_argument(\"filename\")\n        tempfilename = filename + \".part\"\n        newname = os.path.join(BASE_DIR, \"file_upload/static/upload/\" + tempfilename)\n        with open(newname, \"wb+\") as f:\n            f.write(metas[\"body\"])\n        self.write(\"finished!\")\n```\n\n\n这里将上传的文件添加后缀 **.part**，放在 `static/upload/` 下。\n\n#### 添加路由 `/uploadfile`\n\n在 **urls.py** 添加 `/uploadfile` 路由，其对应的视图为 `UploadJobHandler`。添加之后 **urls.py**中代码如下：\n\n\n```python\n# coding: utf-8\n\nimport tornado.web\n\nfrom settings import settings\nfrom views import MainHandler, UploadJobHandler\n\napplication = tornado.web.Application([\n    (r'^/', MainHandler),\n    (r'^/uploadfile$', UploadJobHandler),\n\n], **settings)\n```\n\n代码编写完成之后，重启服务。此时文件结构如下图：\n![Image 3.png](https://i.loli.net/2017/07/28/597b0ade0d554.png)","slug":"实现python tornado框架下的大文件秒传等技术（2）","published":1,"updated":"2021-06-20T10:25:20.131Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluqa1hjg004crlog5do05wgd","content":"<p>这一步实现了tornado基本的文件上传和保存，使用js的Ajax异步提交文件表单</p>\n<h2 id=\"前台界面\"><a href=\"#前台界面\" class=\"headerlink\" title=\"前台界面\"></a>前台界面</h2><h3 id=\"css样式表\"><a href=\"#css样式表\" class=\"headerlink\" title=\"css样式表\"></a>css样式表</h3><p>在 <strong>static&#x2F;css</strong> 目录下创建样式表 <strong>stylesheet.css</strong></p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">&quot;微软雅黑&quot;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">padding-top</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding-left</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.container</span> <span class=\"selector-tag\">input</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">120px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: blue;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: white;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-right</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">outline</span>: none;</span><br><span class=\"line\">    <span class=\"attribute\">cursor</span>: pointer;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#filelist</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">800px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: solid <span class=\"number\">1px</span> <span class=\"number\">#eee</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-collapse</span>: collapse;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#filelist</span> <span class=\"selector-tag\">td</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">border-bottom</span>: solid <span class=\"number\">1px</span> <span class=\"number\">#eee</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">12px</span>;</span><br><span class=\"line\">    <span class=\"comment\">/*line-height:30px ;*/</span></span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0</span> <span class=\"number\">3px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.filename</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.filestatus</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.fileprogress</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.domprogress</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">320px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.domsize</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#tdmsg</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#fileselect</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">span</span><span class=\"selector-class\">.domtime</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>:block;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h3><p>在 <strong>temples</strong> 中创建上传文件界面  <strong>upload.html</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&#123; &#123; static_url(&#x27;css/stylesheet.css&#x27;) &#125; &#125;&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;file&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;fileselect&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;fileselect&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">multiple</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;btnselect&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;选择上传的文件&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;btnupload&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;开始上传&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">cellspacing</span>=<span class=\"string\">&quot;0&quot;</span> <span class=\"attr\">cellpadding</span>=<span class=\"string\">&quot;0&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;filelist&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;filename&quot;</span>&gt;</span>文件名<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fileprogress&quot;</span>&gt;</span>进度<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;filestatus&quot;</span>&gt;</span>状态<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--&lt;tr&gt;&lt;td&gt;人民的名义.avi &lt;/td&gt;&lt;td&gt;&lt;progress value=&quot;10&quot; max=&quot;100&quot; class=&quot;domprogress&quot;&gt;&lt;/progress&gt;&lt;span class=&quot;dompercent&quot;&gt;10%&lt;/span&gt;&lt;span class=&quot;domsize&quot;&gt;0/1.86GB&lt;/span&gt;&lt;/td&gt;&lt;td class=&quot;filestatus&quot;&gt;&lt;span class=&quot;domstatus&quot;&gt;排队中&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;trmsg&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">colspan</span>=<span class=\"string\">&quot;3&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;tdmsg&quot;</span>&gt;</span>请选择要上传的文件! 技术支持QQ：1205352402<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;&#123; &#123; static_url(&#x27;js/jquery-2.0.3.min.js&#x27;) &#125; &#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;&#123; &#123; static_url(&#x27;js/spark-md5.js&#x27;) &#125; &#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这里用到了html5的一个标签 <code>&lt;progress&gt;</code>，用来刻画上传的进度</p>\n<h3 id=\"js\"><a href=\"#js\" class=\"headerlink\" title=\"js\"></a>js</h3><p>引入jquery库和一些需要的库，这些都放在 <strong>static&#x2F;js</strong> 目录下</p>\n<p>这里需要一个md5加密的js库，点击<a href=\"https://raw.githubusercontent.com/satazor/SparkMD5/master/spark-md5.js\">这里</a></p>\n<p>下面的代码暂时写在网页中，用来控制界面样式，当选中上传的文件时，界面会有一些变化。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    $(<span class=\"string\">&quot;#btnselect&quot;</span>).<span class=\"title function_\">click</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        $(<span class=\"string\">&quot;#fileselect&quot;</span>).<span class=\"title function_\">click</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    $(<span class=\"string\">&quot;#fileselect&quot;</span>).<span class=\"title function_\">change</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> files = <span class=\"variable language_\">this</span>.<span class=\"property\">files</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">if</span>(files.<span class=\"property\">length</span> &gt; <span class=\"number\">0</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            $(<span class=\"string\">&quot;#trmsg&quot;</span>).<span class=\"title function_\">remove</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">            $(files).<span class=\"title function_\">each</span>(<span class=\"keyword\">function</span>(<span class=\"params\">index, item</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(index, item);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">var</span> filesize = <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">if</span>((item.<span class=\"property\">size</span> / <span class=\"number\">1024</span> / <span class=\"number\">1024</span> / <span class=\"number\">1024</span>) &gt;= <span class=\"number\">1</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    filesize = (item.<span class=\"property\">size</span> / <span class=\"number\">1024</span> / <span class=\"number\">1024</span> / <span class=\"number\">1024</span>).<span class=\"title function_\">toFixed</span>(<span class=\"number\">2</span>) + <span class=\"string\">&quot;GB&quot;</span>; <span class=\"comment\">// b=&gt;kb=&gt;mb=&gt;gb</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>((item.<span class=\"property\">size</span> / <span class=\"number\">1024</span> / <span class=\"number\">1024</span> / <span class=\"number\">1024</span>) &lt; <span class=\"number\">1</span> &amp;&amp; (item.<span class=\"property\">size</span> / <span class=\"number\">1024</span> / <span class=\"number\">1024</span>) &gt;= <span class=\"number\">1</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    filesize = (item.<span class=\"property\">size</span> / <span class=\"number\">1024</span> / <span class=\"number\">1024</span>).<span class=\"title function_\">toFixed</span>(<span class=\"number\">2</span>) + <span class=\"string\">&quot;MB&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>((item.<span class=\"property\">size</span> / <span class=\"number\">1024</span> / <span class=\"number\">1024</span>) &lt; <span class=\"number\">1</span> &amp;&amp; (item.<span class=\"property\">size</span> / <span class=\"number\">1024</span>) &gt;= <span class=\"number\">1</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    filesize = (item.<span class=\"property\">size</span> / <span class=\"number\">1024</span>).<span class=\"title function_\">toFixed</span>(<span class=\"number\">2</span>) + <span class=\"string\">&quot;KB&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125; <span class=\"keyword\">else</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    filesize = item.<span class=\"property\">size</span> + <span class=\"string\">&quot;B&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">var</span> htmlstr = <span class=\"string\">&#x27;&lt;tr&gt;&lt;td&gt;&#x27;</span> + item.<span class=\"property\">name</span> + <span class=\"string\">&#x27;&lt;/td&gt;&lt;td&gt;&lt;progress value=&quot;0&quot; max=&quot;100&quot; class=&quot;domprogress&quot;&gt;&lt;/progress&gt;&lt;span class=&quot;dompercent&quot;&gt; 0/&#x27;</span>+filesize+<span class=\"string\">&#x27;&lt;/span&gt;&lt;span class=&quot;domtime&quot;&gt;总共耗时：0 秒&lt;/span&gt;&lt;/td&gt;&lt;td class=&quot;filestatus&quot;&gt;&lt;span class=&quot;domstatus&quot;&gt;排队中&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                $(<span class=\"string\">&quot;#filelist&quot;</span>).<span class=\"title function_\">append</span>(htmlstr);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n<p>上完css和js，选中需要上传的文件之后的界面是这样的</p>\n<p><img src=\"https://i.loli.net/2017/07/28/597aff863150c.png\" alt=\"Image 2.png\"></p>\n<p>当然也可以选择多个文件。</p>\n<h2 id=\"上传文件初次尝试\"><a href=\"#上传文件初次尝试\" class=\"headerlink\" title=\"上传文件初次尝试\"></a>上传文件初次尝试</h2><h3 id=\"前台js代码，实现异步提交文件-在上面js代码后面继续写\"><a href=\"#前台js代码，实现异步提交文件-在上面js代码后面继续写\" class=\"headerlink\" title=\"前台js代码，实现异步提交文件()在上面js代码后面继续写\"></a>前台js代码，实现异步提交文件()在上面js代码后面继续写</h3><h4 id=\"开始上传\"><a href=\"#开始上传\" class=\"headerlink\" title=\"开始上传\"></a><strong>开始上传</strong></h4><p>按钮点击事件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;#btnupload&quot;</span>).<span class=\"title function_\">click</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> files = $(<span class=\"string\">&quot;#fileselect&quot;</span>)[<span class=\"number\">0</span>].<span class=\"property\">files</span>;</span><br><span class=\"line\">    $(files).<span class=\"title function_\">each</span>(<span class=\"keyword\">function</span> (<span class=\"params\">index</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">yyupload</span>(files[index]);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>获取所有需要上传的文件，对每一个文件进行处理，将文件传给 <code>yyupload()</code>函数进行处理。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">yyupload</span>(<span class=\"params\">file</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">upload</span>(file);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>这里应给多文件进行一些处理，现在为了实现简单的文件上传，所以 <code>yyupload()</code>对文件暂时无处理，直接传给上传函数 <code>upload()</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">upload</span>(<span class=\"params\">file</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> k = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> fd = <span class=\"keyword\">new</span> <span class=\"title class_\">FormData</span>();</span><br><span class=\"line\">    fd.<span class=\"title function_\">append</span>(<span class=\"string\">&quot;file&quot;</span>, file);</span><br><span class=\"line\">    fd.<span class=\"title function_\">append</span>(<span class=\"string\">&quot;filename&quot;</span>, file.<span class=\"property\">name</span>);</span><br><span class=\"line\">    fd.<span class=\"title function_\">append</span>(<span class=\"string\">&quot;filesize&quot;</span>, file.<span class=\"property\">size</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span><br><span class=\"line\">    xhr.<span class=\"title function_\">open</span>(<span class=\"string\">&quot;post&quot;</span>, <span class=\"string\">&quot;/uploadfile&quot;</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">    xhr.<span class=\"property\">onreadystatechange</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (xhr.<span class=\"property\">readyState</span> === <span class=\"number\">4</span> &amp;&amp; xhr.<span class=\"property\">status</span> === <span class=\"number\">200</span>)&#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;上传成功&quot;</span>);</span><br><span class=\"line\">            k = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (xhr.<span class=\"property\">status</span> === <span class=\"number\">500</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(k &lt; <span class=\"number\">3</span>)&#123;</span><br><span class=\"line\">                    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;sendfinish&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                k++;</span><br><span class=\"line\">            &#125;, <span class=\"number\">3000</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    xhr.<span class=\"title function_\">send</span>(fd);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>upload()</code>函数中，使用了 <code>FormData</code>对象和 <code>XMLHttpRequest</code>对象。(<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/FormData/Using_FormData_Objects\">参考这里</a>)</p>\n<ul>\n<li><em>FormData</em> 通过FormData对象可以组装一组用 XMLHttpRequest发送请求的键&#x2F;值对。它可以更灵活方便的发送表单数据，因为可以独立于表单使用</li>\n<li><em>XMLHttpRequest</em> 是一个API, 它为客户端提供了在客户端和服务器之间传输数据的功能。它提供了一个通过 URL 来获取数据的简单方式，并且不会使整个页面刷新。这使得网页只更新一部分页面而不会打扰到用户。XMLHttpRequest 在 AJAX 中被大量使用。</li>\n</ul>\n<h3 id=\"后台处理\"><a href=\"#后台处理\" class=\"headerlink\" title=\"后台处理\"></a>后台处理</h3><h4 id=\"处理视图-UploadJobHandler\"><a href=\"#处理视图-UploadJobHandler\" class=\"headerlink\" title=\"处理视图 UploadJobHandler\"></a>处理视图 <code>UploadJobHandler</code></h4><p>在 <strong>views.py</strong>中创建处理视图 <code>UploadJobHandler</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> settings <span class=\"keyword\">import</span> BASE_DIR</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">UploadJobHandler</span>(tornado.web.RequestHandler):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">post</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        file_metas = self.request.files[<span class=\"string\">&quot;file&quot;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(file_metas) &lt;= <span class=\"number\">0</span>:</span><br><span class=\"line\">            self.write(<span class=\"string\">&quot;获取服务器上传文件失败！&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        metas = file_metas[<span class=\"number\">0</span>]</span><br><span class=\"line\">        filename = self.get_argument(<span class=\"string\">&quot;filename&quot;</span>)</span><br><span class=\"line\">        tempfilename = filename + <span class=\"string\">&quot;.part&quot;</span></span><br><span class=\"line\">        newname = os.path.join(BASE_DIR, <span class=\"string\">&quot;file_upload/static/upload/&quot;</span> + tempfilename)</span><br><span class=\"line\">        <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(newname, <span class=\"string\">&quot;wb+&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">            f.write(metas[<span class=\"string\">&quot;body&quot;</span>])</span><br><span class=\"line\">        self.write(<span class=\"string\">&quot;finished!&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n\n<p>这里将上传的文件添加后缀 <strong>.part</strong>，放在 <code>static/upload/</code> 下。</p>\n<h4 id=\"添加路由-uploadfile\"><a href=\"#添加路由-uploadfile\" class=\"headerlink\" title=\"添加路由 /uploadfile\"></a>添加路由 <code>/uploadfile</code></h4><p>在 <strong>urls.py</strong> 添加 <code>/uploadfile</code> 路由，其对应的视图为 <code>UploadJobHandler</code>。添加之后 <strong>urls.py</strong>中代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding: utf-8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> tornado.web</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> settings <span class=\"keyword\">import</span> settings</span><br><span class=\"line\"><span class=\"keyword\">from</span> views <span class=\"keyword\">import</span> MainHandler, UploadJobHandler</span><br><span class=\"line\"></span><br><span class=\"line\">application = tornado.web.Application([</span><br><span class=\"line\">    (<span class=\"string\">r&#x27;^/&#x27;</span>, MainHandler),</span><br><span class=\"line\">    (<span class=\"string\">r&#x27;^/uploadfile$&#x27;</span>, UploadJobHandler),</span><br><span class=\"line\"></span><br><span class=\"line\">], **settings)</span><br></pre></td></tr></table></figure>\n\n<p>代码编写完成之后，重启服务。此时文件结构如下图：<br><img src=\"https://i.loli.net/2017/07/28/597b0ade0d554.png\" alt=\"Image 3.png\"></p>\n","site":{"data":{}},"excerpt":"<p>这一步实现了tornado基本的文件上传和保存，使用js的Ajax异步提交文件表单</p>\n<h2 id=\"前台界面\"><a href=\"#前台界面\" class=\"headerlink\" title=\"前台界面\"></a>前台界面</h2><h3 id=\"css样式表\"><a href=\"#css样式表\" class=\"headerlink\" title=\"css样式表\"></a>css样式表</h3><p>在 <strong>static&#x2F;css</strong> 目录下创建样式表 <strong>stylesheet.css</strong></p>","more":"<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">&quot;微软雅黑&quot;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">padding-top</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding-left</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.container</span> <span class=\"selector-tag\">input</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">120px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: blue;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: white;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-right</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">outline</span>: none;</span><br><span class=\"line\">    <span class=\"attribute\">cursor</span>: pointer;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#filelist</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">800px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: solid <span class=\"number\">1px</span> <span class=\"number\">#eee</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-collapse</span>: collapse;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#filelist</span> <span class=\"selector-tag\">td</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">border-bottom</span>: solid <span class=\"number\">1px</span> <span class=\"number\">#eee</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">12px</span>;</span><br><span class=\"line\">    <span class=\"comment\">/*line-height:30px ;*/</span></span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0</span> <span class=\"number\">3px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.filename</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.filestatus</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.fileprogress</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.domprogress</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">320px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.domsize</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#tdmsg</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#fileselect</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">span</span><span class=\"selector-class\">.domtime</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>:block;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h3><p>在 <strong>temples</strong> 中创建上传文件界面  <strong>upload.html</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&#123; &#123; static_url(&#x27;css/stylesheet.css&#x27;) &#125; &#125;&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;file&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;fileselect&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;fileselect&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">multiple</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;btnselect&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;选择上传的文件&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;btnupload&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;开始上传&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">cellspacing</span>=<span class=\"string\">&quot;0&quot;</span> <span class=\"attr\">cellpadding</span>=<span class=\"string\">&quot;0&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;filelist&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;filename&quot;</span>&gt;</span>文件名<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fileprogress&quot;</span>&gt;</span>进度<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;filestatus&quot;</span>&gt;</span>状态<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--&lt;tr&gt;&lt;td&gt;人民的名义.avi &lt;/td&gt;&lt;td&gt;&lt;progress value=&quot;10&quot; max=&quot;100&quot; class=&quot;domprogress&quot;&gt;&lt;/progress&gt;&lt;span class=&quot;dompercent&quot;&gt;10%&lt;/span&gt;&lt;span class=&quot;domsize&quot;&gt;0/1.86GB&lt;/span&gt;&lt;/td&gt;&lt;td class=&quot;filestatus&quot;&gt;&lt;span class=&quot;domstatus&quot;&gt;排队中&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;trmsg&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">colspan</span>=<span class=\"string\">&quot;3&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;tdmsg&quot;</span>&gt;</span>请选择要上传的文件! 技术支持QQ：1205352402<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;&#123; &#123; static_url(&#x27;js/jquery-2.0.3.min.js&#x27;) &#125; &#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;&#123; &#123; static_url(&#x27;js/spark-md5.js&#x27;) &#125; &#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这里用到了html5的一个标签 <code>&lt;progress&gt;</code>，用来刻画上传的进度</p>\n<h3 id=\"js\"><a href=\"#js\" class=\"headerlink\" title=\"js\"></a>js</h3><p>引入jquery库和一些需要的库，这些都放在 <strong>static&#x2F;js</strong> 目录下</p>\n<p>这里需要一个md5加密的js库，点击<a href=\"https://raw.githubusercontent.com/satazor/SparkMD5/master/spark-md5.js\">这里</a></p>\n<p>下面的代码暂时写在网页中，用来控制界面样式，当选中上传的文件时，界面会有一些变化。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    $(<span class=\"string\">&quot;#btnselect&quot;</span>).<span class=\"title function_\">click</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        $(<span class=\"string\">&quot;#fileselect&quot;</span>).<span class=\"title function_\">click</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    $(<span class=\"string\">&quot;#fileselect&quot;</span>).<span class=\"title function_\">change</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> files = <span class=\"variable language_\">this</span>.<span class=\"property\">files</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">if</span>(files.<span class=\"property\">length</span> &gt; <span class=\"number\">0</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            $(<span class=\"string\">&quot;#trmsg&quot;</span>).<span class=\"title function_\">remove</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">            $(files).<span class=\"title function_\">each</span>(<span class=\"keyword\">function</span>(<span class=\"params\">index, item</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(index, item);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">var</span> filesize = <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">if</span>((item.<span class=\"property\">size</span> / <span class=\"number\">1024</span> / <span class=\"number\">1024</span> / <span class=\"number\">1024</span>) &gt;= <span class=\"number\">1</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    filesize = (item.<span class=\"property\">size</span> / <span class=\"number\">1024</span> / <span class=\"number\">1024</span> / <span class=\"number\">1024</span>).<span class=\"title function_\">toFixed</span>(<span class=\"number\">2</span>) + <span class=\"string\">&quot;GB&quot;</span>; <span class=\"comment\">// b=&gt;kb=&gt;mb=&gt;gb</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>((item.<span class=\"property\">size</span> / <span class=\"number\">1024</span> / <span class=\"number\">1024</span> / <span class=\"number\">1024</span>) &lt; <span class=\"number\">1</span> &amp;&amp; (item.<span class=\"property\">size</span> / <span class=\"number\">1024</span> / <span class=\"number\">1024</span>) &gt;= <span class=\"number\">1</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    filesize = (item.<span class=\"property\">size</span> / <span class=\"number\">1024</span> / <span class=\"number\">1024</span>).<span class=\"title function_\">toFixed</span>(<span class=\"number\">2</span>) + <span class=\"string\">&quot;MB&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>((item.<span class=\"property\">size</span> / <span class=\"number\">1024</span> / <span class=\"number\">1024</span>) &lt; <span class=\"number\">1</span> &amp;&amp; (item.<span class=\"property\">size</span> / <span class=\"number\">1024</span>) &gt;= <span class=\"number\">1</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    filesize = (item.<span class=\"property\">size</span> / <span class=\"number\">1024</span>).<span class=\"title function_\">toFixed</span>(<span class=\"number\">2</span>) + <span class=\"string\">&quot;KB&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125; <span class=\"keyword\">else</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    filesize = item.<span class=\"property\">size</span> + <span class=\"string\">&quot;B&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">var</span> htmlstr = <span class=\"string\">&#x27;&lt;tr&gt;&lt;td&gt;&#x27;</span> + item.<span class=\"property\">name</span> + <span class=\"string\">&#x27;&lt;/td&gt;&lt;td&gt;&lt;progress value=&quot;0&quot; max=&quot;100&quot; class=&quot;domprogress&quot;&gt;&lt;/progress&gt;&lt;span class=&quot;dompercent&quot;&gt; 0/&#x27;</span>+filesize+<span class=\"string\">&#x27;&lt;/span&gt;&lt;span class=&quot;domtime&quot;&gt;总共耗时：0 秒&lt;/span&gt;&lt;/td&gt;&lt;td class=&quot;filestatus&quot;&gt;&lt;span class=&quot;domstatus&quot;&gt;排队中&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                $(<span class=\"string\">&quot;#filelist&quot;</span>).<span class=\"title function_\">append</span>(htmlstr);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n<p>上完css和js，选中需要上传的文件之后的界面是这样的</p>\n<p><img src=\"https://i.loli.net/2017/07/28/597aff863150c.png\" alt=\"Image 2.png\"></p>\n<p>当然也可以选择多个文件。</p>\n<h2 id=\"上传文件初次尝试\"><a href=\"#上传文件初次尝试\" class=\"headerlink\" title=\"上传文件初次尝试\"></a>上传文件初次尝试</h2><h3 id=\"前台js代码，实现异步提交文件-在上面js代码后面继续写\"><a href=\"#前台js代码，实现异步提交文件-在上面js代码后面继续写\" class=\"headerlink\" title=\"前台js代码，实现异步提交文件()在上面js代码后面继续写\"></a>前台js代码，实现异步提交文件()在上面js代码后面继续写</h3><h4 id=\"开始上传\"><a href=\"#开始上传\" class=\"headerlink\" title=\"开始上传\"></a><strong>开始上传</strong></h4><p>按钮点击事件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;#btnupload&quot;</span>).<span class=\"title function_\">click</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> files = $(<span class=\"string\">&quot;#fileselect&quot;</span>)[<span class=\"number\">0</span>].<span class=\"property\">files</span>;</span><br><span class=\"line\">    $(files).<span class=\"title function_\">each</span>(<span class=\"keyword\">function</span> (<span class=\"params\">index</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">yyupload</span>(files[index]);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>获取所有需要上传的文件，对每一个文件进行处理，将文件传给 <code>yyupload()</code>函数进行处理。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">yyupload</span>(<span class=\"params\">file</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">upload</span>(file);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>这里应给多文件进行一些处理，现在为了实现简单的文件上传，所以 <code>yyupload()</code>对文件暂时无处理，直接传给上传函数 <code>upload()</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">upload</span>(<span class=\"params\">file</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> k = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> fd = <span class=\"keyword\">new</span> <span class=\"title class_\">FormData</span>();</span><br><span class=\"line\">    fd.<span class=\"title function_\">append</span>(<span class=\"string\">&quot;file&quot;</span>, file);</span><br><span class=\"line\">    fd.<span class=\"title function_\">append</span>(<span class=\"string\">&quot;filename&quot;</span>, file.<span class=\"property\">name</span>);</span><br><span class=\"line\">    fd.<span class=\"title function_\">append</span>(<span class=\"string\">&quot;filesize&quot;</span>, file.<span class=\"property\">size</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span><br><span class=\"line\">    xhr.<span class=\"title function_\">open</span>(<span class=\"string\">&quot;post&quot;</span>, <span class=\"string\">&quot;/uploadfile&quot;</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">    xhr.<span class=\"property\">onreadystatechange</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (xhr.<span class=\"property\">readyState</span> === <span class=\"number\">4</span> &amp;&amp; xhr.<span class=\"property\">status</span> === <span class=\"number\">200</span>)&#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;上传成功&quot;</span>);</span><br><span class=\"line\">            k = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (xhr.<span class=\"property\">status</span> === <span class=\"number\">500</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(k &lt; <span class=\"number\">3</span>)&#123;</span><br><span class=\"line\">                    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;sendfinish&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                k++;</span><br><span class=\"line\">            &#125;, <span class=\"number\">3000</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    xhr.<span class=\"title function_\">send</span>(fd);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>upload()</code>函数中，使用了 <code>FormData</code>对象和 <code>XMLHttpRequest</code>对象。(<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/FormData/Using_FormData_Objects\">参考这里</a>)</p>\n<ul>\n<li><em>FormData</em> 通过FormData对象可以组装一组用 XMLHttpRequest发送请求的键&#x2F;值对。它可以更灵活方便的发送表单数据，因为可以独立于表单使用</li>\n<li><em>XMLHttpRequest</em> 是一个API, 它为客户端提供了在客户端和服务器之间传输数据的功能。它提供了一个通过 URL 来获取数据的简单方式，并且不会使整个页面刷新。这使得网页只更新一部分页面而不会打扰到用户。XMLHttpRequest 在 AJAX 中被大量使用。</li>\n</ul>\n<h3 id=\"后台处理\"><a href=\"#后台处理\" class=\"headerlink\" title=\"后台处理\"></a>后台处理</h3><h4 id=\"处理视图-UploadJobHandler\"><a href=\"#处理视图-UploadJobHandler\" class=\"headerlink\" title=\"处理视图 UploadJobHandler\"></a>处理视图 <code>UploadJobHandler</code></h4><p>在 <strong>views.py</strong>中创建处理视图 <code>UploadJobHandler</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> settings <span class=\"keyword\">import</span> BASE_DIR</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">UploadJobHandler</span>(tornado.web.RequestHandler):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">post</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        file_metas = self.request.files[<span class=\"string\">&quot;file&quot;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(file_metas) &lt;= <span class=\"number\">0</span>:</span><br><span class=\"line\">            self.write(<span class=\"string\">&quot;获取服务器上传文件失败！&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        metas = file_metas[<span class=\"number\">0</span>]</span><br><span class=\"line\">        filename = self.get_argument(<span class=\"string\">&quot;filename&quot;</span>)</span><br><span class=\"line\">        tempfilename = filename + <span class=\"string\">&quot;.part&quot;</span></span><br><span class=\"line\">        newname = os.path.join(BASE_DIR, <span class=\"string\">&quot;file_upload/static/upload/&quot;</span> + tempfilename)</span><br><span class=\"line\">        <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(newname, <span class=\"string\">&quot;wb+&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">            f.write(metas[<span class=\"string\">&quot;body&quot;</span>])</span><br><span class=\"line\">        self.write(<span class=\"string\">&quot;finished!&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n\n<p>这里将上传的文件添加后缀 <strong>.part</strong>，放在 <code>static/upload/</code> 下。</p>\n<h4 id=\"添加路由-uploadfile\"><a href=\"#添加路由-uploadfile\" class=\"headerlink\" title=\"添加路由 /uploadfile\"></a>添加路由 <code>/uploadfile</code></h4><p>在 <strong>urls.py</strong> 添加 <code>/uploadfile</code> 路由，其对应的视图为 <code>UploadJobHandler</code>。添加之后 <strong>urls.py</strong>中代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding: utf-8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> tornado.web</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> settings <span class=\"keyword\">import</span> settings</span><br><span class=\"line\"><span class=\"keyword\">from</span> views <span class=\"keyword\">import</span> MainHandler, UploadJobHandler</span><br><span class=\"line\"></span><br><span class=\"line\">application = tornado.web.Application([</span><br><span class=\"line\">    (<span class=\"string\">r&#x27;^/&#x27;</span>, MainHandler),</span><br><span class=\"line\">    (<span class=\"string\">r&#x27;^/uploadfile$&#x27;</span>, UploadJobHandler),</span><br><span class=\"line\"></span><br><span class=\"line\">], **settings)</span><br></pre></td></tr></table></figure>\n\n<p>代码编写完成之后，重启服务。此时文件结构如下图：<br><img src=\"https://i.loli.net/2017/07/28/597b0ade0d554.png\" alt=\"Image 3.png\"></p>"},{"title":"实现python tornado框架下的大文件秒传等技术（3）","date":"2017-07-28T16:00:00.000Z","_content":"\n这一步实现了文件上传(包括批量)、断点续传、大文件(伪)秒传。但仍然存在不足，待改进。\n\n\n整体实现的思路是这样：\n\n- 首先是获取文件加密字符串\n- 根据md5检查文件的状态：已存在、未完成、不存在。\n- 对于已存在的文件，这是直接就显示上传完成。\n- 未完成文件和不存在的文件进行分片上传。\n- 后台进行文件的保存方式是追加的方式，生成临时文件.part。\n- 上传完成之后生成md5后缀为.ok的空文件，待检查使用。同时经上传的临时文件改成原来的名字。\n\n<!--more-->\n\n## 获取文件加密字符串\n\n更改`yyupload()`的参数个数，一下所有的js函数，均写在该函数内部(注意缩进)\n\n\n```js\nfunction yyupload(file, dommsg, dompercentmb, domprogress, domtime, fn) {\n    var startTime = new Date();\n    calculate(file);\n    // 获取文件加密字符串\n    function calculate(file) {\n\n        var fileReader = new FileReader();\n        var chunkSize = 1024 * 1024 * 7;  // 每次读取7M\n        var chunkCount = Math.ceil(file.size / chunkSize);  // 向上取整\n        var currentChunk = 0;  // 当前索引块\n        var spart = new SparkMD5();\n\n        loadNext();\n\n        fileReader.onload = function (e) {\n            dommsg.text(\"正在检查文件：\" + (currentChunk + 1) + \"/\" + chunkCount);\n            spart.appendBinary(e.target.result);\n            currentChunk++;\n            if(currentChunk < chunkCount){\n                loadNext();\n            }else {\n                var md5value = spart.end();\n                console.log(\"文件加密结束，密钥为：\" + md5value);\n                checkfile(md5value, file)\n            }\n        };\n\n        function loadNext() {\n            var start = currentChunk * chunkSize;\n            var end = start + chunkSize >= file.size ? file.size : start + chunkSize;\n            fileReader.readAsBinaryString(file.slice(start, end))\n        }\n    }\n\n}\n```\n\n文件加密结束后，根据MD5密钥，调用`checkfile()`函数检查服务器上有没有该文件\n\n## 检查服务器上是否存在文件\n\n这个检查函数是比较重要的分叉口，根据检查的结果，对文件的处理是不同的。\n\n\n```js\n    function checkfile(md5value, file){\n        var fd = new FormData();\n        fd.append(\"filename\", file.name);\n        fd.append(\"md5value\", md5value);\n        var xhr = new XMLHttpRequest();\n        xhr.open(\"post\", \"/checkfile\", true);\n        \n        xhr.onreadystatechange = function (res) {\n            if(xhr.readyState === 4 && xhr.status === 200){\n                var jsonbj = JSON.parse(xhr.responseText);\n\n                switch (jsonbj.flag){\n                    case 0:\n                    case 1: doUpload(file, md5value, jsonbj.startindex); break;\n                    case 2: secondUpload(file); break;\n                }\n                repeatcount = 0;\n            } else if(xhr.status === 500) {\n                setTimeout(function() {\n                    if(repeatcount < 3) {\n                        checkfile(md5value, file);\n                    }\n                    repeatcount++;\n                }, 3000);\n            }\n        };\n        xhr.send(fd);\n    }\n```\n\n\n`swich()`处理传回来的参数：\n\n- 0 服务器上不存在该文件\n- 1 服务器上存在该文件，但是并未上传完成\n- 2 服务器上存在完整的文件，不需要再上传了\n\n对于不需要上传的文件，我们可以之后显示上传完成，造成“秒传”的景象。\n\n\n```js\n    //实现秒传功能\n    function secondUpload(file)\n    {\n        var timerange = (new Date().getTime() - startTime.getTime()) / 1000;\n        domtime.text(\"耗时\" + timerange + \"秒\");\n        //显示结果进度\n        var percent =100;\n        dommsg.text(percent.toFixed(2) + \"%\");\n        domprogress.val(percent);\n        var total = file.size;\n        if (total > 1024 * 1024 * 1024) {\n            dompercentmb.text((total / 1024 / 1024 / 1024).toFixed(2) + \"GB/\" + (total / 1024 / 1024 / 1024).toFixed(2) + \"GB\");\n        } else if (total > 1024 * 1024) {\n            dompercentmb.text((total / 1024 / 1024).toFixed(2) + \"MB/\" + (total / 1024 / 1024).toFixed(2) + \"MB\");\n        } else if (total > 1024 && total < 1024 * 1024) {\n            dompercentmb.text((total / 1024).toFixed(2) + \"KB/\" + (total / 1024).toFixed(2) + \"KB\");\n        } else {\n            dompercentmb.text((total).toFixed(2) + \"B/\" + (total).toFixed(2) + \"B\");\n        }\n\n    }\n```\n\n\n编写**views.py**文件中的`CheckFileHandler`\n\n\n```python\nclass CheckFileHandler(tornado.web.RequestHandler):\n\n    def post(self):\n        md5value = self.get_argument(\"md5value\")\n        filename = self.get_argument(\"filename\")\n        path_part = os.path.join(BASE_DIR, \"file_upload/static/upload/\" + md5value + \".part\")\n        path_ok = os.path.join(BASE_DIR, \"file_upload/static/upload/\" + md5value + \".ok\")\n\n        if os.path.isfile(path_ok):  # 文件上传结束\n            flag = 2\n            ret = {\"flag\": flag}\n        elif os.path.isfile(path_part):\n            flag = 1\n            startindex = os.path.getsize(path_part)\n            ret = {\"flag\": flag, \"startindex\": startindex}\n        else:\n            flag = 0\n            ret = {\"flag\": flag, \"startindex\": 0}\n\n        self.write(ret)\n```\n\n\n编写**urls.py**文件中的路由`/checkfile`\n\n\n```python\n    (r'^/checkfile$', CheckFileHandler),\n```\n\n当然别忘了`from views import CheckFileHandler,`\n\n\n## 上传文件处理\n\n这一块是处理的核心，js将文件分片，传给后台进行保存。不说废话，上代码：\n\n\n```js\n    function doUpload(file, md5value, startindex) {\n        var reader = new FileReader();\n        var step = 1024 * 400;  // 每次读取400KB\n        var cuLoaded = startindex;\n        var total = file.size;\n\n        reader.onload = function (e) {\n            var result = reader.result;\n            var loaded = e.loaded;\n            uploadFile(result, cuLoaded, function () {\n                cuLoaded += loaded;\n                var timerange = (new Date().getTime() - startTime.getTime()) / 1000;\n\n                if (total > 1024 * 1024 * 1024) {\n                    dompercentmb.text((cuLoaded / 1024 / 1024 / 1024).toFixed(2) + \"GB/\" + (total / 1024 / 1024 / 1024).toFixed(2) + \"GB\");\n                } else if (total > 1024 * 1024) {\n                    dompercentmb.text((cuLoaded / 1024 / 1024).toFixed(2) + \"MB/\" + (total / 1024 / 1024).toFixed(2) + \"MB\");\n                } else if (total > 1024 && total < 1024 * 1024) {\n                    dompercentmb.text((cuLoaded / 1024).toFixed(2) + \"KB/\" + (total / 1024).toFixed(2) + \"KB\");\n                } else {\n                    dompercentmb.text((cuLoaded).toFixed(2) + \"B/\" + (total).toFixed(2) + \"B\");\n                }\n                domtime.text(\"耗时\" + timerange + \"秒\");\n                domtime.text(\"耗时\" + timerange + \"秒\");\n                if (cuLoaded < total) {\n                    readBlob(cuLoaded);\n                } else {\n                    console.log('总共用时：' + timerange);\n                    cuLoaded = total;\n                    sendfinish(); //告知服务器上传完毕\n                    domtime.text(\"上传完成,总共耗时\" + timerange + \"秒\");\n                }\n                //显示结果进度\n                var percent = (cuLoaded / total) * 100;\n                dommsg.text(percent.toFixed(2) + \"%\");\n                domprogress.val(percent);\n            });\n        };\n        readBlob(cuLoaded);\n        //指定开始位置，分块读取文件\n        function readBlob(start) {\n            //指定开始位置和结束位置读取文件\n            var end = start + step >= file.size ? file.size : start + step;\n            var blob = file.slice(start, end); //读取开始位置和结束位置的文件\n            reader.readAsArrayBuffer(blob); //读取切割好的文件块\n        }\n        //继续\n        function containue() {\n            readBlob(cuLoaded);\n        }\n\n        ……\n    }\n```\n\n\n文件上传结束时，通知服务器：（**……**表示连接着的）\n\n\n```js\n        ……\n\n        var k = 0;\n        function sendfinish() {\n            var fd = new FormData();\n            fd.append(\"filename\", file.name);\n            fd.append(\"md5value\", md5value);\n            fd.append(\"totalsize\", file.size);\n\n            var xhr = new XMLHttpRequest();\n            xhr.open(\"post\", \"/finishupload\", true);\n            xhr.onreadystatechange = function () {\n                if (xhr.readyState === 4 && xhr.status === 200){\n                    if(fn){\n                        fn();\n                    }\n                    k = 0;\n                }else if (xhr.status === 500){\n                    setTimeout(function () {\n                        if(k<3){\n                            sendfinish();\n                        }\n                        k++;\n                    }, 300);\n                }\n            };\n            xhr.send(fd);\n        }\n        ……\n```\n\n将分片文件上传到服务器：\n\n\n```js\n        ……\n        var m = 0;\n        function uploadFile(result, startIndex, onSuccess) {\n            var blob = new Blob([result]);\n            var fd = new FormData();\n            fd.append(\"file\", blob);\n            fd.append(\"md5value\", md5value);\n            fd.append(\"filename\", file.name);\n            fd.append(\"filesize\", file.size);\n            fd.append(\"loaded\", startIndex);\n\n            var xhr = new XMLHttpRequest();\n            xhr.open(\"post\", \"/uploadfile\", true);\n            xhr.onreadystatechange = function () {\n                if (xhr.readyState === 4 && xhr.status === 200){\n                    m = 0;\n                    if(onSuccess) onSuccess();\n                }else if (xhr.status === 500){\n                    setTimeout(function () {\n                        if(m < 3){\n                            console.log(\"sendfinish\");\n                        }\n                        m++;\n                    }, 1000);\n                }\n            };\n            xhr.send(fd);\n        }\n```\n\n\n这里有两个后台处理程序。\n\n在views.py中编写 `UploadJobHandler`、 `FinishUpload`\n\n\n```python\nclass UploadJobHandler(tornado.web.RequestHandler):\n\n    def post(self):\n        file_metas = self.request.files[\"file\"]\n        if len(file_metas) <= 0:\n            self.write(\"获取服务器上传文件失败！\")\n\n        metas = file_metas[0]\n        md5value = self.get_argument(\"md5value\")\n        tempfilename = md5value + \".part\"\n        newname = os.path.join(BASE_DIR, \"file_upload/static/upload/\" + tempfilename)\n\n        with open(newname, \"ab\") as f:  # 以二机制方式追加\n            f.write(metas[\"body\"])\n        self.write(\"finished!\")\n\n    def get(self, *args, **kwargs):\n        self.write(\"ok\")\n\n\nclass FinishUpload(tornado.web.RequestHandler):\n\n    def post(self, *args, **kwargs):\n        md5value = self.get_argument(\"md5value\")\n        filename = self.get_argument(\"filename\")\n        totalsize = self.get_argument(\"totalsize\")\n\n        path_part = os.path.join(BASE_DIR, \"file_upload/static/upload/\" + md5value + \".part\")\n        path_ok = os.path.join(BASE_DIR, \"file_upload/static/upload/\" + md5value + \".ok\")\n        old_name = os.path.join(BASE_DIR, \"file_upload/static/upload/\" + filename)\n\n        with open(path_ok, \"w\") as f:\n            print \"创建ok文件\"\n        os.rename(path_part, old_name)\n        self.write(\"{'data': 'ok'}\")\n```\n\n注意：\n\n- 文件在上传时，临时文件名为 md5value + \".part\"\n- 上传成功后，创建空文件 md5value + \".ok\"\n- 文件保存的时候，这里是使用二进制方式追加，否则保存的文件不可用了。\n\n\n编写**urls.py**文件中的路由`/uploadfile`、`/finishupload`\n\n```python\n\n    from views import UploadJobHandler, FinishUpload\n\n    (r'^/uploadfile$', UploadJobHandler),\n    (r'^/finishupload$', FinishUpload),\n```\n\n\n效果如下图\n\n\n![1.png](https://i.loli.net/2017/07/30/597d5287d6435.png)\n![Image 2.png](https://ooo.0o0.ooo/2017/07/30/597d5287e975e.png)\n![Image 3.png](https://i.loli.net/2017/07/30/597d5287ea9ce.png)\n\n\n## 不足\n\n- 大文件上传，速度仍是不理想\n- 对于大文件，断点续传，可能导致文件不能用\n- 上传速度受网速影响\n\n接下来该改进了，到此，以上参考的是[大文件分块上传技术分享(c#实现)](https://www.idaima.com/article/17099)，特此感谢分享。","source":"_posts/实现python tornado框架下的大文件秒传等技术（3）.md","raw":"---\ntitle: 实现python tornado框架下的大文件秒传等技术（3）\ndate: 2017-07-29\ntags: [tornado, python, 技术]\n---\n\n这一步实现了文件上传(包括批量)、断点续传、大文件(伪)秒传。但仍然存在不足，待改进。\n\n\n整体实现的思路是这样：\n\n- 首先是获取文件加密字符串\n- 根据md5检查文件的状态：已存在、未完成、不存在。\n- 对于已存在的文件，这是直接就显示上传完成。\n- 未完成文件和不存在的文件进行分片上传。\n- 后台进行文件的保存方式是追加的方式，生成临时文件.part。\n- 上传完成之后生成md5后缀为.ok的空文件，待检查使用。同时经上传的临时文件改成原来的名字。\n\n<!--more-->\n\n## 获取文件加密字符串\n\n更改`yyupload()`的参数个数，一下所有的js函数，均写在该函数内部(注意缩进)\n\n\n```js\nfunction yyupload(file, dommsg, dompercentmb, domprogress, domtime, fn) {\n    var startTime = new Date();\n    calculate(file);\n    // 获取文件加密字符串\n    function calculate(file) {\n\n        var fileReader = new FileReader();\n        var chunkSize = 1024 * 1024 * 7;  // 每次读取7M\n        var chunkCount = Math.ceil(file.size / chunkSize);  // 向上取整\n        var currentChunk = 0;  // 当前索引块\n        var spart = new SparkMD5();\n\n        loadNext();\n\n        fileReader.onload = function (e) {\n            dommsg.text(\"正在检查文件：\" + (currentChunk + 1) + \"/\" + chunkCount);\n            spart.appendBinary(e.target.result);\n            currentChunk++;\n            if(currentChunk < chunkCount){\n                loadNext();\n            }else {\n                var md5value = spart.end();\n                console.log(\"文件加密结束，密钥为：\" + md5value);\n                checkfile(md5value, file)\n            }\n        };\n\n        function loadNext() {\n            var start = currentChunk * chunkSize;\n            var end = start + chunkSize >= file.size ? file.size : start + chunkSize;\n            fileReader.readAsBinaryString(file.slice(start, end))\n        }\n    }\n\n}\n```\n\n文件加密结束后，根据MD5密钥，调用`checkfile()`函数检查服务器上有没有该文件\n\n## 检查服务器上是否存在文件\n\n这个检查函数是比较重要的分叉口，根据检查的结果，对文件的处理是不同的。\n\n\n```js\n    function checkfile(md5value, file){\n        var fd = new FormData();\n        fd.append(\"filename\", file.name);\n        fd.append(\"md5value\", md5value);\n        var xhr = new XMLHttpRequest();\n        xhr.open(\"post\", \"/checkfile\", true);\n        \n        xhr.onreadystatechange = function (res) {\n            if(xhr.readyState === 4 && xhr.status === 200){\n                var jsonbj = JSON.parse(xhr.responseText);\n\n                switch (jsonbj.flag){\n                    case 0:\n                    case 1: doUpload(file, md5value, jsonbj.startindex); break;\n                    case 2: secondUpload(file); break;\n                }\n                repeatcount = 0;\n            } else if(xhr.status === 500) {\n                setTimeout(function() {\n                    if(repeatcount < 3) {\n                        checkfile(md5value, file);\n                    }\n                    repeatcount++;\n                }, 3000);\n            }\n        };\n        xhr.send(fd);\n    }\n```\n\n\n`swich()`处理传回来的参数：\n\n- 0 服务器上不存在该文件\n- 1 服务器上存在该文件，但是并未上传完成\n- 2 服务器上存在完整的文件，不需要再上传了\n\n对于不需要上传的文件，我们可以之后显示上传完成，造成“秒传”的景象。\n\n\n```js\n    //实现秒传功能\n    function secondUpload(file)\n    {\n        var timerange = (new Date().getTime() - startTime.getTime()) / 1000;\n        domtime.text(\"耗时\" + timerange + \"秒\");\n        //显示结果进度\n        var percent =100;\n        dommsg.text(percent.toFixed(2) + \"%\");\n        domprogress.val(percent);\n        var total = file.size;\n        if (total > 1024 * 1024 * 1024) {\n            dompercentmb.text((total / 1024 / 1024 / 1024).toFixed(2) + \"GB/\" + (total / 1024 / 1024 / 1024).toFixed(2) + \"GB\");\n        } else if (total > 1024 * 1024) {\n            dompercentmb.text((total / 1024 / 1024).toFixed(2) + \"MB/\" + (total / 1024 / 1024).toFixed(2) + \"MB\");\n        } else if (total > 1024 && total < 1024 * 1024) {\n            dompercentmb.text((total / 1024).toFixed(2) + \"KB/\" + (total / 1024).toFixed(2) + \"KB\");\n        } else {\n            dompercentmb.text((total).toFixed(2) + \"B/\" + (total).toFixed(2) + \"B\");\n        }\n\n    }\n```\n\n\n编写**views.py**文件中的`CheckFileHandler`\n\n\n```python\nclass CheckFileHandler(tornado.web.RequestHandler):\n\n    def post(self):\n        md5value = self.get_argument(\"md5value\")\n        filename = self.get_argument(\"filename\")\n        path_part = os.path.join(BASE_DIR, \"file_upload/static/upload/\" + md5value + \".part\")\n        path_ok = os.path.join(BASE_DIR, \"file_upload/static/upload/\" + md5value + \".ok\")\n\n        if os.path.isfile(path_ok):  # 文件上传结束\n            flag = 2\n            ret = {\"flag\": flag}\n        elif os.path.isfile(path_part):\n            flag = 1\n            startindex = os.path.getsize(path_part)\n            ret = {\"flag\": flag, \"startindex\": startindex}\n        else:\n            flag = 0\n            ret = {\"flag\": flag, \"startindex\": 0}\n\n        self.write(ret)\n```\n\n\n编写**urls.py**文件中的路由`/checkfile`\n\n\n```python\n    (r'^/checkfile$', CheckFileHandler),\n```\n\n当然别忘了`from views import CheckFileHandler,`\n\n\n## 上传文件处理\n\n这一块是处理的核心，js将文件分片，传给后台进行保存。不说废话，上代码：\n\n\n```js\n    function doUpload(file, md5value, startindex) {\n        var reader = new FileReader();\n        var step = 1024 * 400;  // 每次读取400KB\n        var cuLoaded = startindex;\n        var total = file.size;\n\n        reader.onload = function (e) {\n            var result = reader.result;\n            var loaded = e.loaded;\n            uploadFile(result, cuLoaded, function () {\n                cuLoaded += loaded;\n                var timerange = (new Date().getTime() - startTime.getTime()) / 1000;\n\n                if (total > 1024 * 1024 * 1024) {\n                    dompercentmb.text((cuLoaded / 1024 / 1024 / 1024).toFixed(2) + \"GB/\" + (total / 1024 / 1024 / 1024).toFixed(2) + \"GB\");\n                } else if (total > 1024 * 1024) {\n                    dompercentmb.text((cuLoaded / 1024 / 1024).toFixed(2) + \"MB/\" + (total / 1024 / 1024).toFixed(2) + \"MB\");\n                } else if (total > 1024 && total < 1024 * 1024) {\n                    dompercentmb.text((cuLoaded / 1024).toFixed(2) + \"KB/\" + (total / 1024).toFixed(2) + \"KB\");\n                } else {\n                    dompercentmb.text((cuLoaded).toFixed(2) + \"B/\" + (total).toFixed(2) + \"B\");\n                }\n                domtime.text(\"耗时\" + timerange + \"秒\");\n                domtime.text(\"耗时\" + timerange + \"秒\");\n                if (cuLoaded < total) {\n                    readBlob(cuLoaded);\n                } else {\n                    console.log('总共用时：' + timerange);\n                    cuLoaded = total;\n                    sendfinish(); //告知服务器上传完毕\n                    domtime.text(\"上传完成,总共耗时\" + timerange + \"秒\");\n                }\n                //显示结果进度\n                var percent = (cuLoaded / total) * 100;\n                dommsg.text(percent.toFixed(2) + \"%\");\n                domprogress.val(percent);\n            });\n        };\n        readBlob(cuLoaded);\n        //指定开始位置，分块读取文件\n        function readBlob(start) {\n            //指定开始位置和结束位置读取文件\n            var end = start + step >= file.size ? file.size : start + step;\n            var blob = file.slice(start, end); //读取开始位置和结束位置的文件\n            reader.readAsArrayBuffer(blob); //读取切割好的文件块\n        }\n        //继续\n        function containue() {\n            readBlob(cuLoaded);\n        }\n\n        ……\n    }\n```\n\n\n文件上传结束时，通知服务器：（**……**表示连接着的）\n\n\n```js\n        ……\n\n        var k = 0;\n        function sendfinish() {\n            var fd = new FormData();\n            fd.append(\"filename\", file.name);\n            fd.append(\"md5value\", md5value);\n            fd.append(\"totalsize\", file.size);\n\n            var xhr = new XMLHttpRequest();\n            xhr.open(\"post\", \"/finishupload\", true);\n            xhr.onreadystatechange = function () {\n                if (xhr.readyState === 4 && xhr.status === 200){\n                    if(fn){\n                        fn();\n                    }\n                    k = 0;\n                }else if (xhr.status === 500){\n                    setTimeout(function () {\n                        if(k<3){\n                            sendfinish();\n                        }\n                        k++;\n                    }, 300);\n                }\n            };\n            xhr.send(fd);\n        }\n        ……\n```\n\n将分片文件上传到服务器：\n\n\n```js\n        ……\n        var m = 0;\n        function uploadFile(result, startIndex, onSuccess) {\n            var blob = new Blob([result]);\n            var fd = new FormData();\n            fd.append(\"file\", blob);\n            fd.append(\"md5value\", md5value);\n            fd.append(\"filename\", file.name);\n            fd.append(\"filesize\", file.size);\n            fd.append(\"loaded\", startIndex);\n\n            var xhr = new XMLHttpRequest();\n            xhr.open(\"post\", \"/uploadfile\", true);\n            xhr.onreadystatechange = function () {\n                if (xhr.readyState === 4 && xhr.status === 200){\n                    m = 0;\n                    if(onSuccess) onSuccess();\n                }else if (xhr.status === 500){\n                    setTimeout(function () {\n                        if(m < 3){\n                            console.log(\"sendfinish\");\n                        }\n                        m++;\n                    }, 1000);\n                }\n            };\n            xhr.send(fd);\n        }\n```\n\n\n这里有两个后台处理程序。\n\n在views.py中编写 `UploadJobHandler`、 `FinishUpload`\n\n\n```python\nclass UploadJobHandler(tornado.web.RequestHandler):\n\n    def post(self):\n        file_metas = self.request.files[\"file\"]\n        if len(file_metas) <= 0:\n            self.write(\"获取服务器上传文件失败！\")\n\n        metas = file_metas[0]\n        md5value = self.get_argument(\"md5value\")\n        tempfilename = md5value + \".part\"\n        newname = os.path.join(BASE_DIR, \"file_upload/static/upload/\" + tempfilename)\n\n        with open(newname, \"ab\") as f:  # 以二机制方式追加\n            f.write(metas[\"body\"])\n        self.write(\"finished!\")\n\n    def get(self, *args, **kwargs):\n        self.write(\"ok\")\n\n\nclass FinishUpload(tornado.web.RequestHandler):\n\n    def post(self, *args, **kwargs):\n        md5value = self.get_argument(\"md5value\")\n        filename = self.get_argument(\"filename\")\n        totalsize = self.get_argument(\"totalsize\")\n\n        path_part = os.path.join(BASE_DIR, \"file_upload/static/upload/\" + md5value + \".part\")\n        path_ok = os.path.join(BASE_DIR, \"file_upload/static/upload/\" + md5value + \".ok\")\n        old_name = os.path.join(BASE_DIR, \"file_upload/static/upload/\" + filename)\n\n        with open(path_ok, \"w\") as f:\n            print \"创建ok文件\"\n        os.rename(path_part, old_name)\n        self.write(\"{'data': 'ok'}\")\n```\n\n注意：\n\n- 文件在上传时，临时文件名为 md5value + \".part\"\n- 上传成功后，创建空文件 md5value + \".ok\"\n- 文件保存的时候，这里是使用二进制方式追加，否则保存的文件不可用了。\n\n\n编写**urls.py**文件中的路由`/uploadfile`、`/finishupload`\n\n```python\n\n    from views import UploadJobHandler, FinishUpload\n\n    (r'^/uploadfile$', UploadJobHandler),\n    (r'^/finishupload$', FinishUpload),\n```\n\n\n效果如下图\n\n\n![1.png](https://i.loli.net/2017/07/30/597d5287d6435.png)\n![Image 2.png](https://ooo.0o0.ooo/2017/07/30/597d5287e975e.png)\n![Image 3.png](https://i.loli.net/2017/07/30/597d5287ea9ce.png)\n\n\n## 不足\n\n- 大文件上传，速度仍是不理想\n- 对于大文件，断点续传，可能导致文件不能用\n- 上传速度受网速影响\n\n接下来该改进了，到此，以上参考的是[大文件分块上传技术分享(c#实现)](https://www.idaima.com/article/17099)，特此感谢分享。","slug":"实现python tornado框架下的大文件秒传等技术（3）","published":1,"updated":"2021-06-20T10:25:20.132Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluqa1hjg004frlog5jty97gw","content":"<p>这一步实现了文件上传(包括批量)、断点续传、大文件(伪)秒传。但仍然存在不足，待改进。</p>\n<p>整体实现的思路是这样：</p>\n<ul>\n<li>首先是获取文件加密字符串</li>\n<li>根据md5检查文件的状态：已存在、未完成、不存在。</li>\n<li>对于已存在的文件，这是直接就显示上传完成。</li>\n<li>未完成文件和不存在的文件进行分片上传。</li>\n<li>后台进行文件的保存方式是追加的方式，生成临时文件.part。</li>\n<li>上传完成之后生成md5后缀为.ok的空文件，待检查使用。同时经上传的临时文件改成原来的名字。</li>\n</ul>\n<span id=\"more\"></span>\n\n<h2 id=\"获取文件加密字符串\"><a href=\"#获取文件加密字符串\" class=\"headerlink\" title=\"获取文件加密字符串\"></a>获取文件加密字符串</h2><p>更改<code>yyupload()</code>的参数个数，一下所有的js函数，均写在该函数内部(注意缩进)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">yyupload</span>(<span class=\"params\">file, dommsg, dompercentmb, domprogress, domtime, fn</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> startTime = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>();</span><br><span class=\"line\">    <span class=\"title function_\">calculate</span>(file);</span><br><span class=\"line\">    <span class=\"comment\">// 获取文件加密字符串</span></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">calculate</span>(<span class=\"params\">file</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> fileReader = <span class=\"keyword\">new</span> <span class=\"title class_\">FileReader</span>();</span><br><span class=\"line\">        <span class=\"keyword\">var</span> chunkSize = <span class=\"number\">1024</span> * <span class=\"number\">1024</span> * <span class=\"number\">7</span>;  <span class=\"comment\">// 每次读取7M</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> chunkCount = <span class=\"title class_\">Math</span>.<span class=\"title function_\">ceil</span>(file.<span class=\"property\">size</span> / chunkSize);  <span class=\"comment\">// 向上取整</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> currentChunk = <span class=\"number\">0</span>;  <span class=\"comment\">// 当前索引块</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> spart = <span class=\"keyword\">new</span> <span class=\"title class_\">SparkMD5</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"title function_\">loadNext</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        fileReader.<span class=\"property\">onload</span> = <span class=\"keyword\">function</span> (<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">            dommsg.<span class=\"title function_\">text</span>(<span class=\"string\">&quot;正在检查文件：&quot;</span> + (currentChunk + <span class=\"number\">1</span>) + <span class=\"string\">&quot;/&quot;</span> + chunkCount);</span><br><span class=\"line\">            spart.<span class=\"title function_\">appendBinary</span>(e.<span class=\"property\">target</span>.<span class=\"property\">result</span>);</span><br><span class=\"line\">            currentChunk++;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(currentChunk &lt; chunkCount)&#123;</span><br><span class=\"line\">                <span class=\"title function_\">loadNext</span>();</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> md5value = spart.<span class=\"title function_\">end</span>();</span><br><span class=\"line\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;文件加密结束，密钥为：&quot;</span> + md5value);</span><br><span class=\"line\">                <span class=\"title function_\">checkfile</span>(md5value, file)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">function</span> <span class=\"title function_\">loadNext</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> start = currentChunk * chunkSize;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> end = start + chunkSize &gt;= file.<span class=\"property\">size</span> ? file.<span class=\"property\">size</span> : start + chunkSize;</span><br><span class=\"line\">            fileReader.<span class=\"title function_\">readAsBinaryString</span>(file.<span class=\"title function_\">slice</span>(start, end))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>文件加密结束后，根据MD5密钥，调用<code>checkfile()</code>函数检查服务器上有没有该文件</p>\n<h2 id=\"检查服务器上是否存在文件\"><a href=\"#检查服务器上是否存在文件\" class=\"headerlink\" title=\"检查服务器上是否存在文件\"></a>检查服务器上是否存在文件</h2><p>这个检查函数是比较重要的分叉口，根据检查的结果，对文件的处理是不同的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">checkfile</span>(<span class=\"params\">md5value, file</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> fd = <span class=\"keyword\">new</span> <span class=\"title class_\">FormData</span>();</span><br><span class=\"line\">    fd.<span class=\"title function_\">append</span>(<span class=\"string\">&quot;filename&quot;</span>, file.<span class=\"property\">name</span>);</span><br><span class=\"line\">    fd.<span class=\"title function_\">append</span>(<span class=\"string\">&quot;md5value&quot;</span>, md5value);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span><br><span class=\"line\">    xhr.<span class=\"title function_\">open</span>(<span class=\"string\">&quot;post&quot;</span>, <span class=\"string\">&quot;/checkfile&quot;</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    xhr.<span class=\"property\">onreadystatechange</span> = <span class=\"keyword\">function</span> (<span class=\"params\">res</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(xhr.<span class=\"property\">readyState</span> === <span class=\"number\">4</span> &amp;&amp; xhr.<span class=\"property\">status</span> === <span class=\"number\">200</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> jsonbj = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(xhr.<span class=\"property\">responseText</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (jsonbj.<span class=\"property\">flag</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">1</span>: <span class=\"title function_\">doUpload</span>(file, md5value, jsonbj.<span class=\"property\">startindex</span>); <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">2</span>: <span class=\"title function_\">secondUpload</span>(file); <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            repeatcount = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(xhr.<span class=\"property\">status</span> === <span class=\"number\">500</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(repeatcount &lt; <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">                    <span class=\"title function_\">checkfile</span>(md5value, file);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                repeatcount++;</span><br><span class=\"line\">            &#125;, <span class=\"number\">3000</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    xhr.<span class=\"title function_\">send</span>(fd);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p><code>swich()</code>处理传回来的参数：</p>\n<ul>\n<li>0 服务器上不存在该文件</li>\n<li>1 服务器上存在该文件，但是并未上传完成</li>\n<li>2 服务器上存在完整的文件，不需要再上传了</li>\n</ul>\n<p>对于不需要上传的文件，我们可以之后显示上传完成，造成“秒传”的景象。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//实现秒传功能</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">secondUpload</span>(<span class=\"params\">file</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> timerange = (<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">getTime</span>() - startTime.<span class=\"title function_\">getTime</span>()) / <span class=\"number\">1000</span>;</span><br><span class=\"line\">    domtime.<span class=\"title function_\">text</span>(<span class=\"string\">&quot;耗时&quot;</span> + timerange + <span class=\"string\">&quot;秒&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">//显示结果进度</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> percent =<span class=\"number\">100</span>;</span><br><span class=\"line\">    dommsg.<span class=\"title function_\">text</span>(percent.<span class=\"title function_\">toFixed</span>(<span class=\"number\">2</span>) + <span class=\"string\">&quot;%&quot;</span>);</span><br><span class=\"line\">    domprogress.<span class=\"title function_\">val</span>(percent);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> total = file.<span class=\"property\">size</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (total &gt; <span class=\"number\">1024</span> * <span class=\"number\">1024</span> * <span class=\"number\">1024</span>) &#123;</span><br><span class=\"line\">        dompercentmb.<span class=\"title function_\">text</span>((total / <span class=\"number\">1024</span> / <span class=\"number\">1024</span> / <span class=\"number\">1024</span>).<span class=\"title function_\">toFixed</span>(<span class=\"number\">2</span>) + <span class=\"string\">&quot;GB/&quot;</span> + (total / <span class=\"number\">1024</span> / <span class=\"number\">1024</span> / <span class=\"number\">1024</span>).<span class=\"title function_\">toFixed</span>(<span class=\"number\">2</span>) + <span class=\"string\">&quot;GB&quot;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (total &gt; <span class=\"number\">1024</span> * <span class=\"number\">1024</span>) &#123;</span><br><span class=\"line\">        dompercentmb.<span class=\"title function_\">text</span>((total / <span class=\"number\">1024</span> / <span class=\"number\">1024</span>).<span class=\"title function_\">toFixed</span>(<span class=\"number\">2</span>) + <span class=\"string\">&quot;MB/&quot;</span> + (total / <span class=\"number\">1024</span> / <span class=\"number\">1024</span>).<span class=\"title function_\">toFixed</span>(<span class=\"number\">2</span>) + <span class=\"string\">&quot;MB&quot;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (total &gt; <span class=\"number\">1024</span> &amp;&amp; total &lt; <span class=\"number\">1024</span> * <span class=\"number\">1024</span>) &#123;</span><br><span class=\"line\">        dompercentmb.<span class=\"title function_\">text</span>((total / <span class=\"number\">1024</span>).<span class=\"title function_\">toFixed</span>(<span class=\"number\">2</span>) + <span class=\"string\">&quot;KB/&quot;</span> + (total / <span class=\"number\">1024</span>).<span class=\"title function_\">toFixed</span>(<span class=\"number\">2</span>) + <span class=\"string\">&quot;KB&quot;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        dompercentmb.<span class=\"title function_\">text</span>((total).<span class=\"title function_\">toFixed</span>(<span class=\"number\">2</span>) + <span class=\"string\">&quot;B/&quot;</span> + (total).<span class=\"title function_\">toFixed</span>(<span class=\"number\">2</span>) + <span class=\"string\">&quot;B&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>编写<strong>views.py</strong>文件中的<code>CheckFileHandler</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CheckFileHandler</span>(tornado.web.RequestHandler):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">post</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        md5value = self.get_argument(<span class=\"string\">&quot;md5value&quot;</span>)</span><br><span class=\"line\">        filename = self.get_argument(<span class=\"string\">&quot;filename&quot;</span>)</span><br><span class=\"line\">        path_part = os.path.join(BASE_DIR, <span class=\"string\">&quot;file_upload/static/upload/&quot;</span> + md5value + <span class=\"string\">&quot;.part&quot;</span>)</span><br><span class=\"line\">        path_ok = os.path.join(BASE_DIR, <span class=\"string\">&quot;file_upload/static/upload/&quot;</span> + md5value + <span class=\"string\">&quot;.ok&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> os.path.isfile(path_ok):  <span class=\"comment\"># 文件上传结束</span></span><br><span class=\"line\">            flag = <span class=\"number\">2</span></span><br><span class=\"line\">            ret = &#123;<span class=\"string\">&quot;flag&quot;</span>: flag&#125;</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> os.path.isfile(path_part):</span><br><span class=\"line\">            flag = <span class=\"number\">1</span></span><br><span class=\"line\">            startindex = os.path.getsize(path_part)</span><br><span class=\"line\">            ret = &#123;<span class=\"string\">&quot;flag&quot;</span>: flag, <span class=\"string\">&quot;startindex&quot;</span>: startindex&#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            flag = <span class=\"number\">0</span></span><br><span class=\"line\">            ret = &#123;<span class=\"string\">&quot;flag&quot;</span>: flag, <span class=\"string\">&quot;startindex&quot;</span>: <span class=\"number\">0</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        self.write(ret)</span><br></pre></td></tr></table></figure>\n\n\n<p>编写<strong>urls.py</strong>文件中的路由<code>/checkfile</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"string\">r&#x27;^/checkfile$&#x27;</span>, CheckFileHandler),</span><br></pre></td></tr></table></figure>\n\n<p>当然别忘了<code>from views import CheckFileHandler,</code></p>\n<h2 id=\"上传文件处理\"><a href=\"#上传文件处理\" class=\"headerlink\" title=\"上传文件处理\"></a>上传文件处理</h2><p>这一块是处理的核心，js将文件分片，传给后台进行保存。不说废话，上代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">doUpload</span>(<span class=\"params\">file, md5value, startindex</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> reader = <span class=\"keyword\">new</span> <span class=\"title class_\">FileReader</span>();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> step = <span class=\"number\">1024</span> * <span class=\"number\">400</span>;  <span class=\"comment\">// 每次读取400KB</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> cuLoaded = startindex;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> total = file.<span class=\"property\">size</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    reader.<span class=\"property\">onload</span> = <span class=\"keyword\">function</span> (<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> result = reader.<span class=\"property\">result</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> loaded = e.<span class=\"property\">loaded</span>;</span><br><span class=\"line\">        <span class=\"title function_\">uploadFile</span>(result, cuLoaded, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            cuLoaded += loaded;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> timerange = (<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">getTime</span>() - startTime.<span class=\"title function_\">getTime</span>()) / <span class=\"number\">1000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (total &gt; <span class=\"number\">1024</span> * <span class=\"number\">1024</span> * <span class=\"number\">1024</span>) &#123;</span><br><span class=\"line\">                dompercentmb.<span class=\"title function_\">text</span>((cuLoaded / <span class=\"number\">1024</span> / <span class=\"number\">1024</span> / <span class=\"number\">1024</span>).<span class=\"title function_\">toFixed</span>(<span class=\"number\">2</span>) + <span class=\"string\">&quot;GB/&quot;</span> + (total / <span class=\"number\">1024</span> / <span class=\"number\">1024</span> / <span class=\"number\">1024</span>).<span class=\"title function_\">toFixed</span>(<span class=\"number\">2</span>) + <span class=\"string\">&quot;GB&quot;</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (total &gt; <span class=\"number\">1024</span> * <span class=\"number\">1024</span>) &#123;</span><br><span class=\"line\">                dompercentmb.<span class=\"title function_\">text</span>((cuLoaded / <span class=\"number\">1024</span> / <span class=\"number\">1024</span>).<span class=\"title function_\">toFixed</span>(<span class=\"number\">2</span>) + <span class=\"string\">&quot;MB/&quot;</span> + (total / <span class=\"number\">1024</span> / <span class=\"number\">1024</span>).<span class=\"title function_\">toFixed</span>(<span class=\"number\">2</span>) + <span class=\"string\">&quot;MB&quot;</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (total &gt; <span class=\"number\">1024</span> &amp;&amp; total &lt; <span class=\"number\">1024</span> * <span class=\"number\">1024</span>) &#123;</span><br><span class=\"line\">                dompercentmb.<span class=\"title function_\">text</span>((cuLoaded / <span class=\"number\">1024</span>).<span class=\"title function_\">toFixed</span>(<span class=\"number\">2</span>) + <span class=\"string\">&quot;KB/&quot;</span> + (total / <span class=\"number\">1024</span>).<span class=\"title function_\">toFixed</span>(<span class=\"number\">2</span>) + <span class=\"string\">&quot;KB&quot;</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                dompercentmb.<span class=\"title function_\">text</span>((cuLoaded).<span class=\"title function_\">toFixed</span>(<span class=\"number\">2</span>) + <span class=\"string\">&quot;B/&quot;</span> + (total).<span class=\"title function_\">toFixed</span>(<span class=\"number\">2</span>) + <span class=\"string\">&quot;B&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            domtime.<span class=\"title function_\">text</span>(<span class=\"string\">&quot;耗时&quot;</span> + timerange + <span class=\"string\">&quot;秒&quot;</span>);</span><br><span class=\"line\">            domtime.<span class=\"title function_\">text</span>(<span class=\"string\">&quot;耗时&quot;</span> + timerange + <span class=\"string\">&quot;秒&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cuLoaded &lt; total) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">readBlob</span>(cuLoaded);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;总共用时：&#x27;</span> + timerange);</span><br><span class=\"line\">                cuLoaded = total;</span><br><span class=\"line\">                <span class=\"title function_\">sendfinish</span>(); <span class=\"comment\">//告知服务器上传完毕</span></span><br><span class=\"line\">                domtime.<span class=\"title function_\">text</span>(<span class=\"string\">&quot;上传完成,总共耗时&quot;</span> + timerange + <span class=\"string\">&quot;秒&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//显示结果进度</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> percent = (cuLoaded / total) * <span class=\"number\">100</span>;</span><br><span class=\"line\">            dommsg.<span class=\"title function_\">text</span>(percent.<span class=\"title function_\">toFixed</span>(<span class=\"number\">2</span>) + <span class=\"string\">&quot;%&quot;</span>);</span><br><span class=\"line\">            domprogress.<span class=\"title function_\">val</span>(percent);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"title function_\">readBlob</span>(cuLoaded);</span><br><span class=\"line\">    <span class=\"comment\">//指定开始位置，分块读取文件</span></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">readBlob</span>(<span class=\"params\">start</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//指定开始位置和结束位置读取文件</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> end = start + step &gt;= file.<span class=\"property\">size</span> ? file.<span class=\"property\">size</span> : start + step;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> blob = file.<span class=\"title function_\">slice</span>(start, end); <span class=\"comment\">//读取开始位置和结束位置的文件</span></span><br><span class=\"line\">        reader.<span class=\"title function_\">readAsArrayBuffer</span>(blob); <span class=\"comment\">//读取切割好的文件块</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//继续</span></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">containue</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">readBlob</span>(cuLoaded);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ……</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>文件上传结束时，通知服务器：（<strong>……</strong>表示连接着的）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">……</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> k = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sendfinish</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> fd = <span class=\"keyword\">new</span> <span class=\"title class_\">FormData</span>();</span><br><span class=\"line\">    fd.<span class=\"title function_\">append</span>(<span class=\"string\">&quot;filename&quot;</span>, file.<span class=\"property\">name</span>);</span><br><span class=\"line\">    fd.<span class=\"title function_\">append</span>(<span class=\"string\">&quot;md5value&quot;</span>, md5value);</span><br><span class=\"line\">    fd.<span class=\"title function_\">append</span>(<span class=\"string\">&quot;totalsize&quot;</span>, file.<span class=\"property\">size</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span><br><span class=\"line\">    xhr.<span class=\"title function_\">open</span>(<span class=\"string\">&quot;post&quot;</span>, <span class=\"string\">&quot;/finishupload&quot;</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">    xhr.<span class=\"property\">onreadystatechange</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (xhr.<span class=\"property\">readyState</span> === <span class=\"number\">4</span> &amp;&amp; xhr.<span class=\"property\">status</span> === <span class=\"number\">200</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(fn)&#123;</span><br><span class=\"line\">                <span class=\"title function_\">fn</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            k = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (xhr.<span class=\"property\">status</span> === <span class=\"number\">500</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(k&lt;<span class=\"number\">3</span>)&#123;</span><br><span class=\"line\">                    <span class=\"title function_\">sendfinish</span>();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                k++;</span><br><span class=\"line\">            &#125;, <span class=\"number\">300</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    xhr.<span class=\"title function_\">send</span>(fd);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">……</span><br></pre></td></tr></table></figure>\n\n<p>将分片文件上传到服务器：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">……</span><br><span class=\"line\"><span class=\"keyword\">var</span> m = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">uploadFile</span>(<span class=\"params\">result, startIndex, onSuccess</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> blob = <span class=\"keyword\">new</span> <span class=\"title class_\">Blob</span>([result]);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> fd = <span class=\"keyword\">new</span> <span class=\"title class_\">FormData</span>();</span><br><span class=\"line\">    fd.<span class=\"title function_\">append</span>(<span class=\"string\">&quot;file&quot;</span>, blob);</span><br><span class=\"line\">    fd.<span class=\"title function_\">append</span>(<span class=\"string\">&quot;md5value&quot;</span>, md5value);</span><br><span class=\"line\">    fd.<span class=\"title function_\">append</span>(<span class=\"string\">&quot;filename&quot;</span>, file.<span class=\"property\">name</span>);</span><br><span class=\"line\">    fd.<span class=\"title function_\">append</span>(<span class=\"string\">&quot;filesize&quot;</span>, file.<span class=\"property\">size</span>);</span><br><span class=\"line\">    fd.<span class=\"title function_\">append</span>(<span class=\"string\">&quot;loaded&quot;</span>, startIndex);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span><br><span class=\"line\">    xhr.<span class=\"title function_\">open</span>(<span class=\"string\">&quot;post&quot;</span>, <span class=\"string\">&quot;/uploadfile&quot;</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">    xhr.<span class=\"property\">onreadystatechange</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (xhr.<span class=\"property\">readyState</span> === <span class=\"number\">4</span> &amp;&amp; xhr.<span class=\"property\">status</span> === <span class=\"number\">200</span>)&#123;</span><br><span class=\"line\">            m = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(onSuccess) <span class=\"title function_\">onSuccess</span>();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (xhr.<span class=\"property\">status</span> === <span class=\"number\">500</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(m &lt; <span class=\"number\">3</span>)&#123;</span><br><span class=\"line\">                    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;sendfinish&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                m++;</span><br><span class=\"line\">            &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    xhr.<span class=\"title function_\">send</span>(fd);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>这里有两个后台处理程序。</p>\n<p>在views.py中编写 <code>UploadJobHandler</code>、 <code>FinishUpload</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">UploadJobHandler</span>(tornado.web.RequestHandler):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">post</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        file_metas = self.request.files[<span class=\"string\">&quot;file&quot;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(file_metas) &lt;= <span class=\"number\">0</span>:</span><br><span class=\"line\">            self.write(<span class=\"string\">&quot;获取服务器上传文件失败！&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        metas = file_metas[<span class=\"number\">0</span>]</span><br><span class=\"line\">        md5value = self.get_argument(<span class=\"string\">&quot;md5value&quot;</span>)</span><br><span class=\"line\">        tempfilename = md5value + <span class=\"string\">&quot;.part&quot;</span></span><br><span class=\"line\">        newname = os.path.join(BASE_DIR, <span class=\"string\">&quot;file_upload/static/upload/&quot;</span> + tempfilename)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(newname, <span class=\"string\">&quot;ab&quot;</span>) <span class=\"keyword\">as</span> f:  <span class=\"comment\"># 以二机制方式追加</span></span><br><span class=\"line\">            f.write(metas[<span class=\"string\">&quot;body&quot;</span>])</span><br><span class=\"line\">        self.write(<span class=\"string\">&quot;finished!&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get</span>(<span class=\"params\">self, *args, **kwargs</span>):</span><br><span class=\"line\">        self.write(<span class=\"string\">&quot;ok&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">FinishUpload</span>(tornado.web.RequestHandler):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">post</span>(<span class=\"params\">self, *args, **kwargs</span>):</span><br><span class=\"line\">        md5value = self.get_argument(<span class=\"string\">&quot;md5value&quot;</span>)</span><br><span class=\"line\">        filename = self.get_argument(<span class=\"string\">&quot;filename&quot;</span>)</span><br><span class=\"line\">        totalsize = self.get_argument(<span class=\"string\">&quot;totalsize&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        path_part = os.path.join(BASE_DIR, <span class=\"string\">&quot;file_upload/static/upload/&quot;</span> + md5value + <span class=\"string\">&quot;.part&quot;</span>)</span><br><span class=\"line\">        path_ok = os.path.join(BASE_DIR, <span class=\"string\">&quot;file_upload/static/upload/&quot;</span> + md5value + <span class=\"string\">&quot;.ok&quot;</span>)</span><br><span class=\"line\">        old_name = os.path.join(BASE_DIR, <span class=\"string\">&quot;file_upload/static/upload/&quot;</span> + filename)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(path_ok, <span class=\"string\">&quot;w&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">            <span class=\"built_in\">print</span> <span class=\"string\">&quot;创建ok文件&quot;</span></span><br><span class=\"line\">        os.rename(path_part, old_name)</span><br><span class=\"line\">        self.write(<span class=\"string\">&quot;&#123;&#x27;data&#x27;: &#x27;ok&#x27;&#125;&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>注意：</p>\n<ul>\n<li>文件在上传时，临时文件名为 md5value + “.part”</li>\n<li>上传成功后，创建空文件 md5value + “.ok”</li>\n<li>文件保存的时候，这里是使用二进制方式追加，否则保存的文件不可用了。</li>\n</ul>\n<p>编写<strong>urls.py</strong>文件中的路由<code>/uploadfile</code>、<code>/finishupload</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> views <span class=\"keyword\">import</span> UploadJobHandler, FinishUpload</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"string\">r&#x27;^/uploadfile$&#x27;</span>, UploadJobHandler),</span><br><span class=\"line\">(<span class=\"string\">r&#x27;^/finishupload$&#x27;</span>, FinishUpload),</span><br></pre></td></tr></table></figure>\n\n\n<p>效果如下图</p>\n<p><img src=\"https://i.loli.net/2017/07/30/597d5287d6435.png\" alt=\"1.png\"><br><img src=\"https://ooo.0o0.ooo/2017/07/30/597d5287e975e.png\" alt=\"Image 2.png\"><br><img src=\"https://i.loli.net/2017/07/30/597d5287ea9ce.png\" alt=\"Image 3.png\"></p>\n<h2 id=\"不足\"><a href=\"#不足\" class=\"headerlink\" title=\"不足\"></a>不足</h2><ul>\n<li>大文件上传，速度仍是不理想</li>\n<li>对于大文件，断点续传，可能导致文件不能用</li>\n<li>上传速度受网速影响</li>\n</ul>\n<p>接下来该改进了，到此，以上参考的是<a href=\"https://www.idaima.com/article/17099\">大文件分块上传技术分享(c#实现)</a>，特此感谢分享。</p>\n","site":{"data":{}},"excerpt":"<p>这一步实现了文件上传(包括批量)、断点续传、大文件(伪)秒传。但仍然存在不足，待改进。</p>\n<p>整体实现的思路是这样：</p>\n<ul>\n<li>首先是获取文件加密字符串</li>\n<li>根据md5检查文件的状态：已存在、未完成、不存在。</li>\n<li>对于已存在的文件，这是直接就显示上传完成。</li>\n<li>未完成文件和不存在的文件进行分片上传。</li>\n<li>后台进行文件的保存方式是追加的方式，生成临时文件.part。</li>\n<li>上传完成之后生成md5后缀为.ok的空文件，待检查使用。同时经上传的临时文件改成原来的名字。</li>\n</ul>","more":"<h2 id=\"获取文件加密字符串\"><a href=\"#获取文件加密字符串\" class=\"headerlink\" title=\"获取文件加密字符串\"></a>获取文件加密字符串</h2><p>更改<code>yyupload()</code>的参数个数，一下所有的js函数，均写在该函数内部(注意缩进)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">yyupload</span>(<span class=\"params\">file, dommsg, dompercentmb, domprogress, domtime, fn</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> startTime = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>();</span><br><span class=\"line\">    <span class=\"title function_\">calculate</span>(file);</span><br><span class=\"line\">    <span class=\"comment\">// 获取文件加密字符串</span></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">calculate</span>(<span class=\"params\">file</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> fileReader = <span class=\"keyword\">new</span> <span class=\"title class_\">FileReader</span>();</span><br><span class=\"line\">        <span class=\"keyword\">var</span> chunkSize = <span class=\"number\">1024</span> * <span class=\"number\">1024</span> * <span class=\"number\">7</span>;  <span class=\"comment\">// 每次读取7M</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> chunkCount = <span class=\"title class_\">Math</span>.<span class=\"title function_\">ceil</span>(file.<span class=\"property\">size</span> / chunkSize);  <span class=\"comment\">// 向上取整</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> currentChunk = <span class=\"number\">0</span>;  <span class=\"comment\">// 当前索引块</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> spart = <span class=\"keyword\">new</span> <span class=\"title class_\">SparkMD5</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"title function_\">loadNext</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        fileReader.<span class=\"property\">onload</span> = <span class=\"keyword\">function</span> (<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">            dommsg.<span class=\"title function_\">text</span>(<span class=\"string\">&quot;正在检查文件：&quot;</span> + (currentChunk + <span class=\"number\">1</span>) + <span class=\"string\">&quot;/&quot;</span> + chunkCount);</span><br><span class=\"line\">            spart.<span class=\"title function_\">appendBinary</span>(e.<span class=\"property\">target</span>.<span class=\"property\">result</span>);</span><br><span class=\"line\">            currentChunk++;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(currentChunk &lt; chunkCount)&#123;</span><br><span class=\"line\">                <span class=\"title function_\">loadNext</span>();</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> md5value = spart.<span class=\"title function_\">end</span>();</span><br><span class=\"line\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;文件加密结束，密钥为：&quot;</span> + md5value);</span><br><span class=\"line\">                <span class=\"title function_\">checkfile</span>(md5value, file)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">function</span> <span class=\"title function_\">loadNext</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> start = currentChunk * chunkSize;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> end = start + chunkSize &gt;= file.<span class=\"property\">size</span> ? file.<span class=\"property\">size</span> : start + chunkSize;</span><br><span class=\"line\">            fileReader.<span class=\"title function_\">readAsBinaryString</span>(file.<span class=\"title function_\">slice</span>(start, end))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>文件加密结束后，根据MD5密钥，调用<code>checkfile()</code>函数检查服务器上有没有该文件</p>\n<h2 id=\"检查服务器上是否存在文件\"><a href=\"#检查服务器上是否存在文件\" class=\"headerlink\" title=\"检查服务器上是否存在文件\"></a>检查服务器上是否存在文件</h2><p>这个检查函数是比较重要的分叉口，根据检查的结果，对文件的处理是不同的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">checkfile</span>(<span class=\"params\">md5value, file</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> fd = <span class=\"keyword\">new</span> <span class=\"title class_\">FormData</span>();</span><br><span class=\"line\">    fd.<span class=\"title function_\">append</span>(<span class=\"string\">&quot;filename&quot;</span>, file.<span class=\"property\">name</span>);</span><br><span class=\"line\">    fd.<span class=\"title function_\">append</span>(<span class=\"string\">&quot;md5value&quot;</span>, md5value);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span><br><span class=\"line\">    xhr.<span class=\"title function_\">open</span>(<span class=\"string\">&quot;post&quot;</span>, <span class=\"string\">&quot;/checkfile&quot;</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    xhr.<span class=\"property\">onreadystatechange</span> = <span class=\"keyword\">function</span> (<span class=\"params\">res</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(xhr.<span class=\"property\">readyState</span> === <span class=\"number\">4</span> &amp;&amp; xhr.<span class=\"property\">status</span> === <span class=\"number\">200</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> jsonbj = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(xhr.<span class=\"property\">responseText</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (jsonbj.<span class=\"property\">flag</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">1</span>: <span class=\"title function_\">doUpload</span>(file, md5value, jsonbj.<span class=\"property\">startindex</span>); <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">2</span>: <span class=\"title function_\">secondUpload</span>(file); <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            repeatcount = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(xhr.<span class=\"property\">status</span> === <span class=\"number\">500</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(repeatcount &lt; <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">                    <span class=\"title function_\">checkfile</span>(md5value, file);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                repeatcount++;</span><br><span class=\"line\">            &#125;, <span class=\"number\">3000</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    xhr.<span class=\"title function_\">send</span>(fd);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p><code>swich()</code>处理传回来的参数：</p>\n<ul>\n<li>0 服务器上不存在该文件</li>\n<li>1 服务器上存在该文件，但是并未上传完成</li>\n<li>2 服务器上存在完整的文件，不需要再上传了</li>\n</ul>\n<p>对于不需要上传的文件，我们可以之后显示上传完成，造成“秒传”的景象。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//实现秒传功能</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">secondUpload</span>(<span class=\"params\">file</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> timerange = (<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">getTime</span>() - startTime.<span class=\"title function_\">getTime</span>()) / <span class=\"number\">1000</span>;</span><br><span class=\"line\">    domtime.<span class=\"title function_\">text</span>(<span class=\"string\">&quot;耗时&quot;</span> + timerange + <span class=\"string\">&quot;秒&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">//显示结果进度</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> percent =<span class=\"number\">100</span>;</span><br><span class=\"line\">    dommsg.<span class=\"title function_\">text</span>(percent.<span class=\"title function_\">toFixed</span>(<span class=\"number\">2</span>) + <span class=\"string\">&quot;%&quot;</span>);</span><br><span class=\"line\">    domprogress.<span class=\"title function_\">val</span>(percent);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> total = file.<span class=\"property\">size</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (total &gt; <span class=\"number\">1024</span> * <span class=\"number\">1024</span> * <span class=\"number\">1024</span>) &#123;</span><br><span class=\"line\">        dompercentmb.<span class=\"title function_\">text</span>((total / <span class=\"number\">1024</span> / <span class=\"number\">1024</span> / <span class=\"number\">1024</span>).<span class=\"title function_\">toFixed</span>(<span class=\"number\">2</span>) + <span class=\"string\">&quot;GB/&quot;</span> + (total / <span class=\"number\">1024</span> / <span class=\"number\">1024</span> / <span class=\"number\">1024</span>).<span class=\"title function_\">toFixed</span>(<span class=\"number\">2</span>) + <span class=\"string\">&quot;GB&quot;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (total &gt; <span class=\"number\">1024</span> * <span class=\"number\">1024</span>) &#123;</span><br><span class=\"line\">        dompercentmb.<span class=\"title function_\">text</span>((total / <span class=\"number\">1024</span> / <span class=\"number\">1024</span>).<span class=\"title function_\">toFixed</span>(<span class=\"number\">2</span>) + <span class=\"string\">&quot;MB/&quot;</span> + (total / <span class=\"number\">1024</span> / <span class=\"number\">1024</span>).<span class=\"title function_\">toFixed</span>(<span class=\"number\">2</span>) + <span class=\"string\">&quot;MB&quot;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (total &gt; <span class=\"number\">1024</span> &amp;&amp; total &lt; <span class=\"number\">1024</span> * <span class=\"number\">1024</span>) &#123;</span><br><span class=\"line\">        dompercentmb.<span class=\"title function_\">text</span>((total / <span class=\"number\">1024</span>).<span class=\"title function_\">toFixed</span>(<span class=\"number\">2</span>) + <span class=\"string\">&quot;KB/&quot;</span> + (total / <span class=\"number\">1024</span>).<span class=\"title function_\">toFixed</span>(<span class=\"number\">2</span>) + <span class=\"string\">&quot;KB&quot;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        dompercentmb.<span class=\"title function_\">text</span>((total).<span class=\"title function_\">toFixed</span>(<span class=\"number\">2</span>) + <span class=\"string\">&quot;B/&quot;</span> + (total).<span class=\"title function_\">toFixed</span>(<span class=\"number\">2</span>) + <span class=\"string\">&quot;B&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>编写<strong>views.py</strong>文件中的<code>CheckFileHandler</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CheckFileHandler</span>(tornado.web.RequestHandler):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">post</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        md5value = self.get_argument(<span class=\"string\">&quot;md5value&quot;</span>)</span><br><span class=\"line\">        filename = self.get_argument(<span class=\"string\">&quot;filename&quot;</span>)</span><br><span class=\"line\">        path_part = os.path.join(BASE_DIR, <span class=\"string\">&quot;file_upload/static/upload/&quot;</span> + md5value + <span class=\"string\">&quot;.part&quot;</span>)</span><br><span class=\"line\">        path_ok = os.path.join(BASE_DIR, <span class=\"string\">&quot;file_upload/static/upload/&quot;</span> + md5value + <span class=\"string\">&quot;.ok&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> os.path.isfile(path_ok):  <span class=\"comment\"># 文件上传结束</span></span><br><span class=\"line\">            flag = <span class=\"number\">2</span></span><br><span class=\"line\">            ret = &#123;<span class=\"string\">&quot;flag&quot;</span>: flag&#125;</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> os.path.isfile(path_part):</span><br><span class=\"line\">            flag = <span class=\"number\">1</span></span><br><span class=\"line\">            startindex = os.path.getsize(path_part)</span><br><span class=\"line\">            ret = &#123;<span class=\"string\">&quot;flag&quot;</span>: flag, <span class=\"string\">&quot;startindex&quot;</span>: startindex&#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            flag = <span class=\"number\">0</span></span><br><span class=\"line\">            ret = &#123;<span class=\"string\">&quot;flag&quot;</span>: flag, <span class=\"string\">&quot;startindex&quot;</span>: <span class=\"number\">0</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        self.write(ret)</span><br></pre></td></tr></table></figure>\n\n\n<p>编写<strong>urls.py</strong>文件中的路由<code>/checkfile</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"string\">r&#x27;^/checkfile$&#x27;</span>, CheckFileHandler),</span><br></pre></td></tr></table></figure>\n\n<p>当然别忘了<code>from views import CheckFileHandler,</code></p>\n<h2 id=\"上传文件处理\"><a href=\"#上传文件处理\" class=\"headerlink\" title=\"上传文件处理\"></a>上传文件处理</h2><p>这一块是处理的核心，js将文件分片，传给后台进行保存。不说废话，上代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">doUpload</span>(<span class=\"params\">file, md5value, startindex</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> reader = <span class=\"keyword\">new</span> <span class=\"title class_\">FileReader</span>();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> step = <span class=\"number\">1024</span> * <span class=\"number\">400</span>;  <span class=\"comment\">// 每次读取400KB</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> cuLoaded = startindex;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> total = file.<span class=\"property\">size</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    reader.<span class=\"property\">onload</span> = <span class=\"keyword\">function</span> (<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> result = reader.<span class=\"property\">result</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> loaded = e.<span class=\"property\">loaded</span>;</span><br><span class=\"line\">        <span class=\"title function_\">uploadFile</span>(result, cuLoaded, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            cuLoaded += loaded;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> timerange = (<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">getTime</span>() - startTime.<span class=\"title function_\">getTime</span>()) / <span class=\"number\">1000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (total &gt; <span class=\"number\">1024</span> * <span class=\"number\">1024</span> * <span class=\"number\">1024</span>) &#123;</span><br><span class=\"line\">                dompercentmb.<span class=\"title function_\">text</span>((cuLoaded / <span class=\"number\">1024</span> / <span class=\"number\">1024</span> / <span class=\"number\">1024</span>).<span class=\"title function_\">toFixed</span>(<span class=\"number\">2</span>) + <span class=\"string\">&quot;GB/&quot;</span> + (total / <span class=\"number\">1024</span> / <span class=\"number\">1024</span> / <span class=\"number\">1024</span>).<span class=\"title function_\">toFixed</span>(<span class=\"number\">2</span>) + <span class=\"string\">&quot;GB&quot;</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (total &gt; <span class=\"number\">1024</span> * <span class=\"number\">1024</span>) &#123;</span><br><span class=\"line\">                dompercentmb.<span class=\"title function_\">text</span>((cuLoaded / <span class=\"number\">1024</span> / <span class=\"number\">1024</span>).<span class=\"title function_\">toFixed</span>(<span class=\"number\">2</span>) + <span class=\"string\">&quot;MB/&quot;</span> + (total / <span class=\"number\">1024</span> / <span class=\"number\">1024</span>).<span class=\"title function_\">toFixed</span>(<span class=\"number\">2</span>) + <span class=\"string\">&quot;MB&quot;</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (total &gt; <span class=\"number\">1024</span> &amp;&amp; total &lt; <span class=\"number\">1024</span> * <span class=\"number\">1024</span>) &#123;</span><br><span class=\"line\">                dompercentmb.<span class=\"title function_\">text</span>((cuLoaded / <span class=\"number\">1024</span>).<span class=\"title function_\">toFixed</span>(<span class=\"number\">2</span>) + <span class=\"string\">&quot;KB/&quot;</span> + (total / <span class=\"number\">1024</span>).<span class=\"title function_\">toFixed</span>(<span class=\"number\">2</span>) + <span class=\"string\">&quot;KB&quot;</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                dompercentmb.<span class=\"title function_\">text</span>((cuLoaded).<span class=\"title function_\">toFixed</span>(<span class=\"number\">2</span>) + <span class=\"string\">&quot;B/&quot;</span> + (total).<span class=\"title function_\">toFixed</span>(<span class=\"number\">2</span>) + <span class=\"string\">&quot;B&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            domtime.<span class=\"title function_\">text</span>(<span class=\"string\">&quot;耗时&quot;</span> + timerange + <span class=\"string\">&quot;秒&quot;</span>);</span><br><span class=\"line\">            domtime.<span class=\"title function_\">text</span>(<span class=\"string\">&quot;耗时&quot;</span> + timerange + <span class=\"string\">&quot;秒&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cuLoaded &lt; total) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">readBlob</span>(cuLoaded);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;总共用时：&#x27;</span> + timerange);</span><br><span class=\"line\">                cuLoaded = total;</span><br><span class=\"line\">                <span class=\"title function_\">sendfinish</span>(); <span class=\"comment\">//告知服务器上传完毕</span></span><br><span class=\"line\">                domtime.<span class=\"title function_\">text</span>(<span class=\"string\">&quot;上传完成,总共耗时&quot;</span> + timerange + <span class=\"string\">&quot;秒&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//显示结果进度</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> percent = (cuLoaded / total) * <span class=\"number\">100</span>;</span><br><span class=\"line\">            dommsg.<span class=\"title function_\">text</span>(percent.<span class=\"title function_\">toFixed</span>(<span class=\"number\">2</span>) + <span class=\"string\">&quot;%&quot;</span>);</span><br><span class=\"line\">            domprogress.<span class=\"title function_\">val</span>(percent);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"title function_\">readBlob</span>(cuLoaded);</span><br><span class=\"line\">    <span class=\"comment\">//指定开始位置，分块读取文件</span></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">readBlob</span>(<span class=\"params\">start</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//指定开始位置和结束位置读取文件</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> end = start + step &gt;= file.<span class=\"property\">size</span> ? file.<span class=\"property\">size</span> : start + step;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> blob = file.<span class=\"title function_\">slice</span>(start, end); <span class=\"comment\">//读取开始位置和结束位置的文件</span></span><br><span class=\"line\">        reader.<span class=\"title function_\">readAsArrayBuffer</span>(blob); <span class=\"comment\">//读取切割好的文件块</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//继续</span></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">containue</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">readBlob</span>(cuLoaded);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ……</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>文件上传结束时，通知服务器：（<strong>……</strong>表示连接着的）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">……</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> k = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sendfinish</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> fd = <span class=\"keyword\">new</span> <span class=\"title class_\">FormData</span>();</span><br><span class=\"line\">    fd.<span class=\"title function_\">append</span>(<span class=\"string\">&quot;filename&quot;</span>, file.<span class=\"property\">name</span>);</span><br><span class=\"line\">    fd.<span class=\"title function_\">append</span>(<span class=\"string\">&quot;md5value&quot;</span>, md5value);</span><br><span class=\"line\">    fd.<span class=\"title function_\">append</span>(<span class=\"string\">&quot;totalsize&quot;</span>, file.<span class=\"property\">size</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span><br><span class=\"line\">    xhr.<span class=\"title function_\">open</span>(<span class=\"string\">&quot;post&quot;</span>, <span class=\"string\">&quot;/finishupload&quot;</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">    xhr.<span class=\"property\">onreadystatechange</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (xhr.<span class=\"property\">readyState</span> === <span class=\"number\">4</span> &amp;&amp; xhr.<span class=\"property\">status</span> === <span class=\"number\">200</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(fn)&#123;</span><br><span class=\"line\">                <span class=\"title function_\">fn</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            k = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (xhr.<span class=\"property\">status</span> === <span class=\"number\">500</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(k&lt;<span class=\"number\">3</span>)&#123;</span><br><span class=\"line\">                    <span class=\"title function_\">sendfinish</span>();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                k++;</span><br><span class=\"line\">            &#125;, <span class=\"number\">300</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    xhr.<span class=\"title function_\">send</span>(fd);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">……</span><br></pre></td></tr></table></figure>\n\n<p>将分片文件上传到服务器：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">……</span><br><span class=\"line\"><span class=\"keyword\">var</span> m = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">uploadFile</span>(<span class=\"params\">result, startIndex, onSuccess</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> blob = <span class=\"keyword\">new</span> <span class=\"title class_\">Blob</span>([result]);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> fd = <span class=\"keyword\">new</span> <span class=\"title class_\">FormData</span>();</span><br><span class=\"line\">    fd.<span class=\"title function_\">append</span>(<span class=\"string\">&quot;file&quot;</span>, blob);</span><br><span class=\"line\">    fd.<span class=\"title function_\">append</span>(<span class=\"string\">&quot;md5value&quot;</span>, md5value);</span><br><span class=\"line\">    fd.<span class=\"title function_\">append</span>(<span class=\"string\">&quot;filename&quot;</span>, file.<span class=\"property\">name</span>);</span><br><span class=\"line\">    fd.<span class=\"title function_\">append</span>(<span class=\"string\">&quot;filesize&quot;</span>, file.<span class=\"property\">size</span>);</span><br><span class=\"line\">    fd.<span class=\"title function_\">append</span>(<span class=\"string\">&quot;loaded&quot;</span>, startIndex);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span><br><span class=\"line\">    xhr.<span class=\"title function_\">open</span>(<span class=\"string\">&quot;post&quot;</span>, <span class=\"string\">&quot;/uploadfile&quot;</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">    xhr.<span class=\"property\">onreadystatechange</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (xhr.<span class=\"property\">readyState</span> === <span class=\"number\">4</span> &amp;&amp; xhr.<span class=\"property\">status</span> === <span class=\"number\">200</span>)&#123;</span><br><span class=\"line\">            m = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(onSuccess) <span class=\"title function_\">onSuccess</span>();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (xhr.<span class=\"property\">status</span> === <span class=\"number\">500</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(m &lt; <span class=\"number\">3</span>)&#123;</span><br><span class=\"line\">                    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;sendfinish&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                m++;</span><br><span class=\"line\">            &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    xhr.<span class=\"title function_\">send</span>(fd);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>这里有两个后台处理程序。</p>\n<p>在views.py中编写 <code>UploadJobHandler</code>、 <code>FinishUpload</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">UploadJobHandler</span>(tornado.web.RequestHandler):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">post</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        file_metas = self.request.files[<span class=\"string\">&quot;file&quot;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(file_metas) &lt;= <span class=\"number\">0</span>:</span><br><span class=\"line\">            self.write(<span class=\"string\">&quot;获取服务器上传文件失败！&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        metas = file_metas[<span class=\"number\">0</span>]</span><br><span class=\"line\">        md5value = self.get_argument(<span class=\"string\">&quot;md5value&quot;</span>)</span><br><span class=\"line\">        tempfilename = md5value + <span class=\"string\">&quot;.part&quot;</span></span><br><span class=\"line\">        newname = os.path.join(BASE_DIR, <span class=\"string\">&quot;file_upload/static/upload/&quot;</span> + tempfilename)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(newname, <span class=\"string\">&quot;ab&quot;</span>) <span class=\"keyword\">as</span> f:  <span class=\"comment\"># 以二机制方式追加</span></span><br><span class=\"line\">            f.write(metas[<span class=\"string\">&quot;body&quot;</span>])</span><br><span class=\"line\">        self.write(<span class=\"string\">&quot;finished!&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get</span>(<span class=\"params\">self, *args, **kwargs</span>):</span><br><span class=\"line\">        self.write(<span class=\"string\">&quot;ok&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">FinishUpload</span>(tornado.web.RequestHandler):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">post</span>(<span class=\"params\">self, *args, **kwargs</span>):</span><br><span class=\"line\">        md5value = self.get_argument(<span class=\"string\">&quot;md5value&quot;</span>)</span><br><span class=\"line\">        filename = self.get_argument(<span class=\"string\">&quot;filename&quot;</span>)</span><br><span class=\"line\">        totalsize = self.get_argument(<span class=\"string\">&quot;totalsize&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        path_part = os.path.join(BASE_DIR, <span class=\"string\">&quot;file_upload/static/upload/&quot;</span> + md5value + <span class=\"string\">&quot;.part&quot;</span>)</span><br><span class=\"line\">        path_ok = os.path.join(BASE_DIR, <span class=\"string\">&quot;file_upload/static/upload/&quot;</span> + md5value + <span class=\"string\">&quot;.ok&quot;</span>)</span><br><span class=\"line\">        old_name = os.path.join(BASE_DIR, <span class=\"string\">&quot;file_upload/static/upload/&quot;</span> + filename)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(path_ok, <span class=\"string\">&quot;w&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">            <span class=\"built_in\">print</span> <span class=\"string\">&quot;创建ok文件&quot;</span></span><br><span class=\"line\">        os.rename(path_part, old_name)</span><br><span class=\"line\">        self.write(<span class=\"string\">&quot;&#123;&#x27;data&#x27;: &#x27;ok&#x27;&#125;&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>注意：</p>\n<ul>\n<li>文件在上传时，临时文件名为 md5value + “.part”</li>\n<li>上传成功后，创建空文件 md5value + “.ok”</li>\n<li>文件保存的时候，这里是使用二进制方式追加，否则保存的文件不可用了。</li>\n</ul>\n<p>编写<strong>urls.py</strong>文件中的路由<code>/uploadfile</code>、<code>/finishupload</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> views <span class=\"keyword\">import</span> UploadJobHandler, FinishUpload</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"string\">r&#x27;^/uploadfile$&#x27;</span>, UploadJobHandler),</span><br><span class=\"line\">(<span class=\"string\">r&#x27;^/finishupload$&#x27;</span>, FinishUpload),</span><br></pre></td></tr></table></figure>\n\n\n<p>效果如下图</p>\n<p><img src=\"https://i.loli.net/2017/07/30/597d5287d6435.png\" alt=\"1.png\"><br><img src=\"https://ooo.0o0.ooo/2017/07/30/597d5287e975e.png\" alt=\"Image 2.png\"><br><img src=\"https://i.loli.net/2017/07/30/597d5287ea9ce.png\" alt=\"Image 3.png\"></p>\n<h2 id=\"不足\"><a href=\"#不足\" class=\"headerlink\" title=\"不足\"></a>不足</h2><ul>\n<li>大文件上传，速度仍是不理想</li>\n<li>对于大文件，断点续传，可能导致文件不能用</li>\n<li>上传速度受网速影响</li>\n</ul>\n<p>接下来该改进了，到此，以上参考的是<a href=\"https://www.idaima.com/article/17099\">大文件分块上传技术分享(c#实现)</a>，特此感谢分享。</p>"},{"title":"小余教育面经及整理","date":"2018-02-25T16:00:00.000Z","_content":"\n> 水光潋滟晴方好，山色空蒙雨亦奇。欲把西湖比西子，淡妆浓抹总相宜。\n\n## 初识杭州\n\n24号晚上到杭州，在这个陌生的城市呆了第一个晚上。早上六点从家里出发，吃了老妈包的饺子，然后做了一白天的汽车，一天下来也只吃了早饭。杭州下着小雨，天有点凉。\n\n25号在热心小姐姐的帮助下，迅速的找到了落脚的地方，购置完被褥啥的，已经用去1600块大洋了。但是好歹在这里有一个临时落脚的地方。\n\n25号晚上约了一个26号的面试，没有做什么准备就直接上了，这不，回来了只能写面经啦。这次面试直接暴露了几点：\n\n- python基础的不牢固\n- 还是python基础的不牢固\n\n因为这家公司的面试就针对了python来进行提问了，其他准备的啥算法、项目经验，都没有提到，所以在这里简单记一下，还是要加强基础的牢固掌握。\n\n<!--more-->\n\n## 面试经历\n\n面试的公司是杭州小余教育，这家公司是做在线教育平台的，约的面试时间是10:30。\n\n由于这家公司距离我现在住的地方不远，用高德查了一下距离，半个小时的步行路程，我是9:30出的门，在路上慢慢欣赏一路的风景，并寻找一个打印店，打印简历，到达公司在楼下整理了仪表和心情。到达公司的时间是10:20。\n\n进入公司后，先在前台签到，然后坐在沙发上等待大约20分钟，hr打印笔试题，进行笔试：\n\n笔试一共15题，12题的python基础，1题正则，1题思维，1题sql和json的问题。\n\n问题很基础，我也大致都写了，有些概念记得不是很清楚，但是也写了。问题大致的关注点如下：\n\n- r 的具体用法。**题目： 问 `r'abc\\n'*3` 的输出是多少。答： `abc\\nabc\\nabc\\n`**\n- range的使用和python2.7中如何出了这个问题，和生成器有关。**题目：使用for in 实现1亿次的自增**\n- 切片和切片的步长问题。**题目：用一行代码实现tmp列表中，偶数位的数大于3的数加3之后的累和。**\n- 垃圾回收机制和循环引用问题。**题目：解释python的垃圾回收机制，并说明是否能够出了循环引用的问题，为什么？**\n- staticmethod()与classmethod()的区别\n- 装饰器和单例。**题目：用装饰器实现单例**\n- 如何实现浅拷贝，浅拷贝和深拷贝的区别。\n- 删除列表中的重复元素\n- 正则表达式中贪婪模式和非贪婪模式。`\\w`的作用。\n- search和match的区别。\n- 继承和实现问题。\n- 两次称重知道八个小球中的较重的一个的问题。\n- 元类的问题。**题目：定义一个字典类，使里面的值只能设置一次**\n- 给两个表转换成json，sql语句一些数据，右连接和左连接。\n\n在答题的过程中，不管是会的还是不会的基本上都答了，在面试的时候，面试官也详细的询问了每一题的思路，并大致的给正确的结果。整个面试过程，在这15道题的解析中就结束了。\n\n准备的项目和其他问题，本来这一轮结束之后说还有CTO面试，但是赶到了中午的饭点了，然后就通知我回去了，让我等通知，整个面试过程，就问题15题的问题，虽然让我知道了python基础的薄弱，但是也让我很无奈。\n\n本次面试草草结束了，没有吸收到别的经验，算是上了一个python补习课，这里会好好整理一些python常见的面试问题，并牢牢记住。\n","source":"_posts/小余教育面经及整理.md","raw":"---\ntitle: 小余教育面经及整理\ndate: 2018-02-26\ntags: [面经]\n---\n\n> 水光潋滟晴方好，山色空蒙雨亦奇。欲把西湖比西子，淡妆浓抹总相宜。\n\n## 初识杭州\n\n24号晚上到杭州，在这个陌生的城市呆了第一个晚上。早上六点从家里出发，吃了老妈包的饺子，然后做了一白天的汽车，一天下来也只吃了早饭。杭州下着小雨，天有点凉。\n\n25号在热心小姐姐的帮助下，迅速的找到了落脚的地方，购置完被褥啥的，已经用去1600块大洋了。但是好歹在这里有一个临时落脚的地方。\n\n25号晚上约了一个26号的面试，没有做什么准备就直接上了，这不，回来了只能写面经啦。这次面试直接暴露了几点：\n\n- python基础的不牢固\n- 还是python基础的不牢固\n\n因为这家公司的面试就针对了python来进行提问了，其他准备的啥算法、项目经验，都没有提到，所以在这里简单记一下，还是要加强基础的牢固掌握。\n\n<!--more-->\n\n## 面试经历\n\n面试的公司是杭州小余教育，这家公司是做在线教育平台的，约的面试时间是10:30。\n\n由于这家公司距离我现在住的地方不远，用高德查了一下距离，半个小时的步行路程，我是9:30出的门，在路上慢慢欣赏一路的风景，并寻找一个打印店，打印简历，到达公司在楼下整理了仪表和心情。到达公司的时间是10:20。\n\n进入公司后，先在前台签到，然后坐在沙发上等待大约20分钟，hr打印笔试题，进行笔试：\n\n笔试一共15题，12题的python基础，1题正则，1题思维，1题sql和json的问题。\n\n问题很基础，我也大致都写了，有些概念记得不是很清楚，但是也写了。问题大致的关注点如下：\n\n- r 的具体用法。**题目： 问 `r'abc\\n'*3` 的输出是多少。答： `abc\\nabc\\nabc\\n`**\n- range的使用和python2.7中如何出了这个问题，和生成器有关。**题目：使用for in 实现1亿次的自增**\n- 切片和切片的步长问题。**题目：用一行代码实现tmp列表中，偶数位的数大于3的数加3之后的累和。**\n- 垃圾回收机制和循环引用问题。**题目：解释python的垃圾回收机制，并说明是否能够出了循环引用的问题，为什么？**\n- staticmethod()与classmethod()的区别\n- 装饰器和单例。**题目：用装饰器实现单例**\n- 如何实现浅拷贝，浅拷贝和深拷贝的区别。\n- 删除列表中的重复元素\n- 正则表达式中贪婪模式和非贪婪模式。`\\w`的作用。\n- search和match的区别。\n- 继承和实现问题。\n- 两次称重知道八个小球中的较重的一个的问题。\n- 元类的问题。**题目：定义一个字典类，使里面的值只能设置一次**\n- 给两个表转换成json，sql语句一些数据，右连接和左连接。\n\n在答题的过程中，不管是会的还是不会的基本上都答了，在面试的时候，面试官也详细的询问了每一题的思路，并大致的给正确的结果。整个面试过程，在这15道题的解析中就结束了。\n\n准备的项目和其他问题，本来这一轮结束之后说还有CTO面试，但是赶到了中午的饭点了，然后就通知我回去了，让我等通知，整个面试过程，就问题15题的问题，虽然让我知道了python基础的薄弱，但是也让我很无奈。\n\n本次面试草草结束了，没有吸收到别的经验，算是上了一个python补习课，这里会好好整理一些python常见的面试问题，并牢牢记住。\n","slug":"小余教育面经及整理","published":1,"updated":"2021-06-20T10:25:20.132Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluqa1hjh004hrlog9l5j6ena","content":"<blockquote>\n<p>水光潋滟晴方好，山色空蒙雨亦奇。欲把西湖比西子，淡妆浓抹总相宜。</p>\n</blockquote>\n<h2 id=\"初识杭州\"><a href=\"#初识杭州\" class=\"headerlink\" title=\"初识杭州\"></a>初识杭州</h2><p>24号晚上到杭州，在这个陌生的城市呆了第一个晚上。早上六点从家里出发，吃了老妈包的饺子，然后做了一白天的汽车，一天下来也只吃了早饭。杭州下着小雨，天有点凉。</p>\n<p>25号在热心小姐姐的帮助下，迅速的找到了落脚的地方，购置完被褥啥的，已经用去1600块大洋了。但是好歹在这里有一个临时落脚的地方。</p>\n<p>25号晚上约了一个26号的面试，没有做什么准备就直接上了，这不，回来了只能写面经啦。这次面试直接暴露了几点：</p>\n<ul>\n<li>python基础的不牢固</li>\n<li>还是python基础的不牢固</li>\n</ul>\n<p>因为这家公司的面试就针对了python来进行提问了，其他准备的啥算法、项目经验，都没有提到，所以在这里简单记一下，还是要加强基础的牢固掌握。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"面试经历\"><a href=\"#面试经历\" class=\"headerlink\" title=\"面试经历\"></a>面试经历</h2><p>面试的公司是杭州小余教育，这家公司是做在线教育平台的，约的面试时间是10:30。</p>\n<p>由于这家公司距离我现在住的地方不远，用高德查了一下距离，半个小时的步行路程，我是9:30出的门，在路上慢慢欣赏一路的风景，并寻找一个打印店，打印简历，到达公司在楼下整理了仪表和心情。到达公司的时间是10:20。</p>\n<p>进入公司后，先在前台签到，然后坐在沙发上等待大约20分钟，hr打印笔试题，进行笔试：</p>\n<p>笔试一共15题，12题的python基础，1题正则，1题思维，1题sql和json的问题。</p>\n<p>问题很基础，我也大致都写了，有些概念记得不是很清楚，但是也写了。问题大致的关注点如下：</p>\n<ul>\n<li>r 的具体用法。<strong>题目： 问 <code>r&#39;abc\\n&#39;*3</code> 的输出是多少。答： <code>abc\\nabc\\nabc\\n</code></strong></li>\n<li>range的使用和python2.7中如何出了这个问题，和生成器有关。<strong>题目：使用for in 实现1亿次的自增</strong></li>\n<li>切片和切片的步长问题。<strong>题目：用一行代码实现tmp列表中，偶数位的数大于3的数加3之后的累和。</strong></li>\n<li>垃圾回收机制和循环引用问题。<strong>题目：解释python的垃圾回收机制，并说明是否能够出了循环引用的问题，为什么？</strong></li>\n<li>staticmethod()与classmethod()的区别</li>\n<li>装饰器和单例。<strong>题目：用装饰器实现单例</strong></li>\n<li>如何实现浅拷贝，浅拷贝和深拷贝的区别。</li>\n<li>删除列表中的重复元素</li>\n<li>正则表达式中贪婪模式和非贪婪模式。<code>\\w</code>的作用。</li>\n<li>search和match的区别。</li>\n<li>继承和实现问题。</li>\n<li>两次称重知道八个小球中的较重的一个的问题。</li>\n<li>元类的问题。<strong>题目：定义一个字典类，使里面的值只能设置一次</strong></li>\n<li>给两个表转换成json，sql语句一些数据，右连接和左连接。</li>\n</ul>\n<p>在答题的过程中，不管是会的还是不会的基本上都答了，在面试的时候，面试官也详细的询问了每一题的思路，并大致的给正确的结果。整个面试过程，在这15道题的解析中就结束了。</p>\n<p>准备的项目和其他问题，本来这一轮结束之后说还有CTO面试，但是赶到了中午的饭点了，然后就通知我回去了，让我等通知，整个面试过程，就问题15题的问题，虽然让我知道了python基础的薄弱，但是也让我很无奈。</p>\n<p>本次面试草草结束了，没有吸收到别的经验，算是上了一个python补习课，这里会好好整理一些python常见的面试问题，并牢牢记住。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>水光潋滟晴方好，山色空蒙雨亦奇。欲把西湖比西子，淡妆浓抹总相宜。</p>\n</blockquote>\n<h2 id=\"初识杭州\"><a href=\"#初识杭州\" class=\"headerlink\" title=\"初识杭州\"></a>初识杭州</h2><p>24号晚上到杭州，在这个陌生的城市呆了第一个晚上。早上六点从家里出发，吃了老妈包的饺子，然后做了一白天的汽车，一天下来也只吃了早饭。杭州下着小雨，天有点凉。</p>\n<p>25号在热心小姐姐的帮助下，迅速的找到了落脚的地方，购置完被褥啥的，已经用去1600块大洋了。但是好歹在这里有一个临时落脚的地方。</p>\n<p>25号晚上约了一个26号的面试，没有做什么准备就直接上了，这不，回来了只能写面经啦。这次面试直接暴露了几点：</p>\n<ul>\n<li>python基础的不牢固</li>\n<li>还是python基础的不牢固</li>\n</ul>\n<p>因为这家公司的面试就针对了python来进行提问了，其他准备的啥算法、项目经验，都没有提到，所以在这里简单记一下，还是要加强基础的牢固掌握。</p>","more":"<h2 id=\"面试经历\"><a href=\"#面试经历\" class=\"headerlink\" title=\"面试经历\"></a>面试经历</h2><p>面试的公司是杭州小余教育，这家公司是做在线教育平台的，约的面试时间是10:30。</p>\n<p>由于这家公司距离我现在住的地方不远，用高德查了一下距离，半个小时的步行路程，我是9:30出的门，在路上慢慢欣赏一路的风景，并寻找一个打印店，打印简历，到达公司在楼下整理了仪表和心情。到达公司的时间是10:20。</p>\n<p>进入公司后，先在前台签到，然后坐在沙发上等待大约20分钟，hr打印笔试题，进行笔试：</p>\n<p>笔试一共15题，12题的python基础，1题正则，1题思维，1题sql和json的问题。</p>\n<p>问题很基础，我也大致都写了，有些概念记得不是很清楚，但是也写了。问题大致的关注点如下：</p>\n<ul>\n<li>r 的具体用法。<strong>题目： 问 <code>r&#39;abc\\n&#39;*3</code> 的输出是多少。答： <code>abc\\nabc\\nabc\\n</code></strong></li>\n<li>range的使用和python2.7中如何出了这个问题，和生成器有关。<strong>题目：使用for in 实现1亿次的自增</strong></li>\n<li>切片和切片的步长问题。<strong>题目：用一行代码实现tmp列表中，偶数位的数大于3的数加3之后的累和。</strong></li>\n<li>垃圾回收机制和循环引用问题。<strong>题目：解释python的垃圾回收机制，并说明是否能够出了循环引用的问题，为什么？</strong></li>\n<li>staticmethod()与classmethod()的区别</li>\n<li>装饰器和单例。<strong>题目：用装饰器实现单例</strong></li>\n<li>如何实现浅拷贝，浅拷贝和深拷贝的区别。</li>\n<li>删除列表中的重复元素</li>\n<li>正则表达式中贪婪模式和非贪婪模式。<code>\\w</code>的作用。</li>\n<li>search和match的区别。</li>\n<li>继承和实现问题。</li>\n<li>两次称重知道八个小球中的较重的一个的问题。</li>\n<li>元类的问题。<strong>题目：定义一个字典类，使里面的值只能设置一次</strong></li>\n<li>给两个表转换成json，sql语句一些数据，右连接和左连接。</li>\n</ul>\n<p>在答题的过程中，不管是会的还是不会的基本上都答了，在面试的时候，面试官也详细的询问了每一题的思路，并大致的给正确的结果。整个面试过程，在这15道题的解析中就结束了。</p>\n<p>准备的项目和其他问题，本来这一轮结束之后说还有CTO面试，但是赶到了中午的饭点了，然后就通知我回去了，让我等通知，整个面试过程，就问题15题的问题，虽然让我知道了python基础的薄弱，但是也让我很无奈。</p>\n<p>本次面试草草结束了，没有吸收到别的经验，算是上了一个python补习课，这里会好好整理一些python常见的面试问题，并牢牢记住。</p>"},{"title":"小论python的迭代器和生成器","date":"2017-09-08T16:00:00.000Z","_content":"\n> 《python核心编程》的第一部分读完之后，开始总结python的基础结构图，觉得生成器和迭代器的关系错综复杂，于是乎，没事呀，就研究研究吧。\n\n## 迭代器\n\n### 内建函数iter()\n\nlist,tuple,dict,set,str等集合数据类型不是迭代器对象Iterator但它们是可迭代对象Iterable，可以使用iter()方法将Iterable变成Iterator对象\n\n<!--more-->\n\n### 自定义迭代器\n\n自定义迭代器必须实现`__iter__()`和`next()`方法\n\n```python\n\nclass d:\n    def __init__(self, data):\n        self.date = data\n        self.index = len(data)\n        \n    def __iter__(self):\n        return self\n        \n    def next(self):\n        if self.index == 0:\n            raise StopIteration\n        self.index = self.index - 1\n        return self.date[self.index]\n    \n\ndh = d([1, 5])\nprint type(dh)  # <type 'instance'>\n\nfor x in dh:\n    print x\n\n``` \n\n## 生成器\n\n生成器是一种特殊的迭代器，内部支持了生成器协议，不需要明确定义__iter__()和next()方法\n\n```python\ndef b():\n    yield 12\n    yield 13\nbf = b()\nfor i in bf:\n    print i\n```\n\n生成器中还有两个很重要的方法：send()和close()。\n\n### send(value):\n\n从前面了解到，next()方法可以恢复生成器状态并继续执行，其实send()是除next()外另一个恢复生成器的方法。\n\nPython 2.5中，yield语句变成了yield表达式，也就是说yield可以有一个值，而这个值就是send()方法的参数，所以send(None)和next()是等效的。同样，next()和send()的返回值都是yield语句处的参数（yielded value）\n\n关于send()方法需要注意的是：调用send传入非None值前，生成器必须处于挂起状态，否则将抛出异常。也就是说，第一次调用时，要使用next()语句或send(None)，因为没有yield语句来接收这个值。\n\n### close():\n这个方法用于关闭生成器，对关闭的生成器后再次调用next或send将抛出StopIteration异常。\n\n## 生成器和迭代器主要有以下几点区别：\n\n- 迭代器是一个对象，生成器是一个函数。\n- 迭代器包含`__iter__()` 和`next()`方法`__iter__()`返回迭代器本身(self)，next()返回next()方法返回容器的下一个元素；生成器有生成器函数生成，但是不用return返回，而是yield一次返回一个结果，且“暂停”代码的执行。\n- 生成器是一种特殊的迭代器，可使用next()方法。\n\n```python\ndef a():\n    yield 1\n    yield 2\naf = a()\naf.next()  # 1\naf.next()  # 2\n```\n\n","source":"_posts/小论python的迭代器和生成器.md","raw":"---\ntitle: 小论python的迭代器和生成器\ndate: 2017-09-09\ntags: [python]\n---\n\n> 《python核心编程》的第一部分读完之后，开始总结python的基础结构图，觉得生成器和迭代器的关系错综复杂，于是乎，没事呀，就研究研究吧。\n\n## 迭代器\n\n### 内建函数iter()\n\nlist,tuple,dict,set,str等集合数据类型不是迭代器对象Iterator但它们是可迭代对象Iterable，可以使用iter()方法将Iterable变成Iterator对象\n\n<!--more-->\n\n### 自定义迭代器\n\n自定义迭代器必须实现`__iter__()`和`next()`方法\n\n```python\n\nclass d:\n    def __init__(self, data):\n        self.date = data\n        self.index = len(data)\n        \n    def __iter__(self):\n        return self\n        \n    def next(self):\n        if self.index == 0:\n            raise StopIteration\n        self.index = self.index - 1\n        return self.date[self.index]\n    \n\ndh = d([1, 5])\nprint type(dh)  # <type 'instance'>\n\nfor x in dh:\n    print x\n\n``` \n\n## 生成器\n\n生成器是一种特殊的迭代器，内部支持了生成器协议，不需要明确定义__iter__()和next()方法\n\n```python\ndef b():\n    yield 12\n    yield 13\nbf = b()\nfor i in bf:\n    print i\n```\n\n生成器中还有两个很重要的方法：send()和close()。\n\n### send(value):\n\n从前面了解到，next()方法可以恢复生成器状态并继续执行，其实send()是除next()外另一个恢复生成器的方法。\n\nPython 2.5中，yield语句变成了yield表达式，也就是说yield可以有一个值，而这个值就是send()方法的参数，所以send(None)和next()是等效的。同样，next()和send()的返回值都是yield语句处的参数（yielded value）\n\n关于send()方法需要注意的是：调用send传入非None值前，生成器必须处于挂起状态，否则将抛出异常。也就是说，第一次调用时，要使用next()语句或send(None)，因为没有yield语句来接收这个值。\n\n### close():\n这个方法用于关闭生成器，对关闭的生成器后再次调用next或send将抛出StopIteration异常。\n\n## 生成器和迭代器主要有以下几点区别：\n\n- 迭代器是一个对象，生成器是一个函数。\n- 迭代器包含`__iter__()` 和`next()`方法`__iter__()`返回迭代器本身(self)，next()返回next()方法返回容器的下一个元素；生成器有生成器函数生成，但是不用return返回，而是yield一次返回一个结果，且“暂停”代码的执行。\n- 生成器是一种特殊的迭代器，可使用next()方法。\n\n```python\ndef a():\n    yield 1\n    yield 2\naf = a()\naf.next()  # 1\naf.next()  # 2\n```\n\n","slug":"小论python的迭代器和生成器","published":1,"updated":"2021-06-20T10:25:20.132Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluqa1hjh004krlog1v45atwq","content":"<blockquote>\n<p>《python核心编程》的第一部分读完之后，开始总结python的基础结构图，觉得生成器和迭代器的关系错综复杂，于是乎，没事呀，就研究研究吧。</p>\n</blockquote>\n<h2 id=\"迭代器\"><a href=\"#迭代器\" class=\"headerlink\" title=\"迭代器\"></a>迭代器</h2><h3 id=\"内建函数iter\"><a href=\"#内建函数iter\" class=\"headerlink\" title=\"内建函数iter()\"></a>内建函数iter()</h3><p>list,tuple,dict,set,str等集合数据类型不是迭代器对象Iterator但它们是可迭代对象Iterable，可以使用iter()方法将Iterable变成Iterator对象</p>\n<span id=\"more\"></span>\n\n<h3 id=\"自定义迭代器\"><a href=\"#自定义迭代器\" class=\"headerlink\" title=\"自定义迭代器\"></a>自定义迭代器</h3><p>自定义迭代器必须实现<code>__iter__()</code>和<code>next()</code>方法</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">d</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, data</span>):</span><br><span class=\"line\">        self.date = data</span><br><span class=\"line\">        self.index = <span class=\"built_in\">len</span>(data)</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__iter__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">next</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.index == <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> StopIteration</span><br><span class=\"line\">        self.index = self.index - <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.date[self.index]</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">dh = d([<span class=\"number\">1</span>, <span class=\"number\">5</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"built_in\">type</span>(dh)  <span class=\"comment\"># &lt;type &#x27;instance&#x27;&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> dh:</span><br><span class=\"line\">    <span class=\"built_in\">print</span> x</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"生成器\"><a href=\"#生成器\" class=\"headerlink\" title=\"生成器\"></a>生成器</h2><p>生成器是一种特殊的迭代器，内部支持了生成器协议，不需要明确定义__iter__()和next()方法</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">b</span>():</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">12</span></span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">13</span></span><br><span class=\"line\">bf = b()</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> bf:</span><br><span class=\"line\">    <span class=\"built_in\">print</span> i</span><br></pre></td></tr></table></figure>\n\n<p>生成器中还有两个很重要的方法：send()和close()。</p>\n<h3 id=\"send-value\"><a href=\"#send-value\" class=\"headerlink\" title=\"send(value):\"></a>send(value):</h3><p>从前面了解到，next()方法可以恢复生成器状态并继续执行，其实send()是除next()外另一个恢复生成器的方法。</p>\n<p>Python 2.5中，yield语句变成了yield表达式，也就是说yield可以有一个值，而这个值就是send()方法的参数，所以send(None)和next()是等效的。同样，next()和send()的返回值都是yield语句处的参数（yielded value）</p>\n<p>关于send()方法需要注意的是：调用send传入非None值前，生成器必须处于挂起状态，否则将抛出异常。也就是说，第一次调用时，要使用next()语句或send(None)，因为没有yield语句来接收这个值。</p>\n<h3 id=\"close\"><a href=\"#close\" class=\"headerlink\" title=\"close():\"></a>close():</h3><p>这个方法用于关闭生成器，对关闭的生成器后再次调用next或send将抛出StopIteration异常。</p>\n<h2 id=\"生成器和迭代器主要有以下几点区别：\"><a href=\"#生成器和迭代器主要有以下几点区别：\" class=\"headerlink\" title=\"生成器和迭代器主要有以下几点区别：\"></a>生成器和迭代器主要有以下几点区别：</h2><ul>\n<li>迭代器是一个对象，生成器是一个函数。</li>\n<li>迭代器包含<code>__iter__()</code> 和<code>next()</code>方法<code>__iter__()</code>返回迭代器本身(self)，next()返回next()方法返回容器的下一个元素；生成器有生成器函数生成，但是不用return返回，而是yield一次返回一个结果，且“暂停”代码的执行。</li>\n<li>生成器是一种特殊的迭代器，可使用next()方法。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">a</span>():</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">2</span></span><br><span class=\"line\">af = a()</span><br><span class=\"line\">af.<span class=\"built_in\">next</span>()  <span class=\"comment\"># 1</span></span><br><span class=\"line\">af.<span class=\"built_in\">next</span>()  <span class=\"comment\"># 2</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>《python核心编程》的第一部分读完之后，开始总结python的基础结构图，觉得生成器和迭代器的关系错综复杂，于是乎，没事呀，就研究研究吧。</p>\n</blockquote>\n<h2 id=\"迭代器\"><a href=\"#迭代器\" class=\"headerlink\" title=\"迭代器\"></a>迭代器</h2><h3 id=\"内建函数iter\"><a href=\"#内建函数iter\" class=\"headerlink\" title=\"内建函数iter()\"></a>内建函数iter()</h3><p>list,tuple,dict,set,str等集合数据类型不是迭代器对象Iterator但它们是可迭代对象Iterable，可以使用iter()方法将Iterable变成Iterator对象</p>","more":"<h3 id=\"自定义迭代器\"><a href=\"#自定义迭代器\" class=\"headerlink\" title=\"自定义迭代器\"></a>自定义迭代器</h3><p>自定义迭代器必须实现<code>__iter__()</code>和<code>next()</code>方法</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">d</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, data</span>):</span><br><span class=\"line\">        self.date = data</span><br><span class=\"line\">        self.index = <span class=\"built_in\">len</span>(data)</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__iter__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">next</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.index == <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> StopIteration</span><br><span class=\"line\">        self.index = self.index - <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.date[self.index]</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">dh = d([<span class=\"number\">1</span>, <span class=\"number\">5</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"built_in\">type</span>(dh)  <span class=\"comment\"># &lt;type &#x27;instance&#x27;&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> dh:</span><br><span class=\"line\">    <span class=\"built_in\">print</span> x</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"生成器\"><a href=\"#生成器\" class=\"headerlink\" title=\"生成器\"></a>生成器</h2><p>生成器是一种特殊的迭代器，内部支持了生成器协议，不需要明确定义__iter__()和next()方法</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">b</span>():</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">12</span></span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">13</span></span><br><span class=\"line\">bf = b()</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> bf:</span><br><span class=\"line\">    <span class=\"built_in\">print</span> i</span><br></pre></td></tr></table></figure>\n\n<p>生成器中还有两个很重要的方法：send()和close()。</p>\n<h3 id=\"send-value\"><a href=\"#send-value\" class=\"headerlink\" title=\"send(value):\"></a>send(value):</h3><p>从前面了解到，next()方法可以恢复生成器状态并继续执行，其实send()是除next()外另一个恢复生成器的方法。</p>\n<p>Python 2.5中，yield语句变成了yield表达式，也就是说yield可以有一个值，而这个值就是send()方法的参数，所以send(None)和next()是等效的。同样，next()和send()的返回值都是yield语句处的参数（yielded value）</p>\n<p>关于send()方法需要注意的是：调用send传入非None值前，生成器必须处于挂起状态，否则将抛出异常。也就是说，第一次调用时，要使用next()语句或send(None)，因为没有yield语句来接收这个值。</p>\n<h3 id=\"close\"><a href=\"#close\" class=\"headerlink\" title=\"close():\"></a>close():</h3><p>这个方法用于关闭生成器，对关闭的生成器后再次调用next或send将抛出StopIteration异常。</p>\n<h2 id=\"生成器和迭代器主要有以下几点区别：\"><a href=\"#生成器和迭代器主要有以下几点区别：\" class=\"headerlink\" title=\"生成器和迭代器主要有以下几点区别：\"></a>生成器和迭代器主要有以下几点区别：</h2><ul>\n<li>迭代器是一个对象，生成器是一个函数。</li>\n<li>迭代器包含<code>__iter__()</code> 和<code>next()</code>方法<code>__iter__()</code>返回迭代器本身(self)，next()返回next()方法返回容器的下一个元素；生成器有生成器函数生成，但是不用return返回，而是yield一次返回一个结果，且“暂停”代码的执行。</li>\n<li>生成器是一种特殊的迭代器，可使用next()方法。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">a</span>():</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">2</span></span><br><span class=\"line\">af = a()</span><br><span class=\"line\">af.<span class=\"built_in\">next</span>()  <span class=\"comment\"># 1</span></span><br><span class=\"line\">af.<span class=\"built_in\">next</span>()  <span class=\"comment\"># 2</span></span><br></pre></td></tr></table></figure>"},{"title":"批量删除git远程已经不存在的本地分支","date":"2024-03-21T16:00:00.000Z","_content":"\n## 获取远程仓库的最新信息\n\n首先，我们需要获取远程仓库的最新信息。这是确保我们本地仓库状态与远程仓库同步的关键步骤。我们可以使用 `git fetch` 命令来实现这一点：\n\n```bash\ngit fetch --force\n```\n\n这个命令会强制从远程仓库获取最新的信息。\n\n## 删除远程跟踪的引用\n\n在获取远程仓库的最新信息后，我们可能希望删除那些远程已经不存在的本地远程跟踪的引用。这可以通过使用 `--prune` 选项来实现：\n\n```bash\ngit fetch --prune\n```\n\n这个命令会从本地仓库中删除所有远程仓库已经删除的远程跟踪的引用。这样，我们的本地仓库就不会再跟踪那些已经在远程仓库中删除的分支了。\n\n## 获取远程已经删除但本地仍存在的分支列表\n\n我们可以使用以下命令获取远程仓库已经删除但本地仍存在的分支列表：\n\n```bash\ngit branch -vv | grep 'origin/.*: gone]' | awk \"{print \\$1}\"\n```\n\n如果你的Git设置为中文，那么你需要将 `gone` 换成 `丢失`：\n\n```bash\ngit branch -vv | grep 'origin/.*: 丢失]' | awk \"{print \\$1}\"\n```\n\n这些命令将列出所有远程已经删除但本地仍存在的分支。\n\n## 批量删除分支\n\n有了这个列表后，我们就可以批量删除这些分支了：\n\n```bash\ngit branch -vv | grep 'origin/.*: 丢失]' | awk \"{print \\$1}\" | xargs git branch -d\n```\n\n如果有些分支没有被合并，`git branch -d` 命令可能会失败。如果你想强制删除这些分支，你可以使用 `git branch -D` 命令代替。但是，请谨慎使用此命令，因为它会丢失未合并的更改。\n","source":"_posts/批量删除git远程已经不存在的本地分支.md","raw":"---\ntitle: 批量删除git远程已经不存在的本地分支\ndate: 2024-03-22\ntags: [git]\n---\n\n## 获取远程仓库的最新信息\n\n首先，我们需要获取远程仓库的最新信息。这是确保我们本地仓库状态与远程仓库同步的关键步骤。我们可以使用 `git fetch` 命令来实现这一点：\n\n```bash\ngit fetch --force\n```\n\n这个命令会强制从远程仓库获取最新的信息。\n\n## 删除远程跟踪的引用\n\n在获取远程仓库的最新信息后，我们可能希望删除那些远程已经不存在的本地远程跟踪的引用。这可以通过使用 `--prune` 选项来实现：\n\n```bash\ngit fetch --prune\n```\n\n这个命令会从本地仓库中删除所有远程仓库已经删除的远程跟踪的引用。这样，我们的本地仓库就不会再跟踪那些已经在远程仓库中删除的分支了。\n\n## 获取远程已经删除但本地仍存在的分支列表\n\n我们可以使用以下命令获取远程仓库已经删除但本地仍存在的分支列表：\n\n```bash\ngit branch -vv | grep 'origin/.*: gone]' | awk \"{print \\$1}\"\n```\n\n如果你的Git设置为中文，那么你需要将 `gone` 换成 `丢失`：\n\n```bash\ngit branch -vv | grep 'origin/.*: 丢失]' | awk \"{print \\$1}\"\n```\n\n这些命令将列出所有远程已经删除但本地仍存在的分支。\n\n## 批量删除分支\n\n有了这个列表后，我们就可以批量删除这些分支了：\n\n```bash\ngit branch -vv | grep 'origin/.*: 丢失]' | awk \"{print \\$1}\" | xargs git branch -d\n```\n\n如果有些分支没有被合并，`git branch -d` 命令可能会失败。如果你想强制删除这些分支，你可以使用 `git branch -D` 命令代替。但是，请谨慎使用此命令，因为它会丢失未合并的更改。\n","slug":"批量删除git远程已经不存在的本地分支","published":1,"updated":"2024-03-22T08:43:54.440Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluqa1hji004mrlog3g7j7chz","content":"<h2 id=\"获取远程仓库的最新信息\"><a href=\"#获取远程仓库的最新信息\" class=\"headerlink\" title=\"获取远程仓库的最新信息\"></a>获取远程仓库的最新信息</h2><p>首先，我们需要获取远程仓库的最新信息。这是确保我们本地仓库状态与远程仓库同步的关键步骤。我们可以使用 <code>git fetch</code> 命令来实现这一点：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch --force</span><br></pre></td></tr></table></figure>\n\n<p>这个命令会强制从远程仓库获取最新的信息。</p>\n<h2 id=\"删除远程跟踪的引用\"><a href=\"#删除远程跟踪的引用\" class=\"headerlink\" title=\"删除远程跟踪的引用\"></a>删除远程跟踪的引用</h2><p>在获取远程仓库的最新信息后，我们可能希望删除那些远程已经不存在的本地远程跟踪的引用。这可以通过使用 <code>--prune</code> 选项来实现：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch --prune</span><br></pre></td></tr></table></figure>\n\n<p>这个命令会从本地仓库中删除所有远程仓库已经删除的远程跟踪的引用。这样，我们的本地仓库就不会再跟踪那些已经在远程仓库中删除的分支了。</p>\n<h2 id=\"获取远程已经删除但本地仍存在的分支列表\"><a href=\"#获取远程已经删除但本地仍存在的分支列表\" class=\"headerlink\" title=\"获取远程已经删除但本地仍存在的分支列表\"></a>获取远程已经删除但本地仍存在的分支列表</h2><p>我们可以使用以下命令获取远程仓库已经删除但本地仍存在的分支列表：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -vv | grep <span class=\"string\">&#x27;origin/.*: gone]&#x27;</span> | awk <span class=\"string\">&quot;&#123;print \\$1&#125;&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>如果你的Git设置为中文，那么你需要将 <code>gone</code> 换成 <code>丢失</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -vv | grep <span class=\"string\">&#x27;origin/.*: 丢失]&#x27;</span> | awk <span class=\"string\">&quot;&#123;print \\$1&#125;&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>这些命令将列出所有远程已经删除但本地仍存在的分支。</p>\n<h2 id=\"批量删除分支\"><a href=\"#批量删除分支\" class=\"headerlink\" title=\"批量删除分支\"></a>批量删除分支</h2><p>有了这个列表后，我们就可以批量删除这些分支了：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -vv | grep <span class=\"string\">&#x27;origin/.*: 丢失]&#x27;</span> | awk <span class=\"string\">&quot;&#123;print \\$1&#125;&quot;</span> | xargs git branch -d</span><br></pre></td></tr></table></figure>\n\n<p>如果有些分支没有被合并，<code>git branch -d</code> 命令可能会失败。如果你想强制删除这些分支，你可以使用 <code>git branch -D</code> 命令代替。但是，请谨慎使用此命令，因为它会丢失未合并的更改。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"获取远程仓库的最新信息\"><a href=\"#获取远程仓库的最新信息\" class=\"headerlink\" title=\"获取远程仓库的最新信息\"></a>获取远程仓库的最新信息</h2><p>首先，我们需要获取远程仓库的最新信息。这是确保我们本地仓库状态与远程仓库同步的关键步骤。我们可以使用 <code>git fetch</code> 命令来实现这一点：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch --force</span><br></pre></td></tr></table></figure>\n\n<p>这个命令会强制从远程仓库获取最新的信息。</p>\n<h2 id=\"删除远程跟踪的引用\"><a href=\"#删除远程跟踪的引用\" class=\"headerlink\" title=\"删除远程跟踪的引用\"></a>删除远程跟踪的引用</h2><p>在获取远程仓库的最新信息后，我们可能希望删除那些远程已经不存在的本地远程跟踪的引用。这可以通过使用 <code>--prune</code> 选项来实现：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch --prune</span><br></pre></td></tr></table></figure>\n\n<p>这个命令会从本地仓库中删除所有远程仓库已经删除的远程跟踪的引用。这样，我们的本地仓库就不会再跟踪那些已经在远程仓库中删除的分支了。</p>\n<h2 id=\"获取远程已经删除但本地仍存在的分支列表\"><a href=\"#获取远程已经删除但本地仍存在的分支列表\" class=\"headerlink\" title=\"获取远程已经删除但本地仍存在的分支列表\"></a>获取远程已经删除但本地仍存在的分支列表</h2><p>我们可以使用以下命令获取远程仓库已经删除但本地仍存在的分支列表：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -vv | grep <span class=\"string\">&#x27;origin/.*: gone]&#x27;</span> | awk <span class=\"string\">&quot;&#123;print \\$1&#125;&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>如果你的Git设置为中文，那么你需要将 <code>gone</code> 换成 <code>丢失</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -vv | grep <span class=\"string\">&#x27;origin/.*: 丢失]&#x27;</span> | awk <span class=\"string\">&quot;&#123;print \\$1&#125;&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>这些命令将列出所有远程已经删除但本地仍存在的分支。</p>\n<h2 id=\"批量删除分支\"><a href=\"#批量删除分支\" class=\"headerlink\" title=\"批量删除分支\"></a>批量删除分支</h2><p>有了这个列表后，我们就可以批量删除这些分支了：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -vv | grep <span class=\"string\">&#x27;origin/.*: 丢失]&#x27;</span> | awk <span class=\"string\">&quot;&#123;print \\$1&#125;&quot;</span> | xargs git branch -d</span><br></pre></td></tr></table></figure>\n\n<p>如果有些分支没有被合并，<code>git branch -d</code> 命令可能会失败。如果你想强制删除这些分支，你可以使用 <code>git branch -D</code> 命令代替。但是，请谨慎使用此命令，因为它会丢失未合并的更改。</p>\n"},{"title":"敏捷开发之Jenkins的部署和基本使用","date":"2019-04-23T16:00:00.000Z","_content":"\n## java环境安装\n\nJenkins新版本已经不支持jdk7及以下版本，这里安装jdk8。\n\n更新软件包列表\n\n```\nsudo apt update\n```\n\n### Ubuntu16 安装 jdk8\n\n```bash\nsudo apt install openjdk-8-jdk\n```\n\n查看Java版本，看看是否安装成功\n\n```\njava -version\n```\n\n<!--more-->\n\n\n![1555927916172](https://i.loli.net/2019/04/23/5cbea14a55e6f.png)\n\n多版本jdk时，版本之间的切换\n\n```\nsudo update-alternatives --config java\n```\n\n前面带星号的是当前正在使用的Java版本，键入编号选择使用哪个版本。\n\n![1555927981317](https://i.loli.net/2019/04/23/5cbea14a71aa0.png)\n\n### Ubuntu16 安装jdk7\n\n这里补充一点Ubuntu系统中jdk7的安装（为什么使用jdk7，历史遗留问题。）\n\njdk7已经不支持从源中下载，所以需要手动下载安装包进行安装。\n\n- 首先需要依次下载并安装 jdk7 以及 jdk7 依赖的类库：\n\n[fontconfig-config](https://packages.debian.org/sid/fontconfig-config)\n\n[libfontconfig1](https://packages.debian.org/sid/libfontconfig1)\n\n[libjpeg62-turbo](https://packages.debian.org/sid/libjpeg62-turbo)\n\n[openjdk-7-jre-headless](https://packages.debian.org/experimental/openjdk-7-jre-headless)\n\n[openjdk-7-jre](https://packages.debian.org/experimental/openjdk-7-jre)\n\n[openjdk-7-jdk](https://packages.debian.org/experimental/openjdk-7-jdk)\n\n- 下载的时候要选择和自己平台匹配的 deb 包，我安装的是 64 位的 Ubuntu 系统，所以我下载的是 amd64 的 deb 包。然后把下载的这六个 deb 文件放在一个空文件夹里面，执行：\n\n```\nsudo dpkg -i *.deb\n```\n\n如果出现其他依赖的问题，执行：\n\n```\nsudo apt install -f\n```\n\n- 执行完之后 jdk 7 就安装成功了。\n\n- 执行 java -version 看一下当前版本号，如果是 jdk-1.7 那么你就成功了。\n\n## Jenkins安装\n\n我们从Jenkins官方网站<https://jenkins.io/>下载最新的war包。虽然Jenkins提供了Windows、Linux、OS X等各种安装程序，但是，这些安装程序都没有war包好使。只需要运行命令：\n\n```\njava -jar jenkins.war\n```\n\nJenkins就启动成功了！它的war包自带Jetty服务器，剩下的工作我们全部在浏览器中进行。默认使用8080端口，如果想使用其他端口命令改成：\n\n```\njava -jar jenkins.war --httpPort=9001\n```\n\n第一次启动Jenkins时，出于安全考虑，Jenkins会自动生成一个随机的按照口令。\n\n![1555998670165](/home/wen/Pictures/typora/1555998670165.png)\n\n注意控制台输出的口令，复制下来，然后在浏览器输入：[http://127.0.0.1:8080](http://127.0.0.1:8080)\n\n粘贴口令，进入安装界面，如果执行默认的安装，Jenkins就自动配置好了Maven、git等常用插件。默认安装插件的耗时较长，要耐心等待。最后，创建一个admin用户，完成安装。\n\n## 创建Linux服务\n\n因为我们不想每次登录到Linux去启动Jenkins，也不想写脚本来启动服务。推荐安装JDK后，配合supervisor，把Jenkins直接变成一个服务。\n\n```\n#/etc/supervisor/conf.d/ci.conf\n[program:ci]                                                                                   command=java -jar /usr/lib/jenkins.war --httpPort=9001\nuser=ubuntu\nautostart=true\nautorestart=true\nstartsecs=30\nstartretries=5\n```\n\n## Jenkins的使用\n\n在Jenkins首页选择 “新建任务”，输入名字，选择“构建一个自由风格的软件项目”\n\n![1555984239991](https://i.loli.net/2019/04/23/5cbea14aa3ef5.png)\n\n在配置页中，源码管理选择Git，填入地址：\n\n![1555984798267](https://i.loli.net/2019/04/23/5cbea14a7e0e0.png)\n\n默认使用master分支。如果需要口令，在Credentials中添加用户名/口令，或者使用SSH Key。\n\n构建触发器指定了触发一次构建的条件。推荐使用最简单的配置“Poll SCM”，它的意思是，定时检查版本库，发现有新的提交就触发构建。这种方式对git、SVN等所有版本管理系统都是通用的。\n\n我们在日程表中填入：\n\n```\n* * * * *\n```\n\n![1555984850539](https://i.loli.net/2019/04/23/5cbea14a87491.png)\n\n表示每分钟检查一次。如果你觉得太频繁，可以改成“每3分钟检查一次”：\n\n```\n*/3 * * * *\n```\n\n在演示项目中，使用了执行Shell构建的方法，所以在“构建”中选择“执行shell”。\n\n这里的shell是构建项目的过程。可以简单的写一个测试一下：\n\n```\necho \"Hello ------------------\"\n```\n\n点击保存，就可以执行自动化构建了。\n\n![1555985221427](https://i.loli.net/2019/04/23/5cbea14a971ce.png)可以在Console Output中看到控制台详细输出，便于出错排查：\n\n![1555985266485](https://i.loli.net/2019/04/23/5cbea14ab26a5.png)\n\n这里为正确的输出。构建完成。\n\n## 关于Docker\n\n这里建议的是使用Docker来构建集成环境，Docker和jenkins都在主机的环境中，gitlab可以使用Docker部署。Nginx代理各个服务。\n\n\n\n参考\n\n- [在Ubuntu 18.04.1系统中安装Jdk 7（openjdk-7-jdk](<https://ywnz.com/linuxjc/2734.html>)\n- [使用Jenkins进行持续集成](<https://www.liaoxuefeng.com/article/001463233913442cdb2d1bd1b1b42e3b0b29eb1ba736c5e000>)\n","source":"_posts/敏捷开发之Jenkins的部署和基本使用.md","raw":"---\ntitle: 敏捷开发之Jenkins的部署和基本使用\ndate: 2019-04-24\ntags: [敏捷开发, Ubuntu]\n---\n\n## java环境安装\n\nJenkins新版本已经不支持jdk7及以下版本，这里安装jdk8。\n\n更新软件包列表\n\n```\nsudo apt update\n```\n\n### Ubuntu16 安装 jdk8\n\n```bash\nsudo apt install openjdk-8-jdk\n```\n\n查看Java版本，看看是否安装成功\n\n```\njava -version\n```\n\n<!--more-->\n\n\n![1555927916172](https://i.loli.net/2019/04/23/5cbea14a55e6f.png)\n\n多版本jdk时，版本之间的切换\n\n```\nsudo update-alternatives --config java\n```\n\n前面带星号的是当前正在使用的Java版本，键入编号选择使用哪个版本。\n\n![1555927981317](https://i.loli.net/2019/04/23/5cbea14a71aa0.png)\n\n### Ubuntu16 安装jdk7\n\n这里补充一点Ubuntu系统中jdk7的安装（为什么使用jdk7，历史遗留问题。）\n\njdk7已经不支持从源中下载，所以需要手动下载安装包进行安装。\n\n- 首先需要依次下载并安装 jdk7 以及 jdk7 依赖的类库：\n\n[fontconfig-config](https://packages.debian.org/sid/fontconfig-config)\n\n[libfontconfig1](https://packages.debian.org/sid/libfontconfig1)\n\n[libjpeg62-turbo](https://packages.debian.org/sid/libjpeg62-turbo)\n\n[openjdk-7-jre-headless](https://packages.debian.org/experimental/openjdk-7-jre-headless)\n\n[openjdk-7-jre](https://packages.debian.org/experimental/openjdk-7-jre)\n\n[openjdk-7-jdk](https://packages.debian.org/experimental/openjdk-7-jdk)\n\n- 下载的时候要选择和自己平台匹配的 deb 包，我安装的是 64 位的 Ubuntu 系统，所以我下载的是 amd64 的 deb 包。然后把下载的这六个 deb 文件放在一个空文件夹里面，执行：\n\n```\nsudo dpkg -i *.deb\n```\n\n如果出现其他依赖的问题，执行：\n\n```\nsudo apt install -f\n```\n\n- 执行完之后 jdk 7 就安装成功了。\n\n- 执行 java -version 看一下当前版本号，如果是 jdk-1.7 那么你就成功了。\n\n## Jenkins安装\n\n我们从Jenkins官方网站<https://jenkins.io/>下载最新的war包。虽然Jenkins提供了Windows、Linux、OS X等各种安装程序，但是，这些安装程序都没有war包好使。只需要运行命令：\n\n```\njava -jar jenkins.war\n```\n\nJenkins就启动成功了！它的war包自带Jetty服务器，剩下的工作我们全部在浏览器中进行。默认使用8080端口，如果想使用其他端口命令改成：\n\n```\njava -jar jenkins.war --httpPort=9001\n```\n\n第一次启动Jenkins时，出于安全考虑，Jenkins会自动生成一个随机的按照口令。\n\n![1555998670165](/home/wen/Pictures/typora/1555998670165.png)\n\n注意控制台输出的口令，复制下来，然后在浏览器输入：[http://127.0.0.1:8080](http://127.0.0.1:8080)\n\n粘贴口令，进入安装界面，如果执行默认的安装，Jenkins就自动配置好了Maven、git等常用插件。默认安装插件的耗时较长，要耐心等待。最后，创建一个admin用户，完成安装。\n\n## 创建Linux服务\n\n因为我们不想每次登录到Linux去启动Jenkins，也不想写脚本来启动服务。推荐安装JDK后，配合supervisor，把Jenkins直接变成一个服务。\n\n```\n#/etc/supervisor/conf.d/ci.conf\n[program:ci]                                                                                   command=java -jar /usr/lib/jenkins.war --httpPort=9001\nuser=ubuntu\nautostart=true\nautorestart=true\nstartsecs=30\nstartretries=5\n```\n\n## Jenkins的使用\n\n在Jenkins首页选择 “新建任务”，输入名字，选择“构建一个自由风格的软件项目”\n\n![1555984239991](https://i.loli.net/2019/04/23/5cbea14aa3ef5.png)\n\n在配置页中，源码管理选择Git，填入地址：\n\n![1555984798267](https://i.loli.net/2019/04/23/5cbea14a7e0e0.png)\n\n默认使用master分支。如果需要口令，在Credentials中添加用户名/口令，或者使用SSH Key。\n\n构建触发器指定了触发一次构建的条件。推荐使用最简单的配置“Poll SCM”，它的意思是，定时检查版本库，发现有新的提交就触发构建。这种方式对git、SVN等所有版本管理系统都是通用的。\n\n我们在日程表中填入：\n\n```\n* * * * *\n```\n\n![1555984850539](https://i.loli.net/2019/04/23/5cbea14a87491.png)\n\n表示每分钟检查一次。如果你觉得太频繁，可以改成“每3分钟检查一次”：\n\n```\n*/3 * * * *\n```\n\n在演示项目中，使用了执行Shell构建的方法，所以在“构建”中选择“执行shell”。\n\n这里的shell是构建项目的过程。可以简单的写一个测试一下：\n\n```\necho \"Hello ------------------\"\n```\n\n点击保存，就可以执行自动化构建了。\n\n![1555985221427](https://i.loli.net/2019/04/23/5cbea14a971ce.png)可以在Console Output中看到控制台详细输出，便于出错排查：\n\n![1555985266485](https://i.loli.net/2019/04/23/5cbea14ab26a5.png)\n\n这里为正确的输出。构建完成。\n\n## 关于Docker\n\n这里建议的是使用Docker来构建集成环境，Docker和jenkins都在主机的环境中，gitlab可以使用Docker部署。Nginx代理各个服务。\n\n\n\n参考\n\n- [在Ubuntu 18.04.1系统中安装Jdk 7（openjdk-7-jdk](<https://ywnz.com/linuxjc/2734.html>)\n- [使用Jenkins进行持续集成](<https://www.liaoxuefeng.com/article/001463233913442cdb2d1bd1b1b42e3b0b29eb1ba736c5e000>)\n","slug":"敏捷开发之Jenkins的部署和基本使用","published":1,"updated":"2021-06-20T10:25:20.132Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluqa1hji004prlog6ppc8uhe","content":"<h2 id=\"java环境安装\"><a href=\"#java环境安装\" class=\"headerlink\" title=\"java环境安装\"></a>java环境安装</h2><p>Jenkins新版本已经不支持jdk7及以下版本，这里安装jdk8。</p>\n<p>更新软件包列表</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt update</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Ubuntu16-安装-jdk8\"><a href=\"#Ubuntu16-安装-jdk8\" class=\"headerlink\" title=\"Ubuntu16 安装 jdk8\"></a>Ubuntu16 安装 jdk8</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install openjdk-8-jdk</span><br></pre></td></tr></table></figure>\n\n<p>查看Java版本，看看是否安装成功</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -version</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n\n<p><img src=\"https://i.loli.net/2019/04/23/5cbea14a55e6f.png\" alt=\"1555927916172\"></p>\n<p>多版本jdk时，版本之间的切换</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo update-alternatives --config java</span><br></pre></td></tr></table></figure>\n\n<p>前面带星号的是当前正在使用的Java版本，键入编号选择使用哪个版本。</p>\n<p><img src=\"https://i.loli.net/2019/04/23/5cbea14a71aa0.png\" alt=\"1555927981317\"></p>\n<h3 id=\"Ubuntu16-安装jdk7\"><a href=\"#Ubuntu16-安装jdk7\" class=\"headerlink\" title=\"Ubuntu16 安装jdk7\"></a>Ubuntu16 安装jdk7</h3><p>这里补充一点Ubuntu系统中jdk7的安装（为什么使用jdk7，历史遗留问题。）</p>\n<p>jdk7已经不支持从源中下载，所以需要手动下载安装包进行安装。</p>\n<ul>\n<li>首先需要依次下载并安装 jdk7 以及 jdk7 依赖的类库：</li>\n</ul>\n<p><a href=\"https://packages.debian.org/sid/fontconfig-config\">fontconfig-config</a></p>\n<p><a href=\"https://packages.debian.org/sid/libfontconfig1\">libfontconfig1</a></p>\n<p><a href=\"https://packages.debian.org/sid/libjpeg62-turbo\">libjpeg62-turbo</a></p>\n<p><a href=\"https://packages.debian.org/experimental/openjdk-7-jre-headless\">openjdk-7-jre-headless</a></p>\n<p><a href=\"https://packages.debian.org/experimental/openjdk-7-jre\">openjdk-7-jre</a></p>\n<p><a href=\"https://packages.debian.org/experimental/openjdk-7-jdk\">openjdk-7-jdk</a></p>\n<ul>\n<li>下载的时候要选择和自己平台匹配的 deb 包，我安装的是 64 位的 Ubuntu 系统，所以我下载的是 amd64 的 deb 包。然后把下载的这六个 deb 文件放在一个空文件夹里面，执行：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo dpkg -i *.deb</span><br></pre></td></tr></table></figure>\n\n<p>如果出现其他依赖的问题，执行：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install -f</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>执行完之后 jdk 7 就安装成功了。</p>\n</li>\n<li><p>执行 java -version 看一下当前版本号，如果是 jdk-1.7 那么你就成功了。</p>\n</li>\n</ul>\n<h2 id=\"Jenkins安装\"><a href=\"#Jenkins安装\" class=\"headerlink\" title=\"Jenkins安装\"></a>Jenkins安装</h2><p>我们从Jenkins官方网站<a href=\"https://jenkins.io/\">https://jenkins.io/</a>下载最新的war包。虽然Jenkins提供了Windows、Linux、OS X等各种安装程序，但是，这些安装程序都没有war包好使。只需要运行命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar jenkins.war</span><br></pre></td></tr></table></figure>\n\n<p>Jenkins就启动成功了！它的war包自带Jetty服务器，剩下的工作我们全部在浏览器中进行。默认使用8080端口，如果想使用其他端口命令改成：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar jenkins.war --httpPort=9001</span><br></pre></td></tr></table></figure>\n\n<p>第一次启动Jenkins时，出于安全考虑，Jenkins会自动生成一个随机的按照口令。</p>\n<p><img src=\"/home/wen/Pictures/typora/1555998670165.png\" alt=\"1555998670165\"></p>\n<p>注意控制台输出的口令，复制下来，然后在浏览器输入：<a href=\"http://127.0.0.1:8080/\">http://127.0.0.1:8080</a></p>\n<p>粘贴口令，进入安装界面，如果执行默认的安装，Jenkins就自动配置好了Maven、git等常用插件。默认安装插件的耗时较长，要耐心等待。最后，创建一个admin用户，完成安装。</p>\n<h2 id=\"创建Linux服务\"><a href=\"#创建Linux服务\" class=\"headerlink\" title=\"创建Linux服务\"></a>创建Linux服务</h2><p>因为我们不想每次登录到Linux去启动Jenkins，也不想写脚本来启动服务。推荐安装JDK后，配合supervisor，把Jenkins直接变成一个服务。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#/etc/supervisor/conf.d/ci.conf</span><br><span class=\"line\">[program:ci]                                                                                   command=java -jar /usr/lib/jenkins.war --httpPort=9001</span><br><span class=\"line\">user=ubuntu</span><br><span class=\"line\">autostart=true</span><br><span class=\"line\">autorestart=true</span><br><span class=\"line\">startsecs=30</span><br><span class=\"line\">startretries=5</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Jenkins的使用\"><a href=\"#Jenkins的使用\" class=\"headerlink\" title=\"Jenkins的使用\"></a>Jenkins的使用</h2><p>在Jenkins首页选择 “新建任务”，输入名字，选择“构建一个自由风格的软件项目”</p>\n<p><img src=\"https://i.loli.net/2019/04/23/5cbea14aa3ef5.png\" alt=\"1555984239991\"></p>\n<p>在配置页中，源码管理选择Git，填入地址：</p>\n<p><img src=\"https://i.loli.net/2019/04/23/5cbea14a7e0e0.png\" alt=\"1555984798267\"></p>\n<p>默认使用master分支。如果需要口令，在Credentials中添加用户名&#x2F;口令，或者使用SSH Key。</p>\n<p>构建触发器指定了触发一次构建的条件。推荐使用最简单的配置“Poll SCM”，它的意思是，定时检查版本库，发现有新的提交就触发构建。这种方式对git、SVN等所有版本管理系统都是通用的。</p>\n<p>我们在日程表中填入：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* * * * *</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.loli.net/2019/04/23/5cbea14a87491.png\" alt=\"1555984850539\"></p>\n<p>表示每分钟检查一次。如果你觉得太频繁，可以改成“每3分钟检查一次”：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*/3 * * * *</span><br></pre></td></tr></table></figure>\n\n<p>在演示项目中，使用了执行Shell构建的方法，所以在“构建”中选择“执行shell”。</p>\n<p>这里的shell是构建项目的过程。可以简单的写一个测试一下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;Hello ------------------&quot;</span><br></pre></td></tr></table></figure>\n\n<p>点击保存，就可以执行自动化构建了。</p>\n<p><img src=\"https://i.loli.net/2019/04/23/5cbea14a971ce.png\" alt=\"1555985221427\">可以在Console Output中看到控制台详细输出，便于出错排查：</p>\n<p><img src=\"https://i.loli.net/2019/04/23/5cbea14ab26a5.png\" alt=\"1555985266485\"></p>\n<p>这里为正确的输出。构建完成。</p>\n<h2 id=\"关于Docker\"><a href=\"#关于Docker\" class=\"headerlink\" title=\"关于Docker\"></a>关于Docker</h2><p>这里建议的是使用Docker来构建集成环境，Docker和jenkins都在主机的环境中，gitlab可以使用Docker部署。Nginx代理各个服务。</p>\n<p>参考</p>\n<ul>\n<li><a href=\"https://ywnz.com/linuxjc/2734.html\">在Ubuntu 18.04.1系统中安装Jdk 7（openjdk-7-jdk</a></li>\n<li><a href=\"https://www.liaoxuefeng.com/article/001463233913442cdb2d1bd1b1b42e3b0b29eb1ba736c5e000\">使用Jenkins进行持续集成</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"java环境安装\"><a href=\"#java环境安装\" class=\"headerlink\" title=\"java环境安装\"></a>java环境安装</h2><p>Jenkins新版本已经不支持jdk7及以下版本，这里安装jdk8。</p>\n<p>更新软件包列表</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt update</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Ubuntu16-安装-jdk8\"><a href=\"#Ubuntu16-安装-jdk8\" class=\"headerlink\" title=\"Ubuntu16 安装 jdk8\"></a>Ubuntu16 安装 jdk8</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install openjdk-8-jdk</span><br></pre></td></tr></table></figure>\n\n<p>查看Java版本，看看是否安装成功</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -version</span><br></pre></td></tr></table></figure>","more":"<p><img src=\"https://i.loli.net/2019/04/23/5cbea14a55e6f.png\" alt=\"1555927916172\"></p>\n<p>多版本jdk时，版本之间的切换</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo update-alternatives --config java</span><br></pre></td></tr></table></figure>\n\n<p>前面带星号的是当前正在使用的Java版本，键入编号选择使用哪个版本。</p>\n<p><img src=\"https://i.loli.net/2019/04/23/5cbea14a71aa0.png\" alt=\"1555927981317\"></p>\n<h3 id=\"Ubuntu16-安装jdk7\"><a href=\"#Ubuntu16-安装jdk7\" class=\"headerlink\" title=\"Ubuntu16 安装jdk7\"></a>Ubuntu16 安装jdk7</h3><p>这里补充一点Ubuntu系统中jdk7的安装（为什么使用jdk7，历史遗留问题。）</p>\n<p>jdk7已经不支持从源中下载，所以需要手动下载安装包进行安装。</p>\n<ul>\n<li>首先需要依次下载并安装 jdk7 以及 jdk7 依赖的类库：</li>\n</ul>\n<p><a href=\"https://packages.debian.org/sid/fontconfig-config\">fontconfig-config</a></p>\n<p><a href=\"https://packages.debian.org/sid/libfontconfig1\">libfontconfig1</a></p>\n<p><a href=\"https://packages.debian.org/sid/libjpeg62-turbo\">libjpeg62-turbo</a></p>\n<p><a href=\"https://packages.debian.org/experimental/openjdk-7-jre-headless\">openjdk-7-jre-headless</a></p>\n<p><a href=\"https://packages.debian.org/experimental/openjdk-7-jre\">openjdk-7-jre</a></p>\n<p><a href=\"https://packages.debian.org/experimental/openjdk-7-jdk\">openjdk-7-jdk</a></p>\n<ul>\n<li>下载的时候要选择和自己平台匹配的 deb 包，我安装的是 64 位的 Ubuntu 系统，所以我下载的是 amd64 的 deb 包。然后把下载的这六个 deb 文件放在一个空文件夹里面，执行：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo dpkg -i *.deb</span><br></pre></td></tr></table></figure>\n\n<p>如果出现其他依赖的问题，执行：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install -f</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>执行完之后 jdk 7 就安装成功了。</p>\n</li>\n<li><p>执行 java -version 看一下当前版本号，如果是 jdk-1.7 那么你就成功了。</p>\n</li>\n</ul>\n<h2 id=\"Jenkins安装\"><a href=\"#Jenkins安装\" class=\"headerlink\" title=\"Jenkins安装\"></a>Jenkins安装</h2><p>我们从Jenkins官方网站<a href=\"https://jenkins.io/\">https://jenkins.io/</a>下载最新的war包。虽然Jenkins提供了Windows、Linux、OS X等各种安装程序，但是，这些安装程序都没有war包好使。只需要运行命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar jenkins.war</span><br></pre></td></tr></table></figure>\n\n<p>Jenkins就启动成功了！它的war包自带Jetty服务器，剩下的工作我们全部在浏览器中进行。默认使用8080端口，如果想使用其他端口命令改成：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar jenkins.war --httpPort=9001</span><br></pre></td></tr></table></figure>\n\n<p>第一次启动Jenkins时，出于安全考虑，Jenkins会自动生成一个随机的按照口令。</p>\n<p><img src=\"/home/wen/Pictures/typora/1555998670165.png\" alt=\"1555998670165\"></p>\n<p>注意控制台输出的口令，复制下来，然后在浏览器输入：<a href=\"http://127.0.0.1:8080/\">http://127.0.0.1:8080</a></p>\n<p>粘贴口令，进入安装界面，如果执行默认的安装，Jenkins就自动配置好了Maven、git等常用插件。默认安装插件的耗时较长，要耐心等待。最后，创建一个admin用户，完成安装。</p>\n<h2 id=\"创建Linux服务\"><a href=\"#创建Linux服务\" class=\"headerlink\" title=\"创建Linux服务\"></a>创建Linux服务</h2><p>因为我们不想每次登录到Linux去启动Jenkins，也不想写脚本来启动服务。推荐安装JDK后，配合supervisor，把Jenkins直接变成一个服务。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#/etc/supervisor/conf.d/ci.conf</span><br><span class=\"line\">[program:ci]                                                                                   command=java -jar /usr/lib/jenkins.war --httpPort=9001</span><br><span class=\"line\">user=ubuntu</span><br><span class=\"line\">autostart=true</span><br><span class=\"line\">autorestart=true</span><br><span class=\"line\">startsecs=30</span><br><span class=\"line\">startretries=5</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Jenkins的使用\"><a href=\"#Jenkins的使用\" class=\"headerlink\" title=\"Jenkins的使用\"></a>Jenkins的使用</h2><p>在Jenkins首页选择 “新建任务”，输入名字，选择“构建一个自由风格的软件项目”</p>\n<p><img src=\"https://i.loli.net/2019/04/23/5cbea14aa3ef5.png\" alt=\"1555984239991\"></p>\n<p>在配置页中，源码管理选择Git，填入地址：</p>\n<p><img src=\"https://i.loli.net/2019/04/23/5cbea14a7e0e0.png\" alt=\"1555984798267\"></p>\n<p>默认使用master分支。如果需要口令，在Credentials中添加用户名&#x2F;口令，或者使用SSH Key。</p>\n<p>构建触发器指定了触发一次构建的条件。推荐使用最简单的配置“Poll SCM”，它的意思是，定时检查版本库，发现有新的提交就触发构建。这种方式对git、SVN等所有版本管理系统都是通用的。</p>\n<p>我们在日程表中填入：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* * * * *</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.loli.net/2019/04/23/5cbea14a87491.png\" alt=\"1555984850539\"></p>\n<p>表示每分钟检查一次。如果你觉得太频繁，可以改成“每3分钟检查一次”：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*/3 * * * *</span><br></pre></td></tr></table></figure>\n\n<p>在演示项目中，使用了执行Shell构建的方法，所以在“构建”中选择“执行shell”。</p>\n<p>这里的shell是构建项目的过程。可以简单的写一个测试一下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;Hello ------------------&quot;</span><br></pre></td></tr></table></figure>\n\n<p>点击保存，就可以执行自动化构建了。</p>\n<p><img src=\"https://i.loli.net/2019/04/23/5cbea14a971ce.png\" alt=\"1555985221427\">可以在Console Output中看到控制台详细输出，便于出错排查：</p>\n<p><img src=\"https://i.loli.net/2019/04/23/5cbea14ab26a5.png\" alt=\"1555985266485\"></p>\n<p>这里为正确的输出。构建完成。</p>\n<h2 id=\"关于Docker\"><a href=\"#关于Docker\" class=\"headerlink\" title=\"关于Docker\"></a>关于Docker</h2><p>这里建议的是使用Docker来构建集成环境，Docker和jenkins都在主机的环境中，gitlab可以使用Docker部署。Nginx代理各个服务。</p>\n<p>参考</p>\n<ul>\n<li><a href=\"https://ywnz.com/linuxjc/2734.html\">在Ubuntu 18.04.1系统中安装Jdk 7（openjdk-7-jdk</a></li>\n<li><a href=\"https://www.liaoxuefeng.com/article/001463233913442cdb2d1bd1b1b42e3b0b29eb1ba736c5e000\">使用Jenkins进行持续集成</a></li>\n</ul>"},{"title":"源码安装Postgresql14.4","date":"2022-12-06T16:00:00.000Z","_content":"\n下载源码包 [https://www.postgresql.org/ftp/source/v14.4/](https://www.postgresql.org/ftp/source/v14.4/)\n\n## 源码安装\n\n### 0、安装依赖\n\n```\nshell> apt install gcc g++ make libreadline-dev zlib1g zlib1g-dev libkrb5-dev libssl-dev libpam0g-dev libxml2-dev libxslt-dev libldap2-dev gettext tcl8.6-dev tcl-dev libperl-dev python-dev -y\n```\n\n离线安装时，需要使用iso镜像安装依赖(TODO)\n\n### 1、解压 PG14源码\n\n```\nshell> mkdir -p /pg/PG14.4\nshell> tar -xzvf postgresql-14.4.tar.gz -C /pg/PG14.4\n```\n\n### 2、创建用户并配置环境变量\n\n添加安装用户和安装目录权限赋予\n\n```\nshell> useradd -m -s /bin/bash postgres\nshell> mkdir /pg/PG14.4\nshell> chown -R postgres:postgres /pg/PG14.4\n```\n\n配置环境变量\n\n```\nshell> su - postgres\nshell> vi ~/.bash_profile\n# 添加以下：\nexport PATH=$PATH:$HOME/bin:/pg/PG14.4/bin/\n\nshell> source ~/.bash_profile\n```\n\n### 3、编译安装 PG\n\n<!--more-->\n\n```\nshell> su – postgres\nshell> cd /pg/PG14.4/postgresql-14.4/\nshell> ./configure --prefix=/pg/PG14.4 \\\n--enable-nls \\\n--with-perl --with-python --with-tcl --with-gssapi --with-openssl --with-pam \\\n--with-ldap --with-libxml --with-libxslt\n\nshell> make world\nshell> make install-world\n```\n\n### 4、初始化 PG 数据库\n\n主机上部署多个实例时，需要指定不同的数据目录。\n\n```\nshell> su – postgres\nshell> mkdir -p /pg/PG14.4/data\nshell> /pg/PG14.4/bin/initdb -D /pg/PG14.4/data\nshell> /pg/PG14.4/bin/pg_ctl -D /pg/PG14.4/data -l logfile start\nshell> /pg/PG14.4/bin/createdb test\nshell> /pg/PG14.4/bin/psql test #登陆 test 库,\\q 退出\n```\n\n### 5、重启 PG 实例测试\n\n```\nshell> su – postgres \nshell> /pg/PG14.4/bin/pg_ctl stop -D /pg/PG14.4/data\nshell> /pg/PG14.4/bin/pg_ctl start -D /pg/PG14.4/data\n```\n\nPostgreSQL 数据库默认会创建一个 postgres 的数据库用户作为数据库的管理员，默认\n密码为空，我们需要修改为指定的密码，这里设定为 postgres.\n\n```\nshell> /pg/PG14.4/bin/psql\npostgres=# ALTER USER postgres with password 'postgres';\n```\n\n## 连接配置\n\n### 1、配置 pg_hba.conf 白名单\n\n```\nshell> su - postgres \nshell> vi /pg/PG14.4/data/pg_hba.conf\n#添加以下行\nhost all all 10.211.0.0/0 md5\n#禁止超级用户远程连接\nhost all postgres 0.0.0.0/0 reject\n\nshell> /pg/PG14.4/bin/pg_ctl reload -D /pg/PG14.4/data\n```\n\n### 2、修改 listen_addresses 参数\n\n注意：需要重启生效\t\n\n```\nshell> su - postgres\nshell> cd /pg/PG14.4/data\nshell> vi postgresql.conf\n#修改以下参数，并保存退出\nlisten_addresses ＝’*’\n\n#重启数据库服务\nshell> /pg/PG14.4/bin/pg_ctl restart -D /pg/PG14.4/data\n```\n\n### 3、连接测试\n\n```\nshell> psql -h 10.211.55.5 -p 5432 -U postgres test\nPassword for user postgres: \npsql (14.6 (Debian 14.6-1.pgdg110+1), server 14.4)\nType \"help\" for help.\ntest=# \\conninfo\nYou are connected to database \"test\" as user \"postgres\" on host \"10.211.55.5\" at port \"5432\".\n```\n\n","source":"_posts/源码安装Postgresql14.4.md","raw":"---\ntitle: 源码安装Postgresql14.4\ndate: 2022-12-07\ntags: [数据库,PG,debian]\n---\n\n下载源码包 [https://www.postgresql.org/ftp/source/v14.4/](https://www.postgresql.org/ftp/source/v14.4/)\n\n## 源码安装\n\n### 0、安装依赖\n\n```\nshell> apt install gcc g++ make libreadline-dev zlib1g zlib1g-dev libkrb5-dev libssl-dev libpam0g-dev libxml2-dev libxslt-dev libldap2-dev gettext tcl8.6-dev tcl-dev libperl-dev python-dev -y\n```\n\n离线安装时，需要使用iso镜像安装依赖(TODO)\n\n### 1、解压 PG14源码\n\n```\nshell> mkdir -p /pg/PG14.4\nshell> tar -xzvf postgresql-14.4.tar.gz -C /pg/PG14.4\n```\n\n### 2、创建用户并配置环境变量\n\n添加安装用户和安装目录权限赋予\n\n```\nshell> useradd -m -s /bin/bash postgres\nshell> mkdir /pg/PG14.4\nshell> chown -R postgres:postgres /pg/PG14.4\n```\n\n配置环境变量\n\n```\nshell> su - postgres\nshell> vi ~/.bash_profile\n# 添加以下：\nexport PATH=$PATH:$HOME/bin:/pg/PG14.4/bin/\n\nshell> source ~/.bash_profile\n```\n\n### 3、编译安装 PG\n\n<!--more-->\n\n```\nshell> su – postgres\nshell> cd /pg/PG14.4/postgresql-14.4/\nshell> ./configure --prefix=/pg/PG14.4 \\\n--enable-nls \\\n--with-perl --with-python --with-tcl --with-gssapi --with-openssl --with-pam \\\n--with-ldap --with-libxml --with-libxslt\n\nshell> make world\nshell> make install-world\n```\n\n### 4、初始化 PG 数据库\n\n主机上部署多个实例时，需要指定不同的数据目录。\n\n```\nshell> su – postgres\nshell> mkdir -p /pg/PG14.4/data\nshell> /pg/PG14.4/bin/initdb -D /pg/PG14.4/data\nshell> /pg/PG14.4/bin/pg_ctl -D /pg/PG14.4/data -l logfile start\nshell> /pg/PG14.4/bin/createdb test\nshell> /pg/PG14.4/bin/psql test #登陆 test 库,\\q 退出\n```\n\n### 5、重启 PG 实例测试\n\n```\nshell> su – postgres \nshell> /pg/PG14.4/bin/pg_ctl stop -D /pg/PG14.4/data\nshell> /pg/PG14.4/bin/pg_ctl start -D /pg/PG14.4/data\n```\n\nPostgreSQL 数据库默认会创建一个 postgres 的数据库用户作为数据库的管理员，默认\n密码为空，我们需要修改为指定的密码，这里设定为 postgres.\n\n```\nshell> /pg/PG14.4/bin/psql\npostgres=# ALTER USER postgres with password 'postgres';\n```\n\n## 连接配置\n\n### 1、配置 pg_hba.conf 白名单\n\n```\nshell> su - postgres \nshell> vi /pg/PG14.4/data/pg_hba.conf\n#添加以下行\nhost all all 10.211.0.0/0 md5\n#禁止超级用户远程连接\nhost all postgres 0.0.0.0/0 reject\n\nshell> /pg/PG14.4/bin/pg_ctl reload -D /pg/PG14.4/data\n```\n\n### 2、修改 listen_addresses 参数\n\n注意：需要重启生效\t\n\n```\nshell> su - postgres\nshell> cd /pg/PG14.4/data\nshell> vi postgresql.conf\n#修改以下参数，并保存退出\nlisten_addresses ＝’*’\n\n#重启数据库服务\nshell> /pg/PG14.4/bin/pg_ctl restart -D /pg/PG14.4/data\n```\n\n### 3、连接测试\n\n```\nshell> psql -h 10.211.55.5 -p 5432 -U postgres test\nPassword for user postgres: \npsql (14.6 (Debian 14.6-1.pgdg110+1), server 14.4)\nType \"help\" for help.\ntest=# \\conninfo\nYou are connected to database \"test\" as user \"postgres\" on host \"10.211.55.5\" at port \"5432\".\n```\n\n","slug":"源码安装Postgresql14.4","published":1,"updated":"2022-12-08T01:31:59.348Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluqa1hji004qrlogc603cbgs","content":"<p>下载源码包 <a href=\"https://www.postgresql.org/ftp/source/v14.4/\">https://www.postgresql.org/ftp/source/v14.4/</a></p>\n<h2 id=\"源码安装\"><a href=\"#源码安装\" class=\"headerlink\" title=\"源码安装\"></a>源码安装</h2><h3 id=\"0、安装依赖\"><a href=\"#0、安装依赖\" class=\"headerlink\" title=\"0、安装依赖\"></a>0、安装依赖</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt; apt install gcc g++ make libreadline-dev zlib1g zlib1g-dev libkrb5-dev libssl-dev libpam0g-dev libxml2-dev libxslt-dev libldap2-dev gettext tcl8.6-dev tcl-dev libperl-dev python-dev -y</span><br></pre></td></tr></table></figure>\n\n<p>离线安装时，需要使用iso镜像安装依赖(TODO)</p>\n<h3 id=\"1、解压-PG14源码\"><a href=\"#1、解压-PG14源码\" class=\"headerlink\" title=\"1、解压 PG14源码\"></a>1、解压 PG14源码</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt; mkdir -p /pg/PG14.4</span><br><span class=\"line\">shell&gt; tar -xzvf postgresql-14.4.tar.gz -C /pg/PG14.4</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、创建用户并配置环境变量\"><a href=\"#2、创建用户并配置环境变量\" class=\"headerlink\" title=\"2、创建用户并配置环境变量\"></a>2、创建用户并配置环境变量</h3><p>添加安装用户和安装目录权限赋予</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt; useradd -m -s /bin/bash postgres</span><br><span class=\"line\">shell&gt; mkdir /pg/PG14.4</span><br><span class=\"line\">shell&gt; chown -R postgres:postgres /pg/PG14.4</span><br></pre></td></tr></table></figure>\n\n<p>配置环境变量</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt; su - postgres</span><br><span class=\"line\">shell&gt; vi ~/.bash_profile</span><br><span class=\"line\"># 添加以下：</span><br><span class=\"line\">export PATH=$PATH:$HOME/bin:/pg/PG14.4/bin/</span><br><span class=\"line\"></span><br><span class=\"line\">shell&gt; source ~/.bash_profile</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、编译安装-PG\"><a href=\"#3、编译安装-PG\" class=\"headerlink\" title=\"3、编译安装 PG\"></a>3、编译安装 PG</h3><span id=\"more\"></span>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt; su – postgres</span><br><span class=\"line\">shell&gt; cd /pg/PG14.4/postgresql-14.4/</span><br><span class=\"line\">shell&gt; ./configure --prefix=/pg/PG14.4 \\</span><br><span class=\"line\">--enable-nls \\</span><br><span class=\"line\">--with-perl --with-python --with-tcl --with-gssapi --with-openssl --with-pam \\</span><br><span class=\"line\">--with-ldap --with-libxml --with-libxslt</span><br><span class=\"line\"></span><br><span class=\"line\">shell&gt; make world</span><br><span class=\"line\">shell&gt; make install-world</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、初始化-PG-数据库\"><a href=\"#4、初始化-PG-数据库\" class=\"headerlink\" title=\"4、初始化 PG 数据库\"></a>4、初始化 PG 数据库</h3><p>主机上部署多个实例时，需要指定不同的数据目录。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt; su – postgres</span><br><span class=\"line\">shell&gt; mkdir -p /pg/PG14.4/data</span><br><span class=\"line\">shell&gt; /pg/PG14.4/bin/initdb -D /pg/PG14.4/data</span><br><span class=\"line\">shell&gt; /pg/PG14.4/bin/pg_ctl -D /pg/PG14.4/data -l logfile start</span><br><span class=\"line\">shell&gt; /pg/PG14.4/bin/createdb test</span><br><span class=\"line\">shell&gt; /pg/PG14.4/bin/psql test #登陆 test 库,\\q 退出</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5、重启-PG-实例测试\"><a href=\"#5、重启-PG-实例测试\" class=\"headerlink\" title=\"5、重启 PG 实例测试\"></a>5、重启 PG 实例测试</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt; su – postgres </span><br><span class=\"line\">shell&gt; /pg/PG14.4/bin/pg_ctl stop -D /pg/PG14.4/data</span><br><span class=\"line\">shell&gt; /pg/PG14.4/bin/pg_ctl start -D /pg/PG14.4/data</span><br></pre></td></tr></table></figure>\n\n<p>PostgreSQL 数据库默认会创建一个 postgres 的数据库用户作为数据库的管理员，默认<br>密码为空，我们需要修改为指定的密码，这里设定为 postgres.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt; /pg/PG14.4/bin/psql</span><br><span class=\"line\">postgres=# ALTER USER postgres with password &#x27;postgres&#x27;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"连接配置\"><a href=\"#连接配置\" class=\"headerlink\" title=\"连接配置\"></a>连接配置</h2><h3 id=\"1、配置-pg-hba-conf-白名单\"><a href=\"#1、配置-pg-hba-conf-白名单\" class=\"headerlink\" title=\"1、配置 pg_hba.conf 白名单\"></a>1、配置 pg_hba.conf 白名单</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt; su - postgres </span><br><span class=\"line\">shell&gt; vi /pg/PG14.4/data/pg_hba.conf</span><br><span class=\"line\">#添加以下行</span><br><span class=\"line\">host all all 10.211.0.0/0 md5</span><br><span class=\"line\">#禁止超级用户远程连接</span><br><span class=\"line\">host all postgres 0.0.0.0/0 reject</span><br><span class=\"line\"></span><br><span class=\"line\">shell&gt; /pg/PG14.4/bin/pg_ctl reload -D /pg/PG14.4/data</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、修改-listen-addresses-参数\"><a href=\"#2、修改-listen-addresses-参数\" class=\"headerlink\" title=\"2、修改 listen_addresses 参数\"></a>2、修改 listen_addresses 参数</h3><p>注意：需要重启生效\t</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt; su - postgres</span><br><span class=\"line\">shell&gt; cd /pg/PG14.4/data</span><br><span class=\"line\">shell&gt; vi postgresql.conf</span><br><span class=\"line\">#修改以下参数，并保存退出</span><br><span class=\"line\">listen_addresses ＝’*’</span><br><span class=\"line\"></span><br><span class=\"line\">#重启数据库服务</span><br><span class=\"line\">shell&gt; /pg/PG14.4/bin/pg_ctl restart -D /pg/PG14.4/data</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、连接测试\"><a href=\"#3、连接测试\" class=\"headerlink\" title=\"3、连接测试\"></a>3、连接测试</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt; psql -h 10.211.55.5 -p 5432 -U postgres test</span><br><span class=\"line\">Password for user postgres: </span><br><span class=\"line\">psql (14.6 (Debian 14.6-1.pgdg110+1), server 14.4)</span><br><span class=\"line\">Type &quot;help&quot; for help.</span><br><span class=\"line\">test=# \\conninfo</span><br><span class=\"line\">You are connected to database &quot;test&quot; as user &quot;postgres&quot; on host &quot;10.211.55.5&quot; at port &quot;5432&quot;.</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>下载源码包 <a href=\"https://www.postgresql.org/ftp/source/v14.4/\">https://www.postgresql.org/ftp/source/v14.4/</a></p>\n<h2 id=\"源码安装\"><a href=\"#源码安装\" class=\"headerlink\" title=\"源码安装\"></a>源码安装</h2><h3 id=\"0、安装依赖\"><a href=\"#0、安装依赖\" class=\"headerlink\" title=\"0、安装依赖\"></a>0、安装依赖</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt; apt install gcc g++ make libreadline-dev zlib1g zlib1g-dev libkrb5-dev libssl-dev libpam0g-dev libxml2-dev libxslt-dev libldap2-dev gettext tcl8.6-dev tcl-dev libperl-dev python-dev -y</span><br></pre></td></tr></table></figure>\n\n<p>离线安装时，需要使用iso镜像安装依赖(TODO)</p>\n<h3 id=\"1、解压-PG14源码\"><a href=\"#1、解压-PG14源码\" class=\"headerlink\" title=\"1、解压 PG14源码\"></a>1、解压 PG14源码</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt; mkdir -p /pg/PG14.4</span><br><span class=\"line\">shell&gt; tar -xzvf postgresql-14.4.tar.gz -C /pg/PG14.4</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、创建用户并配置环境变量\"><a href=\"#2、创建用户并配置环境变量\" class=\"headerlink\" title=\"2、创建用户并配置环境变量\"></a>2、创建用户并配置环境变量</h3><p>添加安装用户和安装目录权限赋予</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt; useradd -m -s /bin/bash postgres</span><br><span class=\"line\">shell&gt; mkdir /pg/PG14.4</span><br><span class=\"line\">shell&gt; chown -R postgres:postgres /pg/PG14.4</span><br></pre></td></tr></table></figure>\n\n<p>配置环境变量</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt; su - postgres</span><br><span class=\"line\">shell&gt; vi ~/.bash_profile</span><br><span class=\"line\"># 添加以下：</span><br><span class=\"line\">export PATH=$PATH:$HOME/bin:/pg/PG14.4/bin/</span><br><span class=\"line\"></span><br><span class=\"line\">shell&gt; source ~/.bash_profile</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、编译安装-PG\"><a href=\"#3、编译安装-PG\" class=\"headerlink\" title=\"3、编译安装 PG\"></a>3、编译安装 PG</h3>","more":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt; su – postgres</span><br><span class=\"line\">shell&gt; cd /pg/PG14.4/postgresql-14.4/</span><br><span class=\"line\">shell&gt; ./configure --prefix=/pg/PG14.4 \\</span><br><span class=\"line\">--enable-nls \\</span><br><span class=\"line\">--with-perl --with-python --with-tcl --with-gssapi --with-openssl --with-pam \\</span><br><span class=\"line\">--with-ldap --with-libxml --with-libxslt</span><br><span class=\"line\"></span><br><span class=\"line\">shell&gt; make world</span><br><span class=\"line\">shell&gt; make install-world</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、初始化-PG-数据库\"><a href=\"#4、初始化-PG-数据库\" class=\"headerlink\" title=\"4、初始化 PG 数据库\"></a>4、初始化 PG 数据库</h3><p>主机上部署多个实例时，需要指定不同的数据目录。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt; su – postgres</span><br><span class=\"line\">shell&gt; mkdir -p /pg/PG14.4/data</span><br><span class=\"line\">shell&gt; /pg/PG14.4/bin/initdb -D /pg/PG14.4/data</span><br><span class=\"line\">shell&gt; /pg/PG14.4/bin/pg_ctl -D /pg/PG14.4/data -l logfile start</span><br><span class=\"line\">shell&gt; /pg/PG14.4/bin/createdb test</span><br><span class=\"line\">shell&gt; /pg/PG14.4/bin/psql test #登陆 test 库,\\q 退出</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5、重启-PG-实例测试\"><a href=\"#5、重启-PG-实例测试\" class=\"headerlink\" title=\"5、重启 PG 实例测试\"></a>5、重启 PG 实例测试</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt; su – postgres </span><br><span class=\"line\">shell&gt; /pg/PG14.4/bin/pg_ctl stop -D /pg/PG14.4/data</span><br><span class=\"line\">shell&gt; /pg/PG14.4/bin/pg_ctl start -D /pg/PG14.4/data</span><br></pre></td></tr></table></figure>\n\n<p>PostgreSQL 数据库默认会创建一个 postgres 的数据库用户作为数据库的管理员，默认<br>密码为空，我们需要修改为指定的密码，这里设定为 postgres.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt; /pg/PG14.4/bin/psql</span><br><span class=\"line\">postgres=# ALTER USER postgres with password &#x27;postgres&#x27;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"连接配置\"><a href=\"#连接配置\" class=\"headerlink\" title=\"连接配置\"></a>连接配置</h2><h3 id=\"1、配置-pg-hba-conf-白名单\"><a href=\"#1、配置-pg-hba-conf-白名单\" class=\"headerlink\" title=\"1、配置 pg_hba.conf 白名单\"></a>1、配置 pg_hba.conf 白名单</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt; su - postgres </span><br><span class=\"line\">shell&gt; vi /pg/PG14.4/data/pg_hba.conf</span><br><span class=\"line\">#添加以下行</span><br><span class=\"line\">host all all 10.211.0.0/0 md5</span><br><span class=\"line\">#禁止超级用户远程连接</span><br><span class=\"line\">host all postgres 0.0.0.0/0 reject</span><br><span class=\"line\"></span><br><span class=\"line\">shell&gt; /pg/PG14.4/bin/pg_ctl reload -D /pg/PG14.4/data</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、修改-listen-addresses-参数\"><a href=\"#2、修改-listen-addresses-参数\" class=\"headerlink\" title=\"2、修改 listen_addresses 参数\"></a>2、修改 listen_addresses 参数</h3><p>注意：需要重启生效\t</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt; su - postgres</span><br><span class=\"line\">shell&gt; cd /pg/PG14.4/data</span><br><span class=\"line\">shell&gt; vi postgresql.conf</span><br><span class=\"line\">#修改以下参数，并保存退出</span><br><span class=\"line\">listen_addresses ＝’*’</span><br><span class=\"line\"></span><br><span class=\"line\">#重启数据库服务</span><br><span class=\"line\">shell&gt; /pg/PG14.4/bin/pg_ctl restart -D /pg/PG14.4/data</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、连接测试\"><a href=\"#3、连接测试\" class=\"headerlink\" title=\"3、连接测试\"></a>3、连接测试</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shell&gt; psql -h 10.211.55.5 -p 5432 -U postgres test</span><br><span class=\"line\">Password for user postgres: </span><br><span class=\"line\">psql (14.6 (Debian 14.6-1.pgdg110+1), server 14.4)</span><br><span class=\"line\">Type &quot;help&quot; for help.</span><br><span class=\"line\">test=# \\conninfo</span><br><span class=\"line\">You are connected to database &quot;test&quot; as user &quot;postgres&quot; on host &quot;10.211.55.5&quot; at port &quot;5432&quot;.</span><br></pre></td></tr></table></figure>"},{"title":"用 Tornado 实现 API 的初次尝试","date":"2018-03-16T16:00:00.000Z","_content":"\n首先解释一下什么叫 API ：\n\n> 应用程序接口（英语：Application Programming Interface，简称：API ），又称为应用编程接口，就是软件系统不同组成部分衔接的约定。由于近年来软件的规模日益庞大，常常需要把复杂的系统划分成小的组成部分，编程接口的设计十分重要。程序设计的实践中，编程接口的设计首先要使软件系统的职责得到合理划分。良好的接口设计可以降低系统各部分的相互依赖，提高组成单元的内聚性，降低组成单元间的耦合程度，从而提高系统的维护性和扩展性。(来自维基百科)\n\nAPI 在多端中使用的更节省资源。网络应用程序，分为前端和后端两个部分。当前的发展趋势，就是前端设备层出不穷（手机、平板、桌面电脑、其他专用设备......）。因此，必须有一种统一的机制，方便不同的前端设备与后端进行通信。这导致API构架的流行。\n\n关于RESTful的相关知识，参考[设计一套良好 REST API](https://zhuanlan.zhihu.com/p/34289466?hmsr=toutiao.io&utm_medium=toutiao.io&utm_source=toutiao.io)\n\n<!-- more -->\n\n## 为什么选择 Tornado ?\n\n在 Python 的众多WEB框架中，Tornado 它是异步非阻塞服务器，而且速度特别快。Tornado 每秒可以处理数以千计的连接，这意味着对于实时 Web 服务来说，Tornado 是一个理想的 Web 框架。\n\n## 最基础的尝试\n\n主要实现的是一个`ArticleHandler`，其中包含`GET`、`POST`、 `PUT`、 `DELETE`，实现基本的四种请求方式。当然，这是最简单的API设计的实现。\n\nURL都是： /api/article[/id] POST请求不需要携带id，GET请求也可以不携带，但是意义不同\n\n### API设计\n\n这里的API设计是不太合理的，可以说URL的表现基本合理，但是 **数据的表现形式是不太合理的**，等待下一步进行优化处理。\n\n- `GET`请求：`/api/article`，则返回一个列表 `[{...}, {...}, ...]`；\n- `GET`请求：`/api/article/id`,如果 id 有效，且查找的到数据，则返回 `{...}` ；否则返回 `{}`；\n- `POST`请求：`/api/article`, 需要携带参数，json 形式的 data 进行创建数据，如果参数错误或创建失败，返回 `{\"error\": 1, \"code\": ...}` ;否则返回创建的数据 `{...}`；\n- `DELETE`请求： `/api/article/id`，如果id有效，且删除数据，并返回删除的数据 `{...}`；否则返回 `{\"error\": 1, \"code\": ...}`；\n- `PUT`请求： `/api/article/id`，需要携带参数，json形式的data进行修改数据，需要数据的哪项值就可以传入哪项值，如果id有效且参数有效，则返回修改之后的数据 `{...}`，否则返回 `{}`；\n\n### 详见代码\n\n** `url`设计 **\n\n```python\nurls = [\n    (r\"/api/article/?(\\w+)?\", api.Article),\n]\n```\n\n** `ApiHandler`实现 **\n\n```python\n# -*- coding: utf-8 -*-\n\nimport tornado.web\nimport datetime\nimport json\n\nfrom settings import db\nfrom eve.io.mongo import MongoJSONEncoder\nfrom bson.objectid import ObjectId\n\n\nclass ApiHandler(tornado.web.RequestHandler):\n\n    def data_received(self, chunk):\n        pass\n\n    def options(self):\n        self.__set_response_header()\n\n    # 这里的意思是在返回时附带允许请求的http response 头\n    def __set_response_header(self):\n        self.set_header('content-type', 'application/json')\n        self.set_header(\"Access-Control-Allow-Origin\", \"*\")\n        self.set_header(\"Access-Control-Allow-Credentials\", \"true\")\n        self.set_header(\"Access-Control-Allow-Headers\", \"x-requested-with\")\n        self.set_header('Access-Control-Allow-Methods',\n                        'POST, GET, OPTIONS, HEAD')\n\n\nclass Article(ApiHandler):\n    \"\"\"\n    1、缺少基本认证机制\n    2、没有验证tornado的异步的牛逼之处\n    \"\"\"\n    @tornado.web.asynchronous\n    def get(self, args=None):\n        if args:\n            try:\n                article_list = db.article.find_one({\"_id\": ObjectId(args)})\n                if not article_list:\n                    raise Exception\n            except Exception as err:\n                print err\n                article_list = {}\n        else:\n            article_list = list(db.article.find().sort('date', -1))\n        self.finish(json.dumps(article_list, cls=MongoJSONEncoder, sort_keys=True))\n\n    @tornado.web.asynchronous\n    def put(self, args=None):\n        article_id = args\n        name = self.get_argument(\"name\", None)\n        content = self.get_argument(\"content\", None)\n        argument = {\"name\": name} if name else {}\n        argument.update({\"content\": content}) if content else argument\n\n        try:  # 这里对于id不合法的校验是不认真的，应该对传过来的参数进行校验\n            if not content and not name:  # name 和 content 都不存在\n                raise Exception\n            db.article.update_one({\"_id\": ObjectId(article_id)},\n                                  {'$set': argument}\n                                  )\n            article = db.article.find_one({\"_id\": ObjectId(article_id)})\n        except Exception as err:\n            print err\n            article = {}\n        return self.finish(json.dumps(article, cls=MongoJSONEncoder, sort_keys=True))\n\n    @tornado.web.asynchronous\n    def post(self, args=None):\n        name = self.get_argument(\"name\", None)\n        content = self.get_argument(\"content\", None)\n        date = datetime.datetime.strftime(datetime.datetime.now(), \"%Y-%m-%d %H:%M:%S\")\n        try:\n            if name and content:\n                article_id = db.article.insert_one({\n                    \"name\": name,\n                    \"date\": date,\n                    \"content\": content\n                }).inserted_id\n                article = db.article.find_one({\"_id\": ObjectId(article_id)})\n                return self.finish(json.dumps(article, cls=MongoJSONEncoder, sort_keys=True))\n            else:\n                self.finish(json.dumps({\"error\": 1, \"code\": \"0002\"}))\n                return\n        except Exception as err:\n            print err\n            self.finish(json.dumps({\"error\": 1, \"code\": \"0001\"}))\n            return\n\n    @tornado.web.asynchronous\n    def delete(self, args=None, **kwargs):\n        if not args:\n            return self.finish(json.dumps({\"error\": 1, \"code\": \"0003\"}))\n        try:\n            article = db.article.find_one({\"_id\": ObjectId(args)})\n            if article:\n                db.article.delete_one({\"_id\": ObjectId(args)})\n            else:\n                article = {}\n            return self.finish(json.dumps(article, cls=MongoJSONEncoder, sort_keys=True))\n        except Exception as err:\n            print err\n            return self.finish(json.dumps({\"error\": 1, \"code\": \"0001\"}))\n\n```\n\n**其他tornado的配置自行补充，这里不说明配置啦**\n\n## 总结\n\n其实具体的API设计原则需要有各个项目组或者开发团队进行设计和统一规定，没有具体的标准之说，具体的取舍，在项目开发中就会体现处其中的好处。本文是首次接触API的设计原则问题，只是在这里记录自己现在的想法，但是 **不能保证以上所有的论述和实现方式都是合理的** ，**仅供自己的学习和参考**，等后期的深入，本人会继续更新最新的文章，更新其中不足的地方，再次共勉！\n\n---\n\n\n## 解决用户登录的问题\n\n参考项目代码，重新整理了认证的部分，发现tornado自带的功能已经很强大啦，这不在这里补上认证的部分，其实原理很简单：\n\n用户登录之后返回一个token的值，然后再以后的请求头部中需要携带该token的值，来看看代码：\n\n```python\n\n# api.py\nclass Login(ApiHandler):\n    \"\"\"\n    这里是登录获取Token的API，当然这里的处理是如果用户不存在就创建token\n    \"\"\"\n    def post(self):\n        name = self.get_argument(\"name\", None)\n        args = {\"name\": name}\n        user = db.users.find_one(args)\n        if not user:\n            user = {\n                \"name\": name,\n                \"password\": \"123456\",\n                \"sex\": \"男\"\n            }\n            user_id = db.users.insert_one(user).inserted_id\n            user.update({\"_id\": str(user_id)})\n        else:\n            user_id = user[\"_id\"] = str(user[\"_id\"])\n\n        token = self.create_signed_value('tid', str(user_id), version=2)\n        user.update({\"token\": token})\n\n        return self.finish(rtjson(**user))\n\n\nclass ApiHandler(tornado.web.RequestHandler):\n\n    def data_received(self, chunk):\n        pass\n\n    def get_current_user(self):\n        return self.get_secure_cookie(\"tid\", self.request.headers.get('token', None))\n\n    def get_argument(self, name, default=None, strip=True):\n        # 重载该方法\n        if self.request.method != \"GET\":\n            if 'application/json' in str(self.request.headers.get('Content-Type')) and self.request.body and self.request.body != '{}' \\\n                    and self.request.body.startswith('{'):\n                obj = json.loads(self.request.body)\n                return obj.get(name, default)\n            elif 'application/x-www-form-urlencoded' in str(self.request.headers.get('Content-Type')) \\\n                    and self.request.body and self.request.body != '{}' \\\n                    and self.request.body.startswith('{'):\n                obj = json.loads(self.request.body)\n                return obj.get(name, default)\n        return self._get_argument(name, default, self.request.arguments, strip)\n\n    def options(self):\n        self.__set_response_header()\n\n    # 这里的意思是在返回时附带允许请求的http response 头\n    def __set_response_header(self):\n        self.set_header('content-type', 'application/json')\n        self.set_header(\"Access-Control-Allow-Origin\", \"*\")\n        self.set_header(\"Access-Control-Allow-Credentials\", \"true\")\n        self.set_header(\"Access-Control-Allow-Headers\", \"x-requested-with\")\n        self.set_header('Access-Control-Allow-Methods',\n                        'POST, GET, OPTIONS, HEAD')\n\n\n# base.py\n# 这是封装的一个返回合法json的方法\n\nimport json\nimport time\nfrom eve.io.mongo import MongoJSONEncoder\n\n\ndef rtjson(code=1, **args):\n    if code == 1:\n        args['status'] = 1\n        args['response_time'] = int(time.time())\n    else:\n        args['status'] = 0\n        args['error_code'] = code\n        # args['error_msg'] = errorDesc.get(code)\n        args['response_time'] = int(time.time())\n\n    return json.loads(json.dumps(args, cls=MongoJSONEncoder, sort_keys=True))\n\n```\n\n\n## 再次总结\n\n这里虽然实现了登录授权的问题，但是没有实现的是分级的问题，即不同用户的权限不同的处理。后期再处理吧。目前所有的代码请参考[https://github.com/suAdminWen/restapi](https://github.com/suAdminWen/restapi)\n","source":"_posts/用tornado实现API的初次尝试.md","raw":"---\ntitle: 用 Tornado 实现 API 的初次尝试\ndate: 2018-03-17\ntags: [python, tornado]\n---\n\n首先解释一下什么叫 API ：\n\n> 应用程序接口（英语：Application Programming Interface，简称：API ），又称为应用编程接口，就是软件系统不同组成部分衔接的约定。由于近年来软件的规模日益庞大，常常需要把复杂的系统划分成小的组成部分，编程接口的设计十分重要。程序设计的实践中，编程接口的设计首先要使软件系统的职责得到合理划分。良好的接口设计可以降低系统各部分的相互依赖，提高组成单元的内聚性，降低组成单元间的耦合程度，从而提高系统的维护性和扩展性。(来自维基百科)\n\nAPI 在多端中使用的更节省资源。网络应用程序，分为前端和后端两个部分。当前的发展趋势，就是前端设备层出不穷（手机、平板、桌面电脑、其他专用设备......）。因此，必须有一种统一的机制，方便不同的前端设备与后端进行通信。这导致API构架的流行。\n\n关于RESTful的相关知识，参考[设计一套良好 REST API](https://zhuanlan.zhihu.com/p/34289466?hmsr=toutiao.io&utm_medium=toutiao.io&utm_source=toutiao.io)\n\n<!-- more -->\n\n## 为什么选择 Tornado ?\n\n在 Python 的众多WEB框架中，Tornado 它是异步非阻塞服务器，而且速度特别快。Tornado 每秒可以处理数以千计的连接，这意味着对于实时 Web 服务来说，Tornado 是一个理想的 Web 框架。\n\n## 最基础的尝试\n\n主要实现的是一个`ArticleHandler`，其中包含`GET`、`POST`、 `PUT`、 `DELETE`，实现基本的四种请求方式。当然，这是最简单的API设计的实现。\n\nURL都是： /api/article[/id] POST请求不需要携带id，GET请求也可以不携带，但是意义不同\n\n### API设计\n\n这里的API设计是不太合理的，可以说URL的表现基本合理，但是 **数据的表现形式是不太合理的**，等待下一步进行优化处理。\n\n- `GET`请求：`/api/article`，则返回一个列表 `[{...}, {...}, ...]`；\n- `GET`请求：`/api/article/id`,如果 id 有效，且查找的到数据，则返回 `{...}` ；否则返回 `{}`；\n- `POST`请求：`/api/article`, 需要携带参数，json 形式的 data 进行创建数据，如果参数错误或创建失败，返回 `{\"error\": 1, \"code\": ...}` ;否则返回创建的数据 `{...}`；\n- `DELETE`请求： `/api/article/id`，如果id有效，且删除数据，并返回删除的数据 `{...}`；否则返回 `{\"error\": 1, \"code\": ...}`；\n- `PUT`请求： `/api/article/id`，需要携带参数，json形式的data进行修改数据，需要数据的哪项值就可以传入哪项值，如果id有效且参数有效，则返回修改之后的数据 `{...}`，否则返回 `{}`；\n\n### 详见代码\n\n** `url`设计 **\n\n```python\nurls = [\n    (r\"/api/article/?(\\w+)?\", api.Article),\n]\n```\n\n** `ApiHandler`实现 **\n\n```python\n# -*- coding: utf-8 -*-\n\nimport tornado.web\nimport datetime\nimport json\n\nfrom settings import db\nfrom eve.io.mongo import MongoJSONEncoder\nfrom bson.objectid import ObjectId\n\n\nclass ApiHandler(tornado.web.RequestHandler):\n\n    def data_received(self, chunk):\n        pass\n\n    def options(self):\n        self.__set_response_header()\n\n    # 这里的意思是在返回时附带允许请求的http response 头\n    def __set_response_header(self):\n        self.set_header('content-type', 'application/json')\n        self.set_header(\"Access-Control-Allow-Origin\", \"*\")\n        self.set_header(\"Access-Control-Allow-Credentials\", \"true\")\n        self.set_header(\"Access-Control-Allow-Headers\", \"x-requested-with\")\n        self.set_header('Access-Control-Allow-Methods',\n                        'POST, GET, OPTIONS, HEAD')\n\n\nclass Article(ApiHandler):\n    \"\"\"\n    1、缺少基本认证机制\n    2、没有验证tornado的异步的牛逼之处\n    \"\"\"\n    @tornado.web.asynchronous\n    def get(self, args=None):\n        if args:\n            try:\n                article_list = db.article.find_one({\"_id\": ObjectId(args)})\n                if not article_list:\n                    raise Exception\n            except Exception as err:\n                print err\n                article_list = {}\n        else:\n            article_list = list(db.article.find().sort('date', -1))\n        self.finish(json.dumps(article_list, cls=MongoJSONEncoder, sort_keys=True))\n\n    @tornado.web.asynchronous\n    def put(self, args=None):\n        article_id = args\n        name = self.get_argument(\"name\", None)\n        content = self.get_argument(\"content\", None)\n        argument = {\"name\": name} if name else {}\n        argument.update({\"content\": content}) if content else argument\n\n        try:  # 这里对于id不合法的校验是不认真的，应该对传过来的参数进行校验\n            if not content and not name:  # name 和 content 都不存在\n                raise Exception\n            db.article.update_one({\"_id\": ObjectId(article_id)},\n                                  {'$set': argument}\n                                  )\n            article = db.article.find_one({\"_id\": ObjectId(article_id)})\n        except Exception as err:\n            print err\n            article = {}\n        return self.finish(json.dumps(article, cls=MongoJSONEncoder, sort_keys=True))\n\n    @tornado.web.asynchronous\n    def post(self, args=None):\n        name = self.get_argument(\"name\", None)\n        content = self.get_argument(\"content\", None)\n        date = datetime.datetime.strftime(datetime.datetime.now(), \"%Y-%m-%d %H:%M:%S\")\n        try:\n            if name and content:\n                article_id = db.article.insert_one({\n                    \"name\": name,\n                    \"date\": date,\n                    \"content\": content\n                }).inserted_id\n                article = db.article.find_one({\"_id\": ObjectId(article_id)})\n                return self.finish(json.dumps(article, cls=MongoJSONEncoder, sort_keys=True))\n            else:\n                self.finish(json.dumps({\"error\": 1, \"code\": \"0002\"}))\n                return\n        except Exception as err:\n            print err\n            self.finish(json.dumps({\"error\": 1, \"code\": \"0001\"}))\n            return\n\n    @tornado.web.asynchronous\n    def delete(self, args=None, **kwargs):\n        if not args:\n            return self.finish(json.dumps({\"error\": 1, \"code\": \"0003\"}))\n        try:\n            article = db.article.find_one({\"_id\": ObjectId(args)})\n            if article:\n                db.article.delete_one({\"_id\": ObjectId(args)})\n            else:\n                article = {}\n            return self.finish(json.dumps(article, cls=MongoJSONEncoder, sort_keys=True))\n        except Exception as err:\n            print err\n            return self.finish(json.dumps({\"error\": 1, \"code\": \"0001\"}))\n\n```\n\n**其他tornado的配置自行补充，这里不说明配置啦**\n\n## 总结\n\n其实具体的API设计原则需要有各个项目组或者开发团队进行设计和统一规定，没有具体的标准之说，具体的取舍，在项目开发中就会体现处其中的好处。本文是首次接触API的设计原则问题，只是在这里记录自己现在的想法，但是 **不能保证以上所有的论述和实现方式都是合理的** ，**仅供自己的学习和参考**，等后期的深入，本人会继续更新最新的文章，更新其中不足的地方，再次共勉！\n\n---\n\n\n## 解决用户登录的问题\n\n参考项目代码，重新整理了认证的部分，发现tornado自带的功能已经很强大啦，这不在这里补上认证的部分，其实原理很简单：\n\n用户登录之后返回一个token的值，然后再以后的请求头部中需要携带该token的值，来看看代码：\n\n```python\n\n# api.py\nclass Login(ApiHandler):\n    \"\"\"\n    这里是登录获取Token的API，当然这里的处理是如果用户不存在就创建token\n    \"\"\"\n    def post(self):\n        name = self.get_argument(\"name\", None)\n        args = {\"name\": name}\n        user = db.users.find_one(args)\n        if not user:\n            user = {\n                \"name\": name,\n                \"password\": \"123456\",\n                \"sex\": \"男\"\n            }\n            user_id = db.users.insert_one(user).inserted_id\n            user.update({\"_id\": str(user_id)})\n        else:\n            user_id = user[\"_id\"] = str(user[\"_id\"])\n\n        token = self.create_signed_value('tid', str(user_id), version=2)\n        user.update({\"token\": token})\n\n        return self.finish(rtjson(**user))\n\n\nclass ApiHandler(tornado.web.RequestHandler):\n\n    def data_received(self, chunk):\n        pass\n\n    def get_current_user(self):\n        return self.get_secure_cookie(\"tid\", self.request.headers.get('token', None))\n\n    def get_argument(self, name, default=None, strip=True):\n        # 重载该方法\n        if self.request.method != \"GET\":\n            if 'application/json' in str(self.request.headers.get('Content-Type')) and self.request.body and self.request.body != '{}' \\\n                    and self.request.body.startswith('{'):\n                obj = json.loads(self.request.body)\n                return obj.get(name, default)\n            elif 'application/x-www-form-urlencoded' in str(self.request.headers.get('Content-Type')) \\\n                    and self.request.body and self.request.body != '{}' \\\n                    and self.request.body.startswith('{'):\n                obj = json.loads(self.request.body)\n                return obj.get(name, default)\n        return self._get_argument(name, default, self.request.arguments, strip)\n\n    def options(self):\n        self.__set_response_header()\n\n    # 这里的意思是在返回时附带允许请求的http response 头\n    def __set_response_header(self):\n        self.set_header('content-type', 'application/json')\n        self.set_header(\"Access-Control-Allow-Origin\", \"*\")\n        self.set_header(\"Access-Control-Allow-Credentials\", \"true\")\n        self.set_header(\"Access-Control-Allow-Headers\", \"x-requested-with\")\n        self.set_header('Access-Control-Allow-Methods',\n                        'POST, GET, OPTIONS, HEAD')\n\n\n# base.py\n# 这是封装的一个返回合法json的方法\n\nimport json\nimport time\nfrom eve.io.mongo import MongoJSONEncoder\n\n\ndef rtjson(code=1, **args):\n    if code == 1:\n        args['status'] = 1\n        args['response_time'] = int(time.time())\n    else:\n        args['status'] = 0\n        args['error_code'] = code\n        # args['error_msg'] = errorDesc.get(code)\n        args['response_time'] = int(time.time())\n\n    return json.loads(json.dumps(args, cls=MongoJSONEncoder, sort_keys=True))\n\n```\n\n\n## 再次总结\n\n这里虽然实现了登录授权的问题，但是没有实现的是分级的问题，即不同用户的权限不同的处理。后期再处理吧。目前所有的代码请参考[https://github.com/suAdminWen/restapi](https://github.com/suAdminWen/restapi)\n","slug":"用tornado实现API的初次尝试","published":1,"updated":"2021-06-20T10:25:20.132Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluqa1hjj004trlog0oln4ukx","content":"<p>首先解释一下什么叫 API ：</p>\n<blockquote>\n<p>应用程序接口（英语：Application Programming Interface，简称：API ），又称为应用编程接口，就是软件系统不同组成部分衔接的约定。由于近年来软件的规模日益庞大，常常需要把复杂的系统划分成小的组成部分，编程接口的设计十分重要。程序设计的实践中，编程接口的设计首先要使软件系统的职责得到合理划分。良好的接口设计可以降低系统各部分的相互依赖，提高组成单元的内聚性，降低组成单元间的耦合程度，从而提高系统的维护性和扩展性。(来自维基百科)</p>\n</blockquote>\n<p>API 在多端中使用的更节省资源。网络应用程序，分为前端和后端两个部分。当前的发展趋势，就是前端设备层出不穷（手机、平板、桌面电脑、其他专用设备……）。因此，必须有一种统一的机制，方便不同的前端设备与后端进行通信。这导致API构架的流行。</p>\n<p>关于RESTful的相关知识，参考<a href=\"https://zhuanlan.zhihu.com/p/34289466?hmsr=toutiao.io&utm_medium=toutiao.io&utm_source=toutiao.io\">设计一套良好 REST API</a></p>\n<span id=\"more\"></span>\n\n<h2 id=\"为什么选择-Tornado\"><a href=\"#为什么选择-Tornado\" class=\"headerlink\" title=\"为什么选择 Tornado ?\"></a>为什么选择 Tornado ?</h2><p>在 Python 的众多WEB框架中，Tornado 它是异步非阻塞服务器，而且速度特别快。Tornado 每秒可以处理数以千计的连接，这意味着对于实时 Web 服务来说，Tornado 是一个理想的 Web 框架。</p>\n<h2 id=\"最基础的尝试\"><a href=\"#最基础的尝试\" class=\"headerlink\" title=\"最基础的尝试\"></a>最基础的尝试</h2><p>主要实现的是一个<code>ArticleHandler</code>，其中包含<code>GET</code>、<code>POST</code>、 <code>PUT</code>、 <code>DELETE</code>，实现基本的四种请求方式。当然，这是最简单的API设计的实现。</p>\n<p>URL都是： &#x2F;api&#x2F;article[&#x2F;id] POST请求不需要携带id，GET请求也可以不携带，但是意义不同</p>\n<h3 id=\"API设计\"><a href=\"#API设计\" class=\"headerlink\" title=\"API设计\"></a>API设计</h3><p>这里的API设计是不太合理的，可以说URL的表现基本合理，但是 <strong>数据的表现形式是不太合理的</strong>，等待下一步进行优化处理。</p>\n<ul>\n<li><code>GET</code>请求：<code>/api/article</code>，则返回一个列表 <code>[&#123;...&#125;, &#123;...&#125;, ...]</code>；</li>\n<li><code>GET</code>请求：<code>/api/article/id</code>,如果 id 有效，且查找的到数据，则返回 <code>&#123;...&#125;</code> ；否则返回 <code>&#123;&#125;</code>；</li>\n<li><code>POST</code>请求：<code>/api/article</code>, 需要携带参数，json 形式的 data 进行创建数据，如果参数错误或创建失败，返回 <code>&#123;&quot;error&quot;: 1, &quot;code&quot;: ...&#125;</code> ;否则返回创建的数据 <code>&#123;...&#125;</code>；</li>\n<li><code>DELETE</code>请求： <code>/api/article/id</code>，如果id有效，且删除数据，并返回删除的数据 <code>&#123;...&#125;</code>；否则返回 <code>&#123;&quot;error&quot;: 1, &quot;code&quot;: ...&#125;</code>；</li>\n<li><code>PUT</code>请求： <code>/api/article/id</code>，需要携带参数，json形式的data进行修改数据，需要数据的哪项值就可以传入哪项值，如果id有效且参数有效，则返回修改之后的数据 <code>&#123;...&#125;</code>，否则返回 <code>&#123;&#125;</code>；</li>\n</ul>\n<h3 id=\"详见代码\"><a href=\"#详见代码\" class=\"headerlink\" title=\"详见代码\"></a>详见代码</h3><p>** <code>url</code>设计 **</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">urls = [</span><br><span class=\"line\">    (<span class=\"string\">r&quot;/api/article/?(\\w+)?&quot;</span>, api.Article),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>** <code>ApiHandler</code>实现 **</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> tornado.web</span><br><span class=\"line\"><span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> settings <span class=\"keyword\">import</span> db</span><br><span class=\"line\"><span class=\"keyword\">from</span> eve.io.mongo <span class=\"keyword\">import</span> MongoJSONEncoder</span><br><span class=\"line\"><span class=\"keyword\">from</span> bson.objectid <span class=\"keyword\">import</span> ObjectId</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ApiHandler</span>(tornado.web.RequestHandler):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">data_received</span>(<span class=\"params\">self, chunk</span>):</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">options</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.__set_response_header()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 这里的意思是在返回时附带允许请求的http response 头</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__set_response_header</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.set_header(<span class=\"string\">&#x27;content-type&#x27;</span>, <span class=\"string\">&#x27;application/json&#x27;</span>)</span><br><span class=\"line\">        self.set_header(<span class=\"string\">&quot;Access-Control-Allow-Origin&quot;</span>, <span class=\"string\">&quot;*&quot;</span>)</span><br><span class=\"line\">        self.set_header(<span class=\"string\">&quot;Access-Control-Allow-Credentials&quot;</span>, <span class=\"string\">&quot;true&quot;</span>)</span><br><span class=\"line\">        self.set_header(<span class=\"string\">&quot;Access-Control-Allow-Headers&quot;</span>, <span class=\"string\">&quot;x-requested-with&quot;</span>)</span><br><span class=\"line\">        self.set_header(<span class=\"string\">&#x27;Access-Control-Allow-Methods&#x27;</span>,</span><br><span class=\"line\">                        <span class=\"string\">&#x27;POST, GET, OPTIONS, HEAD&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Article</span>(<span class=\"title class_ inherited__\">ApiHandler</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    1、缺少基本认证机制</span></span><br><span class=\"line\"><span class=\"string\">    2、没有验证tornado的异步的牛逼之处</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"meta\">    @tornado.web.asynchronous</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get</span>(<span class=\"params\">self, args=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> args:</span><br><span class=\"line\">            <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                article_list = db.article.find_one(&#123;<span class=\"string\">&quot;_id&quot;</span>: ObjectId(args)&#125;)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> article_list:</span><br><span class=\"line\">                    <span class=\"keyword\">raise</span> Exception</span><br><span class=\"line\">            <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> err:</span><br><span class=\"line\">                <span class=\"built_in\">print</span> err</span><br><span class=\"line\">                article_list = &#123;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            article_list = <span class=\"built_in\">list</span>(db.article.find().sort(<span class=\"string\">&#x27;date&#x27;</span>, -<span class=\"number\">1</span>))</span><br><span class=\"line\">        self.finish(json.dumps(article_list, cls=MongoJSONEncoder, sort_keys=<span class=\"literal\">True</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @tornado.web.asynchronous</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">put</span>(<span class=\"params\">self, args=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">        article_id = args</span><br><span class=\"line\">        name = self.get_argument(<span class=\"string\">&quot;name&quot;</span>, <span class=\"literal\">None</span>)</span><br><span class=\"line\">        content = self.get_argument(<span class=\"string\">&quot;content&quot;</span>, <span class=\"literal\">None</span>)</span><br><span class=\"line\">        argument = &#123;<span class=\"string\">&quot;name&quot;</span>: name&#125; <span class=\"keyword\">if</span> name <span class=\"keyword\">else</span> &#123;&#125;</span><br><span class=\"line\">        argument.update(&#123;<span class=\"string\">&quot;content&quot;</span>: content&#125;) <span class=\"keyword\">if</span> content <span class=\"keyword\">else</span> argument</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:  <span class=\"comment\"># 这里对于id不合法的校验是不认真的，应该对传过来的参数进行校验</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> content <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> name:  <span class=\"comment\"># name 和 content 都不存在</span></span><br><span class=\"line\">                <span class=\"keyword\">raise</span> Exception</span><br><span class=\"line\">            db.article.update_one(&#123;<span class=\"string\">&quot;_id&quot;</span>: ObjectId(article_id)&#125;,</span><br><span class=\"line\">                                  &#123;<span class=\"string\">&#x27;$set&#x27;</span>: argument&#125;</span><br><span class=\"line\">                                  )</span><br><span class=\"line\">            article = db.article.find_one(&#123;<span class=\"string\">&quot;_id&quot;</span>: ObjectId(article_id)&#125;)</span><br><span class=\"line\">        <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> err:</span><br><span class=\"line\">            <span class=\"built_in\">print</span> err</span><br><span class=\"line\">            article = &#123;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.finish(json.dumps(article, cls=MongoJSONEncoder, sort_keys=<span class=\"literal\">True</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @tornado.web.asynchronous</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">post</span>(<span class=\"params\">self, args=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">        name = self.get_argument(<span class=\"string\">&quot;name&quot;</span>, <span class=\"literal\">None</span>)</span><br><span class=\"line\">        content = self.get_argument(<span class=\"string\">&quot;content&quot;</span>, <span class=\"literal\">None</span>)</span><br><span class=\"line\">        date = datetime.datetime.strftime(datetime.datetime.now(), <span class=\"string\">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> name <span class=\"keyword\">and</span> content:</span><br><span class=\"line\">                article_id = db.article.insert_one(&#123;</span><br><span class=\"line\">                    <span class=\"string\">&quot;name&quot;</span>: name,</span><br><span class=\"line\">                    <span class=\"string\">&quot;date&quot;</span>: date,</span><br><span class=\"line\">                    <span class=\"string\">&quot;content&quot;</span>: content</span><br><span class=\"line\">                &#125;).inserted_id</span><br><span class=\"line\">                article = db.article.find_one(&#123;<span class=\"string\">&quot;_id&quot;</span>: ObjectId(article_id)&#125;)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> self.finish(json.dumps(article, cls=MongoJSONEncoder, sort_keys=<span class=\"literal\">True</span>))</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                self.finish(json.dumps(&#123;<span class=\"string\">&quot;error&quot;</span>: <span class=\"number\">1</span>, <span class=\"string\">&quot;code&quot;</span>: <span class=\"string\">&quot;0002&quot;</span>&#125;))</span><br><span class=\"line\">                <span class=\"keyword\">return</span></span><br><span class=\"line\">        <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> err:</span><br><span class=\"line\">            <span class=\"built_in\">print</span> err</span><br><span class=\"line\">            self.finish(json.dumps(&#123;<span class=\"string\">&quot;error&quot;</span>: <span class=\"number\">1</span>, <span class=\"string\">&quot;code&quot;</span>: <span class=\"string\">&quot;0001&quot;</span>&#125;))</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @tornado.web.asynchronous</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">delete</span>(<span class=\"params\">self, args=<span class=\"literal\">None</span>, **kwargs</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> args:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.finish(json.dumps(&#123;<span class=\"string\">&quot;error&quot;</span>: <span class=\"number\">1</span>, <span class=\"string\">&quot;code&quot;</span>: <span class=\"string\">&quot;0003&quot;</span>&#125;))</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            article = db.article.find_one(&#123;<span class=\"string\">&quot;_id&quot;</span>: ObjectId(args)&#125;)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> article:</span><br><span class=\"line\">                db.article.delete_one(&#123;<span class=\"string\">&quot;_id&quot;</span>: ObjectId(args)&#125;)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                article = &#123;&#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.finish(json.dumps(article, cls=MongoJSONEncoder, sort_keys=<span class=\"literal\">True</span>))</span><br><span class=\"line\">        <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> err:</span><br><span class=\"line\">            <span class=\"built_in\">print</span> err</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.finish(json.dumps(&#123;<span class=\"string\">&quot;error&quot;</span>: <span class=\"number\">1</span>, <span class=\"string\">&quot;code&quot;</span>: <span class=\"string\">&quot;0001&quot;</span>&#125;))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>其他tornado的配置自行补充，这里不说明配置啦</strong></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>其实具体的API设计原则需要有各个项目组或者开发团队进行设计和统一规定，没有具体的标准之说，具体的取舍，在项目开发中就会体现处其中的好处。本文是首次接触API的设计原则问题，只是在这里记录自己现在的想法，但是 <strong>不能保证以上所有的论述和实现方式都是合理的</strong> ，<strong>仅供自己的学习和参考</strong>，等后期的深入，本人会继续更新最新的文章，更新其中不足的地方，再次共勉！</p>\n<hr>\n<h2 id=\"解决用户登录的问题\"><a href=\"#解决用户登录的问题\" class=\"headerlink\" title=\"解决用户登录的问题\"></a>解决用户登录的问题</h2><p>参考项目代码，重新整理了认证的部分，发现tornado自带的功能已经很强大啦，这不在这里补上认证的部分，其实原理很简单：</p>\n<p>用户登录之后返回一个token的值，然后再以后的请求头部中需要携带该token的值，来看看代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># api.py</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Login</span>(<span class=\"title class_ inherited__\">ApiHandler</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    这里是登录获取Token的API，当然这里的处理是如果用户不存在就创建token</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">post</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        name = self.get_argument(<span class=\"string\">&quot;name&quot;</span>, <span class=\"literal\">None</span>)</span><br><span class=\"line\">        args = &#123;<span class=\"string\">&quot;name&quot;</span>: name&#125;</span><br><span class=\"line\">        user = db.users.find_one(args)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> user:</span><br><span class=\"line\">            user = &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;name&quot;</span>: name,</span><br><span class=\"line\">                <span class=\"string\">&quot;password&quot;</span>: <span class=\"string\">&quot;123456&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;sex&quot;</span>: <span class=\"string\">&quot;男&quot;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            user_id = db.users.insert_one(user).inserted_id</span><br><span class=\"line\">            user.update(&#123;<span class=\"string\">&quot;_id&quot;</span>: <span class=\"built_in\">str</span>(user_id)&#125;)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            user_id = user[<span class=\"string\">&quot;_id&quot;</span>] = <span class=\"built_in\">str</span>(user[<span class=\"string\">&quot;_id&quot;</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">        token = self.create_signed_value(<span class=\"string\">&#x27;tid&#x27;</span>, <span class=\"built_in\">str</span>(user_id), version=<span class=\"number\">2</span>)</span><br><span class=\"line\">        user.update(&#123;<span class=\"string\">&quot;token&quot;</span>: token&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.finish(rtjson(**user))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ApiHandler</span>(tornado.web.RequestHandler):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">data_received</span>(<span class=\"params\">self, chunk</span>):</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get_current_user</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.get_secure_cookie(<span class=\"string\">&quot;tid&quot;</span>, self.request.headers.get(<span class=\"string\">&#x27;token&#x27;</span>, <span class=\"literal\">None</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get_argument</span>(<span class=\"params\">self, name, default=<span class=\"literal\">None</span>, strip=<span class=\"literal\">True</span></span>):</span><br><span class=\"line\">        <span class=\"comment\"># 重载该方法</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.request.method != <span class=\"string\">&quot;GET&quot;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"string\">&#x27;application/json&#x27;</span> <span class=\"keyword\">in</span> <span class=\"built_in\">str</span>(self.request.headers.get(<span class=\"string\">&#x27;Content-Type&#x27;</span>)) <span class=\"keyword\">and</span> self.request.body <span class=\"keyword\">and</span> self.request.body != <span class=\"string\">&#x27;&#123;&#125;&#x27;</span> \\</span><br><span class=\"line\">                    <span class=\"keyword\">and</span> self.request.body.startswith(<span class=\"string\">&#x27;&#123;&#x27;</span>):</span><br><span class=\"line\">                obj = json.loads(self.request.body)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> obj.get(name, default)</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> <span class=\"string\">&#x27;application/x-www-form-urlencoded&#x27;</span> <span class=\"keyword\">in</span> <span class=\"built_in\">str</span>(self.request.headers.get(<span class=\"string\">&#x27;Content-Type&#x27;</span>)) \\</span><br><span class=\"line\">                    <span class=\"keyword\">and</span> self.request.body <span class=\"keyword\">and</span> self.request.body != <span class=\"string\">&#x27;&#123;&#125;&#x27;</span> \\</span><br><span class=\"line\">                    <span class=\"keyword\">and</span> self.request.body.startswith(<span class=\"string\">&#x27;&#123;&#x27;</span>):</span><br><span class=\"line\">                obj = json.loads(self.request.body)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> obj.get(name, default)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._get_argument(name, default, self.request.arguments, strip)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">options</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.__set_response_header()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 这里的意思是在返回时附带允许请求的http response 头</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__set_response_header</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.set_header(<span class=\"string\">&#x27;content-type&#x27;</span>, <span class=\"string\">&#x27;application/json&#x27;</span>)</span><br><span class=\"line\">        self.set_header(<span class=\"string\">&quot;Access-Control-Allow-Origin&quot;</span>, <span class=\"string\">&quot;*&quot;</span>)</span><br><span class=\"line\">        self.set_header(<span class=\"string\">&quot;Access-Control-Allow-Credentials&quot;</span>, <span class=\"string\">&quot;true&quot;</span>)</span><br><span class=\"line\">        self.set_header(<span class=\"string\">&quot;Access-Control-Allow-Headers&quot;</span>, <span class=\"string\">&quot;x-requested-with&quot;</span>)</span><br><span class=\"line\">        self.set_header(<span class=\"string\">&#x27;Access-Control-Allow-Methods&#x27;</span>,</span><br><span class=\"line\">                        <span class=\"string\">&#x27;POST, GET, OPTIONS, HEAD&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># base.py</span></span><br><span class=\"line\"><span class=\"comment\"># 这是封装的一个返回合法json的方法</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">from</span> eve.io.mongo <span class=\"keyword\">import</span> MongoJSONEncoder</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">rtjson</span>(<span class=\"params\">code=<span class=\"number\">1</span>, **args</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> code == <span class=\"number\">1</span>:</span><br><span class=\"line\">        args[<span class=\"string\">&#x27;status&#x27;</span>] = <span class=\"number\">1</span></span><br><span class=\"line\">        args[<span class=\"string\">&#x27;response_time&#x27;</span>] = <span class=\"built_in\">int</span>(time.time())</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        args[<span class=\"string\">&#x27;status&#x27;</span>] = <span class=\"number\">0</span></span><br><span class=\"line\">        args[<span class=\"string\">&#x27;error_code&#x27;</span>] = code</span><br><span class=\"line\">        <span class=\"comment\"># args[&#x27;error_msg&#x27;] = errorDesc.get(code)</span></span><br><span class=\"line\">        args[<span class=\"string\">&#x27;response_time&#x27;</span>] = <span class=\"built_in\">int</span>(time.time())</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> json.loads(json.dumps(args, cls=MongoJSONEncoder, sort_keys=<span class=\"literal\">True</span>))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"再次总结\"><a href=\"#再次总结\" class=\"headerlink\" title=\"再次总结\"></a>再次总结</h2><p>这里虽然实现了登录授权的问题，但是没有实现的是分级的问题，即不同用户的权限不同的处理。后期再处理吧。目前所有的代码请参考<a href=\"https://github.com/suAdminWen/restapi\">https://github.com/suAdminWen/restapi</a></p>\n","site":{"data":{}},"excerpt":"<p>首先解释一下什么叫 API ：</p>\n<blockquote>\n<p>应用程序接口（英语：Application Programming Interface，简称：API ），又称为应用编程接口，就是软件系统不同组成部分衔接的约定。由于近年来软件的规模日益庞大，常常需要把复杂的系统划分成小的组成部分，编程接口的设计十分重要。程序设计的实践中，编程接口的设计首先要使软件系统的职责得到合理划分。良好的接口设计可以降低系统各部分的相互依赖，提高组成单元的内聚性，降低组成单元间的耦合程度，从而提高系统的维护性和扩展性。(来自维基百科)</p>\n</blockquote>\n<p>API 在多端中使用的更节省资源。网络应用程序，分为前端和后端两个部分。当前的发展趋势，就是前端设备层出不穷（手机、平板、桌面电脑、其他专用设备……）。因此，必须有一种统一的机制，方便不同的前端设备与后端进行通信。这导致API构架的流行。</p>\n<p>关于RESTful的相关知识，参考<a href=\"https://zhuanlan.zhihu.com/p/34289466?hmsr=toutiao.io&utm_medium=toutiao.io&utm_source=toutiao.io\">设计一套良好 REST API</a></p>","more":"<h2 id=\"为什么选择-Tornado\"><a href=\"#为什么选择-Tornado\" class=\"headerlink\" title=\"为什么选择 Tornado ?\"></a>为什么选择 Tornado ?</h2><p>在 Python 的众多WEB框架中，Tornado 它是异步非阻塞服务器，而且速度特别快。Tornado 每秒可以处理数以千计的连接，这意味着对于实时 Web 服务来说，Tornado 是一个理想的 Web 框架。</p>\n<h2 id=\"最基础的尝试\"><a href=\"#最基础的尝试\" class=\"headerlink\" title=\"最基础的尝试\"></a>最基础的尝试</h2><p>主要实现的是一个<code>ArticleHandler</code>，其中包含<code>GET</code>、<code>POST</code>、 <code>PUT</code>、 <code>DELETE</code>，实现基本的四种请求方式。当然，这是最简单的API设计的实现。</p>\n<p>URL都是： &#x2F;api&#x2F;article[&#x2F;id] POST请求不需要携带id，GET请求也可以不携带，但是意义不同</p>\n<h3 id=\"API设计\"><a href=\"#API设计\" class=\"headerlink\" title=\"API设计\"></a>API设计</h3><p>这里的API设计是不太合理的，可以说URL的表现基本合理，但是 <strong>数据的表现形式是不太合理的</strong>，等待下一步进行优化处理。</p>\n<ul>\n<li><code>GET</code>请求：<code>/api/article</code>，则返回一个列表 <code>[&#123;...&#125;, &#123;...&#125;, ...]</code>；</li>\n<li><code>GET</code>请求：<code>/api/article/id</code>,如果 id 有效，且查找的到数据，则返回 <code>&#123;...&#125;</code> ；否则返回 <code>&#123;&#125;</code>；</li>\n<li><code>POST</code>请求：<code>/api/article</code>, 需要携带参数，json 形式的 data 进行创建数据，如果参数错误或创建失败，返回 <code>&#123;&quot;error&quot;: 1, &quot;code&quot;: ...&#125;</code> ;否则返回创建的数据 <code>&#123;...&#125;</code>；</li>\n<li><code>DELETE</code>请求： <code>/api/article/id</code>，如果id有效，且删除数据，并返回删除的数据 <code>&#123;...&#125;</code>；否则返回 <code>&#123;&quot;error&quot;: 1, &quot;code&quot;: ...&#125;</code>；</li>\n<li><code>PUT</code>请求： <code>/api/article/id</code>，需要携带参数，json形式的data进行修改数据，需要数据的哪项值就可以传入哪项值，如果id有效且参数有效，则返回修改之后的数据 <code>&#123;...&#125;</code>，否则返回 <code>&#123;&#125;</code>；</li>\n</ul>\n<h3 id=\"详见代码\"><a href=\"#详见代码\" class=\"headerlink\" title=\"详见代码\"></a>详见代码</h3><p>** <code>url</code>设计 **</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">urls = [</span><br><span class=\"line\">    (<span class=\"string\">r&quot;/api/article/?(\\w+)?&quot;</span>, api.Article),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>** <code>ApiHandler</code>实现 **</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> tornado.web</span><br><span class=\"line\"><span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> settings <span class=\"keyword\">import</span> db</span><br><span class=\"line\"><span class=\"keyword\">from</span> eve.io.mongo <span class=\"keyword\">import</span> MongoJSONEncoder</span><br><span class=\"line\"><span class=\"keyword\">from</span> bson.objectid <span class=\"keyword\">import</span> ObjectId</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ApiHandler</span>(tornado.web.RequestHandler):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">data_received</span>(<span class=\"params\">self, chunk</span>):</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">options</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.__set_response_header()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 这里的意思是在返回时附带允许请求的http response 头</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__set_response_header</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.set_header(<span class=\"string\">&#x27;content-type&#x27;</span>, <span class=\"string\">&#x27;application/json&#x27;</span>)</span><br><span class=\"line\">        self.set_header(<span class=\"string\">&quot;Access-Control-Allow-Origin&quot;</span>, <span class=\"string\">&quot;*&quot;</span>)</span><br><span class=\"line\">        self.set_header(<span class=\"string\">&quot;Access-Control-Allow-Credentials&quot;</span>, <span class=\"string\">&quot;true&quot;</span>)</span><br><span class=\"line\">        self.set_header(<span class=\"string\">&quot;Access-Control-Allow-Headers&quot;</span>, <span class=\"string\">&quot;x-requested-with&quot;</span>)</span><br><span class=\"line\">        self.set_header(<span class=\"string\">&#x27;Access-Control-Allow-Methods&#x27;</span>,</span><br><span class=\"line\">                        <span class=\"string\">&#x27;POST, GET, OPTIONS, HEAD&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Article</span>(<span class=\"title class_ inherited__\">ApiHandler</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    1、缺少基本认证机制</span></span><br><span class=\"line\"><span class=\"string\">    2、没有验证tornado的异步的牛逼之处</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"meta\">    @tornado.web.asynchronous</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get</span>(<span class=\"params\">self, args=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> args:</span><br><span class=\"line\">            <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                article_list = db.article.find_one(&#123;<span class=\"string\">&quot;_id&quot;</span>: ObjectId(args)&#125;)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> article_list:</span><br><span class=\"line\">                    <span class=\"keyword\">raise</span> Exception</span><br><span class=\"line\">            <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> err:</span><br><span class=\"line\">                <span class=\"built_in\">print</span> err</span><br><span class=\"line\">                article_list = &#123;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            article_list = <span class=\"built_in\">list</span>(db.article.find().sort(<span class=\"string\">&#x27;date&#x27;</span>, -<span class=\"number\">1</span>))</span><br><span class=\"line\">        self.finish(json.dumps(article_list, cls=MongoJSONEncoder, sort_keys=<span class=\"literal\">True</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @tornado.web.asynchronous</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">put</span>(<span class=\"params\">self, args=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">        article_id = args</span><br><span class=\"line\">        name = self.get_argument(<span class=\"string\">&quot;name&quot;</span>, <span class=\"literal\">None</span>)</span><br><span class=\"line\">        content = self.get_argument(<span class=\"string\">&quot;content&quot;</span>, <span class=\"literal\">None</span>)</span><br><span class=\"line\">        argument = &#123;<span class=\"string\">&quot;name&quot;</span>: name&#125; <span class=\"keyword\">if</span> name <span class=\"keyword\">else</span> &#123;&#125;</span><br><span class=\"line\">        argument.update(&#123;<span class=\"string\">&quot;content&quot;</span>: content&#125;) <span class=\"keyword\">if</span> content <span class=\"keyword\">else</span> argument</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:  <span class=\"comment\"># 这里对于id不合法的校验是不认真的，应该对传过来的参数进行校验</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> content <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> name:  <span class=\"comment\"># name 和 content 都不存在</span></span><br><span class=\"line\">                <span class=\"keyword\">raise</span> Exception</span><br><span class=\"line\">            db.article.update_one(&#123;<span class=\"string\">&quot;_id&quot;</span>: ObjectId(article_id)&#125;,</span><br><span class=\"line\">                                  &#123;<span class=\"string\">&#x27;$set&#x27;</span>: argument&#125;</span><br><span class=\"line\">                                  )</span><br><span class=\"line\">            article = db.article.find_one(&#123;<span class=\"string\">&quot;_id&quot;</span>: ObjectId(article_id)&#125;)</span><br><span class=\"line\">        <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> err:</span><br><span class=\"line\">            <span class=\"built_in\">print</span> err</span><br><span class=\"line\">            article = &#123;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.finish(json.dumps(article, cls=MongoJSONEncoder, sort_keys=<span class=\"literal\">True</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @tornado.web.asynchronous</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">post</span>(<span class=\"params\">self, args=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">        name = self.get_argument(<span class=\"string\">&quot;name&quot;</span>, <span class=\"literal\">None</span>)</span><br><span class=\"line\">        content = self.get_argument(<span class=\"string\">&quot;content&quot;</span>, <span class=\"literal\">None</span>)</span><br><span class=\"line\">        date = datetime.datetime.strftime(datetime.datetime.now(), <span class=\"string\">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> name <span class=\"keyword\">and</span> content:</span><br><span class=\"line\">                article_id = db.article.insert_one(&#123;</span><br><span class=\"line\">                    <span class=\"string\">&quot;name&quot;</span>: name,</span><br><span class=\"line\">                    <span class=\"string\">&quot;date&quot;</span>: date,</span><br><span class=\"line\">                    <span class=\"string\">&quot;content&quot;</span>: content</span><br><span class=\"line\">                &#125;).inserted_id</span><br><span class=\"line\">                article = db.article.find_one(&#123;<span class=\"string\">&quot;_id&quot;</span>: ObjectId(article_id)&#125;)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> self.finish(json.dumps(article, cls=MongoJSONEncoder, sort_keys=<span class=\"literal\">True</span>))</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                self.finish(json.dumps(&#123;<span class=\"string\">&quot;error&quot;</span>: <span class=\"number\">1</span>, <span class=\"string\">&quot;code&quot;</span>: <span class=\"string\">&quot;0002&quot;</span>&#125;))</span><br><span class=\"line\">                <span class=\"keyword\">return</span></span><br><span class=\"line\">        <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> err:</span><br><span class=\"line\">            <span class=\"built_in\">print</span> err</span><br><span class=\"line\">            self.finish(json.dumps(&#123;<span class=\"string\">&quot;error&quot;</span>: <span class=\"number\">1</span>, <span class=\"string\">&quot;code&quot;</span>: <span class=\"string\">&quot;0001&quot;</span>&#125;))</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @tornado.web.asynchronous</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">delete</span>(<span class=\"params\">self, args=<span class=\"literal\">None</span>, **kwargs</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> args:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.finish(json.dumps(&#123;<span class=\"string\">&quot;error&quot;</span>: <span class=\"number\">1</span>, <span class=\"string\">&quot;code&quot;</span>: <span class=\"string\">&quot;0003&quot;</span>&#125;))</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            article = db.article.find_one(&#123;<span class=\"string\">&quot;_id&quot;</span>: ObjectId(args)&#125;)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> article:</span><br><span class=\"line\">                db.article.delete_one(&#123;<span class=\"string\">&quot;_id&quot;</span>: ObjectId(args)&#125;)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                article = &#123;&#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.finish(json.dumps(article, cls=MongoJSONEncoder, sort_keys=<span class=\"literal\">True</span>))</span><br><span class=\"line\">        <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> err:</span><br><span class=\"line\">            <span class=\"built_in\">print</span> err</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.finish(json.dumps(&#123;<span class=\"string\">&quot;error&quot;</span>: <span class=\"number\">1</span>, <span class=\"string\">&quot;code&quot;</span>: <span class=\"string\">&quot;0001&quot;</span>&#125;))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>其他tornado的配置自行补充，这里不说明配置啦</strong></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>其实具体的API设计原则需要有各个项目组或者开发团队进行设计和统一规定，没有具体的标准之说，具体的取舍，在项目开发中就会体现处其中的好处。本文是首次接触API的设计原则问题，只是在这里记录自己现在的想法，但是 <strong>不能保证以上所有的论述和实现方式都是合理的</strong> ，<strong>仅供自己的学习和参考</strong>，等后期的深入，本人会继续更新最新的文章，更新其中不足的地方，再次共勉！</p>\n<hr>\n<h2 id=\"解决用户登录的问题\"><a href=\"#解决用户登录的问题\" class=\"headerlink\" title=\"解决用户登录的问题\"></a>解决用户登录的问题</h2><p>参考项目代码，重新整理了认证的部分，发现tornado自带的功能已经很强大啦，这不在这里补上认证的部分，其实原理很简单：</p>\n<p>用户登录之后返回一个token的值，然后再以后的请求头部中需要携带该token的值，来看看代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># api.py</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Login</span>(<span class=\"title class_ inherited__\">ApiHandler</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    这里是登录获取Token的API，当然这里的处理是如果用户不存在就创建token</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">post</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        name = self.get_argument(<span class=\"string\">&quot;name&quot;</span>, <span class=\"literal\">None</span>)</span><br><span class=\"line\">        args = &#123;<span class=\"string\">&quot;name&quot;</span>: name&#125;</span><br><span class=\"line\">        user = db.users.find_one(args)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> user:</span><br><span class=\"line\">            user = &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;name&quot;</span>: name,</span><br><span class=\"line\">                <span class=\"string\">&quot;password&quot;</span>: <span class=\"string\">&quot;123456&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;sex&quot;</span>: <span class=\"string\">&quot;男&quot;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            user_id = db.users.insert_one(user).inserted_id</span><br><span class=\"line\">            user.update(&#123;<span class=\"string\">&quot;_id&quot;</span>: <span class=\"built_in\">str</span>(user_id)&#125;)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            user_id = user[<span class=\"string\">&quot;_id&quot;</span>] = <span class=\"built_in\">str</span>(user[<span class=\"string\">&quot;_id&quot;</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">        token = self.create_signed_value(<span class=\"string\">&#x27;tid&#x27;</span>, <span class=\"built_in\">str</span>(user_id), version=<span class=\"number\">2</span>)</span><br><span class=\"line\">        user.update(&#123;<span class=\"string\">&quot;token&quot;</span>: token&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.finish(rtjson(**user))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ApiHandler</span>(tornado.web.RequestHandler):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">data_received</span>(<span class=\"params\">self, chunk</span>):</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get_current_user</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.get_secure_cookie(<span class=\"string\">&quot;tid&quot;</span>, self.request.headers.get(<span class=\"string\">&#x27;token&#x27;</span>, <span class=\"literal\">None</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get_argument</span>(<span class=\"params\">self, name, default=<span class=\"literal\">None</span>, strip=<span class=\"literal\">True</span></span>):</span><br><span class=\"line\">        <span class=\"comment\"># 重载该方法</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.request.method != <span class=\"string\">&quot;GET&quot;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"string\">&#x27;application/json&#x27;</span> <span class=\"keyword\">in</span> <span class=\"built_in\">str</span>(self.request.headers.get(<span class=\"string\">&#x27;Content-Type&#x27;</span>)) <span class=\"keyword\">and</span> self.request.body <span class=\"keyword\">and</span> self.request.body != <span class=\"string\">&#x27;&#123;&#125;&#x27;</span> \\</span><br><span class=\"line\">                    <span class=\"keyword\">and</span> self.request.body.startswith(<span class=\"string\">&#x27;&#123;&#x27;</span>):</span><br><span class=\"line\">                obj = json.loads(self.request.body)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> obj.get(name, default)</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> <span class=\"string\">&#x27;application/x-www-form-urlencoded&#x27;</span> <span class=\"keyword\">in</span> <span class=\"built_in\">str</span>(self.request.headers.get(<span class=\"string\">&#x27;Content-Type&#x27;</span>)) \\</span><br><span class=\"line\">                    <span class=\"keyword\">and</span> self.request.body <span class=\"keyword\">and</span> self.request.body != <span class=\"string\">&#x27;&#123;&#125;&#x27;</span> \\</span><br><span class=\"line\">                    <span class=\"keyword\">and</span> self.request.body.startswith(<span class=\"string\">&#x27;&#123;&#x27;</span>):</span><br><span class=\"line\">                obj = json.loads(self.request.body)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> obj.get(name, default)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._get_argument(name, default, self.request.arguments, strip)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">options</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.__set_response_header()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 这里的意思是在返回时附带允许请求的http response 头</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__set_response_header</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.set_header(<span class=\"string\">&#x27;content-type&#x27;</span>, <span class=\"string\">&#x27;application/json&#x27;</span>)</span><br><span class=\"line\">        self.set_header(<span class=\"string\">&quot;Access-Control-Allow-Origin&quot;</span>, <span class=\"string\">&quot;*&quot;</span>)</span><br><span class=\"line\">        self.set_header(<span class=\"string\">&quot;Access-Control-Allow-Credentials&quot;</span>, <span class=\"string\">&quot;true&quot;</span>)</span><br><span class=\"line\">        self.set_header(<span class=\"string\">&quot;Access-Control-Allow-Headers&quot;</span>, <span class=\"string\">&quot;x-requested-with&quot;</span>)</span><br><span class=\"line\">        self.set_header(<span class=\"string\">&#x27;Access-Control-Allow-Methods&#x27;</span>,</span><br><span class=\"line\">                        <span class=\"string\">&#x27;POST, GET, OPTIONS, HEAD&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># base.py</span></span><br><span class=\"line\"><span class=\"comment\"># 这是封装的一个返回合法json的方法</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">from</span> eve.io.mongo <span class=\"keyword\">import</span> MongoJSONEncoder</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">rtjson</span>(<span class=\"params\">code=<span class=\"number\">1</span>, **args</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> code == <span class=\"number\">1</span>:</span><br><span class=\"line\">        args[<span class=\"string\">&#x27;status&#x27;</span>] = <span class=\"number\">1</span></span><br><span class=\"line\">        args[<span class=\"string\">&#x27;response_time&#x27;</span>] = <span class=\"built_in\">int</span>(time.time())</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        args[<span class=\"string\">&#x27;status&#x27;</span>] = <span class=\"number\">0</span></span><br><span class=\"line\">        args[<span class=\"string\">&#x27;error_code&#x27;</span>] = code</span><br><span class=\"line\">        <span class=\"comment\"># args[&#x27;error_msg&#x27;] = errorDesc.get(code)</span></span><br><span class=\"line\">        args[<span class=\"string\">&#x27;response_time&#x27;</span>] = <span class=\"built_in\">int</span>(time.time())</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> json.loads(json.dumps(args, cls=MongoJSONEncoder, sort_keys=<span class=\"literal\">True</span>))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"再次总结\"><a href=\"#再次总结\" class=\"headerlink\" title=\"再次总结\"></a>再次总结</h2><p>这里虽然实现了登录授权的问题，但是没有实现的是分级的问题，即不同用户的权限不同的处理。后期再处理吧。目前所有的代码请参考<a href=\"https://github.com/suAdminWen/restapi\">https://github.com/suAdminWen/restapi</a></p>"},{"title":"热门列表的实现思路整理","date":"2018-09-08T16:00:00.000Z","_content":"\n## 热门的规则\n\n对于热门文章的定义是：\n\n> 单位时间内，（”分享“数 + ”点赞“数 + ”评论“数）的总和大于某特定值的文章，被视为热门文章。\n\n热门文章的列表是由后台动态生成的，而且在每次生成的时候，产生的数据不一定是相同的。为了减轻系统的压力和提高api的响应速度，该计算任务使用celery 进行后台任务调度。\n\n后台定时任务是循环任务，任务执行时向缓存数据库中插入当前时段计算出的热门文章索引值，缓存数据库采用的是redis。\n\n\n## 定时任务的实现\n\n- 将新增的热门文章索引写入缓存数据库中，插入的时候，score 值取当前时间戳。\n- 清除一定时间前的热门文章。\n\n<!--more-->\n\n### 新增热门文章\n\n计算热门文章sql 语句实现如下(暂时不考虑分享的数据)：\n\n```mysql\nSELECT result.user_publish_id FROM (\n\tSELECT a.user_publish_id, COUNT(*) AS count FROM\n\t(\n\t\tSELECT p.user_publish_id\n\t\tFROM user_publish AS p\n\t\tJOIN user_like AS l\n\t\tON\n\t\t\tl.for_obj = p.user_publish_id AND l.like_type = 0 AND l.created_at > '{0}'\n\t\tWHERE p.status = 'VISIBLE'\n\n\t\tUNION ALL\n\n\t\tSELECT p.user_publish_id\n\t\tFROM user_publish AS p\n\t\tJOIN user_comments AS c\n\t\tON\n\t\t\tp.user_publish_id = c.publish_id AND c.status = 'VISIBLE' AND c.created_at > '{0}'\n\t\tWHERE p.status = 'VISIBLE'\n\n\t) AS a\n\tWHERE a.user_publish_id not in (\"{2}\")\n\tGROUP BY a.user_publish_id\n) AS result\nWHERE result.count >= {1}\n```\n\n(`user_publish` 用户发布文章信息表，`user_like` 用户点赞表，`user_comments` 用户评论表)\n以上sql语句完成了对符合热门条件的文章的筛选，返回的结果集中将不包含应已经在缓存数据库的中索引。\n\n将以上返回的文章索引插入redis：\n\n```\npipeline.zadd(ALL_HOT_KEYS_CACHE, time.time(), item)\n```\n\n(`ALL_HOT_KEYS_CACHE` redis 中有序集合的键)\n写入完成之后，查看redis 中，其实每次任务产生的热门文章索引对应的score 值是相同的。\n\n### 清除一定时间前的热门文章\n\n热门文章进入缓存之后，需要在一定的时间内清除，这是因为被写入redis的之后，score不会被改动。定时任务需要将距离当前较远的缓存数据删除以减轻缓存的压力。\n\n## 后端的实现\n\n热门类别的分页没有上一页与下一页之说。客户端在请求的时候，有两种参数情况：\n\n- count：要多少条数据\n- ids：客户端已经缓存的文章id列表\n\n客户端如果仅传入count 参数，后端将返回最新的count条数据信息。\n如果传入count和ids，后端返回的count数据中，ids中包含的文章信息将不会被缓存。\n\n这样保证了客户端数据的不重复问题。但是随着客户端浏览的数据越来越多，把么客户端请求的ids列表也越大，后端去重的时候复杂度较高。但是解决这个问题得力于redis的集合操作方法。\n\n```python\n\n# redis_util.py\n\ndef get_redis_sorted_set_diffs(uid, items, count):\n\t\n    user_key = USER_HOT_KEYS_CACHE.format(uid)\n    user_hot_key_cache(items, user_key)\n    dest = USER_HOT_KEYS_DESTINATION_CACHE.format(uid)\n    redis_store.zunionstore(dest, {ALL_HOT_KEYS_CACHE: 1, user_key: 0}, 'MIN')\n\n    x = redis_store.zrevrangebyscore(dest, '+inf', 1)[:count]\n    redis_store.delete(user_key)\n    redis_store.delete(dest)\n    return x\n\n```\n\n返回的数据排序按照redis返回的集合顺序。\n\n## 客户端相关的任务\n\n- 用户首次进入列表界面时，请求不要携带ids。\n- 用户下拉刷新的操作同首次进入列表界面的操作。\n- 用户上拉浏览列表的时候，需要携带ids，用于后端管理去重。\n\n## 存在的问题\n\n- 客户端访问时需要携带大量的已经缓存的文章id。\n- 后端获取数据时的去重，随着ids越来越繁琐。\n- 客户端处理较为繁琐\n\n## 社区排行榜和热门列表的实现思路对比\n\n相同：\n\n- 顺序都是动态变化的\n- 都需要额外的资源来保证需求的实现\n- 客户端处理比较繁琐\n\n不同：\n\n- 社区排行榜是有序的，热门列表是设置门槛的。\n- 社区排行榜是需要记录关注人数的。\n- 社区有分页参数，热门列表是没有上一页下一页的概念的，仅需要声明count的大小。\n","source":"_posts/热门列表的实现思路整理.md","raw":"---\ntitle: 热门列表的实现思路整理\ndate: 2018-09-09\ntags: [工作笔记]\n---\n\n## 热门的规则\n\n对于热门文章的定义是：\n\n> 单位时间内，（”分享“数 + ”点赞“数 + ”评论“数）的总和大于某特定值的文章，被视为热门文章。\n\n热门文章的列表是由后台动态生成的，而且在每次生成的时候，产生的数据不一定是相同的。为了减轻系统的压力和提高api的响应速度，该计算任务使用celery 进行后台任务调度。\n\n后台定时任务是循环任务，任务执行时向缓存数据库中插入当前时段计算出的热门文章索引值，缓存数据库采用的是redis。\n\n\n## 定时任务的实现\n\n- 将新增的热门文章索引写入缓存数据库中，插入的时候，score 值取当前时间戳。\n- 清除一定时间前的热门文章。\n\n<!--more-->\n\n### 新增热门文章\n\n计算热门文章sql 语句实现如下(暂时不考虑分享的数据)：\n\n```mysql\nSELECT result.user_publish_id FROM (\n\tSELECT a.user_publish_id, COUNT(*) AS count FROM\n\t(\n\t\tSELECT p.user_publish_id\n\t\tFROM user_publish AS p\n\t\tJOIN user_like AS l\n\t\tON\n\t\t\tl.for_obj = p.user_publish_id AND l.like_type = 0 AND l.created_at > '{0}'\n\t\tWHERE p.status = 'VISIBLE'\n\n\t\tUNION ALL\n\n\t\tSELECT p.user_publish_id\n\t\tFROM user_publish AS p\n\t\tJOIN user_comments AS c\n\t\tON\n\t\t\tp.user_publish_id = c.publish_id AND c.status = 'VISIBLE' AND c.created_at > '{0}'\n\t\tWHERE p.status = 'VISIBLE'\n\n\t) AS a\n\tWHERE a.user_publish_id not in (\"{2}\")\n\tGROUP BY a.user_publish_id\n) AS result\nWHERE result.count >= {1}\n```\n\n(`user_publish` 用户发布文章信息表，`user_like` 用户点赞表，`user_comments` 用户评论表)\n以上sql语句完成了对符合热门条件的文章的筛选，返回的结果集中将不包含应已经在缓存数据库的中索引。\n\n将以上返回的文章索引插入redis：\n\n```\npipeline.zadd(ALL_HOT_KEYS_CACHE, time.time(), item)\n```\n\n(`ALL_HOT_KEYS_CACHE` redis 中有序集合的键)\n写入完成之后，查看redis 中，其实每次任务产生的热门文章索引对应的score 值是相同的。\n\n### 清除一定时间前的热门文章\n\n热门文章进入缓存之后，需要在一定的时间内清除，这是因为被写入redis的之后，score不会被改动。定时任务需要将距离当前较远的缓存数据删除以减轻缓存的压力。\n\n## 后端的实现\n\n热门类别的分页没有上一页与下一页之说。客户端在请求的时候，有两种参数情况：\n\n- count：要多少条数据\n- ids：客户端已经缓存的文章id列表\n\n客户端如果仅传入count 参数，后端将返回最新的count条数据信息。\n如果传入count和ids，后端返回的count数据中，ids中包含的文章信息将不会被缓存。\n\n这样保证了客户端数据的不重复问题。但是随着客户端浏览的数据越来越多，把么客户端请求的ids列表也越大，后端去重的时候复杂度较高。但是解决这个问题得力于redis的集合操作方法。\n\n```python\n\n# redis_util.py\n\ndef get_redis_sorted_set_diffs(uid, items, count):\n\t\n    user_key = USER_HOT_KEYS_CACHE.format(uid)\n    user_hot_key_cache(items, user_key)\n    dest = USER_HOT_KEYS_DESTINATION_CACHE.format(uid)\n    redis_store.zunionstore(dest, {ALL_HOT_KEYS_CACHE: 1, user_key: 0}, 'MIN')\n\n    x = redis_store.zrevrangebyscore(dest, '+inf', 1)[:count]\n    redis_store.delete(user_key)\n    redis_store.delete(dest)\n    return x\n\n```\n\n返回的数据排序按照redis返回的集合顺序。\n\n## 客户端相关的任务\n\n- 用户首次进入列表界面时，请求不要携带ids。\n- 用户下拉刷新的操作同首次进入列表界面的操作。\n- 用户上拉浏览列表的时候，需要携带ids，用于后端管理去重。\n\n## 存在的问题\n\n- 客户端访问时需要携带大量的已经缓存的文章id。\n- 后端获取数据时的去重，随着ids越来越繁琐。\n- 客户端处理较为繁琐\n\n## 社区排行榜和热门列表的实现思路对比\n\n相同：\n\n- 顺序都是动态变化的\n- 都需要额外的资源来保证需求的实现\n- 客户端处理比较繁琐\n\n不同：\n\n- 社区排行榜是有序的，热门列表是设置门槛的。\n- 社区排行榜是需要记录关注人数的。\n- 社区有分页参数，热门列表是没有上一页下一页的概念的，仅需要声明count的大小。\n","slug":"热门列表的实现思路整理","published":1,"updated":"2021-06-20T10:25:20.132Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluqa1hjk004vrlogegxh1ek5","content":"<h2 id=\"热门的规则\"><a href=\"#热门的规则\" class=\"headerlink\" title=\"热门的规则\"></a>热门的规则</h2><p>对于热门文章的定义是：</p>\n<blockquote>\n<p>单位时间内，（”分享“数 + ”点赞“数 + ”评论“数）的总和大于某特定值的文章，被视为热门文章。</p>\n</blockquote>\n<p>热门文章的列表是由后台动态生成的，而且在每次生成的时候，产生的数据不一定是相同的。为了减轻系统的压力和提高api的响应速度，该计算任务使用celery 进行后台任务调度。</p>\n<p>后台定时任务是循环任务，任务执行时向缓存数据库中插入当前时段计算出的热门文章索引值，缓存数据库采用的是redis。</p>\n<h2 id=\"定时任务的实现\"><a href=\"#定时任务的实现\" class=\"headerlink\" title=\"定时任务的实现\"></a>定时任务的实现</h2><ul>\n<li>将新增的热门文章索引写入缓存数据库中，插入的时候，score 值取当前时间戳。</li>\n<li>清除一定时间前的热门文章。</li>\n</ul>\n<span id=\"more\"></span>\n\n<h3 id=\"新增热门文章\"><a href=\"#新增热门文章\" class=\"headerlink\" title=\"新增热门文章\"></a>新增热门文章</h3><p>计算热门文章sql 语句实现如下(暂时不考虑分享的数据)：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT result.user_publish_id FROM (</span><br><span class=\"line\">\tSELECT a.user_publish_id, COUNT(*) AS count FROM</span><br><span class=\"line\">\t(</span><br><span class=\"line\">\t\tSELECT p.user_publish_id</span><br><span class=\"line\">\t\tFROM user_publish AS p</span><br><span class=\"line\">\t\tJOIN user_like AS l</span><br><span class=\"line\">\t\tON</span><br><span class=\"line\">\t\t\tl.for_obj = p.user_publish_id AND l.like_type = 0 AND l.created_at &gt; &#x27;&#123;0&#125;&#x27;</span><br><span class=\"line\">\t\tWHERE p.status = &#x27;VISIBLE&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tUNION ALL</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tSELECT p.user_publish_id</span><br><span class=\"line\">\t\tFROM user_publish AS p</span><br><span class=\"line\">\t\tJOIN user_comments AS c</span><br><span class=\"line\">\t\tON</span><br><span class=\"line\">\t\t\tp.user_publish_id = c.publish_id AND c.status = &#x27;VISIBLE&#x27; AND c.created_at &gt; &#x27;&#123;0&#125;&#x27;</span><br><span class=\"line\">\t\tWHERE p.status = &#x27;VISIBLE&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">\t) AS a</span><br><span class=\"line\">\tWHERE a.user_publish_id not in (&quot;&#123;2&#125;&quot;)</span><br><span class=\"line\">\tGROUP BY a.user_publish_id</span><br><span class=\"line\">) AS result</span><br><span class=\"line\">WHERE result.count &gt;= &#123;1&#125;</span><br></pre></td></tr></table></figure>\n\n<p>(<code>user_publish</code> 用户发布文章信息表，<code>user_like</code> 用户点赞表，<code>user_comments</code> 用户评论表)<br>以上sql语句完成了对符合热门条件的文章的筛选，返回的结果集中将不包含应已经在缓存数据库的中索引。</p>\n<p>将以上返回的文章索引插入redis：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pipeline.zadd(ALL_HOT_KEYS_CACHE, time.time(), item)</span><br></pre></td></tr></table></figure>\n\n<p>(<code>ALL_HOT_KEYS_CACHE</code> redis 中有序集合的键)<br>写入完成之后，查看redis 中，其实每次任务产生的热门文章索引对应的score 值是相同的。</p>\n<h3 id=\"清除一定时间前的热门文章\"><a href=\"#清除一定时间前的热门文章\" class=\"headerlink\" title=\"清除一定时间前的热门文章\"></a>清除一定时间前的热门文章</h3><p>热门文章进入缓存之后，需要在一定的时间内清除，这是因为被写入redis的之后，score不会被改动。定时任务需要将距离当前较远的缓存数据删除以减轻缓存的压力。</p>\n<h2 id=\"后端的实现\"><a href=\"#后端的实现\" class=\"headerlink\" title=\"后端的实现\"></a>后端的实现</h2><p>热门类别的分页没有上一页与下一页之说。客户端在请求的时候，有两种参数情况：</p>\n<ul>\n<li>count：要多少条数据</li>\n<li>ids：客户端已经缓存的文章id列表</li>\n</ul>\n<p>客户端如果仅传入count 参数，后端将返回最新的count条数据信息。<br>如果传入count和ids，后端返回的count数据中，ids中包含的文章信息将不会被缓存。</p>\n<p>这样保证了客户端数据的不重复问题。但是随着客户端浏览的数据越来越多，把么客户端请求的ids列表也越大，后端去重的时候复杂度较高。但是解决这个问题得力于redis的集合操作方法。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># redis_util.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_redis_sorted_set_diffs</span>(<span class=\"params\">uid, items, count</span>):</span><br><span class=\"line\">\t</span><br><span class=\"line\">    user_key = USER_HOT_KEYS_CACHE.<span class=\"built_in\">format</span>(uid)</span><br><span class=\"line\">    user_hot_key_cache(items, user_key)</span><br><span class=\"line\">    dest = USER_HOT_KEYS_DESTINATION_CACHE.<span class=\"built_in\">format</span>(uid)</span><br><span class=\"line\">    redis_store.zunionstore(dest, &#123;ALL_HOT_KEYS_CACHE: <span class=\"number\">1</span>, user_key: <span class=\"number\">0</span>&#125;, <span class=\"string\">&#x27;MIN&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    x = redis_store.zrevrangebyscore(dest, <span class=\"string\">&#x27;+inf&#x27;</span>, <span class=\"number\">1</span>)[:count]</span><br><span class=\"line\">    redis_store.delete(user_key)</span><br><span class=\"line\">    redis_store.delete(dest)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>返回的数据排序按照redis返回的集合顺序。</p>\n<h2 id=\"客户端相关的任务\"><a href=\"#客户端相关的任务\" class=\"headerlink\" title=\"客户端相关的任务\"></a>客户端相关的任务</h2><ul>\n<li>用户首次进入列表界面时，请求不要携带ids。</li>\n<li>用户下拉刷新的操作同首次进入列表界面的操作。</li>\n<li>用户上拉浏览列表的时候，需要携带ids，用于后端管理去重。</li>\n</ul>\n<h2 id=\"存在的问题\"><a href=\"#存在的问题\" class=\"headerlink\" title=\"存在的问题\"></a>存在的问题</h2><ul>\n<li>客户端访问时需要携带大量的已经缓存的文章id。</li>\n<li>后端获取数据时的去重，随着ids越来越繁琐。</li>\n<li>客户端处理较为繁琐</li>\n</ul>\n<h2 id=\"社区排行榜和热门列表的实现思路对比\"><a href=\"#社区排行榜和热门列表的实现思路对比\" class=\"headerlink\" title=\"社区排行榜和热门列表的实现思路对比\"></a>社区排行榜和热门列表的实现思路对比</h2><p>相同：</p>\n<ul>\n<li>顺序都是动态变化的</li>\n<li>都需要额外的资源来保证需求的实现</li>\n<li>客户端处理比较繁琐</li>\n</ul>\n<p>不同：</p>\n<ul>\n<li>社区排行榜是有序的，热门列表是设置门槛的。</li>\n<li>社区排行榜是需要记录关注人数的。</li>\n<li>社区有分页参数，热门列表是没有上一页下一页的概念的，仅需要声明count的大小。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"热门的规则\"><a href=\"#热门的规则\" class=\"headerlink\" title=\"热门的规则\"></a>热门的规则</h2><p>对于热门文章的定义是：</p>\n<blockquote>\n<p>单位时间内，（”分享“数 + ”点赞“数 + ”评论“数）的总和大于某特定值的文章，被视为热门文章。</p>\n</blockquote>\n<p>热门文章的列表是由后台动态生成的，而且在每次生成的时候，产生的数据不一定是相同的。为了减轻系统的压力和提高api的响应速度，该计算任务使用celery 进行后台任务调度。</p>\n<p>后台定时任务是循环任务，任务执行时向缓存数据库中插入当前时段计算出的热门文章索引值，缓存数据库采用的是redis。</p>\n<h2 id=\"定时任务的实现\"><a href=\"#定时任务的实现\" class=\"headerlink\" title=\"定时任务的实现\"></a>定时任务的实现</h2><ul>\n<li>将新增的热门文章索引写入缓存数据库中，插入的时候，score 值取当前时间戳。</li>\n<li>清除一定时间前的热门文章。</li>\n</ul>","more":"<h3 id=\"新增热门文章\"><a href=\"#新增热门文章\" class=\"headerlink\" title=\"新增热门文章\"></a>新增热门文章</h3><p>计算热门文章sql 语句实现如下(暂时不考虑分享的数据)：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT result.user_publish_id FROM (</span><br><span class=\"line\">\tSELECT a.user_publish_id, COUNT(*) AS count FROM</span><br><span class=\"line\">\t(</span><br><span class=\"line\">\t\tSELECT p.user_publish_id</span><br><span class=\"line\">\t\tFROM user_publish AS p</span><br><span class=\"line\">\t\tJOIN user_like AS l</span><br><span class=\"line\">\t\tON</span><br><span class=\"line\">\t\t\tl.for_obj = p.user_publish_id AND l.like_type = 0 AND l.created_at &gt; &#x27;&#123;0&#125;&#x27;</span><br><span class=\"line\">\t\tWHERE p.status = &#x27;VISIBLE&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tUNION ALL</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tSELECT p.user_publish_id</span><br><span class=\"line\">\t\tFROM user_publish AS p</span><br><span class=\"line\">\t\tJOIN user_comments AS c</span><br><span class=\"line\">\t\tON</span><br><span class=\"line\">\t\t\tp.user_publish_id = c.publish_id AND c.status = &#x27;VISIBLE&#x27; AND c.created_at &gt; &#x27;&#123;0&#125;&#x27;</span><br><span class=\"line\">\t\tWHERE p.status = &#x27;VISIBLE&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">\t) AS a</span><br><span class=\"line\">\tWHERE a.user_publish_id not in (&quot;&#123;2&#125;&quot;)</span><br><span class=\"line\">\tGROUP BY a.user_publish_id</span><br><span class=\"line\">) AS result</span><br><span class=\"line\">WHERE result.count &gt;= &#123;1&#125;</span><br></pre></td></tr></table></figure>\n\n<p>(<code>user_publish</code> 用户发布文章信息表，<code>user_like</code> 用户点赞表，<code>user_comments</code> 用户评论表)<br>以上sql语句完成了对符合热门条件的文章的筛选，返回的结果集中将不包含应已经在缓存数据库的中索引。</p>\n<p>将以上返回的文章索引插入redis：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pipeline.zadd(ALL_HOT_KEYS_CACHE, time.time(), item)</span><br></pre></td></tr></table></figure>\n\n<p>(<code>ALL_HOT_KEYS_CACHE</code> redis 中有序集合的键)<br>写入完成之后，查看redis 中，其实每次任务产生的热门文章索引对应的score 值是相同的。</p>\n<h3 id=\"清除一定时间前的热门文章\"><a href=\"#清除一定时间前的热门文章\" class=\"headerlink\" title=\"清除一定时间前的热门文章\"></a>清除一定时间前的热门文章</h3><p>热门文章进入缓存之后，需要在一定的时间内清除，这是因为被写入redis的之后，score不会被改动。定时任务需要将距离当前较远的缓存数据删除以减轻缓存的压力。</p>\n<h2 id=\"后端的实现\"><a href=\"#后端的实现\" class=\"headerlink\" title=\"后端的实现\"></a>后端的实现</h2><p>热门类别的分页没有上一页与下一页之说。客户端在请求的时候，有两种参数情况：</p>\n<ul>\n<li>count：要多少条数据</li>\n<li>ids：客户端已经缓存的文章id列表</li>\n</ul>\n<p>客户端如果仅传入count 参数，后端将返回最新的count条数据信息。<br>如果传入count和ids，后端返回的count数据中，ids中包含的文章信息将不会被缓存。</p>\n<p>这样保证了客户端数据的不重复问题。但是随着客户端浏览的数据越来越多，把么客户端请求的ids列表也越大，后端去重的时候复杂度较高。但是解决这个问题得力于redis的集合操作方法。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># redis_util.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_redis_sorted_set_diffs</span>(<span class=\"params\">uid, items, count</span>):</span><br><span class=\"line\">\t</span><br><span class=\"line\">    user_key = USER_HOT_KEYS_CACHE.<span class=\"built_in\">format</span>(uid)</span><br><span class=\"line\">    user_hot_key_cache(items, user_key)</span><br><span class=\"line\">    dest = USER_HOT_KEYS_DESTINATION_CACHE.<span class=\"built_in\">format</span>(uid)</span><br><span class=\"line\">    redis_store.zunionstore(dest, &#123;ALL_HOT_KEYS_CACHE: <span class=\"number\">1</span>, user_key: <span class=\"number\">0</span>&#125;, <span class=\"string\">&#x27;MIN&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    x = redis_store.zrevrangebyscore(dest, <span class=\"string\">&#x27;+inf&#x27;</span>, <span class=\"number\">1</span>)[:count]</span><br><span class=\"line\">    redis_store.delete(user_key)</span><br><span class=\"line\">    redis_store.delete(dest)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>返回的数据排序按照redis返回的集合顺序。</p>\n<h2 id=\"客户端相关的任务\"><a href=\"#客户端相关的任务\" class=\"headerlink\" title=\"客户端相关的任务\"></a>客户端相关的任务</h2><ul>\n<li>用户首次进入列表界面时，请求不要携带ids。</li>\n<li>用户下拉刷新的操作同首次进入列表界面的操作。</li>\n<li>用户上拉浏览列表的时候，需要携带ids，用于后端管理去重。</li>\n</ul>\n<h2 id=\"存在的问题\"><a href=\"#存在的问题\" class=\"headerlink\" title=\"存在的问题\"></a>存在的问题</h2><ul>\n<li>客户端访问时需要携带大量的已经缓存的文章id。</li>\n<li>后端获取数据时的去重，随着ids越来越繁琐。</li>\n<li>客户端处理较为繁琐</li>\n</ul>\n<h2 id=\"社区排行榜和热门列表的实现思路对比\"><a href=\"#社区排行榜和热门列表的实现思路对比\" class=\"headerlink\" title=\"社区排行榜和热门列表的实现思路对比\"></a>社区排行榜和热门列表的实现思路对比</h2><p>相同：</p>\n<ul>\n<li>顺序都是动态变化的</li>\n<li>都需要额外的资源来保证需求的实现</li>\n<li>客户端处理比较繁琐</li>\n</ul>\n<p>不同：</p>\n<ul>\n<li>社区排行榜是有序的，热门列表是设置门槛的。</li>\n<li>社区排行榜是需要记录关注人数的。</li>\n<li>社区有分页参数，热门列表是没有上一页下一页的概念的，仅需要声明count的大小。</li>\n</ul>"},{"title":"用户故事地图阅读笔记","date":"2018-02-09T16:00:00.000Z","_content":"\n原本计划9号之前能读完这本书的，但是由于最近各种事情，迟迟推进不了。\n\n## 第六章阅读笔记\n\n- 用户故事是为了在协作中更好的使用它。\n- 完美的描述一件事情是非常困难的，而且容易基于过去的经验展开想象，因此听的人所想和你想传递的东西不一定一样。这就是交流的奇妙之处。\n- 通过反反复复的提问来修正对事情的理解。\n\n这节介绍的是用户故事的故事。\n\n<!--more-->\n\n## 第七章阅读笔记\n\n**故事模板格式如下**：\n\n作为[一名用户]\n我想要[某个产品特性]\n这样我就可以[获得某种收益]\n\n\n- 使用**故事模板**来引发讨论。\n- 故事模板不是用户故事的唯一要素。故事的真正价值并不是来自卡片上写的内容，而是我们在讲故事的过程中能够学到的东西。故事模板是为了我们更好的学习。\n\n讨论的检查单：\n\n- 讨论**用户角色**\n- 讨论要做的**功能**\n- 讨论**为什么**\n- 讨论软件之外的东西（用户在何时何地使用产品，频度如何，是否会推广等）\n- 讨论异常\n- 讨论问题和假设（讨论确定有谁跟进问题在下次讨论之前找到问题的答案，对产品的假设进行发问，对技术发问等）\n- 更好的解决方案\n- 方案如何实现。解决方案实现起来过于昂贵就不是一个好的选择。\n- 讨论开发周期。能做到的只能是估计。\n\n讨论的时候是非常有必要做记录备忘的，记录的内容有讨论的内容、参与的人员等等。\n\n第七章讲的是如何把故事讲的更好。使用故事模板来引起讨论。\n\n\n## 第八章阅读笔记\n\n同一张卡片，不同的角色的视角和关注点不完全一致。\n\n**故事卡片上的内容**\n\n- 简短的标题\n- 描述信息\n- 故事序号\n- 优先级\n- 状态\n- 日期\n- 作者\n- 依赖\n- 度量（是否可以理解为验收标准？）\n\n团队成员一起讲述用户故事并对开发方案做决策的时候，达成一致是首要目标。\n\n使用工具来保存文字、图片、视频，可以帮助恢复讨论时的场景细节。\n\n正确使用工具。**不要试图使用追踪工具来达成一致的理解，也不要在白班上做复杂的报表分析。**  工具是为了目标服务的。\n\n这里推荐几款自己使用的线上协同工具：trello、石墨文档、ProcessOn\n\n第八章告诉我的是不要把所有内容都写在卡片上。卡片上写需要写的东西，并且正确使用工具。\n\n\n## 第九章阅读笔记\n\n要培养口述用户故事的习惯和能力。\n\n在用户故事讨论的时候，为了提升讨论和做决定的效率，最好讲人数限制在5人之内。\n\n**严肃审查产出的质量**\n\n- 用户体验质量，从目标目标用户角度来审查产品。\n- 功能质量\n- 代码质量\n\n在功能开发出来之后，把软件拿给最终用户试用，观察用户使用产品来解决问题的过程。在现场观察是建立共情的最佳方式。\n\n**开发过程就是学习的过程**\n\n学习过程是需要多次修正故事的。而且软件产品开发和流水线生产并不一样，每一个故事对应的开发工作都是创新工作。\n\n从软件开发推广到其他：尝试用用户故事来驱动所有的事情。\n\n第九章讲述的是卡片只是一个开始。\n\n\n## 第十章阅读笔记\n\n如果故事描述的方案过于昂贵，应当考虑替代方案。同时如果描述虽然符合预算，但是仍然很大，那么就需要切分成小块。\n\n第十章告诉我们做产品好比烤蛋糕，需要的时候能够讲大的故事切小，做小计划。\n","source":"_posts/用户故事地图阅读笔记.md","raw":"---\ntitle: 用户故事地图阅读笔记\ndate: 2018-2-10\ntags: [阅读笔记]\n---\n\n原本计划9号之前能读完这本书的，但是由于最近各种事情，迟迟推进不了。\n\n## 第六章阅读笔记\n\n- 用户故事是为了在协作中更好的使用它。\n- 完美的描述一件事情是非常困难的，而且容易基于过去的经验展开想象，因此听的人所想和你想传递的东西不一定一样。这就是交流的奇妙之处。\n- 通过反反复复的提问来修正对事情的理解。\n\n这节介绍的是用户故事的故事。\n\n<!--more-->\n\n## 第七章阅读笔记\n\n**故事模板格式如下**：\n\n作为[一名用户]\n我想要[某个产品特性]\n这样我就可以[获得某种收益]\n\n\n- 使用**故事模板**来引发讨论。\n- 故事模板不是用户故事的唯一要素。故事的真正价值并不是来自卡片上写的内容，而是我们在讲故事的过程中能够学到的东西。故事模板是为了我们更好的学习。\n\n讨论的检查单：\n\n- 讨论**用户角色**\n- 讨论要做的**功能**\n- 讨论**为什么**\n- 讨论软件之外的东西（用户在何时何地使用产品，频度如何，是否会推广等）\n- 讨论异常\n- 讨论问题和假设（讨论确定有谁跟进问题在下次讨论之前找到问题的答案，对产品的假设进行发问，对技术发问等）\n- 更好的解决方案\n- 方案如何实现。解决方案实现起来过于昂贵就不是一个好的选择。\n- 讨论开发周期。能做到的只能是估计。\n\n讨论的时候是非常有必要做记录备忘的，记录的内容有讨论的内容、参与的人员等等。\n\n第七章讲的是如何把故事讲的更好。使用故事模板来引起讨论。\n\n\n## 第八章阅读笔记\n\n同一张卡片，不同的角色的视角和关注点不完全一致。\n\n**故事卡片上的内容**\n\n- 简短的标题\n- 描述信息\n- 故事序号\n- 优先级\n- 状态\n- 日期\n- 作者\n- 依赖\n- 度量（是否可以理解为验收标准？）\n\n团队成员一起讲述用户故事并对开发方案做决策的时候，达成一致是首要目标。\n\n使用工具来保存文字、图片、视频，可以帮助恢复讨论时的场景细节。\n\n正确使用工具。**不要试图使用追踪工具来达成一致的理解，也不要在白班上做复杂的报表分析。**  工具是为了目标服务的。\n\n这里推荐几款自己使用的线上协同工具：trello、石墨文档、ProcessOn\n\n第八章告诉我的是不要把所有内容都写在卡片上。卡片上写需要写的东西，并且正确使用工具。\n\n\n## 第九章阅读笔记\n\n要培养口述用户故事的习惯和能力。\n\n在用户故事讨论的时候，为了提升讨论和做决定的效率，最好讲人数限制在5人之内。\n\n**严肃审查产出的质量**\n\n- 用户体验质量，从目标目标用户角度来审查产品。\n- 功能质量\n- 代码质量\n\n在功能开发出来之后，把软件拿给最终用户试用，观察用户使用产品来解决问题的过程。在现场观察是建立共情的最佳方式。\n\n**开发过程就是学习的过程**\n\n学习过程是需要多次修正故事的。而且软件产品开发和流水线生产并不一样，每一个故事对应的开发工作都是创新工作。\n\n从软件开发推广到其他：尝试用用户故事来驱动所有的事情。\n\n第九章讲述的是卡片只是一个开始。\n\n\n## 第十章阅读笔记\n\n如果故事描述的方案过于昂贵，应当考虑替代方案。同时如果描述虽然符合预算，但是仍然很大，那么就需要切分成小块。\n\n第十章告诉我们做产品好比烤蛋糕，需要的时候能够讲大的故事切小，做小计划。\n","slug":"用户故事地图阅读笔记","published":1,"updated":"2021-06-20T10:25:20.132Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluqa1hjk004xrlog9s6id9ov","content":"<p>原本计划9号之前能读完这本书的，但是由于最近各种事情，迟迟推进不了。</p>\n<h2 id=\"第六章阅读笔记\"><a href=\"#第六章阅读笔记\" class=\"headerlink\" title=\"第六章阅读笔记\"></a>第六章阅读笔记</h2><ul>\n<li>用户故事是为了在协作中更好的使用它。</li>\n<li>完美的描述一件事情是非常困难的，而且容易基于过去的经验展开想象，因此听的人所想和你想传递的东西不一定一样。这就是交流的奇妙之处。</li>\n<li>通过反反复复的提问来修正对事情的理解。</li>\n</ul>\n<p>这节介绍的是用户故事的故事。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"第七章阅读笔记\"><a href=\"#第七章阅读笔记\" class=\"headerlink\" title=\"第七章阅读笔记\"></a>第七章阅读笔记</h2><p><strong>故事模板格式如下</strong>：</p>\n<p>作为[一名用户]<br>我想要[某个产品特性]<br>这样我就可以[获得某种收益]</p>\n<ul>\n<li>使用<strong>故事模板</strong>来引发讨论。</li>\n<li>故事模板不是用户故事的唯一要素。故事的真正价值并不是来自卡片上写的内容，而是我们在讲故事的过程中能够学到的东西。故事模板是为了我们更好的学习。</li>\n</ul>\n<p>讨论的检查单：</p>\n<ul>\n<li>讨论<strong>用户角色</strong></li>\n<li>讨论要做的<strong>功能</strong></li>\n<li>讨论<strong>为什么</strong></li>\n<li>讨论软件之外的东西（用户在何时何地使用产品，频度如何，是否会推广等）</li>\n<li>讨论异常</li>\n<li>讨论问题和假设（讨论确定有谁跟进问题在下次讨论之前找到问题的答案，对产品的假设进行发问，对技术发问等）</li>\n<li>更好的解决方案</li>\n<li>方案如何实现。解决方案实现起来过于昂贵就不是一个好的选择。</li>\n<li>讨论开发周期。能做到的只能是估计。</li>\n</ul>\n<p>讨论的时候是非常有必要做记录备忘的，记录的内容有讨论的内容、参与的人员等等。</p>\n<p>第七章讲的是如何把故事讲的更好。使用故事模板来引起讨论。</p>\n<h2 id=\"第八章阅读笔记\"><a href=\"#第八章阅读笔记\" class=\"headerlink\" title=\"第八章阅读笔记\"></a>第八章阅读笔记</h2><p>同一张卡片，不同的角色的视角和关注点不完全一致。</p>\n<p><strong>故事卡片上的内容</strong></p>\n<ul>\n<li>简短的标题</li>\n<li>描述信息</li>\n<li>故事序号</li>\n<li>优先级</li>\n<li>状态</li>\n<li>日期</li>\n<li>作者</li>\n<li>依赖</li>\n<li>度量（是否可以理解为验收标准？）</li>\n</ul>\n<p>团队成员一起讲述用户故事并对开发方案做决策的时候，达成一致是首要目标。</p>\n<p>使用工具来保存文字、图片、视频，可以帮助恢复讨论时的场景细节。</p>\n<p>正确使用工具。<strong>不要试图使用追踪工具来达成一致的理解，也不要在白班上做复杂的报表分析。</strong>  工具是为了目标服务的。</p>\n<p>这里推荐几款自己使用的线上协同工具：trello、石墨文档、ProcessOn</p>\n<p>第八章告诉我的是不要把所有内容都写在卡片上。卡片上写需要写的东西，并且正确使用工具。</p>\n<h2 id=\"第九章阅读笔记\"><a href=\"#第九章阅读笔记\" class=\"headerlink\" title=\"第九章阅读笔记\"></a>第九章阅读笔记</h2><p>要培养口述用户故事的习惯和能力。</p>\n<p>在用户故事讨论的时候，为了提升讨论和做决定的效率，最好讲人数限制在5人之内。</p>\n<p><strong>严肃审查产出的质量</strong></p>\n<ul>\n<li>用户体验质量，从目标目标用户角度来审查产品。</li>\n<li>功能质量</li>\n<li>代码质量</li>\n</ul>\n<p>在功能开发出来之后，把软件拿给最终用户试用，观察用户使用产品来解决问题的过程。在现场观察是建立共情的最佳方式。</p>\n<p><strong>开发过程就是学习的过程</strong></p>\n<p>学习过程是需要多次修正故事的。而且软件产品开发和流水线生产并不一样，每一个故事对应的开发工作都是创新工作。</p>\n<p>从软件开发推广到其他：尝试用用户故事来驱动所有的事情。</p>\n<p>第九章讲述的是卡片只是一个开始。</p>\n<h2 id=\"第十章阅读笔记\"><a href=\"#第十章阅读笔记\" class=\"headerlink\" title=\"第十章阅读笔记\"></a>第十章阅读笔记</h2><p>如果故事描述的方案过于昂贵，应当考虑替代方案。同时如果描述虽然符合预算，但是仍然很大，那么就需要切分成小块。</p>\n<p>第十章告诉我们做产品好比烤蛋糕，需要的时候能够讲大的故事切小，做小计划。</p>\n","site":{"data":{}},"excerpt":"<p>原本计划9号之前能读完这本书的，但是由于最近各种事情，迟迟推进不了。</p>\n<h2 id=\"第六章阅读笔记\"><a href=\"#第六章阅读笔记\" class=\"headerlink\" title=\"第六章阅读笔记\"></a>第六章阅读笔记</h2><ul>\n<li>用户故事是为了在协作中更好的使用它。</li>\n<li>完美的描述一件事情是非常困难的，而且容易基于过去的经验展开想象，因此听的人所想和你想传递的东西不一定一样。这就是交流的奇妙之处。</li>\n<li>通过反反复复的提问来修正对事情的理解。</li>\n</ul>\n<p>这节介绍的是用户故事的故事。</p>","more":"<h2 id=\"第七章阅读笔记\"><a href=\"#第七章阅读笔记\" class=\"headerlink\" title=\"第七章阅读笔记\"></a>第七章阅读笔记</h2><p><strong>故事模板格式如下</strong>：</p>\n<p>作为[一名用户]<br>我想要[某个产品特性]<br>这样我就可以[获得某种收益]</p>\n<ul>\n<li>使用<strong>故事模板</strong>来引发讨论。</li>\n<li>故事模板不是用户故事的唯一要素。故事的真正价值并不是来自卡片上写的内容，而是我们在讲故事的过程中能够学到的东西。故事模板是为了我们更好的学习。</li>\n</ul>\n<p>讨论的检查单：</p>\n<ul>\n<li>讨论<strong>用户角色</strong></li>\n<li>讨论要做的<strong>功能</strong></li>\n<li>讨论<strong>为什么</strong></li>\n<li>讨论软件之外的东西（用户在何时何地使用产品，频度如何，是否会推广等）</li>\n<li>讨论异常</li>\n<li>讨论问题和假设（讨论确定有谁跟进问题在下次讨论之前找到问题的答案，对产品的假设进行发问，对技术发问等）</li>\n<li>更好的解决方案</li>\n<li>方案如何实现。解决方案实现起来过于昂贵就不是一个好的选择。</li>\n<li>讨论开发周期。能做到的只能是估计。</li>\n</ul>\n<p>讨论的时候是非常有必要做记录备忘的，记录的内容有讨论的内容、参与的人员等等。</p>\n<p>第七章讲的是如何把故事讲的更好。使用故事模板来引起讨论。</p>\n<h2 id=\"第八章阅读笔记\"><a href=\"#第八章阅读笔记\" class=\"headerlink\" title=\"第八章阅读笔记\"></a>第八章阅读笔记</h2><p>同一张卡片，不同的角色的视角和关注点不完全一致。</p>\n<p><strong>故事卡片上的内容</strong></p>\n<ul>\n<li>简短的标题</li>\n<li>描述信息</li>\n<li>故事序号</li>\n<li>优先级</li>\n<li>状态</li>\n<li>日期</li>\n<li>作者</li>\n<li>依赖</li>\n<li>度量（是否可以理解为验收标准？）</li>\n</ul>\n<p>团队成员一起讲述用户故事并对开发方案做决策的时候，达成一致是首要目标。</p>\n<p>使用工具来保存文字、图片、视频，可以帮助恢复讨论时的场景细节。</p>\n<p>正确使用工具。<strong>不要试图使用追踪工具来达成一致的理解，也不要在白班上做复杂的报表分析。</strong>  工具是为了目标服务的。</p>\n<p>这里推荐几款自己使用的线上协同工具：trello、石墨文档、ProcessOn</p>\n<p>第八章告诉我的是不要把所有内容都写在卡片上。卡片上写需要写的东西，并且正确使用工具。</p>\n<h2 id=\"第九章阅读笔记\"><a href=\"#第九章阅读笔记\" class=\"headerlink\" title=\"第九章阅读笔记\"></a>第九章阅读笔记</h2><p>要培养口述用户故事的习惯和能力。</p>\n<p>在用户故事讨论的时候，为了提升讨论和做决定的效率，最好讲人数限制在5人之内。</p>\n<p><strong>严肃审查产出的质量</strong></p>\n<ul>\n<li>用户体验质量，从目标目标用户角度来审查产品。</li>\n<li>功能质量</li>\n<li>代码质量</li>\n</ul>\n<p>在功能开发出来之后，把软件拿给最终用户试用，观察用户使用产品来解决问题的过程。在现场观察是建立共情的最佳方式。</p>\n<p><strong>开发过程就是学习的过程</strong></p>\n<p>学习过程是需要多次修正故事的。而且软件产品开发和流水线生产并不一样，每一个故事对应的开发工作都是创新工作。</p>\n<p>从软件开发推广到其他：尝试用用户故事来驱动所有的事情。</p>\n<p>第九章讲述的是卡片只是一个开始。</p>\n<h2 id=\"第十章阅读笔记\"><a href=\"#第十章阅读笔记\" class=\"headerlink\" title=\"第十章阅读笔记\"></a>第十章阅读笔记</h2><p>如果故事描述的方案过于昂贵，应当考虑替代方案。同时如果描述虽然符合预算，但是仍然很大，那么就需要切分成小块。</p>\n<p>第十章告诉我们做产品好比烤蛋糕，需要的时候能够讲大的故事切小，做小计划。</p>"},{"title":"让终端走代理的几种方法","date":"2017-10-17T16:00:00.000Z","_content":"\n## 方法一\n\n在终端中直接运行命令\n\n    export http_proxy=http://proxyAddress:port\n\n这个办法的好处是简单直接，并且影响面很小（只对当前终端有效）。\n\n<!--more-->\n\n## 方法二\n\n把代理服务器地址写入shell配置文件`.bashrc`或者`.zshrc`\n\n直接在`.bashrc`或者`.zshrc`添加下面内容\n\n    export http_proxy=\"http://localhost:port\"\n    export https_proxy=\"http://localhost:port\"\n\n以使用shadowsocks代理为例，ss的代理端口为1080,那么应该设置为\n\n    export http_proxy=\"http://127.0.0.1:1080\"\n    export https_proxy=\"http://127.0.0.1:1080\"\n\nlocalhost就是一个域名，域名默认指向 127.0.0.1，两者是一样的。\n\n然后ESC后`:wq`保存文件，接着在终端中执行\n\n    source ~/.bashrc\n\n或者退出当前终端再起一个终端。 这个办法的好处是把代理服务器永久保存了，下次就可以直接用了。\n\n## 方法三\n\n改相应工具的配置，比如apt的配置\n\n    sudo vim /etc/apt/apt.conf\n\n在文件末尾加入下面这行\n\n    Acquire::http::Proxy \"http://proxyAddress:port\"\n\n保存`apt.conf`文件即可。\n\n转载自[老D:让终端走代理的几种方法](https://laod.cn/black-technology/terminal-proxy.html)\n","source":"_posts/让终端走代理的几种方法.md","raw":"---\ntitle: 让终端走代理的几种方法\ndate: 2017-10-18\ntags: [Linux]\n---\n\n## 方法一\n\n在终端中直接运行命令\n\n    export http_proxy=http://proxyAddress:port\n\n这个办法的好处是简单直接，并且影响面很小（只对当前终端有效）。\n\n<!--more-->\n\n## 方法二\n\n把代理服务器地址写入shell配置文件`.bashrc`或者`.zshrc`\n\n直接在`.bashrc`或者`.zshrc`添加下面内容\n\n    export http_proxy=\"http://localhost:port\"\n    export https_proxy=\"http://localhost:port\"\n\n以使用shadowsocks代理为例，ss的代理端口为1080,那么应该设置为\n\n    export http_proxy=\"http://127.0.0.1:1080\"\n    export https_proxy=\"http://127.0.0.1:1080\"\n\nlocalhost就是一个域名，域名默认指向 127.0.0.1，两者是一样的。\n\n然后ESC后`:wq`保存文件，接着在终端中执行\n\n    source ~/.bashrc\n\n或者退出当前终端再起一个终端。 这个办法的好处是把代理服务器永久保存了，下次就可以直接用了。\n\n## 方法三\n\n改相应工具的配置，比如apt的配置\n\n    sudo vim /etc/apt/apt.conf\n\n在文件末尾加入下面这行\n\n    Acquire::http::Proxy \"http://proxyAddress:port\"\n\n保存`apt.conf`文件即可。\n\n转载自[老D:让终端走代理的几种方法](https://laod.cn/black-technology/terminal-proxy.html)\n","slug":"让终端走代理的几种方法","published":1,"updated":"2021-06-20T10:25:20.133Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluqa1hjl0050rlogcea30grs","content":"<h2 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2><p>在终端中直接运行命令</p>\n<pre><code>export http_proxy=http://proxyAddress:port\n</code></pre>\n<p>这个办法的好处是简单直接，并且影响面很小（只对当前终端有效）。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2><p>把代理服务器地址写入shell配置文件<code>.bashrc</code>或者<code>.zshrc</code></p>\n<p>直接在<code>.bashrc</code>或者<code>.zshrc</code>添加下面内容</p>\n<pre><code>export http_proxy=&quot;http://localhost:port&quot;\nexport https_proxy=&quot;http://localhost:port&quot;\n</code></pre>\n<p>以使用shadowsocks代理为例，ss的代理端口为1080,那么应该设置为</p>\n<pre><code>export http_proxy=&quot;http://127.0.0.1:1080&quot;\nexport https_proxy=&quot;http://127.0.0.1:1080&quot;\n</code></pre>\n<p>localhost就是一个域名，域名默认指向 127.0.0.1，两者是一样的。</p>\n<p>然后ESC后<code>:wq</code>保存文件，接着在终端中执行</p>\n<pre><code>source ~/.bashrc\n</code></pre>\n<p>或者退出当前终端再起一个终端。 这个办法的好处是把代理服务器永久保存了，下次就可以直接用了。</p>\n<h2 id=\"方法三\"><a href=\"#方法三\" class=\"headerlink\" title=\"方法三\"></a>方法三</h2><p>改相应工具的配置，比如apt的配置</p>\n<pre><code>sudo vim /etc/apt/apt.conf\n</code></pre>\n<p>在文件末尾加入下面这行</p>\n<pre><code>Acquire::http::Proxy &quot;http://proxyAddress:port&quot;\n</code></pre>\n<p>保存<code>apt.conf</code>文件即可。</p>\n<p>转载自<a href=\"https://laod.cn/black-technology/terminal-proxy.html\">老D:让终端走代理的几种方法</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2><p>在终端中直接运行命令</p>\n<pre><code>export http_proxy=http://proxyAddress:port\n</code></pre>\n<p>这个办法的好处是简单直接，并且影响面很小（只对当前终端有效）。</p>","more":"<h2 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2><p>把代理服务器地址写入shell配置文件<code>.bashrc</code>或者<code>.zshrc</code></p>\n<p>直接在<code>.bashrc</code>或者<code>.zshrc</code>添加下面内容</p>\n<pre><code>export http_proxy=&quot;http://localhost:port&quot;\nexport https_proxy=&quot;http://localhost:port&quot;\n</code></pre>\n<p>以使用shadowsocks代理为例，ss的代理端口为1080,那么应该设置为</p>\n<pre><code>export http_proxy=&quot;http://127.0.0.1:1080&quot;\nexport https_proxy=&quot;http://127.0.0.1:1080&quot;\n</code></pre>\n<p>localhost就是一个域名，域名默认指向 127.0.0.1，两者是一样的。</p>\n<p>然后ESC后<code>:wq</code>保存文件，接着在终端中执行</p>\n<pre><code>source ~/.bashrc\n</code></pre>\n<p>或者退出当前终端再起一个终端。 这个办法的好处是把代理服务器永久保存了，下次就可以直接用了。</p>\n<h2 id=\"方法三\"><a href=\"#方法三\" class=\"headerlink\" title=\"方法三\"></a>方法三</h2><p>改相应工具的配置，比如apt的配置</p>\n<pre><code>sudo vim /etc/apt/apt.conf\n</code></pre>\n<p>在文件末尾加入下面这行</p>\n<pre><code>Acquire::http::Proxy &quot;http://proxyAddress:port&quot;\n</code></pre>\n<p>保存<code>apt.conf</code>文件即可。</p>\n<p>转载自<a href=\"https://laod.cn/black-technology/terminal-proxy.html\">老D:让终端走代理的几种方法</a></p>"},{"title":"社区列表根据关注人数排序（排行榜）的实现思路整理","date":"2018-09-07T16:00:00.000Z","_content":"\n## 场景说明\n\n客户端有一个社区列表的展示界面，该列表的排序方式是按照关注人数进行反向排序(从大到小)，类似：\n\n|社区id|社区名称|社区关注人数|\n|-|-|-|\n|1|AAA|4|\n|3|CCC|3|\n|2|BBB|2|\n|4|DDD|1|\n\n\n但是社区的 **关注人数是动态变化的** ，当社区数量较多时也要考虑分页的情况，那么该列表的排序和分页有了很大的难度。\n\n\n> 这里简单整理当前的实现思路，并指出明显的缺陷和暂时解决不了的问题，待以后有能力解决。\n\n<!--more-->\n\n## 实现思路\n\n这里首先要解决的第一个问题就是将动态转换成静态，然后才能排序。\n\n如果做到根据实时的关注人数进行排序，对于后端是容易实现的，但是要考虑的客户端的处理方式：客户端会缓存已经获取的列表信息，同一个用户分页获取数据的时候，由于关注人数的动态变化，会导致数据出现重复或缺漏的问题。\n\n### 举个例子说明\n\n某时刻社区的关注人数如下(这里是举个例子说明，所以数据仅列出了4条)：\n\n|社区id|社区名称|社区关注人数|\n|:-|:-|:-|\n|1|AAA|3|\n|3|CCC|4|\n|2|BBB|3|\n|4|DDD|1|\n\n当前时刻为t1，那么此时的社区排序结果如下：\n\n|社区id|社区名称|社区关注人数|生成时刻|\n|:-|:-|:-|:-|\n|3|CCC|4|t1|\n|1|AAA|3|t1|\n|2|BBB|3|t1|\n|4|DDD|1|t1|\n\n一段时间之后，时刻为t2，那么此时社区的关注人数发生了变化：\n\n|社区id|社区名称|社区关注人数|\n|:-|:-|:-|\n|1|AAA|5|\n|3|CCC|7|\n|2|BBB|9|\n|4|DDD|4|\n\n那么此时的排序结果相对与t1时刻已经发生了明显的变化：\n\n|社区id|社区名称|社区关注人数|生成时刻|\n|:-|:-|:-|:-|\n|2|BBB|9|t2|\n|3|CCC|7|t2|\n|1|AAA|5|t2|\n|4|DDD|4|t2|\n\n### 数据重复或漏缺的复现\n\n这里出现的数据重复漏缺是有前提的：数据条数有点多，不能够一次全部返回给客户端，需要分页获取。\n\n根据上面的那个例子，在t1时刻，用户当前的分页参数 `count=2` ，那么返回的是id为 `3` 和 `1` 的社区信息，当用户在t2时刻继续获取分页的时候，返回的却是id为 `1` 和`4` 那么这里id为1的社区就出现重复的问题了，缺漏的原理也类似。\n\n### 缓存生成的关注排行榜\n\n这里的实现思路是每隔一段时间将当前的关注排行榜进行缓存：\n\n|排行榜id|社区id|社区名称|社区关注人数|生成时刻|\n|:-|:-|:-|:-|:-|\n|1|3|CCC|4|t1|\n|2|1|AAA|3|t1|\n|3|2|BBB|3|t1|\n|4|4|DDD|1|t1|\n|5|2|BBB|9|t2|\n|6|3|CCC|7|t2|\n|7|1|AAA|5|t2|\n|8|4|DDD|4|t2|\n\n这个时间间隔就是每次任务的时间间隔T，在T间隔内获取的数据都将通过该缓存排行榜中获取。用户在第一次访问的时候，仅携带分页的`count`即可，返回的数据中，不仅包含社区的相关信息，还包括最新的时刻`tn`，在以后的分页获取数据过程中，需要携带该时刻。\n\n比如用户在`t1`时刻传入参数`count=2`，那么返回的是id为`3`和`1`的社区信息，同时返回参数中也包含`t1`的值，那么在第二次访问的时候，需要携带`count=2&time=t1`，这样列表接口将会根据用户的时刻继续获取他的排行队列,那么返回的就应该是id为`2`和`4`的社区信息，同样包括`t1`的值。\n\n其实也就是用户访问的时候，如果没有携带时刻参数，那么就默认返回距离当前时间最近的时刻。\n\n### 缓存的过期和时刻参数t的失效设定\n\n讨论一下极端情况：\n\n- 当时刻为t9的时候，时刻参数是t1的用户获取的将是很久以前的数据，可能这个数据对当前用户来说已经没有意义了。\n- 最理想的情景就是，用户发出请求的时候，刚好有一批新的社区排行缓存生成，这是拿到的数据也是最合理的数据。\n- 还有一种比较不合理的情景，就是用户发出请求的时候，刚好有一批新的社区排行榜将要生成，那么用户拿到的数据也就是间隔时间T之前的缓存。\n\n所以这里就需要进行缓存过期和时刻参数失效的设定。\n\n- 设定时刻参数比当前时间小N×T的为无效时刻，将自动返回最新的缓存信息。\n- 缓存排行榜列表也会在任务执行的时候清除 **N×T** 前的缓存数据。\n\n## 后端的实现\n\n### 数据库中缓存表的构建\n\n- 该缓存表专门缓存各个时刻的排行信息，有定时任务进行插入和删除数据，任何用户均不能操作修改该表中数据。\n- 该表包含的基本字段有： `自身的id`、`社区的id`、`关注的人数`、`生成的时刻（时间戳）` 。\n\n### 定时任务的调度\n\n- 社区排行榜生成任务，该任务是每T时间执行一次，完成对当前社区排行榜的计算、排序和入缓存库，任务执行时生成当前任务的唯一时刻值并一同存入缓存数据库中。\n- 缓存数据库清理任务，该任务的执行间隔可以是N×T，完成对N×T时刻前的排行榜数据进行清除。\n\n### 列表接口的实现\n\n- 判断用户传入时刻值的有效性。如果用户没有传入时刻值或时刻值比当前时间小N×T则分配最新的时刻值。\n- 向缓存表中获取指定分页的社区id，并返回响应的社区信息列表和对应的时刻值。\n\n## 客户端相关的任务\n\n- 用户首次进入列表界面时，请求不需要携带时刻值。\n- 用户下拉刷新的时候，请求不需要携带时刻值。\n- 用户上拉浏览列表的时候，请求需要携带时刻值。\n- 用户上拉浏览列表的时候，如果时刻值失效，需要清楚本地的部分缓存。\n\n## 存在的问题\n\n- 用户浏览的数据不是最新的数据,在上面的极端情况中已经讨论\n- 客户端处理较为复杂\n- 用户在界面滞留时间越久，客户端的到的数据越不理想\n- 用户在当前列表的上的操作，比如关注某个社区，客户端需要将原本的关注人数+1，但是刷新界面之后，关注的人数又会变成原来的数字。\n- 由于是缓存的数据，当用户点击某个社区的详情时，看到的关注人数可能与列表中的人数不一致。\n","source":"_posts/社区列表根据关注人数排序（排行榜）的实现思路整理.md","raw":"---\ntitle: 社区列表根据关注人数排序（排行榜）的实现思路整理\ndate: 2018-09-08\ntags: [工作笔记]\n---\n\n## 场景说明\n\n客户端有一个社区列表的展示界面，该列表的排序方式是按照关注人数进行反向排序(从大到小)，类似：\n\n|社区id|社区名称|社区关注人数|\n|-|-|-|\n|1|AAA|4|\n|3|CCC|3|\n|2|BBB|2|\n|4|DDD|1|\n\n\n但是社区的 **关注人数是动态变化的** ，当社区数量较多时也要考虑分页的情况，那么该列表的排序和分页有了很大的难度。\n\n\n> 这里简单整理当前的实现思路，并指出明显的缺陷和暂时解决不了的问题，待以后有能力解决。\n\n<!--more-->\n\n## 实现思路\n\n这里首先要解决的第一个问题就是将动态转换成静态，然后才能排序。\n\n如果做到根据实时的关注人数进行排序，对于后端是容易实现的，但是要考虑的客户端的处理方式：客户端会缓存已经获取的列表信息，同一个用户分页获取数据的时候，由于关注人数的动态变化，会导致数据出现重复或缺漏的问题。\n\n### 举个例子说明\n\n某时刻社区的关注人数如下(这里是举个例子说明，所以数据仅列出了4条)：\n\n|社区id|社区名称|社区关注人数|\n|:-|:-|:-|\n|1|AAA|3|\n|3|CCC|4|\n|2|BBB|3|\n|4|DDD|1|\n\n当前时刻为t1，那么此时的社区排序结果如下：\n\n|社区id|社区名称|社区关注人数|生成时刻|\n|:-|:-|:-|:-|\n|3|CCC|4|t1|\n|1|AAA|3|t1|\n|2|BBB|3|t1|\n|4|DDD|1|t1|\n\n一段时间之后，时刻为t2，那么此时社区的关注人数发生了变化：\n\n|社区id|社区名称|社区关注人数|\n|:-|:-|:-|\n|1|AAA|5|\n|3|CCC|7|\n|2|BBB|9|\n|4|DDD|4|\n\n那么此时的排序结果相对与t1时刻已经发生了明显的变化：\n\n|社区id|社区名称|社区关注人数|生成时刻|\n|:-|:-|:-|:-|\n|2|BBB|9|t2|\n|3|CCC|7|t2|\n|1|AAA|5|t2|\n|4|DDD|4|t2|\n\n### 数据重复或漏缺的复现\n\n这里出现的数据重复漏缺是有前提的：数据条数有点多，不能够一次全部返回给客户端，需要分页获取。\n\n根据上面的那个例子，在t1时刻，用户当前的分页参数 `count=2` ，那么返回的是id为 `3` 和 `1` 的社区信息，当用户在t2时刻继续获取分页的时候，返回的却是id为 `1` 和`4` 那么这里id为1的社区就出现重复的问题了，缺漏的原理也类似。\n\n### 缓存生成的关注排行榜\n\n这里的实现思路是每隔一段时间将当前的关注排行榜进行缓存：\n\n|排行榜id|社区id|社区名称|社区关注人数|生成时刻|\n|:-|:-|:-|:-|:-|\n|1|3|CCC|4|t1|\n|2|1|AAA|3|t1|\n|3|2|BBB|3|t1|\n|4|4|DDD|1|t1|\n|5|2|BBB|9|t2|\n|6|3|CCC|7|t2|\n|7|1|AAA|5|t2|\n|8|4|DDD|4|t2|\n\n这个时间间隔就是每次任务的时间间隔T，在T间隔内获取的数据都将通过该缓存排行榜中获取。用户在第一次访问的时候，仅携带分页的`count`即可，返回的数据中，不仅包含社区的相关信息，还包括最新的时刻`tn`，在以后的分页获取数据过程中，需要携带该时刻。\n\n比如用户在`t1`时刻传入参数`count=2`，那么返回的是id为`3`和`1`的社区信息，同时返回参数中也包含`t1`的值，那么在第二次访问的时候，需要携带`count=2&time=t1`，这样列表接口将会根据用户的时刻继续获取他的排行队列,那么返回的就应该是id为`2`和`4`的社区信息，同样包括`t1`的值。\n\n其实也就是用户访问的时候，如果没有携带时刻参数，那么就默认返回距离当前时间最近的时刻。\n\n### 缓存的过期和时刻参数t的失效设定\n\n讨论一下极端情况：\n\n- 当时刻为t9的时候，时刻参数是t1的用户获取的将是很久以前的数据，可能这个数据对当前用户来说已经没有意义了。\n- 最理想的情景就是，用户发出请求的时候，刚好有一批新的社区排行缓存生成，这是拿到的数据也是最合理的数据。\n- 还有一种比较不合理的情景，就是用户发出请求的时候，刚好有一批新的社区排行榜将要生成，那么用户拿到的数据也就是间隔时间T之前的缓存。\n\n所以这里就需要进行缓存过期和时刻参数失效的设定。\n\n- 设定时刻参数比当前时间小N×T的为无效时刻，将自动返回最新的缓存信息。\n- 缓存排行榜列表也会在任务执行的时候清除 **N×T** 前的缓存数据。\n\n## 后端的实现\n\n### 数据库中缓存表的构建\n\n- 该缓存表专门缓存各个时刻的排行信息，有定时任务进行插入和删除数据，任何用户均不能操作修改该表中数据。\n- 该表包含的基本字段有： `自身的id`、`社区的id`、`关注的人数`、`生成的时刻（时间戳）` 。\n\n### 定时任务的调度\n\n- 社区排行榜生成任务，该任务是每T时间执行一次，完成对当前社区排行榜的计算、排序和入缓存库，任务执行时生成当前任务的唯一时刻值并一同存入缓存数据库中。\n- 缓存数据库清理任务，该任务的执行间隔可以是N×T，完成对N×T时刻前的排行榜数据进行清除。\n\n### 列表接口的实现\n\n- 判断用户传入时刻值的有效性。如果用户没有传入时刻值或时刻值比当前时间小N×T则分配最新的时刻值。\n- 向缓存表中获取指定分页的社区id，并返回响应的社区信息列表和对应的时刻值。\n\n## 客户端相关的任务\n\n- 用户首次进入列表界面时，请求不需要携带时刻值。\n- 用户下拉刷新的时候，请求不需要携带时刻值。\n- 用户上拉浏览列表的时候，请求需要携带时刻值。\n- 用户上拉浏览列表的时候，如果时刻值失效，需要清楚本地的部分缓存。\n\n## 存在的问题\n\n- 用户浏览的数据不是最新的数据,在上面的极端情况中已经讨论\n- 客户端处理较为复杂\n- 用户在界面滞留时间越久，客户端的到的数据越不理想\n- 用户在当前列表的上的操作，比如关注某个社区，客户端需要将原本的关注人数+1，但是刷新界面之后，关注的人数又会变成原来的数字。\n- 由于是缓存的数据，当用户点击某个社区的详情时，看到的关注人数可能与列表中的人数不一致。\n","slug":"社区列表根据关注人数排序（排行榜）的实现思路整理","published":1,"updated":"2021-06-20T10:25:20.133Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluqa1hjl0052rlogb68c7bdn","content":"<h2 id=\"场景说明\"><a href=\"#场景说明\" class=\"headerlink\" title=\"场景说明\"></a>场景说明</h2><p>客户端有一个社区列表的展示界面，该列表的排序方式是按照关注人数进行反向排序(从大到小)，类似：</p>\n<table>\n<thead>\n<tr>\n<th>社区id</th>\n<th>社区名称</th>\n<th>社区关注人数</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>AAA</td>\n<td>4</td>\n</tr>\n<tr>\n<td>3</td>\n<td>CCC</td>\n<td>3</td>\n</tr>\n<tr>\n<td>2</td>\n<td>BBB</td>\n<td>2</td>\n</tr>\n<tr>\n<td>4</td>\n<td>DDD</td>\n<td>1</td>\n</tr>\n</tbody></table>\n<p>但是社区的 <strong>关注人数是动态变化的</strong> ，当社区数量较多时也要考虑分页的情况，那么该列表的排序和分页有了很大的难度。</p>\n<blockquote>\n<p>这里简单整理当前的实现思路，并指出明显的缺陷和暂时解决不了的问题，待以后有能力解决。</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h2 id=\"实现思路\"><a href=\"#实现思路\" class=\"headerlink\" title=\"实现思路\"></a>实现思路</h2><p>这里首先要解决的第一个问题就是将动态转换成静态，然后才能排序。</p>\n<p>如果做到根据实时的关注人数进行排序，对于后端是容易实现的，但是要考虑的客户端的处理方式：客户端会缓存已经获取的列表信息，同一个用户分页获取数据的时候，由于关注人数的动态变化，会导致数据出现重复或缺漏的问题。</p>\n<h3 id=\"举个例子说明\"><a href=\"#举个例子说明\" class=\"headerlink\" title=\"举个例子说明\"></a>举个例子说明</h3><p>某时刻社区的关注人数如下(这里是举个例子说明，所以数据仅列出了4条)：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">社区id</th>\n<th align=\"left\">社区名称</th>\n<th align=\"left\">社区关注人数</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">AAA</td>\n<td align=\"left\">3</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">CCC</td>\n<td align=\"left\">4</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">BBB</td>\n<td align=\"left\">3</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">DDD</td>\n<td align=\"left\">1</td>\n</tr>\n</tbody></table>\n<p>当前时刻为t1，那么此时的社区排序结果如下：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">社区id</th>\n<th align=\"left\">社区名称</th>\n<th align=\"left\">社区关注人数</th>\n<th align=\"left\">生成时刻</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">3</td>\n<td align=\"left\">CCC</td>\n<td align=\"left\">4</td>\n<td align=\"left\">t1</td>\n</tr>\n<tr>\n<td align=\"left\">1</td>\n<td align=\"left\">AAA</td>\n<td align=\"left\">3</td>\n<td align=\"left\">t1</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">BBB</td>\n<td align=\"left\">3</td>\n<td align=\"left\">t1</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">DDD</td>\n<td align=\"left\">1</td>\n<td align=\"left\">t1</td>\n</tr>\n</tbody></table>\n<p>一段时间之后，时刻为t2，那么此时社区的关注人数发生了变化：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">社区id</th>\n<th align=\"left\">社区名称</th>\n<th align=\"left\">社区关注人数</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">AAA</td>\n<td align=\"left\">5</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">CCC</td>\n<td align=\"left\">7</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">BBB</td>\n<td align=\"left\">9</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">DDD</td>\n<td align=\"left\">4</td>\n</tr>\n</tbody></table>\n<p>那么此时的排序结果相对与t1时刻已经发生了明显的变化：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">社区id</th>\n<th align=\"left\">社区名称</th>\n<th align=\"left\">社区关注人数</th>\n<th align=\"left\">生成时刻</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">2</td>\n<td align=\"left\">BBB</td>\n<td align=\"left\">9</td>\n<td align=\"left\">t2</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">CCC</td>\n<td align=\"left\">7</td>\n<td align=\"left\">t2</td>\n</tr>\n<tr>\n<td align=\"left\">1</td>\n<td align=\"left\">AAA</td>\n<td align=\"left\">5</td>\n<td align=\"left\">t2</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">DDD</td>\n<td align=\"left\">4</td>\n<td align=\"left\">t2</td>\n</tr>\n</tbody></table>\n<h3 id=\"数据重复或漏缺的复现\"><a href=\"#数据重复或漏缺的复现\" class=\"headerlink\" title=\"数据重复或漏缺的复现\"></a>数据重复或漏缺的复现</h3><p>这里出现的数据重复漏缺是有前提的：数据条数有点多，不能够一次全部返回给客户端，需要分页获取。</p>\n<p>根据上面的那个例子，在t1时刻，用户当前的分页参数 <code>count=2</code> ，那么返回的是id为 <code>3</code> 和 <code>1</code> 的社区信息，当用户在t2时刻继续获取分页的时候，返回的却是id为 <code>1</code> 和<code>4</code> 那么这里id为1的社区就出现重复的问题了，缺漏的原理也类似。</p>\n<h3 id=\"缓存生成的关注排行榜\"><a href=\"#缓存生成的关注排行榜\" class=\"headerlink\" title=\"缓存生成的关注排行榜\"></a>缓存生成的关注排行榜</h3><p>这里的实现思路是每隔一段时间将当前的关注排行榜进行缓存：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">排行榜id</th>\n<th align=\"left\">社区id</th>\n<th align=\"left\">社区名称</th>\n<th align=\"left\">社区关注人数</th>\n<th align=\"left\">生成时刻</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">3</td>\n<td align=\"left\">CCC</td>\n<td align=\"left\">4</td>\n<td align=\"left\">t1</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">1</td>\n<td align=\"left\">AAA</td>\n<td align=\"left\">3</td>\n<td align=\"left\">t1</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">2</td>\n<td align=\"left\">BBB</td>\n<td align=\"left\">3</td>\n<td align=\"left\">t1</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">4</td>\n<td align=\"left\">DDD</td>\n<td align=\"left\">1</td>\n<td align=\"left\">t1</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\">2</td>\n<td align=\"left\">BBB</td>\n<td align=\"left\">9</td>\n<td align=\"left\">t2</td>\n</tr>\n<tr>\n<td align=\"left\">6</td>\n<td align=\"left\">3</td>\n<td align=\"left\">CCC</td>\n<td align=\"left\">7</td>\n<td align=\"left\">t2</td>\n</tr>\n<tr>\n<td align=\"left\">7</td>\n<td align=\"left\">1</td>\n<td align=\"left\">AAA</td>\n<td align=\"left\">5</td>\n<td align=\"left\">t2</td>\n</tr>\n<tr>\n<td align=\"left\">8</td>\n<td align=\"left\">4</td>\n<td align=\"left\">DDD</td>\n<td align=\"left\">4</td>\n<td align=\"left\">t2</td>\n</tr>\n</tbody></table>\n<p>这个时间间隔就是每次任务的时间间隔T，在T间隔内获取的数据都将通过该缓存排行榜中获取。用户在第一次访问的时候，仅携带分页的<code>count</code>即可，返回的数据中，不仅包含社区的相关信息，还包括最新的时刻<code>tn</code>，在以后的分页获取数据过程中，需要携带该时刻。</p>\n<p>比如用户在<code>t1</code>时刻传入参数<code>count=2</code>，那么返回的是id为<code>3</code>和<code>1</code>的社区信息，同时返回参数中也包含<code>t1</code>的值，那么在第二次访问的时候，需要携带<code>count=2&amp;time=t1</code>，这样列表接口将会根据用户的时刻继续获取他的排行队列,那么返回的就应该是id为<code>2</code>和<code>4</code>的社区信息，同样包括<code>t1</code>的值。</p>\n<p>其实也就是用户访问的时候，如果没有携带时刻参数，那么就默认返回距离当前时间最近的时刻。</p>\n<h3 id=\"缓存的过期和时刻参数t的失效设定\"><a href=\"#缓存的过期和时刻参数t的失效设定\" class=\"headerlink\" title=\"缓存的过期和时刻参数t的失效设定\"></a>缓存的过期和时刻参数t的失效设定</h3><p>讨论一下极端情况：</p>\n<ul>\n<li>当时刻为t9的时候，时刻参数是t1的用户获取的将是很久以前的数据，可能这个数据对当前用户来说已经没有意义了。</li>\n<li>最理想的情景就是，用户发出请求的时候，刚好有一批新的社区排行缓存生成，这是拿到的数据也是最合理的数据。</li>\n<li>还有一种比较不合理的情景，就是用户发出请求的时候，刚好有一批新的社区排行榜将要生成，那么用户拿到的数据也就是间隔时间T之前的缓存。</li>\n</ul>\n<p>所以这里就需要进行缓存过期和时刻参数失效的设定。</p>\n<ul>\n<li>设定时刻参数比当前时间小N×T的为无效时刻，将自动返回最新的缓存信息。</li>\n<li>缓存排行榜列表也会在任务执行的时候清除 <strong>N×T</strong> 前的缓存数据。</li>\n</ul>\n<h2 id=\"后端的实现\"><a href=\"#后端的实现\" class=\"headerlink\" title=\"后端的实现\"></a>后端的实现</h2><h3 id=\"数据库中缓存表的构建\"><a href=\"#数据库中缓存表的构建\" class=\"headerlink\" title=\"数据库中缓存表的构建\"></a>数据库中缓存表的构建</h3><ul>\n<li>该缓存表专门缓存各个时刻的排行信息，有定时任务进行插入和删除数据，任何用户均不能操作修改该表中数据。</li>\n<li>该表包含的基本字段有： <code>自身的id</code>、<code>社区的id</code>、<code>关注的人数</code>、<code>生成的时刻（时间戳）</code> 。</li>\n</ul>\n<h3 id=\"定时任务的调度\"><a href=\"#定时任务的调度\" class=\"headerlink\" title=\"定时任务的调度\"></a>定时任务的调度</h3><ul>\n<li>社区排行榜生成任务，该任务是每T时间执行一次，完成对当前社区排行榜的计算、排序和入缓存库，任务执行时生成当前任务的唯一时刻值并一同存入缓存数据库中。</li>\n<li>缓存数据库清理任务，该任务的执行间隔可以是N×T，完成对N×T时刻前的排行榜数据进行清除。</li>\n</ul>\n<h3 id=\"列表接口的实现\"><a href=\"#列表接口的实现\" class=\"headerlink\" title=\"列表接口的实现\"></a>列表接口的实现</h3><ul>\n<li>判断用户传入时刻值的有效性。如果用户没有传入时刻值或时刻值比当前时间小N×T则分配最新的时刻值。</li>\n<li>向缓存表中获取指定分页的社区id，并返回响应的社区信息列表和对应的时刻值。</li>\n</ul>\n<h2 id=\"客户端相关的任务\"><a href=\"#客户端相关的任务\" class=\"headerlink\" title=\"客户端相关的任务\"></a>客户端相关的任务</h2><ul>\n<li>用户首次进入列表界面时，请求不需要携带时刻值。</li>\n<li>用户下拉刷新的时候，请求不需要携带时刻值。</li>\n<li>用户上拉浏览列表的时候，请求需要携带时刻值。</li>\n<li>用户上拉浏览列表的时候，如果时刻值失效，需要清楚本地的部分缓存。</li>\n</ul>\n<h2 id=\"存在的问题\"><a href=\"#存在的问题\" class=\"headerlink\" title=\"存在的问题\"></a>存在的问题</h2><ul>\n<li>用户浏览的数据不是最新的数据,在上面的极端情况中已经讨论</li>\n<li>客户端处理较为复杂</li>\n<li>用户在界面滞留时间越久，客户端的到的数据越不理想</li>\n<li>用户在当前列表的上的操作，比如关注某个社区，客户端需要将原本的关注人数+1，但是刷新界面之后，关注的人数又会变成原来的数字。</li>\n<li>由于是缓存的数据，当用户点击某个社区的详情时，看到的关注人数可能与列表中的人数不一致。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"场景说明\"><a href=\"#场景说明\" class=\"headerlink\" title=\"场景说明\"></a>场景说明</h2><p>客户端有一个社区列表的展示界面，该列表的排序方式是按照关注人数进行反向排序(从大到小)，类似：</p>\n<table>\n<thead>\n<tr>\n<th>社区id</th>\n<th>社区名称</th>\n<th>社区关注人数</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>AAA</td>\n<td>4</td>\n</tr>\n<tr>\n<td>3</td>\n<td>CCC</td>\n<td>3</td>\n</tr>\n<tr>\n<td>2</td>\n<td>BBB</td>\n<td>2</td>\n</tr>\n<tr>\n<td>4</td>\n<td>DDD</td>\n<td>1</td>\n</tr>\n</tbody></table>\n<p>但是社区的 <strong>关注人数是动态变化的</strong> ，当社区数量较多时也要考虑分页的情况，那么该列表的排序和分页有了很大的难度。</p>\n<blockquote>\n<p>这里简单整理当前的实现思路，并指出明显的缺陷和暂时解决不了的问题，待以后有能力解决。</p>\n</blockquote>","more":"<h2 id=\"实现思路\"><a href=\"#实现思路\" class=\"headerlink\" title=\"实现思路\"></a>实现思路</h2><p>这里首先要解决的第一个问题就是将动态转换成静态，然后才能排序。</p>\n<p>如果做到根据实时的关注人数进行排序，对于后端是容易实现的，但是要考虑的客户端的处理方式：客户端会缓存已经获取的列表信息，同一个用户分页获取数据的时候，由于关注人数的动态变化，会导致数据出现重复或缺漏的问题。</p>\n<h3 id=\"举个例子说明\"><a href=\"#举个例子说明\" class=\"headerlink\" title=\"举个例子说明\"></a>举个例子说明</h3><p>某时刻社区的关注人数如下(这里是举个例子说明，所以数据仅列出了4条)：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">社区id</th>\n<th align=\"left\">社区名称</th>\n<th align=\"left\">社区关注人数</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">AAA</td>\n<td align=\"left\">3</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">CCC</td>\n<td align=\"left\">4</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">BBB</td>\n<td align=\"left\">3</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">DDD</td>\n<td align=\"left\">1</td>\n</tr>\n</tbody></table>\n<p>当前时刻为t1，那么此时的社区排序结果如下：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">社区id</th>\n<th align=\"left\">社区名称</th>\n<th align=\"left\">社区关注人数</th>\n<th align=\"left\">生成时刻</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">3</td>\n<td align=\"left\">CCC</td>\n<td align=\"left\">4</td>\n<td align=\"left\">t1</td>\n</tr>\n<tr>\n<td align=\"left\">1</td>\n<td align=\"left\">AAA</td>\n<td align=\"left\">3</td>\n<td align=\"left\">t1</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">BBB</td>\n<td align=\"left\">3</td>\n<td align=\"left\">t1</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">DDD</td>\n<td align=\"left\">1</td>\n<td align=\"left\">t1</td>\n</tr>\n</tbody></table>\n<p>一段时间之后，时刻为t2，那么此时社区的关注人数发生了变化：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">社区id</th>\n<th align=\"left\">社区名称</th>\n<th align=\"left\">社区关注人数</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">AAA</td>\n<td align=\"left\">5</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">CCC</td>\n<td align=\"left\">7</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">BBB</td>\n<td align=\"left\">9</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">DDD</td>\n<td align=\"left\">4</td>\n</tr>\n</tbody></table>\n<p>那么此时的排序结果相对与t1时刻已经发生了明显的变化：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">社区id</th>\n<th align=\"left\">社区名称</th>\n<th align=\"left\">社区关注人数</th>\n<th align=\"left\">生成时刻</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">2</td>\n<td align=\"left\">BBB</td>\n<td align=\"left\">9</td>\n<td align=\"left\">t2</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">CCC</td>\n<td align=\"left\">7</td>\n<td align=\"left\">t2</td>\n</tr>\n<tr>\n<td align=\"left\">1</td>\n<td align=\"left\">AAA</td>\n<td align=\"left\">5</td>\n<td align=\"left\">t2</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">DDD</td>\n<td align=\"left\">4</td>\n<td align=\"left\">t2</td>\n</tr>\n</tbody></table>\n<h3 id=\"数据重复或漏缺的复现\"><a href=\"#数据重复或漏缺的复现\" class=\"headerlink\" title=\"数据重复或漏缺的复现\"></a>数据重复或漏缺的复现</h3><p>这里出现的数据重复漏缺是有前提的：数据条数有点多，不能够一次全部返回给客户端，需要分页获取。</p>\n<p>根据上面的那个例子，在t1时刻，用户当前的分页参数 <code>count=2</code> ，那么返回的是id为 <code>3</code> 和 <code>1</code> 的社区信息，当用户在t2时刻继续获取分页的时候，返回的却是id为 <code>1</code> 和<code>4</code> 那么这里id为1的社区就出现重复的问题了，缺漏的原理也类似。</p>\n<h3 id=\"缓存生成的关注排行榜\"><a href=\"#缓存生成的关注排行榜\" class=\"headerlink\" title=\"缓存生成的关注排行榜\"></a>缓存生成的关注排行榜</h3><p>这里的实现思路是每隔一段时间将当前的关注排行榜进行缓存：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">排行榜id</th>\n<th align=\"left\">社区id</th>\n<th align=\"left\">社区名称</th>\n<th align=\"left\">社区关注人数</th>\n<th align=\"left\">生成时刻</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">3</td>\n<td align=\"left\">CCC</td>\n<td align=\"left\">4</td>\n<td align=\"left\">t1</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">1</td>\n<td align=\"left\">AAA</td>\n<td align=\"left\">3</td>\n<td align=\"left\">t1</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">2</td>\n<td align=\"left\">BBB</td>\n<td align=\"left\">3</td>\n<td align=\"left\">t1</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">4</td>\n<td align=\"left\">DDD</td>\n<td align=\"left\">1</td>\n<td align=\"left\">t1</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\">2</td>\n<td align=\"left\">BBB</td>\n<td align=\"left\">9</td>\n<td align=\"left\">t2</td>\n</tr>\n<tr>\n<td align=\"left\">6</td>\n<td align=\"left\">3</td>\n<td align=\"left\">CCC</td>\n<td align=\"left\">7</td>\n<td align=\"left\">t2</td>\n</tr>\n<tr>\n<td align=\"left\">7</td>\n<td align=\"left\">1</td>\n<td align=\"left\">AAA</td>\n<td align=\"left\">5</td>\n<td align=\"left\">t2</td>\n</tr>\n<tr>\n<td align=\"left\">8</td>\n<td align=\"left\">4</td>\n<td align=\"left\">DDD</td>\n<td align=\"left\">4</td>\n<td align=\"left\">t2</td>\n</tr>\n</tbody></table>\n<p>这个时间间隔就是每次任务的时间间隔T，在T间隔内获取的数据都将通过该缓存排行榜中获取。用户在第一次访问的时候，仅携带分页的<code>count</code>即可，返回的数据中，不仅包含社区的相关信息，还包括最新的时刻<code>tn</code>，在以后的分页获取数据过程中，需要携带该时刻。</p>\n<p>比如用户在<code>t1</code>时刻传入参数<code>count=2</code>，那么返回的是id为<code>3</code>和<code>1</code>的社区信息，同时返回参数中也包含<code>t1</code>的值，那么在第二次访问的时候，需要携带<code>count=2&amp;time=t1</code>，这样列表接口将会根据用户的时刻继续获取他的排行队列,那么返回的就应该是id为<code>2</code>和<code>4</code>的社区信息，同样包括<code>t1</code>的值。</p>\n<p>其实也就是用户访问的时候，如果没有携带时刻参数，那么就默认返回距离当前时间最近的时刻。</p>\n<h3 id=\"缓存的过期和时刻参数t的失效设定\"><a href=\"#缓存的过期和时刻参数t的失效设定\" class=\"headerlink\" title=\"缓存的过期和时刻参数t的失效设定\"></a>缓存的过期和时刻参数t的失效设定</h3><p>讨论一下极端情况：</p>\n<ul>\n<li>当时刻为t9的时候，时刻参数是t1的用户获取的将是很久以前的数据，可能这个数据对当前用户来说已经没有意义了。</li>\n<li>最理想的情景就是，用户发出请求的时候，刚好有一批新的社区排行缓存生成，这是拿到的数据也是最合理的数据。</li>\n<li>还有一种比较不合理的情景，就是用户发出请求的时候，刚好有一批新的社区排行榜将要生成，那么用户拿到的数据也就是间隔时间T之前的缓存。</li>\n</ul>\n<p>所以这里就需要进行缓存过期和时刻参数失效的设定。</p>\n<ul>\n<li>设定时刻参数比当前时间小N×T的为无效时刻，将自动返回最新的缓存信息。</li>\n<li>缓存排行榜列表也会在任务执行的时候清除 <strong>N×T</strong> 前的缓存数据。</li>\n</ul>\n<h2 id=\"后端的实现\"><a href=\"#后端的实现\" class=\"headerlink\" title=\"后端的实现\"></a>后端的实现</h2><h3 id=\"数据库中缓存表的构建\"><a href=\"#数据库中缓存表的构建\" class=\"headerlink\" title=\"数据库中缓存表的构建\"></a>数据库中缓存表的构建</h3><ul>\n<li>该缓存表专门缓存各个时刻的排行信息，有定时任务进行插入和删除数据，任何用户均不能操作修改该表中数据。</li>\n<li>该表包含的基本字段有： <code>自身的id</code>、<code>社区的id</code>、<code>关注的人数</code>、<code>生成的时刻（时间戳）</code> 。</li>\n</ul>\n<h3 id=\"定时任务的调度\"><a href=\"#定时任务的调度\" class=\"headerlink\" title=\"定时任务的调度\"></a>定时任务的调度</h3><ul>\n<li>社区排行榜生成任务，该任务是每T时间执行一次，完成对当前社区排行榜的计算、排序和入缓存库，任务执行时生成当前任务的唯一时刻值并一同存入缓存数据库中。</li>\n<li>缓存数据库清理任务，该任务的执行间隔可以是N×T，完成对N×T时刻前的排行榜数据进行清除。</li>\n</ul>\n<h3 id=\"列表接口的实现\"><a href=\"#列表接口的实现\" class=\"headerlink\" title=\"列表接口的实现\"></a>列表接口的实现</h3><ul>\n<li>判断用户传入时刻值的有效性。如果用户没有传入时刻值或时刻值比当前时间小N×T则分配最新的时刻值。</li>\n<li>向缓存表中获取指定分页的社区id，并返回响应的社区信息列表和对应的时刻值。</li>\n</ul>\n<h2 id=\"客户端相关的任务\"><a href=\"#客户端相关的任务\" class=\"headerlink\" title=\"客户端相关的任务\"></a>客户端相关的任务</h2><ul>\n<li>用户首次进入列表界面时，请求不需要携带时刻值。</li>\n<li>用户下拉刷新的时候，请求不需要携带时刻值。</li>\n<li>用户上拉浏览列表的时候，请求需要携带时刻值。</li>\n<li>用户上拉浏览列表的时候，如果时刻值失效，需要清楚本地的部分缓存。</li>\n</ul>\n<h2 id=\"存在的问题\"><a href=\"#存在的问题\" class=\"headerlink\" title=\"存在的问题\"></a>存在的问题</h2><ul>\n<li>用户浏览的数据不是最新的数据,在上面的极端情况中已经讨论</li>\n<li>客户端处理较为复杂</li>\n<li>用户在界面滞留时间越久，客户端的到的数据越不理想</li>\n<li>用户在当前列表的上的操作，比如关注某个社区，客户端需要将原本的关注人数+1，但是刷新界面之后，关注的人数又会变成原来的数字。</li>\n<li>由于是缓存的数据，当用户点击某个社区的详情时，看到的关注人数可能与列表中的人数不一致。</li>\n</ul>"},{"title":"自建V2Ray和加速","date":"2019-10-12T16:00:00.000Z","_content":"\n\n购买vps服务，这里推荐 [digitalocean](https://m.do.co/c/9491e366d1c5)（如果没有使用过的朋友可以通过我的邀请链接注册。）。目前来说比较稳定，系统最好选择Centos，创建服务之后，先ping一下分配的ip，如果ping不通，则删掉换区重建。\n\n## 自动安装v2ray工具：\n\n```\nbash <(curl -s -L https://git.io/v2ray.sh)\n```\n\n安装教程参考 [给小白的V2ray教程](https://github.com/zhaoweih/Shadowsocks-Tutorial/blob/master/super_easy_v2ray_tutorial.md)\n\n## 安装BBR：\n\n```\nwget -N --no-check-certificate \"https://raw.githubusercontent.com/chiakge/Linux-NetSpeed/master/tcp.sh\" && chmod +x tcp.sh && ./tcp.sh\n```\n\n先选择安装安装 BBR/BBR魔改版内核内核，安装完成后，\n重启系统后再运行tcp.sh按需要选择加速，我选择的是魔改版加速。\n\n## Linux下载客户端脚本\n\n```\nwget https://install.direct/go.sh\nsudo base go.sh\n```\n<!--more-->\n\n自动安装的路径：\n\n- /usr/bin/v2ray/v2ray：V2Ray 程序；\n- /usr/bin/v2ray/v2ctl：V2Ray 工具；\n- /etc/v2ray/config.json：配置文件；\n- /usr/bin/v2ray/geoip.dat：IP 数据文件\n- /usr/bin/v2ray/geosite.dat：域名数据文件\n\n会在系统重启之后，自动运行 V2Ray。之后需要编辑 /etc/v2ray/config.json 文件来配置你需要的代理方式；\n运行 `service v2ray start` 来启动 V2Ray 进程；\n\n## v2ray客户端配置 ` config.json`\n\n```\n{\n  \"log\": {\n    \"access\": \"\",\n    \"error\": \"\",\n    \"loglevel\": \"warning\"\n  },\n  \"inbound\": {\n    \"port\": 1080, // SOCKS 代理端口，在浏览器中需配置代理并指向这个端口\n    \"listen\": \"127.0.0.1\",\n    \"protocol\": \"socks\",\n    \"domainOverride\": [\n      \"tls\",\n      \"http\"\n    ],\n    \"settings\": {\n      \"auth\": \"noauth\",\n      \"udp\": true,\n      \"ip\": \"127.0.0.1\",\n      \"clients\": null\n    },\n    \"streamSettings\": null\n  },\n  \"outbound\": {\n    \"tag\": \"agentout\",\n    \"protocol\": \"vmess\",\n    \"settings\": {\n      \"vnext\": [\n        {\n          \"address\": \"159.65.xxx.xxx\", // 服务器地址，请修改为你自己的服务器 ip 或域名\n          \"port\": 47297,  // 服务器端口\n          \"users\": [\n            {\n              \"id\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\", //客户端和服务器统一的ID号\n              \"alterId\": 233\n            }\n          ]\n        }\n      ],\n      \"servers\": null\n    },\n    \"streamSettings\": {\n      \"network\": \"tcp\",\n      \"security\": \"\",\n      \"tlsSettings\": null,\n      \"tcpSettings\": null,\n      \"kcpSettings\": null,\n      \"wsSettings\": null,\n      \"httpSettings\": null\n    },\n    \"mux\": {\n      \"enabled\": true\n    }\n  },\n  \"inboundDetour\": null,\n  \"outboundDetour\": [\n    {\n      \"protocol\": \"freedom\",\n      \"settings\": {\n        \"response\": null\n      },\n      \"tag\": \"direct\"\n    },\n    {\n      \"protocol\": \"blackhole\",\n      \"settings\": {\n        \"response\": {\n          \"type\": \"http\"\n        }\n      },\n      \"tag\": \"blockout\"\n    }\n  ],\n  \"dns\": {\n    \"servers\": [\n      \"8.8.8.8\",\n      \"8.8.4.4\",\n      \"localhost\"\n    ]\n  },\n  \"routingx\": {\n    \"strategy\": \"rules\",\n    \"settings\": {\n      \"domainStrategy\": \"IPIfNonMatch\",\n      \"rules\": [\n        {\n          \"type\": \"field\",\n          \"port\": \"1-52\",\n          \"outboundTag\": \"direct\"\n        },\n        {\n          \"type\": \"field\",\n          \"port\": \"54-79\",\n          \"outboundTag\": \"direct\"\n        },\n        {\n          \"type\": \"field\",\n          \"port\": \"81-442\",\n          \"outboundTag\": \"direct\"\n        },\n        {\n          \"type\": \"field\",\n          \"port\": \"444-65535\",\n          \"outboundTag\": \"direct\"\n        },\n        {\n          \"type\": \"chinasites\",\n          \"outboundTag\": \"direct\"\n        },\n        {\n          \"type\": \"field\",\n          \"ip\": [\n            \"0.0.0.0/8\",\n            \"10.0.0.0/8\",\n            \"100.64.0.0/10\",\n            \"127.0.0.0/8\",\n            \"169.254.0.0/16\",\n            \"172.16.0.0/12\",\n            \"192.0.0.0/24\",\n            \"192.0.2.0/24\",\n            \"192.168.0.0/16\",\n            \"198.18.0.0/15\",\n            \"198.51.100.0/24\",\n            \"203.0.113.0/24\",\n            \"::1/128\",\n            \"fc00::/7\",\n            \"fe80::/10\"\n          ],\n          \"outboundTag\": \"direct\"\n        },\n        {\n          \"type\": \"chinaip\",\n          \"outboundTag\": \"direct\"\n        }\n      ]\n    }\n  },\n  \"transport\": {\n    \"kcpSettings\": {\n      \"mtu\": 1350,\n      \"tti\": 20,\n      \"uplinkCapacity\": 12,\n      \"downlinkCapacity\": 12,\n      \"congestion\": false,\n      \"readBufferSize\": 1,\n      \"writeBufferSize\": 1,\n      \"header\": {\n        \"type\": \"none\"\n      }\n    }\n  }\n}\n\n```\n\n- [Project V ](https://www.v2ray.com/chapter_00/install.html)\n- [v2ray+BBR牛的一逼！](https://blog.verkey.org/209.html)\n","source":"_posts/自建V2Ray和加速.md","raw":"---\ntitle: 自建V2Ray和加速\ndate: 2019-10-13\ntags: [VPN, 服务器]\n---\n\n\n购买vps服务，这里推荐 [digitalocean](https://m.do.co/c/9491e366d1c5)（如果没有使用过的朋友可以通过我的邀请链接注册。）。目前来说比较稳定，系统最好选择Centos，创建服务之后，先ping一下分配的ip，如果ping不通，则删掉换区重建。\n\n## 自动安装v2ray工具：\n\n```\nbash <(curl -s -L https://git.io/v2ray.sh)\n```\n\n安装教程参考 [给小白的V2ray教程](https://github.com/zhaoweih/Shadowsocks-Tutorial/blob/master/super_easy_v2ray_tutorial.md)\n\n## 安装BBR：\n\n```\nwget -N --no-check-certificate \"https://raw.githubusercontent.com/chiakge/Linux-NetSpeed/master/tcp.sh\" && chmod +x tcp.sh && ./tcp.sh\n```\n\n先选择安装安装 BBR/BBR魔改版内核内核，安装完成后，\n重启系统后再运行tcp.sh按需要选择加速，我选择的是魔改版加速。\n\n## Linux下载客户端脚本\n\n```\nwget https://install.direct/go.sh\nsudo base go.sh\n```\n<!--more-->\n\n自动安装的路径：\n\n- /usr/bin/v2ray/v2ray：V2Ray 程序；\n- /usr/bin/v2ray/v2ctl：V2Ray 工具；\n- /etc/v2ray/config.json：配置文件；\n- /usr/bin/v2ray/geoip.dat：IP 数据文件\n- /usr/bin/v2ray/geosite.dat：域名数据文件\n\n会在系统重启之后，自动运行 V2Ray。之后需要编辑 /etc/v2ray/config.json 文件来配置你需要的代理方式；\n运行 `service v2ray start` 来启动 V2Ray 进程；\n\n## v2ray客户端配置 ` config.json`\n\n```\n{\n  \"log\": {\n    \"access\": \"\",\n    \"error\": \"\",\n    \"loglevel\": \"warning\"\n  },\n  \"inbound\": {\n    \"port\": 1080, // SOCKS 代理端口，在浏览器中需配置代理并指向这个端口\n    \"listen\": \"127.0.0.1\",\n    \"protocol\": \"socks\",\n    \"domainOverride\": [\n      \"tls\",\n      \"http\"\n    ],\n    \"settings\": {\n      \"auth\": \"noauth\",\n      \"udp\": true,\n      \"ip\": \"127.0.0.1\",\n      \"clients\": null\n    },\n    \"streamSettings\": null\n  },\n  \"outbound\": {\n    \"tag\": \"agentout\",\n    \"protocol\": \"vmess\",\n    \"settings\": {\n      \"vnext\": [\n        {\n          \"address\": \"159.65.xxx.xxx\", // 服务器地址，请修改为你自己的服务器 ip 或域名\n          \"port\": 47297,  // 服务器端口\n          \"users\": [\n            {\n              \"id\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\", //客户端和服务器统一的ID号\n              \"alterId\": 233\n            }\n          ]\n        }\n      ],\n      \"servers\": null\n    },\n    \"streamSettings\": {\n      \"network\": \"tcp\",\n      \"security\": \"\",\n      \"tlsSettings\": null,\n      \"tcpSettings\": null,\n      \"kcpSettings\": null,\n      \"wsSettings\": null,\n      \"httpSettings\": null\n    },\n    \"mux\": {\n      \"enabled\": true\n    }\n  },\n  \"inboundDetour\": null,\n  \"outboundDetour\": [\n    {\n      \"protocol\": \"freedom\",\n      \"settings\": {\n        \"response\": null\n      },\n      \"tag\": \"direct\"\n    },\n    {\n      \"protocol\": \"blackhole\",\n      \"settings\": {\n        \"response\": {\n          \"type\": \"http\"\n        }\n      },\n      \"tag\": \"blockout\"\n    }\n  ],\n  \"dns\": {\n    \"servers\": [\n      \"8.8.8.8\",\n      \"8.8.4.4\",\n      \"localhost\"\n    ]\n  },\n  \"routingx\": {\n    \"strategy\": \"rules\",\n    \"settings\": {\n      \"domainStrategy\": \"IPIfNonMatch\",\n      \"rules\": [\n        {\n          \"type\": \"field\",\n          \"port\": \"1-52\",\n          \"outboundTag\": \"direct\"\n        },\n        {\n          \"type\": \"field\",\n          \"port\": \"54-79\",\n          \"outboundTag\": \"direct\"\n        },\n        {\n          \"type\": \"field\",\n          \"port\": \"81-442\",\n          \"outboundTag\": \"direct\"\n        },\n        {\n          \"type\": \"field\",\n          \"port\": \"444-65535\",\n          \"outboundTag\": \"direct\"\n        },\n        {\n          \"type\": \"chinasites\",\n          \"outboundTag\": \"direct\"\n        },\n        {\n          \"type\": \"field\",\n          \"ip\": [\n            \"0.0.0.0/8\",\n            \"10.0.0.0/8\",\n            \"100.64.0.0/10\",\n            \"127.0.0.0/8\",\n            \"169.254.0.0/16\",\n            \"172.16.0.0/12\",\n            \"192.0.0.0/24\",\n            \"192.0.2.0/24\",\n            \"192.168.0.0/16\",\n            \"198.18.0.0/15\",\n            \"198.51.100.0/24\",\n            \"203.0.113.0/24\",\n            \"::1/128\",\n            \"fc00::/7\",\n            \"fe80::/10\"\n          ],\n          \"outboundTag\": \"direct\"\n        },\n        {\n          \"type\": \"chinaip\",\n          \"outboundTag\": \"direct\"\n        }\n      ]\n    }\n  },\n  \"transport\": {\n    \"kcpSettings\": {\n      \"mtu\": 1350,\n      \"tti\": 20,\n      \"uplinkCapacity\": 12,\n      \"downlinkCapacity\": 12,\n      \"congestion\": false,\n      \"readBufferSize\": 1,\n      \"writeBufferSize\": 1,\n      \"header\": {\n        \"type\": \"none\"\n      }\n    }\n  }\n}\n\n```\n\n- [Project V ](https://www.v2ray.com/chapter_00/install.html)\n- [v2ray+BBR牛的一逼！](https://blog.verkey.org/209.html)\n","slug":"自建V2Ray和加速","published":1,"updated":"2021-06-20T10:25:20.133Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluqa1hjm0055rloggg06hdu8","content":"<p>购买vps服务，这里推荐 <a href=\"https://m.do.co/c/9491e366d1c5\">digitalocean</a>（如果没有使用过的朋友可以通过我的邀请链接注册。）。目前来说比较稳定，系统最好选择Centos，创建服务之后，先ping一下分配的ip，如果ping不通，则删掉换区重建。</p>\n<h2 id=\"自动安装v2ray工具：\"><a href=\"#自动安装v2ray工具：\" class=\"headerlink\" title=\"自动安装v2ray工具：\"></a>自动安装v2ray工具：</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash &lt;(curl -s -L https://git.io/v2ray.sh)</span><br></pre></td></tr></table></figure>\n\n<p>安装教程参考 <a href=\"https://github.com/zhaoweih/Shadowsocks-Tutorial/blob/master/super_easy_v2ray_tutorial.md\">给小白的V2ray教程</a></p>\n<h2 id=\"安装BBR：\"><a href=\"#安装BBR：\" class=\"headerlink\" title=\"安装BBR：\"></a>安装BBR：</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -N --no-check-certificate &quot;https://raw.githubusercontent.com/chiakge/Linux-NetSpeed/master/tcp.sh&quot; &amp;&amp; chmod +x tcp.sh &amp;&amp; ./tcp.sh</span><br></pre></td></tr></table></figure>\n\n<p>先选择安装安装 BBR&#x2F;BBR魔改版内核内核，安装完成后，<br>重启系统后再运行tcp.sh按需要选择加速，我选择的是魔改版加速。</p>\n<h2 id=\"Linux下载客户端脚本\"><a href=\"#Linux下载客户端脚本\" class=\"headerlink\" title=\"Linux下载客户端脚本\"></a>Linux下载客户端脚本</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://install.direct/go.sh</span><br><span class=\"line\">sudo base go.sh</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n\n<p>自动安装的路径：</p>\n<ul>\n<li>&#x2F;usr&#x2F;bin&#x2F;v2ray&#x2F;v2ray：V2Ray 程序；</li>\n<li>&#x2F;usr&#x2F;bin&#x2F;v2ray&#x2F;v2ctl：V2Ray 工具；</li>\n<li>&#x2F;etc&#x2F;v2ray&#x2F;config.json：配置文件；</li>\n<li>&#x2F;usr&#x2F;bin&#x2F;v2ray&#x2F;geoip.dat：IP 数据文件</li>\n<li>&#x2F;usr&#x2F;bin&#x2F;v2ray&#x2F;geosite.dat：域名数据文件</li>\n</ul>\n<p>会在系统重启之后，自动运行 V2Ray。之后需要编辑 &#x2F;etc&#x2F;v2ray&#x2F;config.json 文件来配置你需要的代理方式；<br>运行 <code>service v2ray start</code> 来启动 V2Ray 进程；</p>\n<h2 id=\"v2ray客户端配置-config-json\"><a href=\"#v2ray客户端配置-config-json\" class=\"headerlink\" title=\"v2ray客户端配置  config.json\"></a>v2ray客户端配置 <code> config.json</code></h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;log&quot;: &#123;</span><br><span class=\"line\">    &quot;access&quot;: &quot;&quot;,</span><br><span class=\"line\">    &quot;error&quot;: &quot;&quot;,</span><br><span class=\"line\">    &quot;loglevel&quot;: &quot;warning&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;inbound&quot;: &#123;</span><br><span class=\"line\">    &quot;port&quot;: 1080, // SOCKS 代理端口，在浏览器中需配置代理并指向这个端口</span><br><span class=\"line\">    &quot;listen&quot;: &quot;127.0.0.1&quot;,</span><br><span class=\"line\">    &quot;protocol&quot;: &quot;socks&quot;,</span><br><span class=\"line\">    &quot;domainOverride&quot;: [</span><br><span class=\"line\">      &quot;tls&quot;,</span><br><span class=\"line\">      &quot;http&quot;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    &quot;settings&quot;: &#123;</span><br><span class=\"line\">      &quot;auth&quot;: &quot;noauth&quot;,</span><br><span class=\"line\">      &quot;udp&quot;: true,</span><br><span class=\"line\">      &quot;ip&quot;: &quot;127.0.0.1&quot;,</span><br><span class=\"line\">      &quot;clients&quot;: null</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;streamSettings&quot;: null</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;outbound&quot;: &#123;</span><br><span class=\"line\">    &quot;tag&quot;: &quot;agentout&quot;,</span><br><span class=\"line\">    &quot;protocol&quot;: &quot;vmess&quot;,</span><br><span class=\"line\">    &quot;settings&quot;: &#123;</span><br><span class=\"line\">      &quot;vnext&quot;: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          &quot;address&quot;: &quot;159.65.xxx.xxx&quot;, // 服务器地址，请修改为你自己的服务器 ip 或域名</span><br><span class=\"line\">          &quot;port&quot;: 47297,  // 服务器端口</span><br><span class=\"line\">          &quot;users&quot;: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">              &quot;id&quot;: &quot;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;, //客户端和服务器统一的ID号</span><br><span class=\"line\">              &quot;alterId&quot;: 233</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          ]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ],</span><br><span class=\"line\">      &quot;servers&quot;: null</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;streamSettings&quot;: &#123;</span><br><span class=\"line\">      &quot;network&quot;: &quot;tcp&quot;,</span><br><span class=\"line\">      &quot;security&quot;: &quot;&quot;,</span><br><span class=\"line\">      &quot;tlsSettings&quot;: null,</span><br><span class=\"line\">      &quot;tcpSettings&quot;: null,</span><br><span class=\"line\">      &quot;kcpSettings&quot;: null,</span><br><span class=\"line\">      &quot;wsSettings&quot;: null,</span><br><span class=\"line\">      &quot;httpSettings&quot;: null</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;mux&quot;: &#123;</span><br><span class=\"line\">      &quot;enabled&quot;: true</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;inboundDetour&quot;: null,</span><br><span class=\"line\">  &quot;outboundDetour&quot;: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      &quot;protocol&quot;: &quot;freedom&quot;,</span><br><span class=\"line\">      &quot;settings&quot;: &#123;</span><br><span class=\"line\">        &quot;response&quot;: null</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &quot;tag&quot;: &quot;direct&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      &quot;protocol&quot;: &quot;blackhole&quot;,</span><br><span class=\"line\">      &quot;settings&quot;: &#123;</span><br><span class=\"line\">        &quot;response&quot;: &#123;</span><br><span class=\"line\">          &quot;type&quot;: &quot;http&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &quot;tag&quot;: &quot;blockout&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  &quot;dns&quot;: &#123;</span><br><span class=\"line\">    &quot;servers&quot;: [</span><br><span class=\"line\">      &quot;8.8.8.8&quot;,</span><br><span class=\"line\">      &quot;8.8.4.4&quot;,</span><br><span class=\"line\">      &quot;localhost&quot;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;routingx&quot;: &#123;</span><br><span class=\"line\">    &quot;strategy&quot;: &quot;rules&quot;,</span><br><span class=\"line\">    &quot;settings&quot;: &#123;</span><br><span class=\"line\">      &quot;domainStrategy&quot;: &quot;IPIfNonMatch&quot;,</span><br><span class=\"line\">      &quot;rules&quot;: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          &quot;type&quot;: &quot;field&quot;,</span><br><span class=\"line\">          &quot;port&quot;: &quot;1-52&quot;,</span><br><span class=\"line\">          &quot;outboundTag&quot;: &quot;direct&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          &quot;type&quot;: &quot;field&quot;,</span><br><span class=\"line\">          &quot;port&quot;: &quot;54-79&quot;,</span><br><span class=\"line\">          &quot;outboundTag&quot;: &quot;direct&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          &quot;type&quot;: &quot;field&quot;,</span><br><span class=\"line\">          &quot;port&quot;: &quot;81-442&quot;,</span><br><span class=\"line\">          &quot;outboundTag&quot;: &quot;direct&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          &quot;type&quot;: &quot;field&quot;,</span><br><span class=\"line\">          &quot;port&quot;: &quot;444-65535&quot;,</span><br><span class=\"line\">          &quot;outboundTag&quot;: &quot;direct&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          &quot;type&quot;: &quot;chinasites&quot;,</span><br><span class=\"line\">          &quot;outboundTag&quot;: &quot;direct&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          &quot;type&quot;: &quot;field&quot;,</span><br><span class=\"line\">          &quot;ip&quot;: [</span><br><span class=\"line\">            &quot;0.0.0.0/8&quot;,</span><br><span class=\"line\">            &quot;10.0.0.0/8&quot;,</span><br><span class=\"line\">            &quot;100.64.0.0/10&quot;,</span><br><span class=\"line\">            &quot;127.0.0.0/8&quot;,</span><br><span class=\"line\">            &quot;169.254.0.0/16&quot;,</span><br><span class=\"line\">            &quot;172.16.0.0/12&quot;,</span><br><span class=\"line\">            &quot;192.0.0.0/24&quot;,</span><br><span class=\"line\">            &quot;192.0.2.0/24&quot;,</span><br><span class=\"line\">            &quot;192.168.0.0/16&quot;,</span><br><span class=\"line\">            &quot;198.18.0.0/15&quot;,</span><br><span class=\"line\">            &quot;198.51.100.0/24&quot;,</span><br><span class=\"line\">            &quot;203.0.113.0/24&quot;,</span><br><span class=\"line\">            &quot;::1/128&quot;,</span><br><span class=\"line\">            &quot;fc00::/7&quot;,</span><br><span class=\"line\">            &quot;fe80::/10&quot;</span><br><span class=\"line\">          ],</span><br><span class=\"line\">          &quot;outboundTag&quot;: &quot;direct&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          &quot;type&quot;: &quot;chinaip&quot;,</span><br><span class=\"line\">          &quot;outboundTag&quot;: &quot;direct&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;transport&quot;: &#123;</span><br><span class=\"line\">    &quot;kcpSettings&quot;: &#123;</span><br><span class=\"line\">      &quot;mtu&quot;: 1350,</span><br><span class=\"line\">      &quot;tti&quot;: 20,</span><br><span class=\"line\">      &quot;uplinkCapacity&quot;: 12,</span><br><span class=\"line\">      &quot;downlinkCapacity&quot;: 12,</span><br><span class=\"line\">      &quot;congestion&quot;: false,</span><br><span class=\"line\">      &quot;readBufferSize&quot;: 1,</span><br><span class=\"line\">      &quot;writeBufferSize&quot;: 1,</span><br><span class=\"line\">      &quot;header&quot;: &#123;</span><br><span class=\"line\">        &quot;type&quot;: &quot;none&quot;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><a href=\"https://www.v2ray.com/chapter_00/install.html\">Project V </a></li>\n<li><a href=\"https://blog.verkey.org/209.html\">v2ray+BBR牛的一逼！</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>购买vps服务，这里推荐 <a href=\"https://m.do.co/c/9491e366d1c5\">digitalocean</a>（如果没有使用过的朋友可以通过我的邀请链接注册。）。目前来说比较稳定，系统最好选择Centos，创建服务之后，先ping一下分配的ip，如果ping不通，则删掉换区重建。</p>\n<h2 id=\"自动安装v2ray工具：\"><a href=\"#自动安装v2ray工具：\" class=\"headerlink\" title=\"自动安装v2ray工具：\"></a>自动安装v2ray工具：</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash &lt;(curl -s -L https://git.io/v2ray.sh)</span><br></pre></td></tr></table></figure>\n\n<p>安装教程参考 <a href=\"https://github.com/zhaoweih/Shadowsocks-Tutorial/blob/master/super_easy_v2ray_tutorial.md\">给小白的V2ray教程</a></p>\n<h2 id=\"安装BBR：\"><a href=\"#安装BBR：\" class=\"headerlink\" title=\"安装BBR：\"></a>安装BBR：</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -N --no-check-certificate &quot;https://raw.githubusercontent.com/chiakge/Linux-NetSpeed/master/tcp.sh&quot; &amp;&amp; chmod +x tcp.sh &amp;&amp; ./tcp.sh</span><br></pre></td></tr></table></figure>\n\n<p>先选择安装安装 BBR&#x2F;BBR魔改版内核内核，安装完成后，<br>重启系统后再运行tcp.sh按需要选择加速，我选择的是魔改版加速。</p>\n<h2 id=\"Linux下载客户端脚本\"><a href=\"#Linux下载客户端脚本\" class=\"headerlink\" title=\"Linux下载客户端脚本\"></a>Linux下载客户端脚本</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://install.direct/go.sh</span><br><span class=\"line\">sudo base go.sh</span><br></pre></td></tr></table></figure>","more":"<p>自动安装的路径：</p>\n<ul>\n<li>&#x2F;usr&#x2F;bin&#x2F;v2ray&#x2F;v2ray：V2Ray 程序；</li>\n<li>&#x2F;usr&#x2F;bin&#x2F;v2ray&#x2F;v2ctl：V2Ray 工具；</li>\n<li>&#x2F;etc&#x2F;v2ray&#x2F;config.json：配置文件；</li>\n<li>&#x2F;usr&#x2F;bin&#x2F;v2ray&#x2F;geoip.dat：IP 数据文件</li>\n<li>&#x2F;usr&#x2F;bin&#x2F;v2ray&#x2F;geosite.dat：域名数据文件</li>\n</ul>\n<p>会在系统重启之后，自动运行 V2Ray。之后需要编辑 &#x2F;etc&#x2F;v2ray&#x2F;config.json 文件来配置你需要的代理方式；<br>运行 <code>service v2ray start</code> 来启动 V2Ray 进程；</p>\n<h2 id=\"v2ray客户端配置-config-json\"><a href=\"#v2ray客户端配置-config-json\" class=\"headerlink\" title=\"v2ray客户端配置  config.json\"></a>v2ray客户端配置 <code> config.json</code></h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;log&quot;: &#123;</span><br><span class=\"line\">    &quot;access&quot;: &quot;&quot;,</span><br><span class=\"line\">    &quot;error&quot;: &quot;&quot;,</span><br><span class=\"line\">    &quot;loglevel&quot;: &quot;warning&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;inbound&quot;: &#123;</span><br><span class=\"line\">    &quot;port&quot;: 1080, // SOCKS 代理端口，在浏览器中需配置代理并指向这个端口</span><br><span class=\"line\">    &quot;listen&quot;: &quot;127.0.0.1&quot;,</span><br><span class=\"line\">    &quot;protocol&quot;: &quot;socks&quot;,</span><br><span class=\"line\">    &quot;domainOverride&quot;: [</span><br><span class=\"line\">      &quot;tls&quot;,</span><br><span class=\"line\">      &quot;http&quot;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    &quot;settings&quot;: &#123;</span><br><span class=\"line\">      &quot;auth&quot;: &quot;noauth&quot;,</span><br><span class=\"line\">      &quot;udp&quot;: true,</span><br><span class=\"line\">      &quot;ip&quot;: &quot;127.0.0.1&quot;,</span><br><span class=\"line\">      &quot;clients&quot;: null</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;streamSettings&quot;: null</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;outbound&quot;: &#123;</span><br><span class=\"line\">    &quot;tag&quot;: &quot;agentout&quot;,</span><br><span class=\"line\">    &quot;protocol&quot;: &quot;vmess&quot;,</span><br><span class=\"line\">    &quot;settings&quot;: &#123;</span><br><span class=\"line\">      &quot;vnext&quot;: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          &quot;address&quot;: &quot;159.65.xxx.xxx&quot;, // 服务器地址，请修改为你自己的服务器 ip 或域名</span><br><span class=\"line\">          &quot;port&quot;: 47297,  // 服务器端口</span><br><span class=\"line\">          &quot;users&quot;: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">              &quot;id&quot;: &quot;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;, //客户端和服务器统一的ID号</span><br><span class=\"line\">              &quot;alterId&quot;: 233</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          ]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ],</span><br><span class=\"line\">      &quot;servers&quot;: null</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;streamSettings&quot;: &#123;</span><br><span class=\"line\">      &quot;network&quot;: &quot;tcp&quot;,</span><br><span class=\"line\">      &quot;security&quot;: &quot;&quot;,</span><br><span class=\"line\">      &quot;tlsSettings&quot;: null,</span><br><span class=\"line\">      &quot;tcpSettings&quot;: null,</span><br><span class=\"line\">      &quot;kcpSettings&quot;: null,</span><br><span class=\"line\">      &quot;wsSettings&quot;: null,</span><br><span class=\"line\">      &quot;httpSettings&quot;: null</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;mux&quot;: &#123;</span><br><span class=\"line\">      &quot;enabled&quot;: true</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;inboundDetour&quot;: null,</span><br><span class=\"line\">  &quot;outboundDetour&quot;: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      &quot;protocol&quot;: &quot;freedom&quot;,</span><br><span class=\"line\">      &quot;settings&quot;: &#123;</span><br><span class=\"line\">        &quot;response&quot;: null</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &quot;tag&quot;: &quot;direct&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      &quot;protocol&quot;: &quot;blackhole&quot;,</span><br><span class=\"line\">      &quot;settings&quot;: &#123;</span><br><span class=\"line\">        &quot;response&quot;: &#123;</span><br><span class=\"line\">          &quot;type&quot;: &quot;http&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &quot;tag&quot;: &quot;blockout&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  &quot;dns&quot;: &#123;</span><br><span class=\"line\">    &quot;servers&quot;: [</span><br><span class=\"line\">      &quot;8.8.8.8&quot;,</span><br><span class=\"line\">      &quot;8.8.4.4&quot;,</span><br><span class=\"line\">      &quot;localhost&quot;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;routingx&quot;: &#123;</span><br><span class=\"line\">    &quot;strategy&quot;: &quot;rules&quot;,</span><br><span class=\"line\">    &quot;settings&quot;: &#123;</span><br><span class=\"line\">      &quot;domainStrategy&quot;: &quot;IPIfNonMatch&quot;,</span><br><span class=\"line\">      &quot;rules&quot;: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          &quot;type&quot;: &quot;field&quot;,</span><br><span class=\"line\">          &quot;port&quot;: &quot;1-52&quot;,</span><br><span class=\"line\">          &quot;outboundTag&quot;: &quot;direct&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          &quot;type&quot;: &quot;field&quot;,</span><br><span class=\"line\">          &quot;port&quot;: &quot;54-79&quot;,</span><br><span class=\"line\">          &quot;outboundTag&quot;: &quot;direct&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          &quot;type&quot;: &quot;field&quot;,</span><br><span class=\"line\">          &quot;port&quot;: &quot;81-442&quot;,</span><br><span class=\"line\">          &quot;outboundTag&quot;: &quot;direct&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          &quot;type&quot;: &quot;field&quot;,</span><br><span class=\"line\">          &quot;port&quot;: &quot;444-65535&quot;,</span><br><span class=\"line\">          &quot;outboundTag&quot;: &quot;direct&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          &quot;type&quot;: &quot;chinasites&quot;,</span><br><span class=\"line\">          &quot;outboundTag&quot;: &quot;direct&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          &quot;type&quot;: &quot;field&quot;,</span><br><span class=\"line\">          &quot;ip&quot;: [</span><br><span class=\"line\">            &quot;0.0.0.0/8&quot;,</span><br><span class=\"line\">            &quot;10.0.0.0/8&quot;,</span><br><span class=\"line\">            &quot;100.64.0.0/10&quot;,</span><br><span class=\"line\">            &quot;127.0.0.0/8&quot;,</span><br><span class=\"line\">            &quot;169.254.0.0/16&quot;,</span><br><span class=\"line\">            &quot;172.16.0.0/12&quot;,</span><br><span class=\"line\">            &quot;192.0.0.0/24&quot;,</span><br><span class=\"line\">            &quot;192.0.2.0/24&quot;,</span><br><span class=\"line\">            &quot;192.168.0.0/16&quot;,</span><br><span class=\"line\">            &quot;198.18.0.0/15&quot;,</span><br><span class=\"line\">            &quot;198.51.100.0/24&quot;,</span><br><span class=\"line\">            &quot;203.0.113.0/24&quot;,</span><br><span class=\"line\">            &quot;::1/128&quot;,</span><br><span class=\"line\">            &quot;fc00::/7&quot;,</span><br><span class=\"line\">            &quot;fe80::/10&quot;</span><br><span class=\"line\">          ],</span><br><span class=\"line\">          &quot;outboundTag&quot;: &quot;direct&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          &quot;type&quot;: &quot;chinaip&quot;,</span><br><span class=\"line\">          &quot;outboundTag&quot;: &quot;direct&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;transport&quot;: &#123;</span><br><span class=\"line\">    &quot;kcpSettings&quot;: &#123;</span><br><span class=\"line\">      &quot;mtu&quot;: 1350,</span><br><span class=\"line\">      &quot;tti&quot;: 20,</span><br><span class=\"line\">      &quot;uplinkCapacity&quot;: 12,</span><br><span class=\"line\">      &quot;downlinkCapacity&quot;: 12,</span><br><span class=\"line\">      &quot;congestion&quot;: false,</span><br><span class=\"line\">      &quot;readBufferSize&quot;: 1,</span><br><span class=\"line\">      &quot;writeBufferSize&quot;: 1,</span><br><span class=\"line\">      &quot;header&quot;: &#123;</span><br><span class=\"line\">        &quot;type&quot;: &quot;none&quot;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><a href=\"https://www.v2ray.com/chapter_00/install.html\">Project V </a></li>\n<li><a href=\"https://blog.verkey.org/209.html\">v2ray+BBR牛的一逼！</a></li>\n</ul>"},{"title":"设计模式——单例模式","date":"2018-04-10T16:00:00.000Z","_content":"\n# 单例模式\n\n## 核心作用\n\n保证一个类只有一个实例，并且提供一个访问该实例的全局访问点\n\n## 常见的应用场景\n\n- windows的Task Manager (任务管理器)就是很典型的单例模式\n- windows的回收站也是典型的单例应用，在整个系统运行过程中，回收站一直维持着仅有的一个实例\n- 项目中，读取配置文件的类，一般也只有一个对象，没有必要每次使用配置文件数据的时候都new一个对象去读取\n- 网站计数器，一般也是采用单例模式实现，否则难以同步\n- 应用程序的日志应用，一般采用单例模式实现，这一般是由于共享的日志文件一直处于打开状态，因为只能有一个实例去操作，否则内存不好追加。\n- 数据库连接池的设计一般也是采用的单例模式，因为数据库连接也是一种数据库资源\n- Python 的模块就是天然的单例模式，因为模块在第一次导入时，会生成 `.pyc` 文件，当第二次导入时，就会直接加载 `.pyc`文件，而不会再次执行模块代码\n\n## 单例模式的优点\n\n由于单例模式只生成一个实例，减少了系统性能开销，当一个对象的产生需要比较多的资源时，如读取配置、产生其他依赖对象时，则可以通过在应用启动时直接产生一个单例对象，然后永久驻留内存的方式来解决\n\n单例模式可以再系统设置全局的访问点，优化共享资源访问，例如可以设计一个单例类，负责所有数据表的映射处理\n\n## 常见的五种单例模式实现方式\n\n- 主要：\n  + 饿汉模式——单例对象立即加载(线程安全、调用效率高，但是不能延时加载)\n  - 懒汉模式(线程安全，调用效率不高，但是可以延时加载)\n- 其他：\n  + 双重检测锁式(Java不建议使用)\n  + 静态内部类式(线程安全，调用率高，同时也可以延时加载)\n  + 枚举单例(线程安全，调用效率高，不能延时加载)\n\n## 如何选用\n\n- 单例对象 占用 资源少，不要 延时加载：\n  + 枚举式 好于 饿汉式\n- 单例对象 占用 资源大，需要 延时加载：\n  + 静态内部类式 好于 懒汉式\n\n## python中单例模式的实现方式\n\n本来想整理一下，以上说的几种常见的单例实现模式在Python中的实现表现，但是感觉对Java和Python理解的深度不够，懵懵懂懂之间，不敢胡乱总结，只得贴一些python自己的实现方式，没法进行对比了。先继续学习，深入了解一些再回来整理。\n\n#### 使用模块\n\n**Python 的模块就是天然的单例模式，因为模块在第一次导入时，会生成 .pyc 文件，当第二次导入时，就会直接加载 .pyc 文件，而不会再次执行模块代码。** 因此，我们只需把相关的函数和数据定义在一个模块中，就可以获得一个单例对象了。如果我们真的想要一个单例类，可以考虑这样做：\n\n```python\n# mysingleton.py\nclass My_Singleton(object):\n    def foo(self):\n        pass\n\nmy_singleton = My_Singleton()\n\n\n# test.py\nfrom mysingleton import my_singleton\n\nmy_singleton.foo()\n```\n\n#### 使用 `__new__`\n\n使用 `__new__` 来控制实例的创建过程，这里没有线程的问题，下面的例子就是演示多线程的时候，看看是不是出问题，结果没有。\n\n```python\nclass Singleton(object):\n    _instance = None\n    def __new__(cls, *args, **kw):\n        if not cls._instance:\n            cls._instance = super(Singleton, cls).__new__(cls, *args, **kw)  \n        return cls._instance  \n\nclass MyClass(Singleton):  \n    def __init__(self):\n        import time\n        time.sleep(1)\n\n\nimport threading\n\ndef task():\n    obj = MyClass()\n    print(obj)\n\nfor i in range(10):\n\tt = threading.Thread(target=task)\n\tt.start()\n\n```\n\n#### 使用装饰器\n\n装饰器（decorator）可以动态地修改一个类或函数的功能。\n\n```python\ndef singleton(cls, *args, **kw):\n    instance = {}\n    def get_singleton():\n        if cls not in instance:\n            instance[cls] = cls(*args, **kw)\n        return instance[cls]\n    return get_singleton\n\n\n@singleton\nclass TT(object):\n    def __init__(self):\n        self.num = 0\n    def add(self):\n        self.num = 100\n\n\nif __name__ == '__main__':\n    a = TT()\n    print(a.num)  # 0\n    a.add()\n    b = TT()\n    print(b.num)  # 100\n```\n\n虽然进行了两次实例化，但仍为同一个实例\n\n#### 使用 元类(metaclass)\n\n- 类由type创建，创建类时，type的__init__方法自动执行，类() 执行type的 __call__方法(类的__new__方法,类的__init__方法)\n- 对象由类创建，创建对象时，类的__init__方法自动执行，对象()执行类的 __call__ 方法\n\n\n```python\nimport threading\n\nclass SingletonType(type):\n    _instance_lock = threading.Lock()\n    def __call__(cls, *args, **kwargs):\n        if not hasattr(cls, \"_instance\"):\n            with SingletonType._instance_lock:\n                if not hasattr(cls, \"_instance\"):\n                    cls._instance = super(SingletonType,cls).__call__(*args, **kwargs)\n        return cls._instance\n\nclass Foo(metaclass=SingletonType):\n    def __init__(self,name):\n        self.name = name\n\n\nobj1 = Foo('name')\nobj2 = Foo('name')\nprint(obj1,obj2)\n```\n","source":"_posts/设计模式——单例模式.md","raw":"---\ntitle: 设计模式——单例模式\ndate: 2018-04-11\ntags: [设计模式]\n---\n\n# 单例模式\n\n## 核心作用\n\n保证一个类只有一个实例，并且提供一个访问该实例的全局访问点\n\n## 常见的应用场景\n\n- windows的Task Manager (任务管理器)就是很典型的单例模式\n- windows的回收站也是典型的单例应用，在整个系统运行过程中，回收站一直维持着仅有的一个实例\n- 项目中，读取配置文件的类，一般也只有一个对象，没有必要每次使用配置文件数据的时候都new一个对象去读取\n- 网站计数器，一般也是采用单例模式实现，否则难以同步\n- 应用程序的日志应用，一般采用单例模式实现，这一般是由于共享的日志文件一直处于打开状态，因为只能有一个实例去操作，否则内存不好追加。\n- 数据库连接池的设计一般也是采用的单例模式，因为数据库连接也是一种数据库资源\n- Python 的模块就是天然的单例模式，因为模块在第一次导入时，会生成 `.pyc` 文件，当第二次导入时，就会直接加载 `.pyc`文件，而不会再次执行模块代码\n\n## 单例模式的优点\n\n由于单例模式只生成一个实例，减少了系统性能开销，当一个对象的产生需要比较多的资源时，如读取配置、产生其他依赖对象时，则可以通过在应用启动时直接产生一个单例对象，然后永久驻留内存的方式来解决\n\n单例模式可以再系统设置全局的访问点，优化共享资源访问，例如可以设计一个单例类，负责所有数据表的映射处理\n\n## 常见的五种单例模式实现方式\n\n- 主要：\n  + 饿汉模式——单例对象立即加载(线程安全、调用效率高，但是不能延时加载)\n  - 懒汉模式(线程安全，调用效率不高，但是可以延时加载)\n- 其他：\n  + 双重检测锁式(Java不建议使用)\n  + 静态内部类式(线程安全，调用率高，同时也可以延时加载)\n  + 枚举单例(线程安全，调用效率高，不能延时加载)\n\n## 如何选用\n\n- 单例对象 占用 资源少，不要 延时加载：\n  + 枚举式 好于 饿汉式\n- 单例对象 占用 资源大，需要 延时加载：\n  + 静态内部类式 好于 懒汉式\n\n## python中单例模式的实现方式\n\n本来想整理一下，以上说的几种常见的单例实现模式在Python中的实现表现，但是感觉对Java和Python理解的深度不够，懵懵懂懂之间，不敢胡乱总结，只得贴一些python自己的实现方式，没法进行对比了。先继续学习，深入了解一些再回来整理。\n\n#### 使用模块\n\n**Python 的模块就是天然的单例模式，因为模块在第一次导入时，会生成 .pyc 文件，当第二次导入时，就会直接加载 .pyc 文件，而不会再次执行模块代码。** 因此，我们只需把相关的函数和数据定义在一个模块中，就可以获得一个单例对象了。如果我们真的想要一个单例类，可以考虑这样做：\n\n```python\n# mysingleton.py\nclass My_Singleton(object):\n    def foo(self):\n        pass\n\nmy_singleton = My_Singleton()\n\n\n# test.py\nfrom mysingleton import my_singleton\n\nmy_singleton.foo()\n```\n\n#### 使用 `__new__`\n\n使用 `__new__` 来控制实例的创建过程，这里没有线程的问题，下面的例子就是演示多线程的时候，看看是不是出问题，结果没有。\n\n```python\nclass Singleton(object):\n    _instance = None\n    def __new__(cls, *args, **kw):\n        if not cls._instance:\n            cls._instance = super(Singleton, cls).__new__(cls, *args, **kw)  \n        return cls._instance  \n\nclass MyClass(Singleton):  \n    def __init__(self):\n        import time\n        time.sleep(1)\n\n\nimport threading\n\ndef task():\n    obj = MyClass()\n    print(obj)\n\nfor i in range(10):\n\tt = threading.Thread(target=task)\n\tt.start()\n\n```\n\n#### 使用装饰器\n\n装饰器（decorator）可以动态地修改一个类或函数的功能。\n\n```python\ndef singleton(cls, *args, **kw):\n    instance = {}\n    def get_singleton():\n        if cls not in instance:\n            instance[cls] = cls(*args, **kw)\n        return instance[cls]\n    return get_singleton\n\n\n@singleton\nclass TT(object):\n    def __init__(self):\n        self.num = 0\n    def add(self):\n        self.num = 100\n\n\nif __name__ == '__main__':\n    a = TT()\n    print(a.num)  # 0\n    a.add()\n    b = TT()\n    print(b.num)  # 100\n```\n\n虽然进行了两次实例化，但仍为同一个实例\n\n#### 使用 元类(metaclass)\n\n- 类由type创建，创建类时，type的__init__方法自动执行，类() 执行type的 __call__方法(类的__new__方法,类的__init__方法)\n- 对象由类创建，创建对象时，类的__init__方法自动执行，对象()执行类的 __call__ 方法\n\n\n```python\nimport threading\n\nclass SingletonType(type):\n    _instance_lock = threading.Lock()\n    def __call__(cls, *args, **kwargs):\n        if not hasattr(cls, \"_instance\"):\n            with SingletonType._instance_lock:\n                if not hasattr(cls, \"_instance\"):\n                    cls._instance = super(SingletonType,cls).__call__(*args, **kwargs)\n        return cls._instance\n\nclass Foo(metaclass=SingletonType):\n    def __init__(self,name):\n        self.name = name\n\n\nobj1 = Foo('name')\nobj2 = Foo('name')\nprint(obj1,obj2)\n```\n","slug":"设计模式——单例模式","published":1,"updated":"2021-06-20T10:25:20.133Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluqa1hjm0057rloghp5qe56t","content":"<h1 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h1><h2 id=\"核心作用\"><a href=\"#核心作用\" class=\"headerlink\" title=\"核心作用\"></a>核心作用</h2><p>保证一个类只有一个实例，并且提供一个访问该实例的全局访问点</p>\n<h2 id=\"常见的应用场景\"><a href=\"#常见的应用场景\" class=\"headerlink\" title=\"常见的应用场景\"></a>常见的应用场景</h2><ul>\n<li>windows的Task Manager (任务管理器)就是很典型的单例模式</li>\n<li>windows的回收站也是典型的单例应用，在整个系统运行过程中，回收站一直维持着仅有的一个实例</li>\n<li>项目中，读取配置文件的类，一般也只有一个对象，没有必要每次使用配置文件数据的时候都new一个对象去读取</li>\n<li>网站计数器，一般也是采用单例模式实现，否则难以同步</li>\n<li>应用程序的日志应用，一般采用单例模式实现，这一般是由于共享的日志文件一直处于打开状态，因为只能有一个实例去操作，否则内存不好追加。</li>\n<li>数据库连接池的设计一般也是采用的单例模式，因为数据库连接也是一种数据库资源</li>\n<li>Python 的模块就是天然的单例模式，因为模块在第一次导入时，会生成 <code>.pyc</code> 文件，当第二次导入时，就会直接加载 <code>.pyc</code>文件，而不会再次执行模块代码</li>\n</ul>\n<h2 id=\"单例模式的优点\"><a href=\"#单例模式的优点\" class=\"headerlink\" title=\"单例模式的优点\"></a>单例模式的优点</h2><p>由于单例模式只生成一个实例，减少了系统性能开销，当一个对象的产生需要比较多的资源时，如读取配置、产生其他依赖对象时，则可以通过在应用启动时直接产生一个单例对象，然后永久驻留内存的方式来解决</p>\n<p>单例模式可以再系统设置全局的访问点，优化共享资源访问，例如可以设计一个单例类，负责所有数据表的映射处理</p>\n<h2 id=\"常见的五种单例模式实现方式\"><a href=\"#常见的五种单例模式实现方式\" class=\"headerlink\" title=\"常见的五种单例模式实现方式\"></a>常见的五种单例模式实现方式</h2><ul>\n<li>主要：<ul>\n<li>饿汉模式——单例对象立即加载(线程安全、调用效率高，但是不能延时加载)</li>\n</ul>\n<ul>\n<li>懒汉模式(线程安全，调用效率不高，但是可以延时加载)</li>\n</ul>\n</li>\n<li>其他：<ul>\n<li>双重检测锁式(Java不建议使用)</li>\n<li>静态内部类式(线程安全，调用率高，同时也可以延时加载)</li>\n<li>枚举单例(线程安全，调用效率高，不能延时加载)</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"如何选用\"><a href=\"#如何选用\" class=\"headerlink\" title=\"如何选用\"></a>如何选用</h2><ul>\n<li>单例对象 占用 资源少，不要 延时加载：<ul>\n<li>枚举式 好于 饿汉式</li>\n</ul>\n</li>\n<li>单例对象 占用 资源大，需要 延时加载：<ul>\n<li>静态内部类式 好于 懒汉式</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"python中单例模式的实现方式\"><a href=\"#python中单例模式的实现方式\" class=\"headerlink\" title=\"python中单例模式的实现方式\"></a>python中单例模式的实现方式</h2><p>本来想整理一下，以上说的几种常见的单例实现模式在Python中的实现表现，但是感觉对Java和Python理解的深度不够，懵懵懂懂之间，不敢胡乱总结，只得贴一些python自己的实现方式，没法进行对比了。先继续学习，深入了解一些再回来整理。</p>\n<h4 id=\"使用模块\"><a href=\"#使用模块\" class=\"headerlink\" title=\"使用模块\"></a>使用模块</h4><p><strong>Python 的模块就是天然的单例模式，因为模块在第一次导入时，会生成 .pyc 文件，当第二次导入时，就会直接加载 .pyc 文件，而不会再次执行模块代码。</strong> 因此，我们只需把相关的函数和数据定义在一个模块中，就可以获得一个单例对象了。如果我们真的想要一个单例类，可以考虑这样做：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># mysingleton.py</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">My_Singleton</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">foo</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">my_singleton = My_Singleton()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># test.py</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> mysingleton <span class=\"keyword\">import</span> my_singleton</span><br><span class=\"line\"></span><br><span class=\"line\">my_singleton.foo()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用-new\"><a href=\"#使用-new\" class=\"headerlink\" title=\"使用 __new__\"></a>使用 <code>__new__</code></h4><p>使用 <code>__new__</code> 来控制实例的创建过程，这里没有线程的问题，下面的例子就是演示多线程的时候，看看是不是出问题，结果没有。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Singleton</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">    _instance = <span class=\"literal\">None</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__new__</span>(<span class=\"params\">cls, *args, **kw</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> cls._instance:</span><br><span class=\"line\">            cls._instance = <span class=\"built_in\">super</span>(Singleton, cls).__new__(cls, *args, **kw)  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> cls._instance  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span>(<span class=\"title class_ inherited__\">Singleton</span>):  </span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">import</span> time</span><br><span class=\"line\">        time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">task</span>():</span><br><span class=\"line\">    obj = MyClass()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(obj)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>):</span><br><span class=\"line\">\tt = threading.Thread(target=task)</span><br><span class=\"line\">\tt.start()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用装饰器\"><a href=\"#使用装饰器\" class=\"headerlink\" title=\"使用装饰器\"></a>使用装饰器</h4><p>装饰器（decorator）可以动态地修改一个类或函数的功能。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">singleton</span>(<span class=\"params\">cls, *args, **kw</span>):</span><br><span class=\"line\">    instance = &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get_singleton</span>():</span><br><span class=\"line\">        <span class=\"keyword\">if</span> cls <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> instance:</span><br><span class=\"line\">            instance[cls] = cls(*args, **kw)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance[cls]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> get_singleton</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@singleton</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TT</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.num = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">add</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.num = <span class=\"number\">100</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    a = TT()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(a.num)  <span class=\"comment\"># 0</span></span><br><span class=\"line\">    a.add()</span><br><span class=\"line\">    b = TT()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(b.num)  <span class=\"comment\"># 100</span></span><br></pre></td></tr></table></figure>\n\n<p>虽然进行了两次实例化，但仍为同一个实例</p>\n<h4 id=\"使用-元类-metaclass\"><a href=\"#使用-元类-metaclass\" class=\"headerlink\" title=\"使用 元类(metaclass)\"></a>使用 元类(metaclass)</h4><ul>\n<li>类由type创建，创建类时，type的__init__方法自动执行，类() 执行type的 __call__方法(类的__new__方法,类的__init__方法)</li>\n<li>对象由类创建，创建对象时，类的__init__方法自动执行，对象()执行类的 <strong>call</strong> 方法</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SingletonType</span>(<span class=\"title class_ inherited__\">type</span>):</span><br><span class=\"line\">    _instance_lock = threading.Lock()</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__call__</span>(<span class=\"params\">cls, *args, **kwargs</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"built_in\">hasattr</span>(cls, <span class=\"string\">&quot;_instance&quot;</span>):</span><br><span class=\"line\">            <span class=\"keyword\">with</span> SingletonType._instance_lock:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"built_in\">hasattr</span>(cls, <span class=\"string\">&quot;_instance&quot;</span>):</span><br><span class=\"line\">                    cls._instance = <span class=\"built_in\">super</span>(SingletonType,cls).__call__(*args, **kwargs)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cls._instance</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Foo</span>(metaclass=SingletonType):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self,name</span>):</span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">obj1 = Foo(<span class=\"string\">&#x27;name&#x27;</span>)</span><br><span class=\"line\">obj2 = Foo(<span class=\"string\">&#x27;name&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(obj1,obj2)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h1><h2 id=\"核心作用\"><a href=\"#核心作用\" class=\"headerlink\" title=\"核心作用\"></a>核心作用</h2><p>保证一个类只有一个实例，并且提供一个访问该实例的全局访问点</p>\n<h2 id=\"常见的应用场景\"><a href=\"#常见的应用场景\" class=\"headerlink\" title=\"常见的应用场景\"></a>常见的应用场景</h2><ul>\n<li>windows的Task Manager (任务管理器)就是很典型的单例模式</li>\n<li>windows的回收站也是典型的单例应用，在整个系统运行过程中，回收站一直维持着仅有的一个实例</li>\n<li>项目中，读取配置文件的类，一般也只有一个对象，没有必要每次使用配置文件数据的时候都new一个对象去读取</li>\n<li>网站计数器，一般也是采用单例模式实现，否则难以同步</li>\n<li>应用程序的日志应用，一般采用单例模式实现，这一般是由于共享的日志文件一直处于打开状态，因为只能有一个实例去操作，否则内存不好追加。</li>\n<li>数据库连接池的设计一般也是采用的单例模式，因为数据库连接也是一种数据库资源</li>\n<li>Python 的模块就是天然的单例模式，因为模块在第一次导入时，会生成 <code>.pyc</code> 文件，当第二次导入时，就会直接加载 <code>.pyc</code>文件，而不会再次执行模块代码</li>\n</ul>\n<h2 id=\"单例模式的优点\"><a href=\"#单例模式的优点\" class=\"headerlink\" title=\"单例模式的优点\"></a>单例模式的优点</h2><p>由于单例模式只生成一个实例，减少了系统性能开销，当一个对象的产生需要比较多的资源时，如读取配置、产生其他依赖对象时，则可以通过在应用启动时直接产生一个单例对象，然后永久驻留内存的方式来解决</p>\n<p>单例模式可以再系统设置全局的访问点，优化共享资源访问，例如可以设计一个单例类，负责所有数据表的映射处理</p>\n<h2 id=\"常见的五种单例模式实现方式\"><a href=\"#常见的五种单例模式实现方式\" class=\"headerlink\" title=\"常见的五种单例模式实现方式\"></a>常见的五种单例模式实现方式</h2><ul>\n<li>主要：<ul>\n<li>饿汉模式——单例对象立即加载(线程安全、调用效率高，但是不能延时加载)</li>\n</ul>\n<ul>\n<li>懒汉模式(线程安全，调用效率不高，但是可以延时加载)</li>\n</ul>\n</li>\n<li>其他：<ul>\n<li>双重检测锁式(Java不建议使用)</li>\n<li>静态内部类式(线程安全，调用率高，同时也可以延时加载)</li>\n<li>枚举单例(线程安全，调用效率高，不能延时加载)</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"如何选用\"><a href=\"#如何选用\" class=\"headerlink\" title=\"如何选用\"></a>如何选用</h2><ul>\n<li>单例对象 占用 资源少，不要 延时加载：<ul>\n<li>枚举式 好于 饿汉式</li>\n</ul>\n</li>\n<li>单例对象 占用 资源大，需要 延时加载：<ul>\n<li>静态内部类式 好于 懒汉式</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"python中单例模式的实现方式\"><a href=\"#python中单例模式的实现方式\" class=\"headerlink\" title=\"python中单例模式的实现方式\"></a>python中单例模式的实现方式</h2><p>本来想整理一下，以上说的几种常见的单例实现模式在Python中的实现表现，但是感觉对Java和Python理解的深度不够，懵懵懂懂之间，不敢胡乱总结，只得贴一些python自己的实现方式，没法进行对比了。先继续学习，深入了解一些再回来整理。</p>\n<h4 id=\"使用模块\"><a href=\"#使用模块\" class=\"headerlink\" title=\"使用模块\"></a>使用模块</h4><p><strong>Python 的模块就是天然的单例模式，因为模块在第一次导入时，会生成 .pyc 文件，当第二次导入时，就会直接加载 .pyc 文件，而不会再次执行模块代码。</strong> 因此，我们只需把相关的函数和数据定义在一个模块中，就可以获得一个单例对象了。如果我们真的想要一个单例类，可以考虑这样做：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># mysingleton.py</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">My_Singleton</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">foo</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">my_singleton = My_Singleton()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># test.py</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> mysingleton <span class=\"keyword\">import</span> my_singleton</span><br><span class=\"line\"></span><br><span class=\"line\">my_singleton.foo()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用-new\"><a href=\"#使用-new\" class=\"headerlink\" title=\"使用 __new__\"></a>使用 <code>__new__</code></h4><p>使用 <code>__new__</code> 来控制实例的创建过程，这里没有线程的问题，下面的例子就是演示多线程的时候，看看是不是出问题，结果没有。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Singleton</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">    _instance = <span class=\"literal\">None</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__new__</span>(<span class=\"params\">cls, *args, **kw</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> cls._instance:</span><br><span class=\"line\">            cls._instance = <span class=\"built_in\">super</span>(Singleton, cls).__new__(cls, *args, **kw)  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> cls._instance  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span>(<span class=\"title class_ inherited__\">Singleton</span>):  </span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">import</span> time</span><br><span class=\"line\">        time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">task</span>():</span><br><span class=\"line\">    obj = MyClass()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(obj)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>):</span><br><span class=\"line\">\tt = threading.Thread(target=task)</span><br><span class=\"line\">\tt.start()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用装饰器\"><a href=\"#使用装饰器\" class=\"headerlink\" title=\"使用装饰器\"></a>使用装饰器</h4><p>装饰器（decorator）可以动态地修改一个类或函数的功能。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">singleton</span>(<span class=\"params\">cls, *args, **kw</span>):</span><br><span class=\"line\">    instance = &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get_singleton</span>():</span><br><span class=\"line\">        <span class=\"keyword\">if</span> cls <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> instance:</span><br><span class=\"line\">            instance[cls] = cls(*args, **kw)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance[cls]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> get_singleton</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@singleton</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TT</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.num = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">add</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.num = <span class=\"number\">100</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    a = TT()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(a.num)  <span class=\"comment\"># 0</span></span><br><span class=\"line\">    a.add()</span><br><span class=\"line\">    b = TT()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(b.num)  <span class=\"comment\"># 100</span></span><br></pre></td></tr></table></figure>\n\n<p>虽然进行了两次实例化，但仍为同一个实例</p>\n<h4 id=\"使用-元类-metaclass\"><a href=\"#使用-元类-metaclass\" class=\"headerlink\" title=\"使用 元类(metaclass)\"></a>使用 元类(metaclass)</h4><ul>\n<li>类由type创建，创建类时，type的__init__方法自动执行，类() 执行type的 __call__方法(类的__new__方法,类的__init__方法)</li>\n<li>对象由类创建，创建对象时，类的__init__方法自动执行，对象()执行类的 <strong>call</strong> 方法</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SingletonType</span>(<span class=\"title class_ inherited__\">type</span>):</span><br><span class=\"line\">    _instance_lock = threading.Lock()</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__call__</span>(<span class=\"params\">cls, *args, **kwargs</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"built_in\">hasattr</span>(cls, <span class=\"string\">&quot;_instance&quot;</span>):</span><br><span class=\"line\">            <span class=\"keyword\">with</span> SingletonType._instance_lock:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"built_in\">hasattr</span>(cls, <span class=\"string\">&quot;_instance&quot;</span>):</span><br><span class=\"line\">                    cls._instance = <span class=\"built_in\">super</span>(SingletonType,cls).__call__(*args, **kwargs)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cls._instance</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Foo</span>(metaclass=SingletonType):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self,name</span>):</span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">obj1 = Foo(<span class=\"string\">&#x27;name&#x27;</span>)</span><br><span class=\"line\">obj2 = Foo(<span class=\"string\">&#x27;name&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(obj1,obj2)</span><br></pre></td></tr></table></figure>\n"},{"title":"迈迪和数为两家公司面经及感想","date":"2018-02-28T16:00:00.000Z","_content":"\n这两天分别面试了迈迪和数为两家公司，这两家公司都没有我讨厌的笔试，所以面试的结果都不错，这不，心情倍好，吃鸡啦！\n\n## 面试迈迪\n\n今天(2018-02-28)面试了迈迪（浙江迈迪信息技术公司），这是我面试的第一家(虽然也没有面试几家呢)没有python笔试，也没有其他乱七八糟的事！直接和你聊项目的，我很喜欢！这也是第一家谈妥的公司，心里很是高兴！\n\n<!--more-->\n\n和迈迪约得是下午一点之后的面试，我12点从驻地出发，到达公司大概1:20左右，稍微等了一会，HR让我填了一个表，填完之后再等了一小会，来了一个面试官，将我带到会议室，这个面试官是带着电脑的。\n\n面试开始，让我先自我介绍，，然后针对简历的项目进行了简单的提问，用电脑打开我的作品，这是第一个看作品的面试官，人很nice。我说了很多关于项目的事，面试官很是肯定我的能力。面试官问的差不多了，问我有啥想问的？嘿嘿，那我的机会来了！“公司用python做什么？”，“这个项目的开发力量有多大？”，“项目的前景怎么样？”等，面试官一一作了解答，在解答的过程中，我就开始牛逼啦，加入自己的经验和以前开发或使用的东西不断的向面试官说明我很厉害呦，，面试官的赞赏也是源源不断的，直接就代替HR了，直接和我聊公司的福利和前景了，给我传递的信号就是：公司不差钱，你不错，我们缺人才，赶紧来吧！嘿嘿，心中窃喜！聊了一会，差不多面试就结束了，问我什么时候能入职，（我填的那一张表上写的入职日期是3.5日）我说回去想想，思考一下！最后他说他通知HR关于offer的事，整个面试就结束了！\n\n总结一下，整个面试过程中，开始的时候有点紧张，到后来说项目的时候，紧张感就不在了。把自己知道的会的都一一展现给面试官就可以了，只要没有讨厌的笔试，我都不担心！很高兴，收获了第一个offer，这是对我的肯定，这也是重大的激励！很感谢迈迪，很感谢给这次机会以及肯定！但是毕竟是第一份工作，容我再思量思量，这里假装@面试官和HR。\n\n\n## 面试数为\n\n三月的第一天面试了数为（杭州数为科技有限公司），公司的地址在下沙新加坡科技园，从住的地方辗转的公司，大约一个多小时，和他们CTO约的是中午12点前，赶到公司的时候，差几分钟就到12点了！公司应该是吃午饭的时间，打扰了HR和CTO吃饭的时间，很是抱歉但是也没有办法的事情！依旧入门签到、稍坐等待、填表，然后开始面试，当然也没有讨厌的笔试环节。公司环境还可以，这等会说，先说面试的事：\n\n首先开了一个漂亮的小姐姐，一看就明白，这是HR。第一次和HR过手，心中很是忐忑！这不一出手就是大招：自我介绍！\n\n自我介绍做的有点凌乱，但是好歹是说完了，HR没有深究，然后接着放大招：“为什么来杭州呢”、“为什么没有选择上海”？我的回答核心点是：“我喜欢西湖美景，喜欢杭州可以玩耍的地方很多！”当然这也是我的实际情况，选择杭州就冲着西湖的美景来得，虽然来了几天哪也没有时间去，但是不能阻止我对西湖美景的憧憬！\n\n然后又是大招：“来杭州面试了吗？”、“面试拿了offer了吗？”、“你想找一家什么样的公司？”、“你了解我们公司吗？你觉得我们公司怎么样？”。这一部分就步步紧逼啦，了解我目前的状态和对公司的了解，这一部分的问题是一步接着一步的：“有面试，面试了两家，拿了一个offer。。。巴拉巴拉对获得off二那家公司的一些想法，对公司的产品了解和产品期望等等！”，说了半天，表现出我选择你们公司是经过慎重考虑的！\n\n之后又转到生活，问有没有女朋友，女朋友在哪，女朋友干什么的，，等这些问题问的是稳定性吧。后面又问题公司是单休能否接受，和一般人的实习工资等问题。HR面试到这里差不多结束了。总体来说，第一次面对HR，说的都是实事求是，问题都思考了一下回答，没有对错之分，只有合适不合适之说！\n\nHR面试结束了，开始了技术面，技术面当然主要以项目为主，而且没有为难我，让我发挥的地方比较多，比如让我将自己提到的概念在实际中的应用：微信开发和web开发、web安全、敏捷开发和瀑布式开发等。换句话说，没有详细的落到底层，更多的考察的是业务分析能力和处理能力！在技术面的时候，CTO说，如果提前知道我是应届生，就不通知我过来了！解释道不是看不起，也不是说成本低啥的，而是为了追求一个更好的开发团队，团队中现在都是有经验的，希望应聘的也能够上手项目的，但是面试我觉得还可以，觉得应届生有这个能力已经很不错了，问我啥时候能入职，并给我谈了实习工资的问题，但是由于能力的不确定，正式工资等转正之后再谈！这样整个面试就结束了，整体来说给我的感觉还是挺好的！\n\n总结一下，整个面试过程中，发挥的还算正常，正确的说公司并没有故意刁难，真心想招人！\n\n## 这两天面试总结\n\n这两天面试很舒服，感觉面试的公司是真的想招人，没有在一些没用的东西上考你，直接看你的分析问题能力和业务能力，与技术聊得时候，技术也都是项目的负责人在项目中有绝对的领导地位，在面试的时候感觉HR那边反而不是问题了，这边已然做主了。在思考中，哪家公司更适合我，和接下来的动作！\n\n反思一下：\n\n- 自我介绍有点慌乱，需要好好整理一下\n- 对项目解释的不够简练\n- 提问工资等问题的时候思考的太片面\n\n需要好好整理一下，同时那些面试的基础知识还要准备着，说不定还有讨厌的笔试！\n","source":"_posts/迈迪和数为两家公司面经及感想.md","raw":"---\ntitle: 迈迪和数为两家公司面经及感想\ndate: 2018-03-01\ntags: [面经]\n---\n\n这两天分别面试了迈迪和数为两家公司，这两家公司都没有我讨厌的笔试，所以面试的结果都不错，这不，心情倍好，吃鸡啦！\n\n## 面试迈迪\n\n今天(2018-02-28)面试了迈迪（浙江迈迪信息技术公司），这是我面试的第一家(虽然也没有面试几家呢)没有python笔试，也没有其他乱七八糟的事！直接和你聊项目的，我很喜欢！这也是第一家谈妥的公司，心里很是高兴！\n\n<!--more-->\n\n和迈迪约得是下午一点之后的面试，我12点从驻地出发，到达公司大概1:20左右，稍微等了一会，HR让我填了一个表，填完之后再等了一小会，来了一个面试官，将我带到会议室，这个面试官是带着电脑的。\n\n面试开始，让我先自我介绍，，然后针对简历的项目进行了简单的提问，用电脑打开我的作品，这是第一个看作品的面试官，人很nice。我说了很多关于项目的事，面试官很是肯定我的能力。面试官问的差不多了，问我有啥想问的？嘿嘿，那我的机会来了！“公司用python做什么？”，“这个项目的开发力量有多大？”，“项目的前景怎么样？”等，面试官一一作了解答，在解答的过程中，我就开始牛逼啦，加入自己的经验和以前开发或使用的东西不断的向面试官说明我很厉害呦，，面试官的赞赏也是源源不断的，直接就代替HR了，直接和我聊公司的福利和前景了，给我传递的信号就是：公司不差钱，你不错，我们缺人才，赶紧来吧！嘿嘿，心中窃喜！聊了一会，差不多面试就结束了，问我什么时候能入职，（我填的那一张表上写的入职日期是3.5日）我说回去想想，思考一下！最后他说他通知HR关于offer的事，整个面试就结束了！\n\n总结一下，整个面试过程中，开始的时候有点紧张，到后来说项目的时候，紧张感就不在了。把自己知道的会的都一一展现给面试官就可以了，只要没有讨厌的笔试，我都不担心！很高兴，收获了第一个offer，这是对我的肯定，这也是重大的激励！很感谢迈迪，很感谢给这次机会以及肯定！但是毕竟是第一份工作，容我再思量思量，这里假装@面试官和HR。\n\n\n## 面试数为\n\n三月的第一天面试了数为（杭州数为科技有限公司），公司的地址在下沙新加坡科技园，从住的地方辗转的公司，大约一个多小时，和他们CTO约的是中午12点前，赶到公司的时候，差几分钟就到12点了！公司应该是吃午饭的时间，打扰了HR和CTO吃饭的时间，很是抱歉但是也没有办法的事情！依旧入门签到、稍坐等待、填表，然后开始面试，当然也没有讨厌的笔试环节。公司环境还可以，这等会说，先说面试的事：\n\n首先开了一个漂亮的小姐姐，一看就明白，这是HR。第一次和HR过手，心中很是忐忑！这不一出手就是大招：自我介绍！\n\n自我介绍做的有点凌乱，但是好歹是说完了，HR没有深究，然后接着放大招：“为什么来杭州呢”、“为什么没有选择上海”？我的回答核心点是：“我喜欢西湖美景，喜欢杭州可以玩耍的地方很多！”当然这也是我的实际情况，选择杭州就冲着西湖的美景来得，虽然来了几天哪也没有时间去，但是不能阻止我对西湖美景的憧憬！\n\n然后又是大招：“来杭州面试了吗？”、“面试拿了offer了吗？”、“你想找一家什么样的公司？”、“你了解我们公司吗？你觉得我们公司怎么样？”。这一部分就步步紧逼啦，了解我目前的状态和对公司的了解，这一部分的问题是一步接着一步的：“有面试，面试了两家，拿了一个offer。。。巴拉巴拉对获得off二那家公司的一些想法，对公司的产品了解和产品期望等等！”，说了半天，表现出我选择你们公司是经过慎重考虑的！\n\n之后又转到生活，问有没有女朋友，女朋友在哪，女朋友干什么的，，等这些问题问的是稳定性吧。后面又问题公司是单休能否接受，和一般人的实习工资等问题。HR面试到这里差不多结束了。总体来说，第一次面对HR，说的都是实事求是，问题都思考了一下回答，没有对错之分，只有合适不合适之说！\n\nHR面试结束了，开始了技术面，技术面当然主要以项目为主，而且没有为难我，让我发挥的地方比较多，比如让我将自己提到的概念在实际中的应用：微信开发和web开发、web安全、敏捷开发和瀑布式开发等。换句话说，没有详细的落到底层，更多的考察的是业务分析能力和处理能力！在技术面的时候，CTO说，如果提前知道我是应届生，就不通知我过来了！解释道不是看不起，也不是说成本低啥的，而是为了追求一个更好的开发团队，团队中现在都是有经验的，希望应聘的也能够上手项目的，但是面试我觉得还可以，觉得应届生有这个能力已经很不错了，问我啥时候能入职，并给我谈了实习工资的问题，但是由于能力的不确定，正式工资等转正之后再谈！这样整个面试就结束了，整体来说给我的感觉还是挺好的！\n\n总结一下，整个面试过程中，发挥的还算正常，正确的说公司并没有故意刁难，真心想招人！\n\n## 这两天面试总结\n\n这两天面试很舒服，感觉面试的公司是真的想招人，没有在一些没用的东西上考你，直接看你的分析问题能力和业务能力，与技术聊得时候，技术也都是项目的负责人在项目中有绝对的领导地位，在面试的时候感觉HR那边反而不是问题了，这边已然做主了。在思考中，哪家公司更适合我，和接下来的动作！\n\n反思一下：\n\n- 自我介绍有点慌乱，需要好好整理一下\n- 对项目解释的不够简练\n- 提问工资等问题的时候思考的太片面\n\n需要好好整理一下，同时那些面试的基础知识还要准备着，说不定还有讨厌的笔试！\n","slug":"迈迪和数为两家公司面经及感想","published":1,"updated":"2021-06-20T10:25:20.134Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluqa1hjm005arlog3w9hbcbc","content":"<p>这两天分别面试了迈迪和数为两家公司，这两家公司都没有我讨厌的笔试，所以面试的结果都不错，这不，心情倍好，吃鸡啦！</p>\n<h2 id=\"面试迈迪\"><a href=\"#面试迈迪\" class=\"headerlink\" title=\"面试迈迪\"></a>面试迈迪</h2><p>今天(2018-02-28)面试了迈迪（浙江迈迪信息技术公司），这是我面试的第一家(虽然也没有面试几家呢)没有python笔试，也没有其他乱七八糟的事！直接和你聊项目的，我很喜欢！这也是第一家谈妥的公司，心里很是高兴！</p>\n<span id=\"more\"></span>\n\n<p>和迈迪约得是下午一点之后的面试，我12点从驻地出发，到达公司大概1:20左右，稍微等了一会，HR让我填了一个表，填完之后再等了一小会，来了一个面试官，将我带到会议室，这个面试官是带着电脑的。</p>\n<p>面试开始，让我先自我介绍，，然后针对简历的项目进行了简单的提问，用电脑打开我的作品，这是第一个看作品的面试官，人很nice。我说了很多关于项目的事，面试官很是肯定我的能力。面试官问的差不多了，问我有啥想问的？嘿嘿，那我的机会来了！“公司用python做什么？”，“这个项目的开发力量有多大？”，“项目的前景怎么样？”等，面试官一一作了解答，在解答的过程中，我就开始牛逼啦，加入自己的经验和以前开发或使用的东西不断的向面试官说明我很厉害呦，，面试官的赞赏也是源源不断的，直接就代替HR了，直接和我聊公司的福利和前景了，给我传递的信号就是：公司不差钱，你不错，我们缺人才，赶紧来吧！嘿嘿，心中窃喜！聊了一会，差不多面试就结束了，问我什么时候能入职，（我填的那一张表上写的入职日期是3.5日）我说回去想想，思考一下！最后他说他通知HR关于offer的事，整个面试就结束了！</p>\n<p>总结一下，整个面试过程中，开始的时候有点紧张，到后来说项目的时候，紧张感就不在了。把自己知道的会的都一一展现给面试官就可以了，只要没有讨厌的笔试，我都不担心！很高兴，收获了第一个offer，这是对我的肯定，这也是重大的激励！很感谢迈迪，很感谢给这次机会以及肯定！但是毕竟是第一份工作，容我再思量思量，这里假装@面试官和HR。</p>\n<h2 id=\"面试数为\"><a href=\"#面试数为\" class=\"headerlink\" title=\"面试数为\"></a>面试数为</h2><p>三月的第一天面试了数为（杭州数为科技有限公司），公司的地址在下沙新加坡科技园，从住的地方辗转的公司，大约一个多小时，和他们CTO约的是中午12点前，赶到公司的时候，差几分钟就到12点了！公司应该是吃午饭的时间，打扰了HR和CTO吃饭的时间，很是抱歉但是也没有办法的事情！依旧入门签到、稍坐等待、填表，然后开始面试，当然也没有讨厌的笔试环节。公司环境还可以，这等会说，先说面试的事：</p>\n<p>首先开了一个漂亮的小姐姐，一看就明白，这是HR。第一次和HR过手，心中很是忐忑！这不一出手就是大招：自我介绍！</p>\n<p>自我介绍做的有点凌乱，但是好歹是说完了，HR没有深究，然后接着放大招：“为什么来杭州呢”、“为什么没有选择上海”？我的回答核心点是：“我喜欢西湖美景，喜欢杭州可以玩耍的地方很多！”当然这也是我的实际情况，选择杭州就冲着西湖的美景来得，虽然来了几天哪也没有时间去，但是不能阻止我对西湖美景的憧憬！</p>\n<p>然后又是大招：“来杭州面试了吗？”、“面试拿了offer了吗？”、“你想找一家什么样的公司？”、“你了解我们公司吗？你觉得我们公司怎么样？”。这一部分就步步紧逼啦，了解我目前的状态和对公司的了解，这一部分的问题是一步接着一步的：“有面试，面试了两家，拿了一个offer。。。巴拉巴拉对获得off二那家公司的一些想法，对公司的产品了解和产品期望等等！”，说了半天，表现出我选择你们公司是经过慎重考虑的！</p>\n<p>之后又转到生活，问有没有女朋友，女朋友在哪，女朋友干什么的，，等这些问题问的是稳定性吧。后面又问题公司是单休能否接受，和一般人的实习工资等问题。HR面试到这里差不多结束了。总体来说，第一次面对HR，说的都是实事求是，问题都思考了一下回答，没有对错之分，只有合适不合适之说！</p>\n<p>HR面试结束了，开始了技术面，技术面当然主要以项目为主，而且没有为难我，让我发挥的地方比较多，比如让我将自己提到的概念在实际中的应用：微信开发和web开发、web安全、敏捷开发和瀑布式开发等。换句话说，没有详细的落到底层，更多的考察的是业务分析能力和处理能力！在技术面的时候，CTO说，如果提前知道我是应届生，就不通知我过来了！解释道不是看不起，也不是说成本低啥的，而是为了追求一个更好的开发团队，团队中现在都是有经验的，希望应聘的也能够上手项目的，但是面试我觉得还可以，觉得应届生有这个能力已经很不错了，问我啥时候能入职，并给我谈了实习工资的问题，但是由于能力的不确定，正式工资等转正之后再谈！这样整个面试就结束了，整体来说给我的感觉还是挺好的！</p>\n<p>总结一下，整个面试过程中，发挥的还算正常，正确的说公司并没有故意刁难，真心想招人！</p>\n<h2 id=\"这两天面试总结\"><a href=\"#这两天面试总结\" class=\"headerlink\" title=\"这两天面试总结\"></a>这两天面试总结</h2><p>这两天面试很舒服，感觉面试的公司是真的想招人，没有在一些没用的东西上考你，直接看你的分析问题能力和业务能力，与技术聊得时候，技术也都是项目的负责人在项目中有绝对的领导地位，在面试的时候感觉HR那边反而不是问题了，这边已然做主了。在思考中，哪家公司更适合我，和接下来的动作！</p>\n<p>反思一下：</p>\n<ul>\n<li>自我介绍有点慌乱，需要好好整理一下</li>\n<li>对项目解释的不够简练</li>\n<li>提问工资等问题的时候思考的太片面</li>\n</ul>\n<p>需要好好整理一下，同时那些面试的基础知识还要准备着，说不定还有讨厌的笔试！</p>\n","site":{"data":{}},"excerpt":"<p>这两天分别面试了迈迪和数为两家公司，这两家公司都没有我讨厌的笔试，所以面试的结果都不错，这不，心情倍好，吃鸡啦！</p>\n<h2 id=\"面试迈迪\"><a href=\"#面试迈迪\" class=\"headerlink\" title=\"面试迈迪\"></a>面试迈迪</h2><p>今天(2018-02-28)面试了迈迪（浙江迈迪信息技术公司），这是我面试的第一家(虽然也没有面试几家呢)没有python笔试，也没有其他乱七八糟的事！直接和你聊项目的，我很喜欢！这也是第一家谈妥的公司，心里很是高兴！</p>","more":"<p>和迈迪约得是下午一点之后的面试，我12点从驻地出发，到达公司大概1:20左右，稍微等了一会，HR让我填了一个表，填完之后再等了一小会，来了一个面试官，将我带到会议室，这个面试官是带着电脑的。</p>\n<p>面试开始，让我先自我介绍，，然后针对简历的项目进行了简单的提问，用电脑打开我的作品，这是第一个看作品的面试官，人很nice。我说了很多关于项目的事，面试官很是肯定我的能力。面试官问的差不多了，问我有啥想问的？嘿嘿，那我的机会来了！“公司用python做什么？”，“这个项目的开发力量有多大？”，“项目的前景怎么样？”等，面试官一一作了解答，在解答的过程中，我就开始牛逼啦，加入自己的经验和以前开发或使用的东西不断的向面试官说明我很厉害呦，，面试官的赞赏也是源源不断的，直接就代替HR了，直接和我聊公司的福利和前景了，给我传递的信号就是：公司不差钱，你不错，我们缺人才，赶紧来吧！嘿嘿，心中窃喜！聊了一会，差不多面试就结束了，问我什么时候能入职，（我填的那一张表上写的入职日期是3.5日）我说回去想想，思考一下！最后他说他通知HR关于offer的事，整个面试就结束了！</p>\n<p>总结一下，整个面试过程中，开始的时候有点紧张，到后来说项目的时候，紧张感就不在了。把自己知道的会的都一一展现给面试官就可以了，只要没有讨厌的笔试，我都不担心！很高兴，收获了第一个offer，这是对我的肯定，这也是重大的激励！很感谢迈迪，很感谢给这次机会以及肯定！但是毕竟是第一份工作，容我再思量思量，这里假装@面试官和HR。</p>\n<h2 id=\"面试数为\"><a href=\"#面试数为\" class=\"headerlink\" title=\"面试数为\"></a>面试数为</h2><p>三月的第一天面试了数为（杭州数为科技有限公司），公司的地址在下沙新加坡科技园，从住的地方辗转的公司，大约一个多小时，和他们CTO约的是中午12点前，赶到公司的时候，差几分钟就到12点了！公司应该是吃午饭的时间，打扰了HR和CTO吃饭的时间，很是抱歉但是也没有办法的事情！依旧入门签到、稍坐等待、填表，然后开始面试，当然也没有讨厌的笔试环节。公司环境还可以，这等会说，先说面试的事：</p>\n<p>首先开了一个漂亮的小姐姐，一看就明白，这是HR。第一次和HR过手，心中很是忐忑！这不一出手就是大招：自我介绍！</p>\n<p>自我介绍做的有点凌乱，但是好歹是说完了，HR没有深究，然后接着放大招：“为什么来杭州呢”、“为什么没有选择上海”？我的回答核心点是：“我喜欢西湖美景，喜欢杭州可以玩耍的地方很多！”当然这也是我的实际情况，选择杭州就冲着西湖的美景来得，虽然来了几天哪也没有时间去，但是不能阻止我对西湖美景的憧憬！</p>\n<p>然后又是大招：“来杭州面试了吗？”、“面试拿了offer了吗？”、“你想找一家什么样的公司？”、“你了解我们公司吗？你觉得我们公司怎么样？”。这一部分就步步紧逼啦，了解我目前的状态和对公司的了解，这一部分的问题是一步接着一步的：“有面试，面试了两家，拿了一个offer。。。巴拉巴拉对获得off二那家公司的一些想法，对公司的产品了解和产品期望等等！”，说了半天，表现出我选择你们公司是经过慎重考虑的！</p>\n<p>之后又转到生活，问有没有女朋友，女朋友在哪，女朋友干什么的，，等这些问题问的是稳定性吧。后面又问题公司是单休能否接受，和一般人的实习工资等问题。HR面试到这里差不多结束了。总体来说，第一次面对HR，说的都是实事求是，问题都思考了一下回答，没有对错之分，只有合适不合适之说！</p>\n<p>HR面试结束了，开始了技术面，技术面当然主要以项目为主，而且没有为难我，让我发挥的地方比较多，比如让我将自己提到的概念在实际中的应用：微信开发和web开发、web安全、敏捷开发和瀑布式开发等。换句话说，没有详细的落到底层，更多的考察的是业务分析能力和处理能力！在技术面的时候，CTO说，如果提前知道我是应届生，就不通知我过来了！解释道不是看不起，也不是说成本低啥的，而是为了追求一个更好的开发团队，团队中现在都是有经验的，希望应聘的也能够上手项目的，但是面试我觉得还可以，觉得应届生有这个能力已经很不错了，问我啥时候能入职，并给我谈了实习工资的问题，但是由于能力的不确定，正式工资等转正之后再谈！这样整个面试就结束了，整体来说给我的感觉还是挺好的！</p>\n<p>总结一下，整个面试过程中，发挥的还算正常，正确的说公司并没有故意刁难，真心想招人！</p>\n<h2 id=\"这两天面试总结\"><a href=\"#这两天面试总结\" class=\"headerlink\" title=\"这两天面试总结\"></a>这两天面试总结</h2><p>这两天面试很舒服，感觉面试的公司是真的想招人，没有在一些没用的东西上考你，直接看你的分析问题能力和业务能力，与技术聊得时候，技术也都是项目的负责人在项目中有绝对的领导地位，在面试的时候感觉HR那边反而不是问题了，这边已然做主了。在思考中，哪家公司更适合我，和接下来的动作！</p>\n<p>反思一下：</p>\n<ul>\n<li>自我介绍有点慌乱，需要好好整理一下</li>\n<li>对项目解释的不够简练</li>\n<li>提问工资等问题的时候思考的太片面</li>\n</ul>\n<p>需要好好整理一下，同时那些面试的基础知识还要准备着，说不定还有讨厌的笔试！</p>"},{"title":"读书计划","date":"2019-01-22T16:00:00.000Z","_content":"\n> 认真，坚持，静心\n\n---\n\n209-01-31\n\n《程序员代码面试指南》\n- ~~《大话设计模式》~~\n\n---\n\n2018-12-31\n\n- ~~《流畅的python》~~  注：第16、17 、18章暂时跳过，关于协程的部分。\n- ~~《SQL必知必会》~~\n- ~~《Python3学习笔记(上)》~~\n\n---\n\n- ~~《用户故事地图》~~\n- 《利用Python进行数据分析》\n\n\n---\n\n2017-11-19\n\n\n- 《图解HTTP》\n- ~~《WEB性能权威指南》~~\n- 《Redis入门指南》\n- ~~《修改软件的艺术》~~ [阅读笔记](https://suadminwen.github.io/2017/11/24/%E4%BF%AE%E6%94%B9%E8%BD%AF%E4%BB%B6%E7%9A%84%E8%89%BA%E6%9C%AF%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E5%8F%8A%E6%80%9D%E8%80%83/)\n\n<!--more-->\n\n---\n2017-10-某\n\n- 《Node.js开发实战》\n\n- ~~《JavaScript核心概念及实践》~~\n- ~~《你不知道的JavaScript上卷》~~\n\n- ~~《python核心编程》~~ [阅读笔记](https://suadminwen.github.io/2017/08/06/python%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/)\n- 《你不知道的JavaScript中卷》[阅读笔记](https://suadminwen.github.io/2017/08/09/你不知道的javascript中卷阅读笔记/)\n\n- ~~《JavaScript DOM 编程艺术(第2版)》~~ [阅读笔记](https://suadminwen.github.io/2017/07/24/JavaScript%20DOM%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/)\n- 《python WEB开发实战》\n\n- ~~《精通python设计模式》~~\n- ~~《python基础教程(第二版)》~~\n- ……\n","source":"_posts/读书计划.md","raw":"---\ntitle: 读书计划\ndate: 2019-1-23\ntags: [阅读笔记]\n---\n\n> 认真，坚持，静心\n\n---\n\n209-01-31\n\n《程序员代码面试指南》\n- ~~《大话设计模式》~~\n\n---\n\n2018-12-31\n\n- ~~《流畅的python》~~  注：第16、17 、18章暂时跳过，关于协程的部分。\n- ~~《SQL必知必会》~~\n- ~~《Python3学习笔记(上)》~~\n\n---\n\n- ~~《用户故事地图》~~\n- 《利用Python进行数据分析》\n\n\n---\n\n2017-11-19\n\n\n- 《图解HTTP》\n- ~~《WEB性能权威指南》~~\n- 《Redis入门指南》\n- ~~《修改软件的艺术》~~ [阅读笔记](https://suadminwen.github.io/2017/11/24/%E4%BF%AE%E6%94%B9%E8%BD%AF%E4%BB%B6%E7%9A%84%E8%89%BA%E6%9C%AF%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E5%8F%8A%E6%80%9D%E8%80%83/)\n\n<!--more-->\n\n---\n2017-10-某\n\n- 《Node.js开发实战》\n\n- ~~《JavaScript核心概念及实践》~~\n- ~~《你不知道的JavaScript上卷》~~\n\n- ~~《python核心编程》~~ [阅读笔记](https://suadminwen.github.io/2017/08/06/python%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/)\n- 《你不知道的JavaScript中卷》[阅读笔记](https://suadminwen.github.io/2017/08/09/你不知道的javascript中卷阅读笔记/)\n\n- ~~《JavaScript DOM 编程艺术(第2版)》~~ [阅读笔记](https://suadminwen.github.io/2017/07/24/JavaScript%20DOM%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/)\n- 《python WEB开发实战》\n\n- ~~《精通python设计模式》~~\n- ~~《python基础教程(第二版)》~~\n- ……\n","slug":"读书计划","published":1,"updated":"2021-06-20T10:25:20.133Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluqa1hjn005crloga67l15p9","content":"<blockquote>\n<p>认真，坚持，静心</p>\n</blockquote>\n<hr>\n<p>209-01-31</p>\n<p>《程序员代码面试指南》</p>\n<ul>\n<li><del>《大话设计模式》</del></li>\n</ul>\n<hr>\n<p>2018-12-31</p>\n<ul>\n<li><del>《流畅的python》</del>  注：第16、17 、18章暂时跳过，关于协程的部分。</li>\n<li><del>《SQL必知必会》</del></li>\n<li><del>《Python3学习笔记(上)》</del></li>\n</ul>\n<hr>\n<ul>\n<li><del>《用户故事地图》</del></li>\n<li>《利用Python进行数据分析》</li>\n</ul>\n<hr>\n<p>2017-11-19</p>\n<ul>\n<li>《图解HTTP》</li>\n<li><del>《WEB性能权威指南》</del></li>\n<li>《Redis入门指南》</li>\n<li><del>《修改软件的艺术》</del> <a href=\"https://suadminwen.github.io/2017/11/24/%E4%BF%AE%E6%94%B9%E8%BD%AF%E4%BB%B6%E7%9A%84%E8%89%BA%E6%9C%AF%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E5%8F%8A%E6%80%9D%E8%80%83/\">阅读笔记</a></li>\n</ul>\n<span id=\"more\"></span>\n\n<hr>\n<p>2017-10-某</p>\n<ul>\n<li><p>《Node.js开发实战》</p>\n</li>\n<li><p><del>《JavaScript核心概念及实践》</del></p>\n</li>\n<li><p><del>《你不知道的JavaScript上卷》</del></p>\n</li>\n<li><p><del>《python核心编程》</del> <a href=\"https://suadminwen.github.io/2017/08/06/python%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/\">阅读笔记</a></p>\n</li>\n<li><p>《你不知道的JavaScript中卷》<a href=\"https://suadminwen.github.io/2017/08/09/%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84javascript%E4%B8%AD%E5%8D%B7%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/\">阅读笔记</a></p>\n</li>\n<li><p><del>《JavaScript DOM 编程艺术(第2版)》</del> <a href=\"https://suadminwen.github.io/2017/07/24/JavaScript%20DOM%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/\">阅读笔记</a></p>\n</li>\n<li><p>《python WEB开发实战》</p>\n</li>\n<li><p><del>《精通python设计模式》</del></p>\n</li>\n<li><p><del>《python基础教程(第二版)》</del></p>\n</li>\n<li><p>……</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>认真，坚持，静心</p>\n</blockquote>\n<hr>\n<p>209-01-31</p>\n<p>《程序员代码面试指南》</p>\n<ul>\n<li><del>《大话设计模式》</del></li>\n</ul>\n<hr>\n<p>2018-12-31</p>\n<ul>\n<li><del>《流畅的python》</del>  注：第16、17 、18章暂时跳过，关于协程的部分。</li>\n<li><del>《SQL必知必会》</del></li>\n<li><del>《Python3学习笔记(上)》</del></li>\n</ul>\n<hr>\n<ul>\n<li><del>《用户故事地图》</del></li>\n<li>《利用Python进行数据分析》</li>\n</ul>\n<hr>\n<p>2017-11-19</p>\n<ul>\n<li>《图解HTTP》</li>\n<li><del>《WEB性能权威指南》</del></li>\n<li>《Redis入门指南》</li>\n<li><del>《修改软件的艺术》</del> <a href=\"https://suadminwen.github.io/2017/11/24/%E4%BF%AE%E6%94%B9%E8%BD%AF%E4%BB%B6%E7%9A%84%E8%89%BA%E6%9C%AF%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E5%8F%8A%E6%80%9D%E8%80%83/\">阅读笔记</a></li>\n</ul>","more":"<hr>\n<p>2017-10-某</p>\n<ul>\n<li><p>《Node.js开发实战》</p>\n</li>\n<li><p><del>《JavaScript核心概念及实践》</del></p>\n</li>\n<li><p><del>《你不知道的JavaScript上卷》</del></p>\n</li>\n<li><p><del>《python核心编程》</del> <a href=\"https://suadminwen.github.io/2017/08/06/python%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/\">阅读笔记</a></p>\n</li>\n<li><p>《你不知道的JavaScript中卷》<a href=\"https://suadminwen.github.io/2017/08/09/%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84javascript%E4%B8%AD%E5%8D%B7%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/\">阅读笔记</a></p>\n</li>\n<li><p><del>《JavaScript DOM 编程艺术(第2版)》</del> <a href=\"https://suadminwen.github.io/2017/07/24/JavaScript%20DOM%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/\">阅读笔记</a></p>\n</li>\n<li><p>《python WEB开发实战》</p>\n</li>\n<li><p><del>《精通python设计模式》</del></p>\n</li>\n<li><p><del>《python基础教程(第二版)》</del></p>\n</li>\n<li><p>……</p>\n</li>\n</ul>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cluqa1hi10001rlog4737big4","tag_id":"cluqa1hi50003rlog0b516m4o","_id":"cluqa1hib000crlog2qbja3xz"},{"post_id":"cluqa1hi10001rlog4737big4","tag_id":"cluqa1hi80007rlog7uuuegas","_id":"cluqa1hic000erlogcou4aimd"},{"post_id":"cluqa1hi40002rloggmt191w7","tag_id":"cluqa1hi50003rlog0b516m4o","_id":"cluqa1hif000krlogabzq8c18"},{"post_id":"cluqa1hi40002rloggmt191w7","tag_id":"cluqa1hi80007rlog7uuuegas","_id":"cluqa1hif000mrlog1lupdz82"},{"post_id":"cluqa1hi60004rlog3z6c51lg","tag_id":"cluqa1hi50003rlog0b516m4o","_id":"cluqa1hih000srlog7dn2041a"},{"post_id":"cluqa1hi60004rlog3z6c51lg","tag_id":"cluqa1hi80007rlog7uuuegas","_id":"cluqa1hii000urlogfexq4idv"},{"post_id":"cluqa1hi70005rlog7fq7f17o","tag_id":"cluqa1hi50003rlog0b516m4o","_id":"cluqa1hij000xrlogg02oaw06"},{"post_id":"cluqa1hi70005rlog7fq7f17o","tag_id":"cluqa1hi80007rlog7uuuegas","_id":"cluqa1hij000zrlog8pzxgm8q"},{"post_id":"cluqa1hi80006rlog1dv29692","tag_id":"cluqa1hi50003rlog0b516m4o","_id":"cluqa1hik0012rlog0pn1gxvd"},{"post_id":"cluqa1hi80006rlog1dv29692","tag_id":"cluqa1hi80007rlog7uuuegas","_id":"cluqa1hil0014rlog9eo9guz5"},{"post_id":"cluqa1hi90008rlog0dnief2v","tag_id":"cluqa1hik0010rlog13fo6e71","_id":"cluqa1hin001arlogg86jfzcb"},{"post_id":"cluqa1hi90008rlog0dnief2v","tag_id":"cluqa1hil0015rlog19dfenq7","_id":"cluqa1hin001crlog5q92d596"},{"post_id":"cluqa1hin001drlog178xa85l","tag_id":"cluqa1hik0010rlog13fo6e71","_id":"cluqa1hio001grlog5f1j5ea9"},{"post_id":"cluqa1hi90009rloghwjth7z9","tag_id":"cluqa1him0018rlogakbxd2hs","_id":"cluqa1hip001krlogcnsk9r2a"},{"post_id":"cluqa1hi90009rloghwjth7z9","tag_id":"cluqa1hin001erlogclgwggj0","_id":"cluqa1hiq001mrlog91hwgmn7"},{"post_id":"cluqa1hio001hrlog7yx24ivc","tag_id":"cluqa1hik0010rlog13fo6e71","_id":"cluqa1hiq001prlogaqomhjik"},{"post_id":"cluqa1hip001jrlog7y883tut","tag_id":"cluqa1hik0010rlog13fo6e71","_id":"cluqa1hir001rrlog75hn5mb7"},{"post_id":"cluqa1hir001qrloggq4778qi","tag_id":"cluqa1hik0010rlog13fo6e71","_id":"cluqa1hir001urlog926jb0q9"},{"post_id":"cluqa1hib000brloggpgday1r","tag_id":"cluqa1hik0010rlog13fo6e71","_id":"cluqa1hit001yrlog24x51xva"},{"post_id":"cluqa1hib000brloggpgday1r","tag_id":"cluqa1hiq001nrlog8qi54opz","_id":"cluqa1hit0020rlog5looecyr"},{"post_id":"cluqa1hib000brloggpgday1r","tag_id":"cluqa1hir001srlog8nq594jx","_id":"cluqa1hiu0023rlogdrk28u23"},{"post_id":"cluqa1hir001vrlog3t83fbc5","tag_id":"cluqa1him0018rlogakbxd2hs","_id":"cluqa1hiv0025rlog6yp5efek"},{"post_id":"cluqa1hit0021rlog4ftg2pkx","tag_id":"cluqa1him0018rlogakbxd2hs","_id":"cluqa1hiw0028rlog5dgrgtjf"},{"post_id":"cluqa1hib000drloga9jv8wrq","tag_id":"cluqa1his001wrlogayfr1yhd","_id":"cluqa1hiw002arlog5e6ib10v"},{"post_id":"cluqa1hib000drloga9jv8wrq","tag_id":"cluqa1hiu0022rlog3oiuf7an","_id":"cluqa1hix002drlog92tq57co"},{"post_id":"cluqa1hic000grlogbsgyhc5i","tag_id":"cluqa1hiw0027rlog6n87178l","_id":"cluqa1hiy002irlogbjin9ydv"},{"post_id":"cluqa1hic000grlogbsgyhc5i","tag_id":"cluqa1hix002crlog4wky5rud","_id":"cluqa1hiz002krlog0rik8656"},{"post_id":"cluqa1hid000hrlog7ztedzm9","tag_id":"cluqa1hi80007rlog7uuuegas","_id":"cluqa1hj0002nrlog8w2u17q3"},{"post_id":"cluqa1hid000hrlog7ztedzm9","tag_id":"cluqa1hiy002grlog3yy89oxu","_id":"cluqa1hj0002prlogdjk6hsy5"},{"post_id":"cluqa1hie000jrlogead872kn","tag_id":"cluqa1hiz002mrlog0hdtgra6","_id":"cluqa1hj1002trlog80bgd0im"},{"post_id":"cluqa1hif000lrlogcx3lfpac","tag_id":"cluqa1his001wrlogayfr1yhd","_id":"cluqa1hj2002xrlog70gzcecm"},{"post_id":"cluqa1hig000orlogen872hav","tag_id":"cluqa1hj1002vrlogh10y93xc","_id":"cluqa1hj40034rloggx63366z"},{"post_id":"cluqa1hig000orlogen872hav","tag_id":"cluqa1hj2002zrlogb65gd6q9","_id":"cluqa1hj50036rlog1df31ob1"},{"post_id":"cluqa1hig000prlog1m6y8yxn","tag_id":"cluqa1hj1002vrlogh10y93xc","_id":"cluqa1hj6003crlog8s54a2x1"},{"post_id":"cluqa1hig000prlog1m6y8yxn","tag_id":"cluqa1his001wrlogayfr1yhd","_id":"cluqa1hj7003erlog3a2xctas"},{"post_id":"cluqa1hih000rrlog3n151epv","tag_id":"cluqa1hiz002mrlog0hdtgra6","_id":"cluqa1hj8003hrlog3yyn0xux"},{"post_id":"cluqa1hj8003irlogbswqfx03","tag_id":"cluqa1him0018rlogakbxd2hs","_id":"cluqa1hj9003lrlogcdscbnrd"},{"post_id":"cluqa1hj8003irlogbswqfx03","tag_id":"cluqa1hiz002mrlog0hdtgra6","_id":"cluqa1hja003nrlogckt813za"},{"post_id":"cluqa1hj9003krlogb56b771s","tag_id":"cluqa1hj1002vrlogh10y93xc","_id":"cluqa1hja003qrlog465md6j1"},{"post_id":"cluqa1hj9003krlogb56b771s","tag_id":"cluqa1hi80007rlog7uuuegas","_id":"cluqa1hjb003srlog0ohr9iux"},{"post_id":"cluqa1hii000trlog949c3uur","tag_id":"cluqa1hj1002vrlogh10y93xc","_id":"cluqa1hjc003vrlog56ul1lj3"},{"post_id":"cluqa1hii000trlog949c3uur","tag_id":"cluqa1hj9003jrlog3730fcpy","_id":"cluqa1hjc003xrlog1e62h4kx"},{"post_id":"cluqa1hja003orlog2uz5gy1r","tag_id":"cluqa1hi80007rlog7uuuegas","_id":"cluqa1hjc0040rlog5xwg8abw"},{"post_id":"cluqa1hja003orlog2uz5gy1r","tag_id":"cluqa1hiy002grlog3yy89oxu","_id":"cluqa1hjd0042rlog1imd9h4m"},{"post_id":"cluqa1hii000wrlogf2sz70up","tag_id":"cluqa1hj1002vrlogh10y93xc","_id":"cluqa1hje0045rlog67mne79n"},{"post_id":"cluqa1hii000wrlogf2sz70up","tag_id":"cluqa1hj9003jrlog3730fcpy","_id":"cluqa1hje0047rlog7jh0f4nc"},{"post_id":"cluqa1hij000yrlog8oyz9svr","tag_id":"cluqa1his001wrlogayfr1yhd","_id":"cluqa1hjf004brlog1ewmc6fj"},{"post_id":"cluqa1hij000yrlog8oyz9svr","tag_id":"cluqa1hje0044rlog61jn3q4m","_id":"cluqa1hjg004drlogg17pctas"},{"post_id":"cluqa1hje0048rlog8bcx5wk1","tag_id":"cluqa1hj1002vrlogh10y93xc","_id":"cluqa1hjg004grlog9tdidl80"},{"post_id":"cluqa1hje0048rlog8bcx5wk1","tag_id":"cluqa1his001wrlogayfr1yhd","_id":"cluqa1hjh004irlog911x2qc8"},{"post_id":"cluqa1hik0011rlogccsjbfua","tag_id":"cluqa1hj1002vrlogh10y93xc","_id":"cluqa1hji004lrlogbgax4nh8"},{"post_id":"cluqa1hik0011rlogccsjbfua","tag_id":"cluqa1hjg004erlogey3hhbds","_id":"cluqa1hji004nrlog7lvd6yl0"},{"post_id":"cluqa1hji004prlog6ppc8uhe","tag_id":"cluqa1hin001erlogclgwggj0","_id":"cluqa1hjj004rrlogejy07f98"},{"post_id":"cluqa1hji004prlog6ppc8uhe","tag_id":"cluqa1him0018rlogakbxd2hs","_id":"cluqa1hjk004urlog75hp5805"},{"post_id":"cluqa1hik0013rlog42jmfylv","tag_id":"cluqa1hik0010rlog13fo6e71","_id":"cluqa1hjk004wrlog6y633v1t"},{"post_id":"cluqa1hik0013rlog42jmfylv","tag_id":"cluqa1hjh004jrlogb5s25ros","_id":"cluqa1hjl004zrlog4vi71nq4"},{"post_id":"cluqa1hik0013rlog42jmfylv","tag_id":"cluqa1hiz002mrlog0hdtgra6","_id":"cluqa1hjl0051rlog9x739uvv"},{"post_id":"cluqa1hil0016rlog3tuz2cii","tag_id":"cluqa1hik0010rlog13fo6e71","_id":"cluqa1hjm0054rlog3r96h9pm"},{"post_id":"cluqa1hil0016rlog3tuz2cii","tag_id":"cluqa1hjj004srlog9omc5qbc","_id":"cluqa1hjm0056rlog4h012kuv"},{"post_id":"cluqa1hjk004xrlog9s6id9ov","tag_id":"cluqa1hi80007rlog7uuuegas","_id":"cluqa1hjm0059rlog6i1rd71t"},{"post_id":"cluqa1hjl0050rlogcea30grs","tag_id":"cluqa1his001wrlogayfr1yhd","_id":"cluqa1hjn005brlogeeku0wsg"},{"post_id":"cluqa1him0017rlog20fhe043","tag_id":"cluqa1hjk004yrlog3iui15jz","_id":"cluqa1hjn005erlog5xmfbdm6"},{"post_id":"cluqa1him0017rlog20fhe043","tag_id":"cluqa1hjl0053rlog1ca7fwmv","_id":"cluqa1hjn005frlog6c8mc6n1"},{"post_id":"cluqa1him0019rloghtzx0k22","tag_id":"cluqa1hjk004yrlog3iui15jz","_id":"cluqa1hjo005hrlog515x5f1j"},{"post_id":"cluqa1hjn005crloga67l15p9","tag_id":"cluqa1hi80007rlog7uuuegas","_id":"cluqa1hjo005irlog71i5akgu"},{"post_id":"cluqa1hin001brlog075oacfz","tag_id":"cluqa1hjk004yrlog3iui15jz","_id":"cluqa1hjo005krlog0ec27z5t"},{"post_id":"cluqa1hin001brlog075oacfz","tag_id":"cluqa1hjj004srlog9omc5qbc","_id":"cluqa1hjo005lrlogelxm0dq7"},{"post_id":"cluqa1hin001brlog075oacfz","tag_id":"cluqa1hi80007rlog7uuuegas","_id":"cluqa1hjo005nrlogail3g3xs"},{"post_id":"cluqa1hio001frlog7m9hgmua","tag_id":"cluqa1hik0010rlog13fo6e71","_id":"cluqa1hjo005orlogb0kjf0ai"},{"post_id":"cluqa1hio001frlog7m9hgmua","tag_id":"cluqa1hjo005jrlog0jzxef6p","_id":"cluqa1hjo005qrloggbns3wdc"},{"post_id":"cluqa1hip001lrlogd2d3692s","tag_id":"cluqa1hik0010rlog13fo6e71","_id":"cluqa1hjo005rrlogdly2a5yv"},{"post_id":"cluqa1hip001lrlogd2d3692s","tag_id":"cluqa1hjo005mrlogc04y77m0","_id":"cluqa1hjp005trlog4xvah71z"},{"post_id":"cluqa1hiq001orloge0dp28m9","tag_id":"cluqa1his001wrlogayfr1yhd","_id":"cluqa1hjp005vrlog5356f1tt"},{"post_id":"cluqa1hiq001orloge0dp28m9","tag_id":"cluqa1hjo005srlog0jbs0u6e","_id":"cluqa1hjp005wrlog4s995nb0"},{"post_id":"cluqa1hir001trlogaupt0w63","tag_id":"cluqa1hjp005urlog6te426se","_id":"cluqa1hjp005yrlog32zsds3b"},{"post_id":"cluqa1his001xrloge3q18ek0","tag_id":"cluqa1hik0010rlog13fo6e71","_id":"cluqa1hjp0060rlogbi2f02dl"},{"post_id":"cluqa1his001xrloge3q18ek0","tag_id":"cluqa1hjp005xrlogh76ratym","_id":"cluqa1hjp0061rlog3p01aqi1"},{"post_id":"cluqa1hit001zrlog77988gyy","tag_id":"cluqa1him0018rlogakbxd2hs","_id":"cluqa1hjp0063rlogbwki9bt9"},{"post_id":"cluqa1hit001zrlog77988gyy","tag_id":"cluqa1hjp005zrlog84bt268f","_id":"cluqa1hjp0064rlogg1d98dxp"},{"post_id":"cluqa1hiu0024rloge7fvftbi","tag_id":"cluqa1hjp0062rlog88xl56ip","_id":"cluqa1hjq0067rlogd5dpdma9"},{"post_id":"cluqa1hiu0024rloge7fvftbi","tag_id":"cluqa1hjq0065rlog3vn3awhn","_id":"cluqa1hjr0068rlogc98q4wj2"},{"post_id":"cluqa1hiv0026rlogcsv3h1e7","tag_id":"cluqa1hjq0066rlogd7vq0rv7","_id":"cluqa1hjr006brlog88jg2ixq"},{"post_id":"cluqa1hiv0026rlogcsv3h1e7","tag_id":"cluqa1hjr0069rlog2a3tdj5p","_id":"cluqa1hjs006crlogaazxgn7d"},{"post_id":"cluqa1hiw0029rlog88ao9hr9","tag_id":"cluqa1hjp0062rlog88xl56ip","_id":"cluqa1hjs006frloggrj68ilz"},{"post_id":"cluqa1hiw0029rlog88ao9hr9","tag_id":"cluqa1hjq0066rlogd7vq0rv7","_id":"cluqa1hjs006grlog4epn21pu"},{"post_id":"cluqa1hiw002brloge48wdpd9","tag_id":"cluqa1hjs006erlog174f0qtr","_id":"cluqa1hjs006jrlog11rib927"},{"post_id":"cluqa1hiw002brloge48wdpd9","tag_id":"cluqa1hik0010rlog13fo6e71","_id":"cluqa1hjs006krlogepse8y1d"},{"post_id":"cluqa1hiw002brloge48wdpd9","tag_id":"cluqa1hjs006hrlogdzne35rl","_id":"cluqa1hjt006mrlogad4u9hj5"},{"post_id":"cluqa1hix002erlogfyip0su3","tag_id":"cluqa1hjk004yrlog3iui15jz","_id":"cluqa1hjt006orlog2w734tpe"},{"post_id":"cluqa1hix002erlogfyip0su3","tag_id":"cluqa1hjt006lrlog5hly97ud","_id":"cluqa1hjt006prlog0uwb2yb0"},{"post_id":"cluqa1hiy002frlog7rmb48kl","tag_id":"cluqa1hjk004yrlog3iui15jz","_id":"cluqa1hjt006srlogbjch20qn"},{"post_id":"cluqa1hiy002frlog7rmb48kl","tag_id":"cluqa1hjt006lrlog5hly97ud","_id":"cluqa1hjt006trlogfrj40j06"},{"post_id":"cluqa1hiy002hrlogf1re87y2","tag_id":"cluqa1hjt006rrlogb1ea5wq9","_id":"cluqa1hju006vrlogdhxv1pvb"},{"post_id":"cluqa1hiy002jrlog2awjgj88","tag_id":"cluqa1hjt006urlog1mcidzpm","_id":"cluqa1hju006yrlogd25fddt9"},{"post_id":"cluqa1hiy002jrlog2awjgj88","tag_id":"cluqa1hju006wrlog6rwr3v6c","_id":"cluqa1hju006zrlog00neegjt"},{"post_id":"cluqa1hiz002lrlog6h755feq","tag_id":"cluqa1hj1002vrlogh10y93xc","_id":"cluqa1hju0072rlog0hry6krz"},{"post_id":"cluqa1hiz002lrlog6h755feq","tag_id":"cluqa1hj2002zrlogb65gd6q9","_id":"cluqa1hju0073rlog3p7jeqis"},{"post_id":"cluqa1hj0002orlog5ucxactf","tag_id":"cluqa1his001wrlogayfr1yhd","_id":"cluqa1hjv0075rlog9tgch32z"},{"post_id":"cluqa1hj0002orlog5ucxactf","tag_id":"cluqa1hju0071rlog4avt9ilq","_id":"cluqa1hjv0076rlogcrxbhe7l"},{"post_id":"cluqa1hj0002qrloge98lczgl","tag_id":"cluqa1his001wrlogayfr1yhd","_id":"cluqa1hjv0079rlogb9rhb7ol"},{"post_id":"cluqa1hj0002qrloge98lczgl","tag_id":"cluqa1hju0071rlog4avt9ilq","_id":"cluqa1hjw007arlogfpto7tas"},{"post_id":"cluqa1hj0002qrloge98lczgl","tag_id":"cluqa1hjt006lrlog5hly97ud","_id":"cluqa1hjw007crloggvs1h1io"},{"post_id":"cluqa1hj1002srlogaseqauen","tag_id":"cluqa1his001wrlogayfr1yhd","_id":"cluqa1hjw007drlog0frk4msz"},{"post_id":"cluqa1hj1002srlogaseqauen","tag_id":"cluqa1hju0071rlog4avt9ilq","_id":"cluqa1hjw007frlog6xuo55o6"},{"post_id":"cluqa1hj1002urlogbwyvch7w","tag_id":"cluqa1him0018rlogakbxd2hs","_id":"cluqa1hjw007grlog4io27rhy"},{"post_id":"cluqa1hj1002urlogbwyvch7w","tag_id":"cluqa1hik0010rlog13fo6e71","_id":"cluqa1hjx007irlogevu857m3"},{"post_id":"cluqa1hj1002urlogbwyvch7w","tag_id":"cluqa1hjw007brlog1e2z7gt5","_id":"cluqa1hjx007jrlog7gxp9gis"},{"post_id":"cluqa1hj2002wrlog80e8gew1","tag_id":"cluqa1hj1002vrlogh10y93xc","_id":"cluqa1hjx007lrlog6zc77w61"},{"post_id":"cluqa1hj2002wrlog80e8gew1","tag_id":"cluqa1hj2002zrlogb65gd6q9","_id":"cluqa1hjx007mrlog61272rks"},{"post_id":"cluqa1hj2002wrlog80e8gew1","tag_id":"cluqa1hjk004yrlog3iui15jz","_id":"cluqa1hjx007orlogcitgdbhl"},{"post_id":"cluqa1hj2002yrlogd6iwec9j","tag_id":"cluqa1hjk004yrlog3iui15jz","_id":"cluqa1hjx007prlogfqxnghlf"},{"post_id":"cluqa1hj30030rlogabjre3rp","tag_id":"cluqa1hjk004yrlog3iui15jz","_id":"cluqa1hjx007srlog1xaf1myz"},{"post_id":"cluqa1hj30030rlogabjre3rp","tag_id":"cluqa1hjx007qrlog3yqter04","_id":"cluqa1hjx007trlog9lzn1qjq"},{"post_id":"cluqa1hj30031rlog0b8m8njo","tag_id":"cluqa1hjk004yrlog3iui15jz","_id":"cluqa1hjy007xrlogc068e81m"},{"post_id":"cluqa1hj30031rlog0b8m8njo","tag_id":"cluqa1hjj004srlog9omc5qbc","_id":"cluqa1hjy007yrlogaorr8mfp"},{"post_id":"cluqa1hj30031rlog0b8m8njo","tag_id":"cluqa1hjy007vrlogdq2e2dd0","_id":"cluqa1hjy0080rloggdy5hziz"},{"post_id":"cluqa1hj40033rlogcbi2794t","tag_id":"cluqa1hi80007rlog7uuuegas","_id":"cluqa1hjy0081rlog9jlj93dt"},{"post_id":"cluqa1hj40033rlogcbi2794t","tag_id":"cluqa1hjk004yrlog3iui15jz","_id":"cluqa1hjy0083rlog4j901nd0"},{"post_id":"cluqa1hj40035rlogc27v4npm","tag_id":"cluqa1hjk004yrlog3iui15jz","_id":"cluqa1hjz0085rloghg3uaq2z"},{"post_id":"cluqa1hj40035rlogc27v4npm","tag_id":"cluqa1hjy0082rlog2c1p64sp","_id":"cluqa1hjz0086rlog423sbka0"},{"post_id":"cluqa1hj50038rlog1hle4now","tag_id":"cluqa1hjk004yrlog3iui15jz","_id":"cluqa1hjz0089rlogh7uu32np"},{"post_id":"cluqa1hj50038rlog1hle4now","tag_id":"cluqa1hjy0082rlog2c1p64sp","_id":"cluqa1hjz008arlogdvi511pt"},{"post_id":"cluqa1hj50039rlog4bv318pc","tag_id":"cluqa1hjk004yrlog3iui15jz","_id":"cluqa1hjz008drlog4skg3flb"},{"post_id":"cluqa1hj50039rlog4bv318pc","tag_id":"cluqa1hjy0082rlog2c1p64sp","_id":"cluqa1hjz008erlogdhny9og1"},{"post_id":"cluqa1hj6003brlog2dwr0h64","tag_id":"cluqa1hjk004yrlog3iui15jz","_id":"cluqa1hk0008hrlog8ie8hk01"},{"post_id":"cluqa1hj6003brlog2dwr0h64","tag_id":"cluqa1hjy0082rlog2c1p64sp","_id":"cluqa1hk0008irlog9stz7jy2"},{"post_id":"cluqa1hj7003drlog6c9q4iiu","tag_id":"cluqa1hjk004yrlog3iui15jz","_id":"cluqa1hk0008krlog2cc4f69e"},{"post_id":"cluqa1hj7003grloghnfhdwhq","tag_id":"cluqa1his001wrlogayfr1yhd","_id":"cluqa1hk0008mrlog03mhb0l2"},{"post_id":"cluqa1hj7003grloghnfhdwhq","tag_id":"cluqa1hk0008jrlog48j159qg","_id":"cluqa1hk0008nrlog72hm4hk0"},{"post_id":"cluqa1hj9003mrloga2v31rdl","tag_id":"cluqa1hk0008lrlog1sve9ebz","_id":"cluqa1hk0008prlog0wd174so"},{"post_id":"cluqa1hja003rrlog2ddkgchc","tag_id":"cluqa1hk0008orlogcel70aa2","_id":"cluqa1hk1008srlog7lt76wfm"},{"post_id":"cluqa1hja003rrlog2ddkgchc","tag_id":"cluqa1hk0008qrlog5x7s1io1","_id":"cluqa1hk1008trlog86ap8be3"},{"post_id":"cluqa1hjb003trlog7qp9hwe2","tag_id":"cluqa1hi80007rlog7uuuegas","_id":"cluqa1hk1008wrlog4xo6agff"},{"post_id":"cluqa1hjb003trlog7qp9hwe2","tag_id":"cluqa1hk1008rrlog5sef9fr9","_id":"cluqa1hk1008xrloge1lsbfgy"},{"post_id":"cluqa1hjb003trlog7qp9hwe2","tag_id":"cluqa1hjx007qrlog3yqter04","_id":"cluqa1hk2008zrlog6vcv5rqy"},{"post_id":"cluqa1hjc003wrlog0kew5os5","tag_id":"cluqa1hk1008vrlog1pn644ei","_id":"cluqa1hk20090rlogdvmc8ku4"},{"post_id":"cluqa1hjc003yrloggwk1do3p","tag_id":"cluqa1hk2008yrlog8psb0k4e","_id":"cluqa1hk20092rlog0s19hl0m"},{"post_id":"cluqa1hjd0041rlog48yvfjuh","tag_id":"cluqa1hi80007rlog7uuuegas","_id":"cluqa1hk20095rlog05xogbri"},{"post_id":"cluqa1hjd0041rlog48yvfjuh","tag_id":"cluqa1hk20091rlog4y7c0tr8","_id":"cluqa1hk20096rlogfno7baws"},{"post_id":"cluqa1hjd0041rlog48yvfjuh","tag_id":"cluqa1hjk004yrlog3iui15jz","_id":"cluqa1hk20098rlogg5bkdrwd"},{"post_id":"cluqa1hjd0043rlog7btr0gys","tag_id":"cluqa1hjt006rrlogb1ea5wq9","_id":"cluqa1hk3009arlogbggodpei"},{"post_id":"cluqa1hjd0043rlog7btr0gys","tag_id":"cluqa1hjp005zrlog84bt268f","_id":"cluqa1hk3009brlog3n2z7y20"},{"post_id":"cluqa1hje0046rlog9i1m0z27","tag_id":"cluqa1hk20099rlog2g0z57vb","_id":"cluqa1hk3009drlogefxzabme"},{"post_id":"cluqa1hjf004arlog2x5e91hy","tag_id":"cluqa1hk3009crlog7g3nhv16","_id":"cluqa1hk3009hrlog7nbhaznb"},{"post_id":"cluqa1hjf004arlog2x5e91hy","tag_id":"cluqa1hjk004yrlog3iui15jz","_id":"cluqa1hk3009irlogfiileo16"},{"post_id":"cluqa1hjf004arlog2x5e91hy","tag_id":"cluqa1hk3009frlog0kwcd225","_id":"cluqa1hk4009krlogernn351p"},{"post_id":"cluqa1hjg004crlog5do05wgd","tag_id":"cluqa1hk3009crlog7g3nhv16","_id":"cluqa1hk4009nrlog7ejk8wxn"},{"post_id":"cluqa1hjg004crlog5do05wgd","tag_id":"cluqa1hjk004yrlog3iui15jz","_id":"cluqa1hk4009orlogfx9xfmmj"},{"post_id":"cluqa1hjg004crlog5do05wgd","tag_id":"cluqa1hk3009frlog0kwcd225","_id":"cluqa1hk4009qrlog1oebe3ru"},{"post_id":"cluqa1hjg004frlog5jty97gw","tag_id":"cluqa1hk3009crlog7g3nhv16","_id":"cluqa1hk4009trlogfs93dueh"},{"post_id":"cluqa1hjg004frlog5jty97gw","tag_id":"cluqa1hjk004yrlog3iui15jz","_id":"cluqa1hk4009urlog77z1d8ru"},{"post_id":"cluqa1hjg004frlog5jty97gw","tag_id":"cluqa1hk3009frlog0kwcd225","_id":"cluqa1hk5009wrlog8jv9395g"},{"post_id":"cluqa1hjh004hrlog9l5j6ena","tag_id":"cluqa1hk20099rlog2g0z57vb","_id":"cluqa1hk5009xrlogaw4g2hkg"},{"post_id":"cluqa1hjh004krlog1v45atwq","tag_id":"cluqa1hjk004yrlog3iui15jz","_id":"cluqa1hk5009zrloggbal5vfi"},{"post_id":"cluqa1hji004mrlog3g7j7chz","tag_id":"cluqa1hjt006rrlogb1ea5wq9","_id":"cluqa1hk500a1rlog9a4x945m"},{"post_id":"cluqa1hji004qrlogc603cbgs","tag_id":"cluqa1hj1002vrlogh10y93xc","_id":"cluqa1hk500a3rlogcditg18y"},{"post_id":"cluqa1hji004qrlogc603cbgs","tag_id":"cluqa1hjg004erlogey3hhbds","_id":"cluqa1hk500a4rlogfx3dai5w"},{"post_id":"cluqa1hji004qrlogc603cbgs","tag_id":"cluqa1hk500a0rlog59l2awg8","_id":"cluqa1hk500a6rlog53dsh361"},{"post_id":"cluqa1hjj004trlog0oln4ukx","tag_id":"cluqa1hjk004yrlog3iui15jz","_id":"cluqa1hk600a8rloghtg107zh"},{"post_id":"cluqa1hjj004trlog0oln4ukx","tag_id":"cluqa1hk3009crlog7g3nhv16","_id":"cluqa1hk600a9rlogg69pchdo"},{"post_id":"cluqa1hjk004vrlogegxh1ek5","tag_id":"cluqa1hk0008lrlog1sve9ebz","_id":"cluqa1hk600abrlogbs8t4fvi"},{"post_id":"cluqa1hjl0052rlogb68c7bdn","tag_id":"cluqa1hk0008lrlog1sve9ebz","_id":"cluqa1hka00adrlog27924d5e"},{"post_id":"cluqa1hjm0055rloggg06hdu8","tag_id":"cluqa1hk600acrlog7tiya5vl","_id":"cluqa1hka00agrlogc9lubl12"},{"post_id":"cluqa1hjm0055rloggg06hdu8","tag_id":"cluqa1hjp005zrlog84bt268f","_id":"cluqa1hkb00ahrlog1kkn3a2e"},{"post_id":"cluqa1hjm0057rloghp5qe56t","tag_id":"cluqa1hk20091rlog4y7c0tr8","_id":"cluqa1hkb00ajrlogfko977o8"},{"post_id":"cluqa1hjm005arlog3w9hbcbc","tag_id":"cluqa1hk20099rlog2g0z57vb","_id":"cluqa1hkb00akrlog2nue09l3"}],"Tag":[{"name":"NodeJs","_id":"cluqa1hi50003rlog0b516m4o"},{"name":"阅读笔记","_id":"cluqa1hi80007rlog7uuuegas"},{"name":"Python","_id":"cluqa1hik0010rlog13fo6e71"},{"name":"Celery","_id":"cluqa1hil0015rlog19dfenq7"},{"name":"Ubuntu","_id":"cluqa1him0018rlogakbxd2hs"},{"name":"敏捷开发","_id":"cluqa1hin001erlogclgwggj0"},{"name":"devpi","_id":"cluqa1hiq001nrlog8qi54opz"},{"name":"pip","_id":"cluqa1hir001srlog8nq594jx"},{"name":"Linux","_id":"cluqa1his001wrlogayfr1yhd"},{"name":"Docker","_id":"cluqa1hiu0022rlog3oiuf7an"},{"name":"FFmpeg","_id":"cluqa1hiw0027rlog6n87178l"},{"name":"视频","_id":"cluqa1hix002crlog4wky5rud"},{"name":"JavaScript","_id":"cluqa1hiy002grlog3yy89oxu"},{"name":"MACOS","_id":"cluqa1hiz002mrlog0hdtgra6"},{"name":"数据库","_id":"cluqa1hj1002vrlogh10y93xc"},{"name":"mongodb","_id":"cluqa1hj2002zrlogb65gd6q9"},{"name":"mysql","_id":"cluqa1hj9003jrlog3730fcpy"},{"name":"Nginx","_id":"cluqa1hje0044rlog61jn3q4m"},{"name":"PG","_id":"cluqa1hjg004erlogey3hhbds"},{"name":"VIM","_id":"cluqa1hjh004jrlogb5s25ros"},{"name":"数据结构","_id":"cluqa1hjj004srlog9omc5qbc"},{"name":"python","_id":"cluqa1hjk004yrlog3iui15jz"},{"name":"java","_id":"cluqa1hjl0053rlog1ca7fwmv"},{"name":"调试","_id":"cluqa1hjo005jrlog0jzxef6p"},{"name":"中间件","_id":"cluqa1hjo005mrlogc04y77m0"},{"name":"Tmux","_id":"cluqa1hjo005srlog0jbs0u6e"},{"name":"udp","_id":"cluqa1hjp005urlog6te426se"},{"name":"matplotlib","_id":"cluqa1hjp005xrlogh76ratym"},{"name":"服务器","_id":"cluqa1hjp005zrlog84bt268f"},{"name":"winrm","_id":"cluqa1hjp0062rlog88xl56ip"},{"name":"https","_id":"cluqa1hjq0065rlog3vn3awhn"},{"name":"Windows","_id":"cluqa1hjq0066rlogd7vq0rv7"},{"name":"PowerShell","_id":"cluqa1hjr0069rlog2a3tdj5p"},{"name":"物联网","_id":"cluqa1hjs006erlog174f0qtr"},{"name":"ZMQ","_id":"cluqa1hjs006hrlogdzne35rl"},{"name":"django","_id":"cluqa1hjt006lrlog5hly97ud"},{"name":"git","_id":"cluqa1hjt006rrlogb1ea5wq9"},{"name":"hexo","_id":"cluqa1hjt006urlog1mcidzpm"},{"name":"travis","_id":"cluqa1hju006wrlog6rwr3v6c"},{"name":"nginx","_id":"cluqa1hju0071rlog4avt9ilq"},{"name":"pyenv","_id":"cluqa1hjw007brlog1e2z7gt5"},{"name":"TDD","_id":"cluqa1hjx007qrlog3yqter04"},{"name":"排序算法","_id":"cluqa1hjy007vrlogdq2e2dd0"},{"name":"网络爬虫","_id":"cluqa1hjy0082rlog2c1p64sp"},{"name":"sublime","_id":"cluqa1hk0008jrlog48j159qg"},{"name":"工作笔记","_id":"cluqa1hk0008lrlog1sve9ebz"},{"name":"github","_id":"cluqa1hk0008orlogcel70aa2"},{"name":"blog","_id":"cluqa1hk0008qrlog5x7s1io1"},{"name":"开发技巧","_id":"cluqa1hk1008rrlog5sef9fr9"},{"name":"心情","_id":"cluqa1hk1008vrlog1pn644ei"},{"name":"随笔","_id":"cluqa1hk2008yrlog8psb0k4e"},{"name":"设计模式","_id":"cluqa1hk20091rlog4y7c0tr8"},{"name":"面经","_id":"cluqa1hk20099rlog2g0z57vb"},{"name":"tornado","_id":"cluqa1hk3009crlog7g3nhv16"},{"name":"技术","_id":"cluqa1hk3009frlog0kwcd225"},{"name":"debian","_id":"cluqa1hk500a0rlog59l2awg8"},{"name":"VPN","_id":"cluqa1hk600acrlog7tiya5vl"}]}}